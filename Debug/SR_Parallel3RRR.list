
SR_Parallel3RRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e0  080064e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e8  080064e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080064f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cbbc  20000070  08006560  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cc2c  08006560  0002cc2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001019f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002062  00000000  00000000  0003023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000322a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00032fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001759b  00000000  00000000  00033c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e83b  00000000  00000000  0004b1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9b2  00000000  00000000  00059a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e93c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000405c  00000000  00000000  000e941c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063d4 	.word	0x080063d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080063d4 	.word	0x080063d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <_write>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

int _write( int file,unsigned char *ptr, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	4804      	ldr	r0, [pc, #16]	; (8000d7c <_write+0x28>)
 8000d6c:	f003 f9fd 	bl	800416a <HAL_UART_Transmit>
	return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000cbd4 	.word	0x2000cbd4

08000d80 <reset_motor>:




void reset_motor(motorInfo *motor, long total_steps, unsigned accel, unsigned decel, unsigned max )
{
 8000d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	603b      	str	r3, [r7, #0]

	HAL_TIM_OC_Stop(&htim2,TIM_CHANNEL_1);
 8000d90:	2100      	movs	r1, #0
 8000d92:	485f      	ldr	r0, [pc, #380]	; (8000f10 <reset_motor+0x190>)
 8000d94:	f002 fcf8 	bl	8003788 <HAL_TIM_OC_Stop>

	motor->max_speed = (max >= MAX_VEL) ? MAX_VEL : max;
 8000d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9a:	f640 22bc 	movw	r2, #2748	; 0xabc
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d80a      	bhi.n	8000db8 <reset_motor+0x38>
 8000da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000da4:	f7ff fbae 	bl	8000504 <__aeabi_ui2d>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f7ff fe34 	bl	8000a1c <__aeabi_d2uiz>
 8000db4:	4603      	mov	r3, r0
 8000db6:	e001      	b.n	8000dbc <reset_motor+0x3c>
 8000db8:	f640 23bc 	movw	r3, #2748	; 0xabc
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	6013      	str	r3, [r2, #0]
	motor->dir = total_steps>0 ? 1 : -1;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	dd01      	ble.n	8000dca <reset_motor+0x4a>
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	e000      	b.n	8000dcc <reset_motor+0x4c>
 8000dca:	22ff      	movs	r2, #255	; 0xff
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	721a      	strb	r2, [r3, #8]
	motor->total_steps=total_steps>0?total_steps:-total_steps;
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bfb8      	it	lt
 8000dd6:	425b      	neglt	r3, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
	motor->starting_frequency=0;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
	motor->auto_reload=52500;// length of current pulse in timer ticks
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f64c 5214 	movw	r2, #52500	; 0xcd14
 8000dea:	60da      	str	r2, [r3, #12]

		motor->step_position=0;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2200      	movs	r2, #0
 8000df0:	631a      	str	r2, [r3, #48]	; 0x30

	motor->acc_lim = 1+(motor->max_speed-MIN_VEL)/accel;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb84 	bl	8000504 <__aeabi_ui2d>
 8000dfc:	a340      	add	r3, pc, #256	; (adr r3, 8000f00 <reset_motor+0x180>)
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	f7ff fa41 	bl	8000288 <__aeabi_dsub>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4614      	mov	r4, r2
 8000e0c:	461d      	mov	r5, r3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fb78 	bl	8000504 <__aeabi_ui2d>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4620      	mov	r0, r4
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	f7ff fd16 	bl	800084c <__aeabi_ddiv>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <reset_motor+0x194>)
 8000e2e:	f7ff fa2d 	bl	800028c <__adddf3>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fdef 	bl	8000a1c <__aeabi_d2uiz>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	611a      	str	r2, [r3, #16]
	motor->peak_velocity=(accel+motor->total_steps*decel)/(accel+decel);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	fb02 f203 	mul.w	r2, r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	441a      	add	r2, r3
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	440b      	add	r3, r1
 8000e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	615a      	str	r2, [r3, #20]
	motor->decel_start=motor->total_steps-(motor->max_speed-MIN_VEL)/decel;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fb4d 	bl	8000504 <__aeabi_ui2d>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	460d      	mov	r5, r1
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb46 	bl	8000504 <__aeabi_ui2d>
 8000e78:	a321      	add	r3, pc, #132	; (adr r3, 8000f00 <reset_motor+0x180>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fa03 	bl	8000288 <__aeabi_dsub>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4690      	mov	r8, r2
 8000e88:	4699      	mov	r9, r3
 8000e8a:	6838      	ldr	r0, [r7, #0]
 8000e8c:	f7ff fb3a 	bl	8000504 <__aeabi_ui2d>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4640      	mov	r0, r8
 8000e96:	4649      	mov	r1, r9
 8000e98:	f7ff fcd8 	bl	800084c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	4629      	mov	r1, r5
 8000ea4:	f7ff f9f0 	bl	8000288 <__aeabi_dsub>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fdb4 	bl	8000a1c <__aeabi_d2uiz>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	619a      	str	r2, [r3, #24]


	motor->acceleration=accel;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	61da      	str	r2, [r3, #28]

	motor->deceleration=decel;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	621a      	str	r2, [r3, #32]

	motor->max_speed_ARR = CLK_FRQ*ALPHA*100/motor->max_speed;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb1a 	bl	8000504 <__aeabi_ui2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	a10c      	add	r1, pc, #48	; (adr r1, 8000f08 <reset_motor+0x188>)
 8000ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eda:	f7ff fcb7 	bl	800084c <__aeabi_ddiv>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fd99 	bl	8000a1c <__aeabi_d2uiz>
 8000eea:	4602      	mov	r2, r0
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	605a      	str	r2, [r3, #4]

	motor->steps=0;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28




}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f00:	43958105 	.word	0x43958105
 8000f04:	4063a28b 	.word	0x4063a28b
 8000f08:	6fffffff 	.word	0x6fffffff
 8000f0c:	415f7564 	.word	0x415f7564
 8000f10:	2000cb8c 	.word	0x2000cb8c
 8000f14:	3ff00000 	.word	0x3ff00000

08000f18 <calculate_auto_reload>:




unsigned long calculate_auto_reload(motorInfo *motor)
{
 8000f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	if(motor->steps < motor->total_steps)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d20d      	bcs.n	8000f4a <calculate_auto_reload+0x32>
	{
		motor->step_position+=motor->dir;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	7a12      	ldrb	r2, [r2, #8]
 8000f36:	441a      	add	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	631a      	str	r2, [r3, #48]	; 0x30
		//flag_htim2_done=1;

		return 52500;
	}

	if((motor->steps <= motor->acc_lim) && (motor->steps <= motor->peak_velocity))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d84f      	bhi.n	8000fe8 <calculate_auto_reload+0xd0>
 8000f48:	e002      	b.n	8000f50 <calculate_auto_reload+0x38>
		return 52500;
 8000f4a:	f64c 5314 	movw	r3, #52500	; 0xcd14
 8000f4e:	e0d2      	b.n	80010f6 <calculate_auto_reload+0x1de>
	if((motor->steps <= motor->acc_lim) && (motor->steps <= motor->peak_velocity))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d845      	bhi.n	8000fe8 <calculate_auto_reload+0xd0>
	{
		//motor->auto_reload = CLK_FRQ/(MIN_FREQ +((motor->steps)*motor->acceleration)/(ALPHA*100));
		motor->auto_reload -= motor->auto_reload/(motor->steps+(100*ALPHA/motor->acceleration)*MIN_FREQ);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff facf 	bl	8000504 <__aeabi_ui2d>
 8000f66:	4604      	mov	r4, r0
 8000f68:	460d      	mov	r5, r1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fac8 	bl	8000504 <__aeabi_ui2d>
 8000f74:	4680      	mov	r8, r0
 8000f76:	4689      	mov	r9, r1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fac1 	bl	8000504 <__aeabi_ui2d>
 8000f82:	4682      	mov	sl, r0
 8000f84:	468b      	mov	fp, r1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff faba 	bl	8000504 <__aeabi_ui2d>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	a15f      	add	r1, pc, #380	; (adr r1, 8001114 <calculate_auto_reload+0x1fc>)
 8000f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f9a:	f7ff fc57 	bl	800084c <__aeabi_ddiv>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <calculate_auto_reload+0x1f0>)
 8000fac:	f7ff fb24 	bl	80005f8 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4650      	mov	r0, sl
 8000fb6:	4659      	mov	r1, fp
 8000fb8:	f7ff f968 	bl	800028c <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	f7ff fc42 	bl	800084c <__aeabi_ddiv>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4620      	mov	r0, r4
 8000fce:	4629      	mov	r1, r5
 8000fd0:	f7ff f95a 	bl	8000288 <__aeabi_dsub>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fd1e 	bl	8000a1c <__aeabi_d2uiz>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	e07f      	b.n	80010e8 <calculate_auto_reload+0x1d0>
	}
	else if((motor->steps > motor->acc_lim) && (motor->steps < motor->decel_start))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d90a      	bls.n	800100a <calculate_auto_reload+0xf2>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d204      	bcs.n	800100a <calculate_auto_reload+0xf2>
	{
		motor->auto_reload = motor->max_speed_ARR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	e06e      	b.n	80010e8 <calculate_auto_reload+0x1d0>
	}
	else if(motor->steps >= motor->decel_start)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	429a      	cmp	r2, r3
 8001014:	d364      	bcc.n	80010e0 <calculate_auto_reload+0x1c8>
	{
		if(motor->starting_frequency == 0)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	2b00      	cmp	r3, #0
 800101c:	d109      	bne.n	8001032 <calculate_auto_reload+0x11a>
		{
			motor->starting_frequency = CLK_FRQ/motor->auto_reload*100;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	4a3a      	ldr	r2, [pc, #232]	; (800110c <calculate_auto_reload+0x1f4>)
 8001024:	fbb2 f3f3 	udiv	r3, r2, r3
 8001028:	2264      	movs	r2, #100	; 0x64
 800102a:	fb02 f203 	mul.w	r2, r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
		}
		motor ->auto_reload+= motor->auto_reload/(MIN_FREQ*ALPHA*100/motor->deceleration+motor->total_steps-1-motor->steps);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa64 	bl	8000504 <__aeabi_ui2d>
 800103c:	4604      	mov	r4, r0
 800103e:	460d      	mov	r5, r1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa5d 	bl	8000504 <__aeabi_ui2d>
 800104a:	4680      	mov	r8, r0
 800104c:	4689      	mov	r9, r1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa56 	bl	8000504 <__aeabi_ui2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	a128      	add	r1, pc, #160	; (adr r1, 8001100 <calculate_auto_reload+0x1e8>)
 800105e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001062:	f7ff fbf3 	bl	800084c <__aeabi_ddiv>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4692      	mov	sl, r2
 800106c:	469b      	mov	fp, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa46 	bl	8000504 <__aeabi_ui2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4650      	mov	r0, sl
 800107e:	4659      	mov	r1, fp
 8001080:	f7ff f904 	bl	800028c <__adddf3>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <calculate_auto_reload+0x1f8>)
 8001092:	f7ff f8f9 	bl	8000288 <__aeabi_dsub>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4692      	mov	sl, r2
 800109c:	469b      	mov	fp, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa2e 	bl	8000504 <__aeabi_ui2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4650      	mov	r0, sl
 80010ae:	4659      	mov	r1, fp
 80010b0:	f7ff f8ea 	bl	8000288 <__aeabi_dsub>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4640      	mov	r0, r8
 80010ba:	4649      	mov	r1, r9
 80010bc:	f7ff fbc6 	bl	800084c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff f8e0 	bl	800028c <__adddf3>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fca2 	bl	8000a1c <__aeabi_d2uiz>
 80010d8:	4602      	mov	r2, r0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	e003      	b.n	80010e8 <calculate_auto_reload+0x1d0>
	}else
	{
		motor->auto_reload = 52500;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f64c 5214 	movw	r2, #52500	; 0xcd14
 80010e6:	60da      	str	r2, [r3, #12]
	}

	motor->steps++;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
	return (motor->auto_reload);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]


}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001100:	43958106 	.word	0x43958106
 8001104:	4063a28b 	.word	0x4063a28b
 8001108:	40990000 	.word	0x40990000
 800110c:	0501bd00 	.word	0x0501bd00
 8001110:	3ff00000 	.word	0x3ff00000
 8001114:	f01b866e 	.word	0xf01b866e
 8001118:	3fb921f9 	.word	0x3fb921f9

0800111c <zero_tmp>:


void zero_tmp()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0

	data[0]=52500;
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <zero_tmp+0xe4>)
 8001124:	f64c 5214 	movw	r2, #52500	; 0xcd14
 8001128:	601a      	str	r2, [r3, #0]
	for(int j = 1;j<6400;j++)
 800112a:	2301      	movs	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e00a      	b.n	8001146 <zero_tmp+0x2a>
		data[j] = (unsigned long)calculate_auto_reload(&test);
 8001130:	4834      	ldr	r0, [pc, #208]	; (8001204 <zero_tmp+0xe8>)
 8001132:	f7ff fef1 	bl	8000f18 <calculate_auto_reload>
 8001136:	4602      	mov	r2, r0
 8001138:	4931      	ldr	r1, [pc, #196]	; (8001200 <zero_tmp+0xe4>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int j = 1;j<6400;j++)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800114c:	dbf0      	blt.n	8001130 <zero_tmp+0x14>

	for(int j = 0;j<640;j++)
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	e01c      	b.n	800118e <zero_tmp+0x72>
		{
		printf("%d: ",j);
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	482c      	ldr	r0, [pc, #176]	; (8001208 <zero_tmp+0xec>)
 8001158:	f004 f970 	bl	800543c <iprintf>
			for(int k =0;k<10;k++)
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e00c      	b.n	800117c <zero_tmp+0x60>
				printf("%lu ",data[j+k]);
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	4a25      	ldr	r2, [pc, #148]	; (8001200 <zero_tmp+0xe4>)
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	4619      	mov	r1, r3
 8001170:	4826      	ldr	r0, [pc, #152]	; (800120c <zero_tmp+0xf0>)
 8001172:	f004 f963 	bl	800543c <iprintf>
			for(int k =0;k<10;k++)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b09      	cmp	r3, #9
 8001180:	ddef      	ble.n	8001162 <zero_tmp+0x46>
			printf("\r\n");
 8001182:	4823      	ldr	r0, [pc, #140]	; (8001210 <zero_tmp+0xf4>)
 8001184:	f004 f9e0 	bl	8005548 <puts>
	for(int j = 0;j<640;j++)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	3301      	adds	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001194:	dbde      	blt.n	8001154 <zero_tmp+0x38>

		}
	kurwa[0]= 52500;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <zero_tmp+0xf8>)
 8001198:	f64c 5214 	movw	r2, #52500	; 0xcd14
 800119c:	601a      	str	r2, [r3, #0]
	for(int j = 1; j<3200;j++)
 800119e:	2301      	movs	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	e00d      	b.n	80011c0 <zero_tmp+0xa4>
		kurwa[j]=kurwa[j-1]-10;
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <zero_tmp+0xf8>)
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	f1a3 020a 	sub.w	r2, r3, #10
 80011b2:	4918      	ldr	r1, [pc, #96]	; (8001214 <zero_tmp+0xf8>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int j = 1; j<3200;j++)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3301      	adds	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80011c6:	dbed      	blt.n	80011a4 <zero_tmp+0x88>
	for(int j = 3200; j<6400;j++)
 80011c8:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	e00d      	b.n	80011ec <zero_tmp+0xd0>
			kurwa[j]=kurwa[j-1]+10;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <zero_tmp+0xf8>)
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	f103 020a 	add.w	r2, r3, #10
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <zero_tmp+0xf8>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int j = 3200; j<6400;j++)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3301      	adds	r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80011f2:	dbed      	blt.n	80011d0 <zero_tmp+0xb4>

}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200066cc 	.word	0x200066cc
 8001204:	20006698 	.word	0x20006698
 8001208:	080063ec 	.word	0x080063ec
 800120c:	080063f4 	.word	0x080063f4
 8001210:	080063fc 	.word	0x080063fc
 8001214:	20000150 	.word	0x20000150

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f000 fdb9 	bl	8001d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f867 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001226:	f000 fa27 	bl	8001678 <MX_GPIO_Init>
  MX_TIM3_Init();
 800122a:	f000 f927 	bl	800147c <MX_TIM3_Init>
  MX_TIM4_Init();
 800122e:	f000 f97f 	bl	8001530 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001232:	f000 f8cb 	bl	80013cc <MX_TIM2_Init>
  MX_DMA_Init();
 8001236:	f000 f9ff 	bl	8001638 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800123a:	f000 f9d3 	bl	80015e4 <MX_USART2_UART_Init>





	reset_motor(&test,6400,20,20,2700);
 800123e:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2314      	movs	r3, #20
 8001246:	2214      	movs	r2, #20
 8001248:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800124c:	481e      	ldr	r0, [pc, #120]	; (80012c8 <main+0xb0>)
 800124e:	f7ff fd97 	bl	8000d80 <reset_motor>

	zero_tmp();
 8001252:	f7ff ff63 	bl	800111c <zero_tmp>


	  TIM2->ARR=52500;
 8001256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125a:	f64c 5214 	movw	r2, #52500	; 0xcd14
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
	  HAL_TIM_Base_Start_IT(&htim2);
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <main+0xb4>)
 8001262:	f002 f92f 	bl	80034c4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim3);
 8001266:	481a      	ldr	r0, [pc, #104]	; (80012d0 <main+0xb8>)
 8001268:	f002 f92c 	bl	80034c4 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim4);
 800126c:	4819      	ldr	r0, [pc, #100]	; (80012d4 <main+0xbc>)
 800126e:	f002 f929 	bl	80034c4 <HAL_TIM_Base_Start_IT>

	  i=0;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <main+0xc0>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
	  HAL_TIM_OC_Start(&htim2,TIM_CHANNEL_1);
 8001278:	2100      	movs	r1, #0
 800127a:	4814      	ldr	r0, [pc, #80]	; (80012cc <main+0xb4>)
 800127c:	f002 f9d4 	bl	8003628 <HAL_TIM_OC_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001280:	2240      	movs	r2, #64	; 0x40
 8001282:	4916      	ldr	r1, [pc, #88]	; (80012dc <main+0xc4>)
 8001284:	4816      	ldr	r0, [pc, #88]	; (80012e0 <main+0xc8>)
 8001286:	f003 f802 	bl	800428e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <main+0xcc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <main+0xcc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0208 	bic.w	r2, r2, #8
 8001298:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_htim2_done)
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <main+0xd0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00f      	beq.n	80012c2 <main+0xaa>
	  {
		  timer_val = __HAL_TIM_GET_COUNTER(&htim3)-timer_val;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <main+0xb8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	607b      	str	r3, [r7, #4]
		  printf("Done, Steps: %d Time: %u (10000 - 1s)\r\n",test.steps,timer_val);
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <main+0xb0>)
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4619      	mov	r1, r3
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <main+0xd4>)
 80012b8:	f004 f8c0 	bl	800543c <iprintf>
		  flag_htim2_done=0;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <main+0xd0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
	  }

	  if(flag_command_recieved)
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <main+0xd8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
	  if(flag_htim2_done)
 80012c6:	e7e8      	b.n	800129a <main+0x82>
 80012c8:	20006698 	.word	0x20006698
 80012cc:	2000cb8c 	.word	0x2000cb8c
 80012d0:	20006650 	.word	0x20006650
 80012d4:	20000108 	.word	0x20000108
 80012d8:	2000008c 	.word	0x2000008c
 80012dc:	2000cacc 	.word	0x2000cacc
 80012e0:	2000cbd4 	.word	0x2000cbd4
 80012e4:	200000a8 	.word	0x200000a8
 80012e8:	20000090 	.word	0x20000090
 80012ec:	08006400 	.word	0x08006400
 80012f0:	20000094 	.word	0x20000094

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	; 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f004 f892 	bl	800542c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <SystemClock_Config+0xd0>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <SystemClock_Config+0xd0>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <SystemClock_Config+0xd0>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <SystemClock_Config+0xd4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <SystemClock_Config+0xd4>)
 8001342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <SystemClock_Config+0xd4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001358:	2301      	movs	r3, #1
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135c:	2310      	movs	r3, #16
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001360:	2302      	movs	r3, #2
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001368:	2310      	movs	r3, #16
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800136c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001370:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001372:	2304      	movs	r3, #4
 8001374:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001376:	2307      	movs	r3, #7
 8001378:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fc2c 	bl	8002bdc <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800138a:	f000 fa4b 	bl	8001824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2302      	movs	r3, #2
 8001394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2102      	movs	r1, #2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fe8e 	bl	80030cc <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013b6:	f000 fa35 	bl	8001824 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	; 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <MX_TIM2_Init+0xac>)
 80013f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <MX_TIM2_Init+0xac>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_TIM2_Init+0xac>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84-1;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_TIM2_Init+0xac>)
 8001404:	2253      	movs	r2, #83	; 0x53
 8001406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_TIM2_Init+0xac>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_TIM2_Init+0xac>)
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <MX_TIM2_Init+0xac>)
 8001416:	f002 f8b7 	bl	8003588 <HAL_TIM_OC_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001420:	f000 fa00 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001424:	2320      	movs	r3, #32
 8001426:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	4619      	mov	r1, r3
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <MX_TIM2_Init+0xac>)
 8001434:	f002 fdca 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800143e:	f000 f9f1 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001442:	2330      	movs	r3, #48	; 0x30
 8001444:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001446:	2301      	movs	r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <MX_TIM2_Init+0xac>)
 800145a:	f002 fb01 	bl	8003a60 <HAL_TIM_OC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001464:	f000 f9de 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <MX_TIM2_Init+0xac>)
 800146a:	f000 fa6b 	bl	8001944 <HAL_TIM_MspPostInit>

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000cb8c 	.word	0x2000cb8c

0800147c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_TIM3_Init+0xac>)
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <MX_TIM3_Init+0xb0>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_TIM3_Init+0xac>)
 80014a6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80014aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_TIM3_Init+0xac>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_TIM3_Init+0xac>)
 80014b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_TIM3_Init+0xac>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_TIM3_Init+0xac>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM3_Init+0xac>)
 80014c8:	f002 f85e 	bl	8003588 <HAL_TIM_OC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80014d2:	f000 f9a7 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_TIM3_Init+0xac>)
 80014e6:	f002 fd71 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014f0:	f000 f998 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM3_Init+0xac>)
 800150c:	f002 faa8 	bl	8003a60 <HAL_TIM_OC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001516:	f000 f985 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM3_Init+0xac>)
 800151c:	f000 fa12 	bl	8001944 <HAL_TIM_MspPostInit>

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20006650 	.word	0x20006650
 800152c:	40000400 	.word	0x40000400

08001530 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <MX_TIM4_Init+0xac>)
 8001554:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <MX_TIM4_Init+0xb0>)
 8001556:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_TIM4_Init+0xac>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_TIM4_Init+0xac>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_TIM4_Init+0xac>)
 8001566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_TIM4_Init+0xac>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM4_Init+0xac>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001578:	4818      	ldr	r0, [pc, #96]	; (80015dc <MX_TIM4_Init+0xac>)
 800157a:	f002 f805 	bl	8003588 <HAL_TIM_OC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001584:	f000 f94e 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4619      	mov	r1, r3
 8001596:	4811      	ldr	r0, [pc, #68]	; (80015dc <MX_TIM4_Init+0xac>)
 8001598:	f002 fd18 	bl	8003fcc <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80015a2:	f000 f93f 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <MX_TIM4_Init+0xac>)
 80015be:	f002 fa4f 	bl	8003a60 <HAL_TIM_OC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80015c8:	f000 f92c 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <MX_TIM4_Init+0xac>)
 80015ce:	f000 f9b9 	bl	8001944 <HAL_TIM_MspPostInit>

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000108 	.word	0x20000108
 80015e0:	40000800 	.word	0x40000800

080015e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_USART2_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 800161c:	f002 fd58 	bl	80040d0 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 f8fd 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000cbd4 	.word	0x2000cbd4
 8001634:	40004400 	.word	0x40004400

08001638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_DMA_Init+0x3c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <MX_DMA_Init+0x3c>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_DMA_Init+0x3c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2010      	movs	r0, #16
 8001660:	f000 fce5 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001664:	2010      	movs	r0, #16
 8001666:	f000 fcfe 	bl	8002066 <HAL_NVIC_EnableIRQ>

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <MX_GPIO_Init+0xfc>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a37      	ldr	r2, [pc, #220]	; (8001774 <MX_GPIO_Init+0xfc>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b35      	ldr	r3, [pc, #212]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a30      	ldr	r2, [pc, #192]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a22      	ldr	r2, [pc, #136]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <MX_GPIO_Init+0xfc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001704:	481c      	ldr	r0, [pc, #112]	; (8001778 <MX_GPIO_Init+0x100>)
 8001706:	f001 fa4f 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEPPER_DIR_1_Pin|MS3_Pin|MS2_Pin|MS1_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001710:	481a      	ldr	r0, [pc, #104]	; (800177c <MX_GPIO_Init+0x104>)
 8001712:	f001 fa49 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEPPER_DIR_3_Pin STEPPER_DIR_2_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin;
 8001716:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4812      	ldr	r0, [pc, #72]	; (8001778 <MX_GPIO_Init+0x100>)
 8001730:	f001 f8b6 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_DIR_1_Pin MS3_Pin MS2_Pin MS1_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_1_Pin|MS3_Pin|MS2_Pin|MS1_Pin;
 8001734:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <MX_GPIO_Init+0x104>)
 800174e:	f001 f8a7 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : POSITIONED_1_Pin POSITIONED_2_Pin POSITIONED_3_Pin */
  GPIO_InitStruct.Pin = POSITIONED_1_Pin|POSITIONED_2_Pin|POSITIONED_3_Pin;
 8001752:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_GPIO_Init+0x108>)
 8001768:	f001 f89a 	bl	80028a0 <HAL_GPIO_Init>

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_UARTEx_RxEventCallback+0x30>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d105      	bne.n	80017a6 <HAL_UARTEx_RxEventCallback+0x22>
	{
		flag_command_recieved=1;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_UARTEx_RxEventCallback+0x34>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
		size_recieved=Size;
 80017a0:	4a06      	ldr	r2, [pc, #24]	; (80017bc <HAL_UARTEx_RxEventCallback+0x38>)
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	8013      	strh	r3, [r2, #0]
	}

}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40004400 	.word	0x40004400
 80017b8:	20000094 	.word	0x20000094
 80017bc:	20000098 	.word	0x20000098

080017c0 <HAL_TIM_PeriodElapsedCallback>:

*/


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2 )
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d11d      	bne.n	800180c <HAL_TIM_PeriodElapsedCallback+0x4c>
		}
		*/



		if(i<6400)
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80017d8:	d20d      	bcs.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x36>
			/*if(i<3200)
			TIM2->ARR -= 10;
			else
			TIM2->ARR += 10;
	*/
			TIM2->ARR = data[i];
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e2:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017e8:	62d3      	str	r3, [r2, #44]	; 0x2c
			i++;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017f2:	6013      	str	r3, [r2, #0]
			HAL_TIM_OC_Stop(&htim2,TIM_CHANNEL_1);
			flag_htim2_done=1;
		}

	}
}
 80017f4:	e00a      	b.n	800180c <HAL_TIM_PeriodElapsedCallback+0x4c>
			TIM2->ARR=0;
 80017f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017fa:	2200      	movs	r2, #0
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_OC_Stop(&htim2,TIM_CHANNEL_1);
 80017fe:	2100      	movs	r1, #0
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001802:	f001 ffc1 	bl	8003788 <HAL_TIM_OC_Stop>
			flag_htim2_done=1;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000cb8c 	.word	0x2000cb8c
 8001818:	2000008c 	.word	0x2000008c
 800181c:	200066cc 	.word	0x200066cc
 8001820:	20000090 	.word	0x20000090

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>
	...

08001830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_MspInit+0x4c>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_MspInit+0x4c>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_MspInit+0x4c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186e:	2007      	movs	r0, #7
 8001870:	f000 fbd2 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001890:	d116      	bne.n	80018c0 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a27      	ldr	r2, [pc, #156]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	201c      	movs	r0, #28
 80018b4:	f000 fbbb 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018b8:	201c      	movs	r0, #28
 80018ba:	f000 fbd4 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018be:	e036      	b.n	800192e <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_TIM_OC_MspInit+0xbc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d116      	bne.n	80018f8 <HAL_TIM_OC_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201d      	movs	r0, #29
 80018ec:	f000 fb9f 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f0:	201d      	movs	r0, #29
 80018f2:	f000 fbb8 	bl	8002066 <HAL_NVIC_EnableIRQ>
}
 80018f6:	e01a      	b.n	800192e <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a10      	ldr	r2, [pc, #64]	; (8001940 <HAL_TIM_OC_MspInit+0xc0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d115      	bne.n	800192e <HAL_TIM_OC_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_TIM_OC_MspInit+0xb8>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	201e      	movs	r0, #30
 8001924:	f000 fb83 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001928:	201e      	movs	r0, #30
 800192a:	f000 fb9c 	bl	8002066 <HAL_NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40000400 	.word	0x40000400
 8001940:	40000800 	.word	0x40000800

08001944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d11e      	bne.n	80019a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a33      	ldr	r2, [pc, #204]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEPPER_PULSE_1_Pin;
 8001982:	2320      	movs	r3, #32
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001992:	2301      	movs	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_1_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4828      	ldr	r0, [pc, #160]	; (8001a40 <HAL_TIM_MspPostInit+0xfc>)
 800199e:	f000 ff7f 	bl	80028a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019a2:	e046      	b.n	8001a32 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_TIM_MspPostInit+0x100>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d11e      	bne.n	80019ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEPPER_PULSE_2_Pin;
 80019ca:	2340      	movs	r3, #64	; 0x40
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019da:	2302      	movs	r3, #2
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_2_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4816      	ldr	r0, [pc, #88]	; (8001a40 <HAL_TIM_MspPostInit+0xfc>)
 80019e6:	f000 ff5b 	bl	80028a0 <HAL_GPIO_Init>
}
 80019ea:	e022      	b.n	8001a32 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_TIM_MspPostInit+0x104>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d11d      	bne.n	8001a32 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_TIM_MspPostInit+0xf8>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_PULSE_3_Pin;
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a22:	2302      	movs	r3, #2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_3_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <HAL_TIM_MspPostInit+0x108>)
 8001a2e:	f000 ff37 	bl	80028a0 <HAL_GPIO_Init>
}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40000800 	.word	0x40000800
 8001a4c:	40020400 	.word	0x40020400

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a34      	ldr	r2, [pc, #208]	; (8001b40 <HAL_UART_MspInit+0xf0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d161      	bne.n	8001b36 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <HAL_UART_MspInit+0xf4>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <HAL_UART_MspInit+0xf4>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_UART_MspInit+0xf4>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HAL_UART_MspInit+0xf4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a2b      	ldr	r2, [pc, #172]	; (8001b44 <HAL_UART_MspInit+0xf4>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_UART_MspInit+0xf4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4820      	ldr	r0, [pc, #128]	; (8001b48 <HAL_UART_MspInit+0xf8>)
 8001ac6:	f000 feeb 	bl	80028a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001acc:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <HAL_UART_MspInit+0x100>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b0a:	4810      	ldr	r0, [pc, #64]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001b0c:	f000 fac6 	bl	800209c <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001b16:	f7ff fe85 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_UART_MspInit+0xfc>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2026      	movs	r0, #38	; 0x26
 8001b2c:	f000 fa7f 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b30:	2026      	movs	r0, #38	; 0x26
 8001b32:	f000 fa98 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40004400 	.word	0x40004400
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	200000a8 	.word	0x200000a8
 8001b50:	40026088 	.word	0x40026088

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f000 f94a 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA1_Stream5_IRQHandler+0x10>)
 8001bae:	f000 fc0d 	bl	80023cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200000a8 	.word	0x200000a8

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f001 fe45 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000cb8c 	.word	0x2000cb8c

08001bd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM3_IRQHandler+0x10>)
 8001bd6:	f001 fe3b 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20006650 	.word	0x20006650

08001be4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM4_IRQHandler+0x10>)
 8001bea:	f001 fe31 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000108 	.word	0x20000108

08001bf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <USART2_IRQHandler+0x10>)
 8001bfe:	f002 fbab 	bl	8004358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000cbd4 	.word	0x2000cbd4

08001c0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00a      	b.n	8001c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c1e:	f3af 8000 	nop.w
 8001c22:	4601      	mov	r1, r0
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60ba      	str	r2, [r7, #8]
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf0      	blt.n	8001c1e <_read+0x12>
	}

return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_isatty>:

int _isatty(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f003 fb7a 	bl	80053d8 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20018000 	.word	0x20018000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	2000009c 	.word	0x2000009c
 8001d18:	2000cc30 	.word	0x2000cc30

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d5c:	4c0b      	ldr	r4, [pc, #44]	; (8001d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d6a:	f7ff ffd7 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f003 fb39 	bl	80053e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7ff fa51 	bl	8001218 <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d84:	080064f0 	.word	0x080064f0
  ldr r2, =_sbss
 8001d88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d8c:	2000cc2c 	.word	0x2000cc2c

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_Init+0x40>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_Init+0x40>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_Init+0x40>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 f92b 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f000 f808 	bl	8001dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff fd32 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x54>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f943 	bl	8002082 <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00e      	b.n	8001e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d80a      	bhi.n	8001e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e14:	f000 f90b 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e18:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <HAL_InitTick+0x5c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	2000cc18 	.word	0x2000cc18

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	2000cc18 	.word	0x2000cc18

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff29 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff3e 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff31 	bl	8001edc <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa2 	bl	8001fd4 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff feda 	bl	8001e60 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e099      	b.n	80021ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d8:	e00f      	b.n	80020fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020da:	f7ff fec1 	bl	8001e60 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d908      	bls.n	80020fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e078      	b.n	80021ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e8      	bne.n	80020da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_DMA_Init+0x158>)
 8002114:	4013      	ands	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2b04      	cmp	r3, #4
 8002152:	d107      	bne.n	8002164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4313      	orrs	r3, r2
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 0307 	bic.w	r3, r3, #7
 800217a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2b04      	cmp	r3, #4
 800218c:	d117      	bne.n	80021be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00e      	beq.n	80021be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fb01 	bl	80027a8 <DMA_CheckFifoParam>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ba:	2301      	movs	r3, #1
 80021bc:	e016      	b.n	80021ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fab8 	bl	800273c <DMA_CalcBaseAndBitshift>
 80021cc:	4603      	mov	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	223f      	movs	r2, #63	; 0x3f
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	f010803f 	.word	0xf010803f

080021f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_DMA_Start_IT+0x26>
 800221a:	2302      	movs	r3, #2
 800221c:	e040      	b.n	80022a0 <HAL_DMA_Start_IT+0xa8>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d12f      	bne.n	8002292 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fa4a 	bl	80026e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	223f      	movs	r2, #63	; 0x3f
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0216 	orr.w	r2, r2, #22
 8002266:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0208 	orr.w	r2, r2, #8
 800227e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e005      	b.n	800229e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800229a:	2302      	movs	r3, #2
 800229c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800229e:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022b6:	f7ff fdd3 	bl	8001e60 <HAL_GetTick>
 80022ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e052      	b.n	8002380 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0216 	bic.w	r2, r2, #22
 80022e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <HAL_DMA_Abort+0x62>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0208 	bic.w	r2, r2, #8
 8002318:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232a:	e013      	b.n	8002354 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800232c:	f7ff fd98 	bl	8001e60 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b05      	cmp	r3, #5
 8002338:	d90c      	bls.n	8002354 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2203      	movs	r2, #3
 8002344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e015      	b.n	8002380 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e4      	bne.n	800232c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	223f      	movs	r2, #63	; 0x3f
 8002368:	409a      	lsls	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d004      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00c      	b.n	80023c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2205      	movs	r2, #5
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023d8:	4b92      	ldr	r3, [pc, #584]	; (8002624 <HAL_DMA_IRQHandler+0x258>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a92      	ldr	r2, [pc, #584]	; (8002628 <HAL_DMA_IRQHandler+0x25c>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2208      	movs	r2, #8
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d01a      	beq.n	8002438 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0204 	bic.w	r2, r2, #4
 800241e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2208      	movs	r2, #8
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	2201      	movs	r2, #1
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d012      	beq.n	800246e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2201      	movs	r2, #1
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f043 0202 	orr.w	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	2204      	movs	r2, #4
 8002474:	409a      	lsls	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	2204      	movs	r2, #4
 8002492:	409a      	lsls	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f043 0204 	orr.w	r2, r3, #4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	2210      	movs	r2, #16
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d043      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d03c      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	2210      	movs	r2, #16
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d018      	beq.n	800250e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d024      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
 80024fa:	e01f      	b.n	800253c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
 800250c:	e016      	b.n	800253c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d107      	bne.n	800252c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0208 	bic.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	2220      	movs	r2, #32
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 808e 	beq.w	800266a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8086 	beq.w	800266a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	2220      	movs	r2, #32
 8002564:	409a      	lsls	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b05      	cmp	r3, #5
 8002574:	d136      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0216 	bic.w	r2, r2, #22
 8002584:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002594:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <HAL_DMA_IRQHandler+0x1da>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0208 	bic.w	r2, r2, #8
 80025b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	223f      	movs	r2, #63	; 0x3f
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d07d      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
        }
        return;
 80025e2:	e078      	b.n	80026d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01c      	beq.n	800262c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d108      	bne.n	8002612 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	2b00      	cmp	r3, #0
 8002606:	d030      	beq.n	800266a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
 8002610:	e02b      	b.n	800266a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d027      	beq.n	800266a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
 8002622:	e022      	b.n	800266a <HAL_DMA_IRQHandler+0x29e>
 8002624:	20000000 	.word	0x20000000
 8002628:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0210 	bic.w	r2, r2, #16
 8002648:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	2b00      	cmp	r3, #0
 8002670:	d032      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d022      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2205      	movs	r2, #5
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d307      	bcc.n	80026b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f2      	bne.n	8002696 <HAL_DMA_IRQHandler+0x2ca>
 80026b0:	e000      	b.n	80026b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026b2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
 80026d4:	e000      	b.n	80026d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026d6:	bf00      	nop
    }
  }
}
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop

080026e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d108      	bne.n	8002720 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800271e:	e007      	b.n	8002730 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3b10      	subs	r3, #16
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <DMA_CalcBaseAndBitshift+0x64>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d909      	bls.n	800277e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	659a      	str	r2, [r3, #88]	; 0x58
 800277c:	e007      	b.n	800278e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	aaaaaaab 	.word	0xaaaaaaab
 80027a4:	08006440 	.word	0x08006440

080027a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d11f      	bne.n	8002802 <DMA_CheckFifoParam+0x5a>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d856      	bhi.n	8002876 <DMA_CheckFifoParam+0xce>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <DMA_CheckFifoParam+0x28>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027f3 	.word	0x080027f3
 80027d8:	080027e1 	.word	0x080027e1
 80027dc:	08002877 	.word	0x08002877
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d046      	beq.n	800287a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e043      	b.n	800287a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027fa:	d140      	bne.n	800287e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002800:	e03d      	b.n	800287e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280a:	d121      	bne.n	8002850 <DMA_CheckFifoParam+0xa8>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d837      	bhi.n	8002882 <DMA_CheckFifoParam+0xda>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <DMA_CheckFifoParam+0x70>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002829 	.word	0x08002829
 800281c:	0800282f 	.word	0x0800282f
 8002820:	08002829 	.word	0x08002829
 8002824:	08002841 	.word	0x08002841
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e030      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d025      	beq.n	8002886 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283e:	e022      	b.n	8002886 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002848:	d11f      	bne.n	800288a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800284e:	e01c      	b.n	800288a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d903      	bls.n	800285e <DMA_CheckFifoParam+0xb6>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d003      	beq.n	8002864 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800285c:	e018      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      break;
 8002862:	e015      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00e      	beq.n	800288e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
      break;
 8002874:	e00b      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      break;
 8002876:	bf00      	nop
 8002878:	e00a      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
      break;
 800287a:	bf00      	nop
 800287c:	e008      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
      break;
 800287e:	bf00      	nop
 8002880:	e006      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
      break;
 8002882:	bf00      	nop
 8002884:	e004      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
      break;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
      break;   
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <DMA_CheckFifoParam+0xe8>
      break;
 800288e:	bf00      	nop
    }
  } 
  
  return status; 
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop

080028a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	e159      	b.n	8002b70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 8148 	bne.w	8002b6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d005      	beq.n	80028f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d130      	bne.n	8002954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	2203      	movs	r2, #3
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 0201 	and.w	r2, r3, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b03      	cmp	r3, #3
 800295e:	d017      	beq.n	8002990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d123      	bne.n	80029e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	220f      	movs	r2, #15
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	08da      	lsrs	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3208      	adds	r2, #8
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0203 	and.w	r2, r3, #3
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a2 	beq.w	8002b6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <HAL_GPIO_Init+0x2e8>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a56      	ldr	r2, [pc, #344]	; (8002b88 <HAL_GPIO_Init+0x2e8>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b54      	ldr	r3, [pc, #336]	; (8002b88 <HAL_GPIO_Init+0x2e8>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a42:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_GPIO_Init+0x2ec>)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	3302      	adds	r3, #2
 8002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	220f      	movs	r2, #15
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a49      	ldr	r2, [pc, #292]	; (8002b90 <HAL_GPIO_Init+0x2f0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d019      	beq.n	8002aa2 <HAL_GPIO_Init+0x202>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a48      	ldr	r2, [pc, #288]	; (8002b94 <HAL_GPIO_Init+0x2f4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_GPIO_Init+0x1fe>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a47      	ldr	r2, [pc, #284]	; (8002b98 <HAL_GPIO_Init+0x2f8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00d      	beq.n	8002a9a <HAL_GPIO_Init+0x1fa>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a46      	ldr	r2, [pc, #280]	; (8002b9c <HAL_GPIO_Init+0x2fc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <HAL_GPIO_Init+0x1f6>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a45      	ldr	r2, [pc, #276]	; (8002ba0 <HAL_GPIO_Init+0x300>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_GPIO_Init+0x1f2>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e008      	b.n	8002aa4 <HAL_GPIO_Init+0x204>
 8002a92:	2307      	movs	r3, #7
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x204>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e004      	b.n	8002aa4 <HAL_GPIO_Init+0x204>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_Init+0x204>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_GPIO_Init+0x204>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	f002 0203 	and.w	r2, r2, #3
 8002aaa:	0092      	lsls	r2, r2, #2
 8002aac:	4093      	lsls	r3, r2
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab4:	4935      	ldr	r1, [pc, #212]	; (8002b8c <HAL_GPIO_Init+0x2ec>)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac2:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aec:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b10:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b40:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b64:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b0f      	cmp	r3, #15
 8002b74:	f67f aea2 	bls.w	80028bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40013c00 	.word	0x40013c00

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc4:	e003      	b.n	8002bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	041a      	lsls	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e264      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d075      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfa:	4ba3      	ldr	r3, [pc, #652]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d00c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4ba0      	ldr	r3, [pc, #640]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d112      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c12:	4b9d      	ldr	r3, [pc, #628]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1e:	d10b      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	4b99      	ldr	r3, [pc, #612]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d05b      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x108>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d157      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e23f      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d106      	bne.n	8002c50 <HAL_RCC_OscConfig+0x74>
 8002c42:	4b91      	ldr	r3, [pc, #580]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a90      	ldr	r2, [pc, #576]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e01d      	b.n	8002c8c <HAL_RCC_OscConfig+0xb0>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x98>
 8002c5a:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a8a      	ldr	r2, [pc, #552]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a87      	ldr	r2, [pc, #540]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xb0>
 8002c74:	4b84      	ldr	r3, [pc, #528]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a83      	ldr	r2, [pc, #524]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a80      	ldr	r2, [pc, #512]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7ff f8e4 	bl	8001e60 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7ff f8e0 	bl	8001e60 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e204      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0xc0>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7ff f8d0 	bl	8001e60 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7ff f8cc 	bl	8001e60 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1f0      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	4b6c      	ldr	r3, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xe8>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf2:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b62      	ldr	r3, [pc, #392]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d11c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	4b5c      	ldr	r3, [pc, #368]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x152>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1c4      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4952      	ldr	r1, [pc, #328]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	e03a      	b.n	8002dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4c:	4b4f      	ldr	r3, [pc, #316]	; (8002e8c <HAL_RCC_OscConfig+0x2b0>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d52:	f7ff f885 	bl	8001e60 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5a:	f7ff f881 	bl	8001e60 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1a5      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4940      	ldr	r1, [pc, #256]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8e:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <HAL_RCC_OscConfig+0x2b0>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7ff f864 	bl	8001e60 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7ff f860 	bl	8001e60 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e184      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d030      	beq.n	8002e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dce:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_RCC_OscConfig+0x2b4>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7ff f844 	bl	8001e60 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7ff f840 	bl	8001e60 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e164      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x200>
 8002dfa:	e015      	b.n	8002e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCC_OscConfig+0x2b4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7ff f82d 	bl	8001e60 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7ff f829 	bl	8001e60 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e14d      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80a0 	beq.w	8002f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x2b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d121      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_RCC_OscConfig+0x2b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <HAL_RCC_OscConfig+0x2b8>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe ffef 	bl	8001e60 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e011      	b.n	8002eaa <HAL_RCC_OscConfig+0x2ce>
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	42470000 	.word	0x42470000
 8002e90:	42470e80 	.word	0x42470e80
 8002e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e98:	f7fe ffe2 	bl	8001e60 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e106      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x4e4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
 8002ebe:	4b81      	ldr	r3, [pc, #516]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a80      	ldr	r2, [pc, #512]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eca:	e01c      	b.n	8002f06 <HAL_RCC_OscConfig+0x32a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x312>
 8002ed4:	4b7b      	ldr	r3, [pc, #492]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a7a      	ldr	r2, [pc, #488]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	4b78      	ldr	r3, [pc, #480]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a77      	ldr	r2, [pc, #476]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x32a>
 8002eee:	4b75      	ldr	r3, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a74      	ldr	r2, [pc, #464]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8002efa:	4b72      	ldr	r3, [pc, #456]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a71      	ldr	r2, [pc, #452]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d015      	beq.n	8002f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0e:	f7fe ffa7 	bl	8001e60 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe ffa3 	bl	8001e60 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0c5      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ee      	beq.n	8002f16 <HAL_RCC_OscConfig+0x33a>
 8002f38:	e014      	b.n	8002f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe ff91 	bl	8001e60 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe ff8d 	bl	8001e60 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0af      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	4b5a      	ldr	r3, [pc, #360]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ee      	bne.n	8002f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b56      	ldr	r3, [pc, #344]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a55      	ldr	r2, [pc, #340]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 809b 	beq.w	80030b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f80:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d05c      	beq.n	8003046 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d141      	bne.n	8003018 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <HAL_RCC_OscConfig+0x4ec>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe ff61 	bl	8001e60 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe ff5d 	bl	8001e60 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e081      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb4:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	019b      	lsls	r3, r3, #6
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	4937      	ldr	r1, [pc, #220]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_RCC_OscConfig+0x4ec>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe ff36 	bl	8001e60 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fe ff32 	bl	8001e60 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e056      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x41c>
 8003016:	e04e      	b.n	80030b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_OscConfig+0x4ec>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fe ff1f 	bl	8001e60 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe ff1b 	bl	8001e60 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e03f      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x44a>
 8003044:	e037      	b.n	80030b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e032      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_RCC_OscConfig+0x4e8>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d028      	beq.n	80030b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d121      	bne.n	80030b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d11a      	bne.n	80030b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003082:	4013      	ands	r3, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003088:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800308a:	4293      	cmp	r3, r2
 800308c:	d111      	bne.n	80030b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40007000 	.word	0x40007000
 80030c4:	40023800 	.word	0x40023800
 80030c8:	42470060 	.word	0x42470060

080030cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0cc      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d90c      	bls.n	8003108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b65      	ldr	r3, [pc, #404]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0b8      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003120:	4b59      	ldr	r3, [pc, #356]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a58      	ldr	r2, [pc, #352]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003138:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a52      	ldr	r2, [pc, #328]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	494d      	ldr	r1, [pc, #308]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d044      	beq.n	80031ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d119      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e07f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d003      	beq.n	800318a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	2b03      	cmp	r3, #3
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e067      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031aa:	4b37      	ldr	r3, [pc, #220]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4934      	ldr	r1, [pc, #208]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031bc:	f7fe fe50 	bl	8001e60 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7fe fe4c 	bl	8001e60 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e04f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 020c 	and.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1eb      	bne.n	80031c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d20c      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e032      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4916      	ldr	r1, [pc, #88]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	490e      	ldr	r1, [pc, #56]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003252:	f000 f821 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003256:	4602      	mov	r2, r0
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	490a      	ldr	r1, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	5ccb      	ldrb	r3, [r1, r3]
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fdb0 	bl	8001dd8 <HAL_InitTick>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00
 8003288:	40023800 	.word	0x40023800
 800328c:	08006428 	.word	0x08006428
 8003290:	20000000 	.word	0x20000000
 8003294:	20000004 	.word	0x20000004

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	2300      	movs	r3, #0
 80032aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b0:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d00d      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x40>
 80032bc:	2b08      	cmp	r3, #8
 80032be:	f200 80bd 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x1a4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x34>
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ca:	e0b7      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b61      	ldr	r3, [pc, #388]	; (8003454 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032ce:	60bb      	str	r3, [r7, #8]
       break;
 80032d0:	e0b7      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032d4:	60bb      	str	r3, [r7, #8]
      break;
 80032d6:	e0b4      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d8:	4b5d      	ldr	r3, [pc, #372]	; (8003450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e2:	4b5b      	ldr	r3, [pc, #364]	; (8003450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d04d      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ee:	4b58      	ldr	r3, [pc, #352]	; (8003450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	461a      	mov	r2, r3
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	ea02 0800 	and.w	r8, r2, r0
 8003306:	ea03 0901 	and.w	r9, r3, r1
 800330a:	4640      	mov	r0, r8
 800330c:	4649      	mov	r1, r9
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	014b      	lsls	r3, r1, #5
 8003318:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800331c:	0142      	lsls	r2, r0, #5
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	ebb0 0008 	subs.w	r0, r0, r8
 8003326:	eb61 0109 	sbc.w	r1, r1, r9
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	018b      	lsls	r3, r1, #6
 8003334:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003338:	0182      	lsls	r2, r0, #6
 800333a:	1a12      	subs	r2, r2, r0
 800333c:	eb63 0301 	sbc.w	r3, r3, r1
 8003340:	f04f 0000 	mov.w	r0, #0
 8003344:	f04f 0100 	mov.w	r1, #0
 8003348:	00d9      	lsls	r1, r3, #3
 800334a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800334e:	00d0      	lsls	r0, r2, #3
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	eb12 0208 	adds.w	r2, r2, r8
 8003358:	eb43 0309 	adc.w	r3, r3, r9
 800335c:	f04f 0000 	mov.w	r0, #0
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	0259      	lsls	r1, r3, #9
 8003366:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800336a:	0250      	lsls	r0, r2, #9
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	461a      	mov	r2, r3
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	f7fd fb6e 	bl	8000a5c <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e04a      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	461a      	mov	r2, r3
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f240 10ff 	movw	r0, #511	; 0x1ff
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	ea02 0400 	and.w	r4, r2, r0
 80033a2:	ea03 0501 	and.w	r5, r3, r1
 80033a6:	4620      	mov	r0, r4
 80033a8:	4629      	mov	r1, r5
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	014b      	lsls	r3, r1, #5
 80033b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033b8:	0142      	lsls	r2, r0, #5
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	1b00      	subs	r0, r0, r4
 80033c0:	eb61 0105 	sbc.w	r1, r1, r5
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	018b      	lsls	r3, r1, #6
 80033ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033d2:	0182      	lsls	r2, r0, #6
 80033d4:	1a12      	subs	r2, r2, r0
 80033d6:	eb63 0301 	sbc.w	r3, r3, r1
 80033da:	f04f 0000 	mov.w	r0, #0
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	00d9      	lsls	r1, r3, #3
 80033e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033e8:	00d0      	lsls	r0, r2, #3
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	1912      	adds	r2, r2, r4
 80033f0:	eb45 0303 	adc.w	r3, r5, r3
 80033f4:	f04f 0000 	mov.w	r0, #0
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	0299      	lsls	r1, r3, #10
 80033fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003402:	0290      	lsls	r0, r2, #10
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	f7fd fb22 	bl	8000a5c <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	60bb      	str	r3, [r7, #8]
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800343e:	60bb      	str	r3, [r7, #8]
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	68bb      	ldr	r3, [r7, #8]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	00f42400 	.word	0x00f42400
 8003458:	007a1200 	.word	0x007a1200

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000000 	.word	0x20000000

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a9b      	lsrs	r3, r3, #10
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	08006438 	.word	0x08006438

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffdc 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0b5b      	lsrs	r3, r3, #13
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	08006438 	.word	0x08006438

080034c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d001      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e044      	b.n	8003566 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <HAL_TIM_Base_Start_IT+0xb0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d018      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x6c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d013      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x6c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_TIM_Base_Start_IT+0xb4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x6c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_TIM_Base_Start_IT+0xb8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x6c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_TIM_Base_Start_IT+0xbc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x6c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_TIM_Base_Start_IT+0xc0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d111      	bne.n	8003554 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b06      	cmp	r3, #6
 8003540:	d010      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	e007      	b.n	8003564 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00
 8003584:	40014000 	.word	0x40014000

08003588 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e041      	b.n	800361e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe f966 	bl	8001880 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f000 face 	bl	8003b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d109      	bne.n	800364c <HAL_TIM_OC_Start+0x24>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	e022      	b.n	8003692 <HAL_TIM_OC_Start+0x6a>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b04      	cmp	r3, #4
 8003650:	d109      	bne.n	8003666 <HAL_TIM_OC_Start+0x3e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	e015      	b.n	8003692 <HAL_TIM_OC_Start+0x6a>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d109      	bne.n	8003680 <HAL_TIM_OC_Start+0x58>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e008      	b.n	8003692 <HAL_TIM_OC_Start+0x6a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e068      	b.n	800376c <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <HAL_TIM_OC_Start+0x82>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a8:	e013      	b.n	80036d2 <HAL_TIM_OC_Start+0xaa>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d104      	bne.n	80036ba <HAL_TIM_OC_Start+0x92>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b8:	e00b      	b.n	80036d2 <HAL_TIM_OC_Start+0xaa>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d104      	bne.n	80036ca <HAL_TIM_OC_Start+0xa2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c8:	e003      	b.n	80036d2 <HAL_TIM_OC_Start+0xaa>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	6839      	ldr	r1, [r7, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fc50 	bl	8003f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a23      	ldr	r2, [pc, #140]	; (8003774 <HAL_TIM_OC_Start+0x14c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d107      	bne.n	80036fa <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_TIM_OC_Start+0x14c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d018      	beq.n	8003736 <HAL_TIM_OC_Start+0x10e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370c:	d013      	beq.n	8003736 <HAL_TIM_OC_Start+0x10e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_TIM_OC_Start+0x150>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIM_OC_Start+0x10e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <HAL_TIM_OC_Start+0x154>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d009      	beq.n	8003736 <HAL_TIM_OC_Start+0x10e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_TIM_OC_Start+0x158>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIM_OC_Start+0x10e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <HAL_TIM_OC_Start+0x15c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d010      	beq.n	800376a <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	e007      	b.n	800376a <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40014000 	.word	0x40014000

08003788 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fbf0 	bl	8003f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <HAL_TIM_OC_Stop+0xc4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d117      	bne.n	80037da <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <HAL_TIM_OC_Stop+0x52>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	f240 4344 	movw	r3, #1092	; 0x444
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_TIM_OC_Stop+0x52>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <HAL_TIM_OC_Stop+0x82>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a1a      	ldr	r2, [r3, #32]
 80037f0:	f240 4344 	movw	r3, #1092	; 0x444
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <HAL_TIM_OC_Stop+0x82>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <HAL_TIM_OC_Stop+0x92>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003818:	e013      	b.n	8003842 <HAL_TIM_OC_Stop+0xba>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d104      	bne.n	800382a <HAL_TIM_OC_Stop+0xa2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003828:	e00b      	b.n	8003842 <HAL_TIM_OC_Stop+0xba>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d104      	bne.n	800383a <HAL_TIM_OC_Stop+0xb2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003838:	e003      	b.n	8003842 <HAL_TIM_OC_Stop+0xba>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40010000 	.word	0x40010000

08003850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0202 	mvn.w	r2, #2
 800387c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f94a 	bl	8003b2c <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f93c 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f94d 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0204 	mvn.w	r2, #4
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f920 	bl	8003b2c <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f912 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f923 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0208 	mvn.w	r2, #8
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2204      	movs	r2, #4
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8f6 	bl	8003b2c <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8e8 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8f9 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d122      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b10      	cmp	r3, #16
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8cc 	bl	8003b2c <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f8be 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8cf 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0201 	mvn.w	r2, #1
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fef6 	bl	80017c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fb5e 	bl	80040bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f894 	bl	8003b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0220 	mvn.w	r2, #32
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fb28 	bl	80040a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e048      	b.n	8003b10 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d839      	bhi.n	8003b00 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003b01 	.word	0x08003b01
 8003a9c:	08003b01 	.word	0x08003b01
 8003aa0:	08003b01 	.word	0x08003b01
 8003aa4:	08003ad7 	.word	0x08003ad7
 8003aa8:	08003b01 	.word	0x08003b01
 8003aac:	08003b01 	.word	0x08003b01
 8003ab0:	08003b01 	.word	0x08003b01
 8003ab4:	08003ae5 	.word	0x08003ae5
 8003ab8:	08003b01 	.word	0x08003b01
 8003abc:	08003b01 	.word	0x08003b01
 8003ac0:	08003b01 	.word	0x08003b01
 8003ac4:	08003af3 	.word	0x08003af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f8ca 	bl	8003c68 <TIM_OC1_SetConfig>
      break;
 8003ad4:	e017      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f929 	bl	8003d34 <TIM_OC2_SetConfig>
      break;
 8003ae2:	e010      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f98e 	bl	8003e0c <TIM_OC3_SetConfig>
      break;
 8003af0:	e009      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 f9f1 	bl	8003ee0 <TIM_OC4_SetConfig>
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
      break;
 8003b04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <TIM_Base_SetConfig+0xe4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00f      	beq.n	8003ba0 <TIM_Base_SetConfig+0x38>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d00b      	beq.n	8003ba0 <TIM_Base_SetConfig+0x38>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a31      	ldr	r2, [pc, #196]	; (8003c50 <TIM_Base_SetConfig+0xe8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_Base_SetConfig+0x38>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <TIM_Base_SetConfig+0xec>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_Base_SetConfig+0x38>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_Base_SetConfig+0xf0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d108      	bne.n	8003bb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <TIM_Base_SetConfig+0xe4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01b      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d017      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <TIM_Base_SetConfig+0xe8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a21      	ldr	r2, [pc, #132]	; (8003c54 <TIM_Base_SetConfig+0xec>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00f      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	; (8003c58 <TIM_Base_SetConfig+0xf0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <TIM_Base_SetConfig+0xf4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <TIM_Base_SetConfig+0xf8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <TIM_Base_SetConfig+0xfc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <TIM_Base_SetConfig+0xe4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d103      	bne.n	8003c38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	615a      	str	r2, [r3, #20]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800

08003c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f023 0302 	bic.w	r3, r3, #2
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <TIM_OC1_SetConfig+0xc8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10c      	bne.n	8003cde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0308 	bic.w	r3, r3, #8
 8003cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <TIM_OC1_SetConfig+0xc8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d111      	bne.n	8003d0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	621a      	str	r2, [r3, #32]
}
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40010000 	.word	0x40010000

08003d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0210 	bic.w	r2, r3, #16
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0320 	bic.w	r3, r3, #32
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <TIM_OC2_SetConfig+0xd4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10d      	bne.n	8003db0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <TIM_OC2_SetConfig+0xd4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d113      	bne.n	8003de0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000

08003e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <TIM_OC3_SetConfig+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10d      	bne.n	8003e86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <TIM_OC3_SetConfig+0xd0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d113      	bne.n	8003eb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000

08003ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <TIM_OC4_SetConfig+0x9c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d109      	bne.n	8003f54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40010000 	.word	0x40010000

08003f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2201      	movs	r2, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e050      	b.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d018      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d013      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a16      	ldr	r2, [pc, #88]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10c      	bne.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40010000 	.word	0x40010000
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40000c00 	.word	0x40000c00
 80040a4:	40014000 	.word	0x40014000

080040a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e03f      	b.n	8004162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd fcaa 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	; 0x24
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 ff97 	bl	8005048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b08a      	sub	sp, #40	; 0x28
 800416e:	af02      	add	r7, sp, #8
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	d17c      	bne.n	8004284 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_UART_Transmit+0x2c>
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e075      	b.n	8004286 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Transmit+0x3e>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e06e      	b.n	8004286 <HAL_UART_Transmit+0x11c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2221      	movs	r2, #33	; 0x21
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041be:	f7fd fe4f 	bl	8001e60 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d108      	bne.n	80041ec <HAL_UART_Transmit+0x82>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041fc:	e02a      	b.n	8004254 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fc53 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e036      	b.n	8004286 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3302      	adds	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e007      	b.n	8004246 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1cf      	bne.n	80041fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2140      	movs	r1, #64	; 0x40
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fc23 	bl	8004ab4 <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e006      	b.n	8004286 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b08c      	sub	sp, #48	; 0x30
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d152      	bne.n	800434e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e04b      	b.n	8004350 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e044      	b.n	8004350 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fc58 	bl	8004b90 <UART_Start_Receive_DMA>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80042e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d12c      	bne.n	8004348 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d125      	bne.n	8004342 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	617b      	str	r3, [r7, #20]
   return(result);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f043 0310 	orr.w	r3, r3, #16
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800432c:	627a      	str	r2, [r7, #36]	; 0x24
 800432e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	6a39      	ldr	r1, [r7, #32]
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	61fb      	str	r3, [r7, #28]
   return(result);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e5      	bne.n	800430c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004340:	e002      	b.n	8004348 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800434c:	e000      	b.n	8004350 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	3730      	adds	r7, #48	; 0x30
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b0ba      	sub	sp, #232	; 0xe8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_UART_IRQHandler+0x66>
 80043aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fd8b 	bl	8004ed2 <UART_Receive_IT>
      return;
 80043bc:	e256      	b.n	800486c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 80de 	beq.w	8004584 <HAL_UART_IRQHandler+0x22c>
 80043c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80d1 	beq.w	8004584 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_UART_IRQHandler+0xae>
 80043ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_UART_IRQHandler+0xd2>
 8004412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f043 0202 	orr.w	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_UART_IRQHandler+0xf6>
 8004436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f043 0204 	orr.w	r2, r3, #4
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800444e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d011      	beq.n	800447e <HAL_UART_IRQHandler+0x126>
 800445a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d105      	bne.n	8004472 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f043 0208 	orr.w	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 81ed 	beq.w	8004862 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_UART_IRQHandler+0x14e>
 8004494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fd16 	bl	8004ed2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_UART_IRQHandler+0x17a>
 80044ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04f      	beq.n	8004572 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fc1e 	bl	8004d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d141      	bne.n	800456a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3314      	adds	r3, #20
 800450e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004512:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800451e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800452a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1d9      	bne.n	80044e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	2b00      	cmp	r3, #0
 8004538:	d013      	beq.n	8004562 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	4a7d      	ldr	r2, [pc, #500]	; (8004734 <HAL_UART_IRQHandler+0x3dc>)
 8004540:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd ff1e 	bl	8002388 <HAL_DMA_Abort_IT>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800455c:	4610      	mov	r0, r2
 800455e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004560:	e00e      	b.n	8004580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9a4 	bl	80048b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	e00a      	b.n	8004580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9a0 	bl	80048b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	e006      	b.n	8004580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f99c 	bl	80048b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800457e:	e170      	b.n	8004862 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	bf00      	nop
    return;
 8004582:	e16e      	b.n	8004862 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 814a 	bne.w	8004822 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8143 	beq.w	8004822 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 813c 	beq.w	8004822 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	f040 80b4 	bne.w	8004738 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8140 	beq.w	8004866 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ee:	429a      	cmp	r2, r3
 80045f0:	f080 8139 	bcs.w	8004866 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004606:	f000 8088 	beq.w	800471a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004636:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800463a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004642:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800464e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1d9      	bne.n	800460a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3314      	adds	r3, #20
 8004676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800467a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800467e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004682:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800468c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e1      	bne.n	8004656 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3314      	adds	r3, #20
 8004698:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e3      	bne.n	8004692 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ea:	f023 0310 	bic.w	r3, r3, #16
 80046ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80046fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004702:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800470a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e3      	bne.n	80046d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	4618      	mov	r0, r3
 8004716:	f7fd fdc7 	bl	80022a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004722:	b29b      	uxth	r3, r3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	b29b      	uxth	r3, r3
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd f82a 	bl	8001784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004730:	e099      	b.n	8004866 <HAL_UART_IRQHandler+0x50e>
 8004732:	bf00      	nop
 8004734:	08004ddb 	.word	0x08004ddb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004740:	b29b      	uxth	r3, r3
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 808b 	beq.w	800486a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8086 	beq.w	800486a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004782:	647a      	str	r2, [r7, #68]	; 0x44
 8004784:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e3      	bne.n	800475e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3314      	adds	r3, #20
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	623b      	str	r3, [r7, #32]
   return(result);
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3314      	adds	r3, #20
 80047b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047ba:	633a      	str	r2, [r7, #48]	; 0x30
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e3      	bne.n	8004796 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004800:	61fa      	str	r2, [r7, #28]
 8004802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	617b      	str	r3, [r7, #20]
   return(result);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e3      	bne.n	80047dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc ffb2 	bl	8001784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004820:	e023      	b.n	800486a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_UART_IRQHandler+0x4ea>
 800482e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fae1 	bl	8004e02 <UART_Transmit_IT>
    return;
 8004840:	e014      	b.n	800486c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00e      	beq.n	800486c <HAL_UART_IRQHandler+0x514>
 800484e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fb21 	bl	8004ea2 <UART_EndTransmit_IT>
    return;
 8004860:	e004      	b.n	800486c <HAL_UART_IRQHandler+0x514>
    return;
 8004862:	bf00      	nop
 8004864:	e002      	b.n	800486c <HAL_UART_IRQHandler+0x514>
      return;
 8004866:	bf00      	nop
 8004868:	e000      	b.n	800486c <HAL_UART_IRQHandler+0x514>
      return;
 800486a:	bf00      	nop
  }
}
 800486c:	37e8      	adds	r7, #232	; 0xe8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop

08004874 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b09c      	sub	sp, #112	; 0x70
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d172      	bne.n	80049c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80048e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e2:	2200      	movs	r2, #0
 80048e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004906:	65ba      	str	r2, [r7, #88]	; 0x58
 8004908:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800490c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3314      	adds	r3, #20
 8004920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800492a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	667b      	str	r3, [r7, #100]	; 0x64
 8004932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800493a:	647a      	str	r2, [r7, #68]	; 0x44
 800493c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e5      	bne.n	800491a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	623b      	str	r3, [r7, #32]
   return(result);
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004964:	663b      	str	r3, [r7, #96]	; 0x60
 8004966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800496e:	633a      	str	r2, [r7, #48]	; 0x30
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e5      	bne.n	800494e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	2b01      	cmp	r3, #1
 8004990:	d119      	bne.n	80049c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f023 0310 	bic.w	r3, r3, #16
 80049a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049b2:	61fa      	str	r2, [r7, #28]
 80049b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	69b9      	ldr	r1, [r7, #24]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	617b      	str	r3, [r7, #20]
   return(result);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e5      	bne.n	8004992 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d106      	bne.n	80049dc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049d2:	4619      	mov	r1, r3
 80049d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049d6:	f7fc fed5 	bl	8001784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049da:	e002      	b.n	80049e2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80049dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049de:	f7ff ff53 	bl	8004888 <HAL_UART_RxCpltCallback>
}
 80049e2:	bf00      	nop
 80049e4:	3770      	adds	r7, #112	; 0x70
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d108      	bne.n	8004a12 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7fc feba 	bl	8001784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a10:	e002      	b.n	8004a18 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff ff42 	bl	800489c <HAL_UART_RxHalfCpltCallback>
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b21      	cmp	r3, #33	; 0x21
 8004a52:	d108      	bne.n	8004a66 <UART_DMAError+0x46>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a60:	68b8      	ldr	r0, [r7, #8]
 8004a62:	f000 f92f 	bl	8004cc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	bf0c      	ite	eq
 8004a74:	2301      	moveq	r3, #1
 8004a76:	2300      	movne	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b22      	cmp	r3, #34	; 0x22
 8004a86:	d108      	bne.n	8004a9a <UART_DMAError+0x7a>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2200      	movs	r2, #0
 8004a92:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a94:	68b8      	ldr	r0, [r7, #8]
 8004a96:	f000 f93d 	bl	8004d14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f043 0210 	orr.w	r2, r3, #16
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f7ff ff02 	bl	80048b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b090      	sub	sp, #64	; 0x40
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac4:	e050      	b.n	8004b68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004acc:	d04c      	beq.n	8004b68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad4:	f7fd f9c4 	bl	8001e60 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d241      	bcs.n	8004b68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b04:	637a      	str	r2, [r7, #52]	; 0x34
 8004b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3314      	adds	r3, #20
 8004b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	613b      	str	r3, [r7, #16]
   return(result);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3314      	adds	r3, #20
 8004b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b38:	623a      	str	r2, [r7, #32]
 8004b3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69f9      	ldr	r1, [r7, #28]
 8004b3e:	6a3a      	ldr	r2, [r7, #32]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e00f      	b.n	8004b88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d09f      	beq.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3740      	adds	r7, #64	; 0x40
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b098      	sub	sp, #96	; 0x60
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2222      	movs	r2, #34	; 0x22
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	4a3e      	ldr	r2, [pc, #248]	; (8004cb8 <UART_Start_Receive_DMA+0x128>)
 8004bbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	4a3d      	ldr	r2, [pc, #244]	; (8004cbc <UART_Start_Receive_DMA+0x12c>)
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	4a3c      	ldr	r2, [pc, #240]	; (8004cc0 <UART_Start_Receive_DMA+0x130>)
 8004bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004bd8:	f107 0308 	add.w	r3, r7, #8
 8004bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	f7fd fb02 	bl	80021f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c32:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3314      	adds	r3, #20
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c66:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3314      	adds	r3, #20
 8004c80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	617b      	str	r3, [r7, #20]
   return(result);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c90:	653b      	str	r3, [r7, #80]	; 0x50
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3314      	adds	r3, #20
 8004c98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c9a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6a39      	ldr	r1, [r7, #32]
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e5      	bne.n	8004c7a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3760      	adds	r7, #96	; 0x60
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	080048c5 	.word	0x080048c5
 8004cbc:	080049eb 	.word	0x080049eb
 8004cc0:	08004a21 	.word	0x08004a21

08004cc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	; 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	61ba      	str	r2, [r7, #24]
 8004cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6979      	ldr	r1, [r7, #20]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004d08:	bf00      	nop
 8004d0a:	3724      	adds	r7, #36	; 0x24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b095      	sub	sp, #84	; 0x54
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d3c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e5      	bne.n	8004d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d119      	bne.n	8004dc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f023 0310 	bic.w	r3, r3, #16
 8004da2:	647b      	str	r3, [r7, #68]	; 0x44
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dac:	61ba      	str	r2, [r7, #24]
 8004dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dce:	bf00      	nop
 8004dd0:	3754      	adds	r7, #84	; 0x54
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff fd5b 	bl	80048b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b21      	cmp	r3, #33	; 0x21
 8004e14:	d13e      	bne.n	8004e94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	d114      	bne.n	8004e4a <UART_Transmit_IT+0x48>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d110      	bne.n	8004e4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	1c9a      	adds	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	621a      	str	r2, [r3, #32]
 8004e48:	e008      	b.n	8004e5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	1c59      	adds	r1, r3, #1
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6211      	str	r1, [r2, #32]
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10f      	bne.n	8004e90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fcd6 	bl	8004874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b08c      	sub	sp, #48	; 0x30
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b22      	cmp	r3, #34	; 0x22
 8004ee4:	f040 80ab 	bne.w	800503e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef0:	d117      	bne.n	8004f22 <UART_Receive_IT+0x50>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d113      	bne.n	8004f22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f20:	e026      	b.n	8004f70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f34:	d007      	beq.n	8004f46 <UART_Receive_IT+0x74>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <UART_Receive_IT+0x82>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e008      	b.n	8004f66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d15a      	bne.n	800503a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0220 	bic.w	r2, r2, #32
 8004f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d135      	bne.n	8005030 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f023 0310 	bic.w	r3, r3, #16
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	623a      	str	r2, [r7, #32]
 8004fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	69f9      	ldr	r1, [r7, #28]
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e5      	bne.n	8004fca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b10      	cmp	r3, #16
 800500a:	d10a      	bne.n	8005022 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005026:	4619      	mov	r1, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fc fbab 	bl	8001784 <HAL_UARTEx_RxEventCallback>
 800502e:	e002      	b.n	8005036 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fc29 	bl	8004888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	e002      	b.n	8005040 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3730      	adds	r7, #48	; 0x30
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	b09f      	sub	sp, #124	; 0x7c
 800504e:	af00      	add	r7, sp, #0
 8005050:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800505c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505e:	68d9      	ldr	r1, [r3, #12]
 8005060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	ea40 0301 	orr.w	r3, r0, r1
 8005068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800506a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	431a      	orrs	r2, r3
 8005074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	431a      	orrs	r2, r3
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	4313      	orrs	r3, r2
 8005080:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800508c:	f021 010c 	bic.w	r1, r1, #12
 8005090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005096:	430b      	orrs	r3, r1
 8005098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800509a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a6:	6999      	ldr	r1, [r3, #24]
 80050a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	ea40 0301 	orr.w	r3, r0, r1
 80050b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4bc5      	ldr	r3, [pc, #788]	; (80053cc <UART_SetConfig+0x384>)
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d004      	beq.n	80050c6 <UART_SetConfig+0x7e>
 80050bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4bc3      	ldr	r3, [pc, #780]	; (80053d0 <UART_SetConfig+0x388>)
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d103      	bne.n	80050ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c6:	f7fe f9e9 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 80050ca:	6778      	str	r0, [r7, #116]	; 0x74
 80050cc:	e002      	b.n	80050d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ce:	f7fe f9d1 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80050d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	f040 80b6 	bne.w	800524c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e2:	461c      	mov	r4, r3
 80050e4:	f04f 0500 	mov.w	r5, #0
 80050e8:	4622      	mov	r2, r4
 80050ea:	462b      	mov	r3, r5
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	6439      	str	r1, [r7, #64]	; 0x40
 80050f0:	415b      	adcs	r3, r3
 80050f2:	647b      	str	r3, [r7, #68]	; 0x44
 80050f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050f8:	1912      	adds	r2, r2, r4
 80050fa:	eb45 0303 	adc.w	r3, r5, r3
 80050fe:	f04f 0000 	mov.w	r0, #0
 8005102:	f04f 0100 	mov.w	r1, #0
 8005106:	00d9      	lsls	r1, r3, #3
 8005108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800510c:	00d0      	lsls	r0, r2, #3
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	1911      	adds	r1, r2, r4
 8005114:	6639      	str	r1, [r7, #96]	; 0x60
 8005116:	416b      	adcs	r3, r5
 8005118:	667b      	str	r3, [r7, #100]	; 0x64
 800511a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	461a      	mov	r2, r3
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	1891      	adds	r1, r2, r2
 8005126:	63b9      	str	r1, [r7, #56]	; 0x38
 8005128:	415b      	adcs	r3, r3
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005130:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005134:	f7fb fc92 	bl	8000a5c <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4ba5      	ldr	r3, [pc, #660]	; (80053d4 <UART_SetConfig+0x38c>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	011e      	lsls	r6, r3, #4
 8005146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005148:	461c      	mov	r4, r3
 800514a:	f04f 0500 	mov.w	r5, #0
 800514e:	4622      	mov	r2, r4
 8005150:	462b      	mov	r3, r5
 8005152:	1891      	adds	r1, r2, r2
 8005154:	6339      	str	r1, [r7, #48]	; 0x30
 8005156:	415b      	adcs	r3, r3
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
 800515a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800515e:	1912      	adds	r2, r2, r4
 8005160:	eb45 0303 	adc.w	r3, r5, r3
 8005164:	f04f 0000 	mov.w	r0, #0
 8005168:	f04f 0100 	mov.w	r1, #0
 800516c:	00d9      	lsls	r1, r3, #3
 800516e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005172:	00d0      	lsls	r0, r2, #3
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	1911      	adds	r1, r2, r4
 800517a:	65b9      	str	r1, [r7, #88]	; 0x58
 800517c:	416b      	adcs	r3, r5
 800517e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	461a      	mov	r2, r3
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	1891      	adds	r1, r2, r2
 800518c:	62b9      	str	r1, [r7, #40]	; 0x28
 800518e:	415b      	adcs	r3, r3
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005196:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800519a:	f7fb fc5f 	bl	8000a5c <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4b8c      	ldr	r3, [pc, #560]	; (80053d4 <UART_SetConfig+0x38c>)
 80051a4:	fba3 1302 	umull	r1, r3, r3, r2
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	2164      	movs	r1, #100	; 0x64
 80051ac:	fb01 f303 	mul.w	r3, r1, r3
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	3332      	adds	r3, #50	; 0x32
 80051b6:	4a87      	ldr	r2, [pc, #540]	; (80053d4 <UART_SetConfig+0x38c>)
 80051b8:	fba2 2303 	umull	r2, r3, r2, r3
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051c4:	441e      	add	r6, r3
 80051c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c8:	4618      	mov	r0, r3
 80051ca:	f04f 0100 	mov.w	r1, #0
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	1894      	adds	r4, r2, r2
 80051d4:	623c      	str	r4, [r7, #32]
 80051d6:	415b      	adcs	r3, r3
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
 80051da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051de:	1812      	adds	r2, r2, r0
 80051e0:	eb41 0303 	adc.w	r3, r1, r3
 80051e4:	f04f 0400 	mov.w	r4, #0
 80051e8:	f04f 0500 	mov.w	r5, #0
 80051ec:	00dd      	lsls	r5, r3, #3
 80051ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051f2:	00d4      	lsls	r4, r2, #3
 80051f4:	4622      	mov	r2, r4
 80051f6:	462b      	mov	r3, r5
 80051f8:	1814      	adds	r4, r2, r0
 80051fa:	653c      	str	r4, [r7, #80]	; 0x50
 80051fc:	414b      	adcs	r3, r1
 80051fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	461a      	mov	r2, r3
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	1891      	adds	r1, r2, r2
 800520c:	61b9      	str	r1, [r7, #24]
 800520e:	415b      	adcs	r3, r3
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005216:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800521a:	f7fb fc1f 	bl	8000a5c <__aeabi_uldivmod>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4b6c      	ldr	r3, [pc, #432]	; (80053d4 <UART_SetConfig+0x38c>)
 8005224:	fba3 1302 	umull	r1, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	2164      	movs	r1, #100	; 0x64
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	3332      	adds	r3, #50	; 0x32
 8005236:	4a67      	ldr	r2, [pc, #412]	; (80053d4 <UART_SetConfig+0x38c>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	f003 0207 	and.w	r2, r3, #7
 8005242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4432      	add	r2, r6
 8005248:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800524a:	e0b9      	b.n	80053c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800524c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524e:	461c      	mov	r4, r3
 8005250:	f04f 0500 	mov.w	r5, #0
 8005254:	4622      	mov	r2, r4
 8005256:	462b      	mov	r3, r5
 8005258:	1891      	adds	r1, r2, r2
 800525a:	6139      	str	r1, [r7, #16]
 800525c:	415b      	adcs	r3, r3
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005264:	1912      	adds	r2, r2, r4
 8005266:	eb45 0303 	adc.w	r3, r5, r3
 800526a:	f04f 0000 	mov.w	r0, #0
 800526e:	f04f 0100 	mov.w	r1, #0
 8005272:	00d9      	lsls	r1, r3, #3
 8005274:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005278:	00d0      	lsls	r0, r2, #3
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	eb12 0804 	adds.w	r8, r2, r4
 8005282:	eb43 0905 	adc.w	r9, r3, r5
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4618      	mov	r0, r3
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	008b      	lsls	r3, r1, #2
 800529a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800529e:	0082      	lsls	r2, r0, #2
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fb fbda 	bl	8000a5c <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4b49      	ldr	r3, [pc, #292]	; (80053d4 <UART_SetConfig+0x38c>)
 80052ae:	fba3 2302 	umull	r2, r3, r3, r2
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	011e      	lsls	r6, r3, #4
 80052b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b8:	4618      	mov	r0, r3
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	1894      	adds	r4, r2, r2
 80052c4:	60bc      	str	r4, [r7, #8]
 80052c6:	415b      	adcs	r3, r3
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ce:	1812      	adds	r2, r2, r0
 80052d0:	eb41 0303 	adc.w	r3, r1, r3
 80052d4:	f04f 0400 	mov.w	r4, #0
 80052d8:	f04f 0500 	mov.w	r5, #0
 80052dc:	00dd      	lsls	r5, r3, #3
 80052de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052e2:	00d4      	lsls	r4, r2, #3
 80052e4:	4622      	mov	r2, r4
 80052e6:	462b      	mov	r3, r5
 80052e8:	1814      	adds	r4, r2, r0
 80052ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80052ec:	414b      	adcs	r3, r1
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f04f 0100 	mov.w	r1, #0
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	008b      	lsls	r3, r1, #2
 8005304:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005308:	0082      	lsls	r2, r0, #2
 800530a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800530e:	f7fb fba5 	bl	8000a5c <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <UART_SetConfig+0x38c>)
 8005318:	fba3 1302 	umull	r1, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	2164      	movs	r1, #100	; 0x64
 8005320:	fb01 f303 	mul.w	r3, r1, r3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	3332      	adds	r3, #50	; 0x32
 800532a:	4a2a      	ldr	r2, [pc, #168]	; (80053d4 <UART_SetConfig+0x38c>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005336:	441e      	add	r6, r3
 8005338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800533a:	4618      	mov	r0, r3
 800533c:	f04f 0100 	mov.w	r1, #0
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	1894      	adds	r4, r2, r2
 8005346:	603c      	str	r4, [r7, #0]
 8005348:	415b      	adcs	r3, r3
 800534a:	607b      	str	r3, [r7, #4]
 800534c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005350:	1812      	adds	r2, r2, r0
 8005352:	eb41 0303 	adc.w	r3, r1, r3
 8005356:	f04f 0400 	mov.w	r4, #0
 800535a:	f04f 0500 	mov.w	r5, #0
 800535e:	00dd      	lsls	r5, r3, #3
 8005360:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005364:	00d4      	lsls	r4, r2, #3
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	eb12 0a00 	adds.w	sl, r2, r0
 800536e:	eb43 0b01 	adc.w	fp, r3, r1
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4618      	mov	r0, r3
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	008b      	lsls	r3, r1, #2
 8005386:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800538a:	0082      	lsls	r2, r0, #2
 800538c:	4650      	mov	r0, sl
 800538e:	4659      	mov	r1, fp
 8005390:	f7fb fb64 	bl	8000a5c <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <UART_SetConfig+0x38c>)
 800539a:	fba3 1302 	umull	r1, r3, r3, r2
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	2164      	movs	r1, #100	; 0x64
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	3332      	adds	r3, #50	; 0x32
 80053ac:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <UART_SetConfig+0x38c>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	f003 020f 	and.w	r2, r3, #15
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4432      	add	r2, r6
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	377c      	adds	r7, #124	; 0x7c
 80053c4:	46bd      	mov	sp, r7
 80053c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ca:	bf00      	nop
 80053cc:	40011000 	.word	0x40011000
 80053d0:	40011400 	.word	0x40011400
 80053d4:	51eb851f 	.word	0x51eb851f

080053d8 <__errno>:
 80053d8:	4b01      	ldr	r3, [pc, #4]	; (80053e0 <__errno+0x8>)
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	2000000c 	.word	0x2000000c

080053e4 <__libc_init_array>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4d0d      	ldr	r5, [pc, #52]	; (800541c <__libc_init_array+0x38>)
 80053e8:	4c0d      	ldr	r4, [pc, #52]	; (8005420 <__libc_init_array+0x3c>)
 80053ea:	1b64      	subs	r4, r4, r5
 80053ec:	10a4      	asrs	r4, r4, #2
 80053ee:	2600      	movs	r6, #0
 80053f0:	42a6      	cmp	r6, r4
 80053f2:	d109      	bne.n	8005408 <__libc_init_array+0x24>
 80053f4:	4d0b      	ldr	r5, [pc, #44]	; (8005424 <__libc_init_array+0x40>)
 80053f6:	4c0c      	ldr	r4, [pc, #48]	; (8005428 <__libc_init_array+0x44>)
 80053f8:	f000 ffec 	bl	80063d4 <_init>
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	2600      	movs	r6, #0
 8005402:	42a6      	cmp	r6, r4
 8005404:	d105      	bne.n	8005412 <__libc_init_array+0x2e>
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	f855 3b04 	ldr.w	r3, [r5], #4
 800540c:	4798      	blx	r3
 800540e:	3601      	adds	r6, #1
 8005410:	e7ee      	b.n	80053f0 <__libc_init_array+0xc>
 8005412:	f855 3b04 	ldr.w	r3, [r5], #4
 8005416:	4798      	blx	r3
 8005418:	3601      	adds	r6, #1
 800541a:	e7f2      	b.n	8005402 <__libc_init_array+0x1e>
 800541c:	080064e8 	.word	0x080064e8
 8005420:	080064e8 	.word	0x080064e8
 8005424:	080064e8 	.word	0x080064e8
 8005428:	080064ec 	.word	0x080064ec

0800542c <memset>:
 800542c:	4402      	add	r2, r0
 800542e:	4603      	mov	r3, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	f803 1b01 	strb.w	r1, [r3], #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <iprintf>:
 800543c:	b40f      	push	{r0, r1, r2, r3}
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <iprintf+0x2c>)
 8005440:	b513      	push	{r0, r1, r4, lr}
 8005442:	681c      	ldr	r4, [r3, #0]
 8005444:	b124      	cbz	r4, 8005450 <iprintf+0x14>
 8005446:	69a3      	ldr	r3, [r4, #24]
 8005448:	b913      	cbnz	r3, 8005450 <iprintf+0x14>
 800544a:	4620      	mov	r0, r4
 800544c:	f000 fa5e 	bl	800590c <__sinit>
 8005450:	ab05      	add	r3, sp, #20
 8005452:	9a04      	ldr	r2, [sp, #16]
 8005454:	68a1      	ldr	r1, [r4, #8]
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fc2f 	bl	8005cbc <_vfiprintf_r>
 800545e:	b002      	add	sp, #8
 8005460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005464:	b004      	add	sp, #16
 8005466:	4770      	bx	lr
 8005468:	2000000c 	.word	0x2000000c

0800546c <_puts_r>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	460e      	mov	r6, r1
 8005470:	4605      	mov	r5, r0
 8005472:	b118      	cbz	r0, 800547c <_puts_r+0x10>
 8005474:	6983      	ldr	r3, [r0, #24]
 8005476:	b90b      	cbnz	r3, 800547c <_puts_r+0x10>
 8005478:	f000 fa48 	bl	800590c <__sinit>
 800547c:	69ab      	ldr	r3, [r5, #24]
 800547e:	68ac      	ldr	r4, [r5, #8]
 8005480:	b913      	cbnz	r3, 8005488 <_puts_r+0x1c>
 8005482:	4628      	mov	r0, r5
 8005484:	f000 fa42 	bl	800590c <__sinit>
 8005488:	4b2c      	ldr	r3, [pc, #176]	; (800553c <_puts_r+0xd0>)
 800548a:	429c      	cmp	r4, r3
 800548c:	d120      	bne.n	80054d0 <_puts_r+0x64>
 800548e:	686c      	ldr	r4, [r5, #4]
 8005490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005492:	07db      	lsls	r3, r3, #31
 8005494:	d405      	bmi.n	80054a2 <_puts_r+0x36>
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	0598      	lsls	r0, r3, #22
 800549a:	d402      	bmi.n	80054a2 <_puts_r+0x36>
 800549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549e:	f000 fad3 	bl	8005a48 <__retarget_lock_acquire_recursive>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	0719      	lsls	r1, r3, #28
 80054a6:	d51d      	bpl.n	80054e4 <_puts_r+0x78>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	b1db      	cbz	r3, 80054e4 <_puts_r+0x78>
 80054ac:	3e01      	subs	r6, #1
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054b4:	3b01      	subs	r3, #1
 80054b6:	60a3      	str	r3, [r4, #8]
 80054b8:	bb39      	cbnz	r1, 800550a <_puts_r+0x9e>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da38      	bge.n	8005530 <_puts_r+0xc4>
 80054be:	4622      	mov	r2, r4
 80054c0:	210a      	movs	r1, #10
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f848 	bl	8005558 <__swbuf_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d011      	beq.n	80054f0 <_puts_r+0x84>
 80054cc:	250a      	movs	r5, #10
 80054ce:	e011      	b.n	80054f4 <_puts_r+0x88>
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <_puts_r+0xd4>)
 80054d2:	429c      	cmp	r4, r3
 80054d4:	d101      	bne.n	80054da <_puts_r+0x6e>
 80054d6:	68ac      	ldr	r4, [r5, #8]
 80054d8:	e7da      	b.n	8005490 <_puts_r+0x24>
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <_puts_r+0xd8>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	bf08      	it	eq
 80054e0:	68ec      	ldreq	r4, [r5, #12]
 80054e2:	e7d5      	b.n	8005490 <_puts_r+0x24>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 f888 	bl	80055fc <__swsetup_r>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d0dd      	beq.n	80054ac <_puts_r+0x40>
 80054f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80054f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054f6:	07da      	lsls	r2, r3, #31
 80054f8:	d405      	bmi.n	8005506 <_puts_r+0x9a>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	059b      	lsls	r3, r3, #22
 80054fe:	d402      	bmi.n	8005506 <_puts_r+0x9a>
 8005500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005502:	f000 faa2 	bl	8005a4a <__retarget_lock_release_recursive>
 8005506:	4628      	mov	r0, r5
 8005508:	bd70      	pop	{r4, r5, r6, pc}
 800550a:	2b00      	cmp	r3, #0
 800550c:	da04      	bge.n	8005518 <_puts_r+0xac>
 800550e:	69a2      	ldr	r2, [r4, #24]
 8005510:	429a      	cmp	r2, r3
 8005512:	dc06      	bgt.n	8005522 <_puts_r+0xb6>
 8005514:	290a      	cmp	r1, #10
 8005516:	d004      	beq.n	8005522 <_puts_r+0xb6>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	6022      	str	r2, [r4, #0]
 800551e:	7019      	strb	r1, [r3, #0]
 8005520:	e7c5      	b.n	80054ae <_puts_r+0x42>
 8005522:	4622      	mov	r2, r4
 8005524:	4628      	mov	r0, r5
 8005526:	f000 f817 	bl	8005558 <__swbuf_r>
 800552a:	3001      	adds	r0, #1
 800552c:	d1bf      	bne.n	80054ae <_puts_r+0x42>
 800552e:	e7df      	b.n	80054f0 <_puts_r+0x84>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	250a      	movs	r5, #10
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	6022      	str	r2, [r4, #0]
 8005538:	701d      	strb	r5, [r3, #0]
 800553a:	e7db      	b.n	80054f4 <_puts_r+0x88>
 800553c:	0800646c 	.word	0x0800646c
 8005540:	0800648c 	.word	0x0800648c
 8005544:	0800644c 	.word	0x0800644c

08005548 <puts>:
 8005548:	4b02      	ldr	r3, [pc, #8]	; (8005554 <puts+0xc>)
 800554a:	4601      	mov	r1, r0
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	f7ff bf8d 	b.w	800546c <_puts_r>
 8005552:	bf00      	nop
 8005554:	2000000c 	.word	0x2000000c

08005558 <__swbuf_r>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	460e      	mov	r6, r1
 800555c:	4614      	mov	r4, r2
 800555e:	4605      	mov	r5, r0
 8005560:	b118      	cbz	r0, 800556a <__swbuf_r+0x12>
 8005562:	6983      	ldr	r3, [r0, #24]
 8005564:	b90b      	cbnz	r3, 800556a <__swbuf_r+0x12>
 8005566:	f000 f9d1 	bl	800590c <__sinit>
 800556a:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <__swbuf_r+0x98>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d12b      	bne.n	80055c8 <__swbuf_r+0x70>
 8005570:	686c      	ldr	r4, [r5, #4]
 8005572:	69a3      	ldr	r3, [r4, #24]
 8005574:	60a3      	str	r3, [r4, #8]
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	071a      	lsls	r2, r3, #28
 800557a:	d52f      	bpl.n	80055dc <__swbuf_r+0x84>
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	b36b      	cbz	r3, 80055dc <__swbuf_r+0x84>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	6820      	ldr	r0, [r4, #0]
 8005584:	1ac0      	subs	r0, r0, r3
 8005586:	6963      	ldr	r3, [r4, #20]
 8005588:	b2f6      	uxtb	r6, r6
 800558a:	4283      	cmp	r3, r0
 800558c:	4637      	mov	r7, r6
 800558e:	dc04      	bgt.n	800559a <__swbuf_r+0x42>
 8005590:	4621      	mov	r1, r4
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f926 	bl	80057e4 <_fflush_r>
 8005598:	bb30      	cbnz	r0, 80055e8 <__swbuf_r+0x90>
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	3b01      	subs	r3, #1
 800559e:	60a3      	str	r3, [r4, #8]
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	6022      	str	r2, [r4, #0]
 80055a6:	701e      	strb	r6, [r3, #0]
 80055a8:	6963      	ldr	r3, [r4, #20]
 80055aa:	3001      	adds	r0, #1
 80055ac:	4283      	cmp	r3, r0
 80055ae:	d004      	beq.n	80055ba <__swbuf_r+0x62>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	07db      	lsls	r3, r3, #31
 80055b4:	d506      	bpl.n	80055c4 <__swbuf_r+0x6c>
 80055b6:	2e0a      	cmp	r6, #10
 80055b8:	d104      	bne.n	80055c4 <__swbuf_r+0x6c>
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 f911 	bl	80057e4 <_fflush_r>
 80055c2:	b988      	cbnz	r0, 80055e8 <__swbuf_r+0x90>
 80055c4:	4638      	mov	r0, r7
 80055c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <__swbuf_r+0x9c>)
 80055ca:	429c      	cmp	r4, r3
 80055cc:	d101      	bne.n	80055d2 <__swbuf_r+0x7a>
 80055ce:	68ac      	ldr	r4, [r5, #8]
 80055d0:	e7cf      	b.n	8005572 <__swbuf_r+0x1a>
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <__swbuf_r+0xa0>)
 80055d4:	429c      	cmp	r4, r3
 80055d6:	bf08      	it	eq
 80055d8:	68ec      	ldreq	r4, [r5, #12]
 80055da:	e7ca      	b.n	8005572 <__swbuf_r+0x1a>
 80055dc:	4621      	mov	r1, r4
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f80c 	bl	80055fc <__swsetup_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d0cb      	beq.n	8005580 <__swbuf_r+0x28>
 80055e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80055ec:	e7ea      	b.n	80055c4 <__swbuf_r+0x6c>
 80055ee:	bf00      	nop
 80055f0:	0800646c 	.word	0x0800646c
 80055f4:	0800648c 	.word	0x0800648c
 80055f8:	0800644c 	.word	0x0800644c

080055fc <__swsetup_r>:
 80055fc:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <__swsetup_r+0xcc>)
 80055fe:	b570      	push	{r4, r5, r6, lr}
 8005600:	681d      	ldr	r5, [r3, #0]
 8005602:	4606      	mov	r6, r0
 8005604:	460c      	mov	r4, r1
 8005606:	b125      	cbz	r5, 8005612 <__swsetup_r+0x16>
 8005608:	69ab      	ldr	r3, [r5, #24]
 800560a:	b913      	cbnz	r3, 8005612 <__swsetup_r+0x16>
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f97d 	bl	800590c <__sinit>
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <__swsetup_r+0xd0>)
 8005614:	429c      	cmp	r4, r3
 8005616:	d10f      	bne.n	8005638 <__swsetup_r+0x3c>
 8005618:	686c      	ldr	r4, [r5, #4]
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005620:	0719      	lsls	r1, r3, #28
 8005622:	d42c      	bmi.n	800567e <__swsetup_r+0x82>
 8005624:	06dd      	lsls	r5, r3, #27
 8005626:	d411      	bmi.n	800564c <__swsetup_r+0x50>
 8005628:	2309      	movs	r3, #9
 800562a:	6033      	str	r3, [r6, #0]
 800562c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005636:	e03e      	b.n	80056b6 <__swsetup_r+0xba>
 8005638:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <__swsetup_r+0xd4>)
 800563a:	429c      	cmp	r4, r3
 800563c:	d101      	bne.n	8005642 <__swsetup_r+0x46>
 800563e:	68ac      	ldr	r4, [r5, #8]
 8005640:	e7eb      	b.n	800561a <__swsetup_r+0x1e>
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <__swsetup_r+0xd8>)
 8005644:	429c      	cmp	r4, r3
 8005646:	bf08      	it	eq
 8005648:	68ec      	ldreq	r4, [r5, #12]
 800564a:	e7e6      	b.n	800561a <__swsetup_r+0x1e>
 800564c:	0758      	lsls	r0, r3, #29
 800564e:	d512      	bpl.n	8005676 <__swsetup_r+0x7a>
 8005650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005652:	b141      	cbz	r1, 8005666 <__swsetup_r+0x6a>
 8005654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005658:	4299      	cmp	r1, r3
 800565a:	d002      	beq.n	8005662 <__swsetup_r+0x66>
 800565c:	4630      	mov	r0, r6
 800565e:	f000 fa59 	bl	8005b14 <_free_r>
 8005662:	2300      	movs	r3, #0
 8005664:	6363      	str	r3, [r4, #52]	; 0x34
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	2300      	movs	r3, #0
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	f043 0308 	orr.w	r3, r3, #8
 800567c:	81a3      	strh	r3, [r4, #12]
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	b94b      	cbnz	r3, 8005696 <__swsetup_r+0x9a>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d003      	beq.n	8005696 <__swsetup_r+0x9a>
 800568e:	4621      	mov	r1, r4
 8005690:	4630      	mov	r0, r6
 8005692:	f000 f9ff 	bl	8005a94 <__smakebuf_r>
 8005696:	89a0      	ldrh	r0, [r4, #12]
 8005698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800569c:	f010 0301 	ands.w	r3, r0, #1
 80056a0:	d00a      	beq.n	80056b8 <__swsetup_r+0xbc>
 80056a2:	2300      	movs	r3, #0
 80056a4:	60a3      	str	r3, [r4, #8]
 80056a6:	6963      	ldr	r3, [r4, #20]
 80056a8:	425b      	negs	r3, r3
 80056aa:	61a3      	str	r3, [r4, #24]
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	b943      	cbnz	r3, 80056c2 <__swsetup_r+0xc6>
 80056b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056b4:	d1ba      	bne.n	800562c <__swsetup_r+0x30>
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	0781      	lsls	r1, r0, #30
 80056ba:	bf58      	it	pl
 80056bc:	6963      	ldrpl	r3, [r4, #20]
 80056be:	60a3      	str	r3, [r4, #8]
 80056c0:	e7f4      	b.n	80056ac <__swsetup_r+0xb0>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e7f7      	b.n	80056b6 <__swsetup_r+0xba>
 80056c6:	bf00      	nop
 80056c8:	2000000c 	.word	0x2000000c
 80056cc:	0800646c 	.word	0x0800646c
 80056d0:	0800648c 	.word	0x0800648c
 80056d4:	0800644c 	.word	0x0800644c

080056d8 <__sflush_r>:
 80056d8:	898a      	ldrh	r2, [r1, #12]
 80056da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	0710      	lsls	r0, r2, #28
 80056e2:	460c      	mov	r4, r1
 80056e4:	d458      	bmi.n	8005798 <__sflush_r+0xc0>
 80056e6:	684b      	ldr	r3, [r1, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dc05      	bgt.n	80056f8 <__sflush_r+0x20>
 80056ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dc02      	bgt.n	80056f8 <__sflush_r+0x20>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d0f9      	beq.n	80056f2 <__sflush_r+0x1a>
 80056fe:	2300      	movs	r3, #0
 8005700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005704:	682f      	ldr	r7, [r5, #0]
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	d032      	beq.n	8005770 <__sflush_r+0x98>
 800570a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	075a      	lsls	r2, r3, #29
 8005710:	d505      	bpl.n	800571e <__sflush_r+0x46>
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	1ac0      	subs	r0, r0, r3
 8005716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005718:	b10b      	cbz	r3, 800571e <__sflush_r+0x46>
 800571a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800571c:	1ac0      	subs	r0, r0, r3
 800571e:	2300      	movs	r3, #0
 8005720:	4602      	mov	r2, r0
 8005722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005724:	6a21      	ldr	r1, [r4, #32]
 8005726:	4628      	mov	r0, r5
 8005728:	47b0      	blx	r6
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	d106      	bne.n	800573e <__sflush_r+0x66>
 8005730:	6829      	ldr	r1, [r5, #0]
 8005732:	291d      	cmp	r1, #29
 8005734:	d82c      	bhi.n	8005790 <__sflush_r+0xb8>
 8005736:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <__sflush_r+0x108>)
 8005738:	40ca      	lsrs	r2, r1
 800573a:	07d6      	lsls	r6, r2, #31
 800573c:	d528      	bpl.n	8005790 <__sflush_r+0xb8>
 800573e:	2200      	movs	r2, #0
 8005740:	6062      	str	r2, [r4, #4]
 8005742:	04d9      	lsls	r1, r3, #19
 8005744:	6922      	ldr	r2, [r4, #16]
 8005746:	6022      	str	r2, [r4, #0]
 8005748:	d504      	bpl.n	8005754 <__sflush_r+0x7c>
 800574a:	1c42      	adds	r2, r0, #1
 800574c:	d101      	bne.n	8005752 <__sflush_r+0x7a>
 800574e:	682b      	ldr	r3, [r5, #0]
 8005750:	b903      	cbnz	r3, 8005754 <__sflush_r+0x7c>
 8005752:	6560      	str	r0, [r4, #84]	; 0x54
 8005754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005756:	602f      	str	r7, [r5, #0]
 8005758:	2900      	cmp	r1, #0
 800575a:	d0ca      	beq.n	80056f2 <__sflush_r+0x1a>
 800575c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005760:	4299      	cmp	r1, r3
 8005762:	d002      	beq.n	800576a <__sflush_r+0x92>
 8005764:	4628      	mov	r0, r5
 8005766:	f000 f9d5 	bl	8005b14 <_free_r>
 800576a:	2000      	movs	r0, #0
 800576c:	6360      	str	r0, [r4, #52]	; 0x34
 800576e:	e7c1      	b.n	80056f4 <__sflush_r+0x1c>
 8005770:	6a21      	ldr	r1, [r4, #32]
 8005772:	2301      	movs	r3, #1
 8005774:	4628      	mov	r0, r5
 8005776:	47b0      	blx	r6
 8005778:	1c41      	adds	r1, r0, #1
 800577a:	d1c7      	bne.n	800570c <__sflush_r+0x34>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0c4      	beq.n	800570c <__sflush_r+0x34>
 8005782:	2b1d      	cmp	r3, #29
 8005784:	d001      	beq.n	800578a <__sflush_r+0xb2>
 8005786:	2b16      	cmp	r3, #22
 8005788:	d101      	bne.n	800578e <__sflush_r+0xb6>
 800578a:	602f      	str	r7, [r5, #0]
 800578c:	e7b1      	b.n	80056f2 <__sflush_r+0x1a>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005794:	81a3      	strh	r3, [r4, #12]
 8005796:	e7ad      	b.n	80056f4 <__sflush_r+0x1c>
 8005798:	690f      	ldr	r7, [r1, #16]
 800579a:	2f00      	cmp	r7, #0
 800579c:	d0a9      	beq.n	80056f2 <__sflush_r+0x1a>
 800579e:	0793      	lsls	r3, r2, #30
 80057a0:	680e      	ldr	r6, [r1, #0]
 80057a2:	bf08      	it	eq
 80057a4:	694b      	ldreq	r3, [r1, #20]
 80057a6:	600f      	str	r7, [r1, #0]
 80057a8:	bf18      	it	ne
 80057aa:	2300      	movne	r3, #0
 80057ac:	eba6 0807 	sub.w	r8, r6, r7
 80057b0:	608b      	str	r3, [r1, #8]
 80057b2:	f1b8 0f00 	cmp.w	r8, #0
 80057b6:	dd9c      	ble.n	80056f2 <__sflush_r+0x1a>
 80057b8:	6a21      	ldr	r1, [r4, #32]
 80057ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057bc:	4643      	mov	r3, r8
 80057be:	463a      	mov	r2, r7
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b0      	blx	r6
 80057c4:	2800      	cmp	r0, #0
 80057c6:	dc06      	bgt.n	80057d6 <__sflush_r+0xfe>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d4:	e78e      	b.n	80056f4 <__sflush_r+0x1c>
 80057d6:	4407      	add	r7, r0
 80057d8:	eba8 0800 	sub.w	r8, r8, r0
 80057dc:	e7e9      	b.n	80057b2 <__sflush_r+0xda>
 80057de:	bf00      	nop
 80057e0:	20400001 	.word	0x20400001

080057e4 <_fflush_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	690b      	ldr	r3, [r1, #16]
 80057e8:	4605      	mov	r5, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	b913      	cbnz	r3, 80057f4 <_fflush_r+0x10>
 80057ee:	2500      	movs	r5, #0
 80057f0:	4628      	mov	r0, r5
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	b118      	cbz	r0, 80057fe <_fflush_r+0x1a>
 80057f6:	6983      	ldr	r3, [r0, #24]
 80057f8:	b90b      	cbnz	r3, 80057fe <_fflush_r+0x1a>
 80057fa:	f000 f887 	bl	800590c <__sinit>
 80057fe:	4b14      	ldr	r3, [pc, #80]	; (8005850 <_fflush_r+0x6c>)
 8005800:	429c      	cmp	r4, r3
 8005802:	d11b      	bne.n	800583c <_fflush_r+0x58>
 8005804:	686c      	ldr	r4, [r5, #4]
 8005806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <_fflush_r+0xa>
 800580e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005810:	07d0      	lsls	r0, r2, #31
 8005812:	d404      	bmi.n	800581e <_fflush_r+0x3a>
 8005814:	0599      	lsls	r1, r3, #22
 8005816:	d402      	bmi.n	800581e <_fflush_r+0x3a>
 8005818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581a:	f000 f915 	bl	8005a48 <__retarget_lock_acquire_recursive>
 800581e:	4628      	mov	r0, r5
 8005820:	4621      	mov	r1, r4
 8005822:	f7ff ff59 	bl	80056d8 <__sflush_r>
 8005826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005828:	07da      	lsls	r2, r3, #31
 800582a:	4605      	mov	r5, r0
 800582c:	d4e0      	bmi.n	80057f0 <_fflush_r+0xc>
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	059b      	lsls	r3, r3, #22
 8005832:	d4dd      	bmi.n	80057f0 <_fflush_r+0xc>
 8005834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005836:	f000 f908 	bl	8005a4a <__retarget_lock_release_recursive>
 800583a:	e7d9      	b.n	80057f0 <_fflush_r+0xc>
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <_fflush_r+0x70>)
 800583e:	429c      	cmp	r4, r3
 8005840:	d101      	bne.n	8005846 <_fflush_r+0x62>
 8005842:	68ac      	ldr	r4, [r5, #8]
 8005844:	e7df      	b.n	8005806 <_fflush_r+0x22>
 8005846:	4b04      	ldr	r3, [pc, #16]	; (8005858 <_fflush_r+0x74>)
 8005848:	429c      	cmp	r4, r3
 800584a:	bf08      	it	eq
 800584c:	68ec      	ldreq	r4, [r5, #12]
 800584e:	e7da      	b.n	8005806 <_fflush_r+0x22>
 8005850:	0800646c 	.word	0x0800646c
 8005854:	0800648c 	.word	0x0800648c
 8005858:	0800644c 	.word	0x0800644c

0800585c <std>:
 800585c:	2300      	movs	r3, #0
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	e9c0 3300 	strd	r3, r3, [r0]
 8005866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586a:	6083      	str	r3, [r0, #8]
 800586c:	8181      	strh	r1, [r0, #12]
 800586e:	6643      	str	r3, [r0, #100]	; 0x64
 8005870:	81c2      	strh	r2, [r0, #14]
 8005872:	6183      	str	r3, [r0, #24]
 8005874:	4619      	mov	r1, r3
 8005876:	2208      	movs	r2, #8
 8005878:	305c      	adds	r0, #92	; 0x5c
 800587a:	f7ff fdd7 	bl	800542c <memset>
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <std+0x38>)
 8005880:	6263      	str	r3, [r4, #36]	; 0x24
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x3c>)
 8005884:	62a3      	str	r3, [r4, #40]	; 0x28
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x40>)
 8005888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <std+0x44>)
 800588c:	6224      	str	r4, [r4, #32]
 800588e:	6323      	str	r3, [r4, #48]	; 0x30
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop
 8005894:	08006265 	.word	0x08006265
 8005898:	08006287 	.word	0x08006287
 800589c:	080062bf 	.word	0x080062bf
 80058a0:	080062e3 	.word	0x080062e3

080058a4 <_cleanup_r>:
 80058a4:	4901      	ldr	r1, [pc, #4]	; (80058ac <_cleanup_r+0x8>)
 80058a6:	f000 b8af 	b.w	8005a08 <_fwalk_reent>
 80058aa:	bf00      	nop
 80058ac:	080057e5 	.word	0x080057e5

080058b0 <__sfmoreglue>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	1e4a      	subs	r2, r1, #1
 80058b4:	2568      	movs	r5, #104	; 0x68
 80058b6:	4355      	muls	r5, r2
 80058b8:	460e      	mov	r6, r1
 80058ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058be:	f000 f979 	bl	8005bb4 <_malloc_r>
 80058c2:	4604      	mov	r4, r0
 80058c4:	b140      	cbz	r0, 80058d8 <__sfmoreglue+0x28>
 80058c6:	2100      	movs	r1, #0
 80058c8:	e9c0 1600 	strd	r1, r6, [r0]
 80058cc:	300c      	adds	r0, #12
 80058ce:	60a0      	str	r0, [r4, #8]
 80058d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058d4:	f7ff fdaa 	bl	800542c <memset>
 80058d8:	4620      	mov	r0, r4
 80058da:	bd70      	pop	{r4, r5, r6, pc}

080058dc <__sfp_lock_acquire>:
 80058dc:	4801      	ldr	r0, [pc, #4]	; (80058e4 <__sfp_lock_acquire+0x8>)
 80058de:	f000 b8b3 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 80058e2:	bf00      	nop
 80058e4:	2000cc24 	.word	0x2000cc24

080058e8 <__sfp_lock_release>:
 80058e8:	4801      	ldr	r0, [pc, #4]	; (80058f0 <__sfp_lock_release+0x8>)
 80058ea:	f000 b8ae 	b.w	8005a4a <__retarget_lock_release_recursive>
 80058ee:	bf00      	nop
 80058f0:	2000cc24 	.word	0x2000cc24

080058f4 <__sinit_lock_acquire>:
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <__sinit_lock_acquire+0x8>)
 80058f6:	f000 b8a7 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 80058fa:	bf00      	nop
 80058fc:	2000cc1f 	.word	0x2000cc1f

08005900 <__sinit_lock_release>:
 8005900:	4801      	ldr	r0, [pc, #4]	; (8005908 <__sinit_lock_release+0x8>)
 8005902:	f000 b8a2 	b.w	8005a4a <__retarget_lock_release_recursive>
 8005906:	bf00      	nop
 8005908:	2000cc1f 	.word	0x2000cc1f

0800590c <__sinit>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	f7ff fff0 	bl	80058f4 <__sinit_lock_acquire>
 8005914:	69a3      	ldr	r3, [r4, #24]
 8005916:	b11b      	cbz	r3, 8005920 <__sinit+0x14>
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f7ff bff0 	b.w	8005900 <__sinit_lock_release>
 8005920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005924:	6523      	str	r3, [r4, #80]	; 0x50
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <__sinit+0x68>)
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <__sinit+0x6c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	62a2      	str	r2, [r4, #40]	; 0x28
 800592e:	42a3      	cmp	r3, r4
 8005930:	bf04      	itt	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	61a3      	streq	r3, [r4, #24]
 8005936:	4620      	mov	r0, r4
 8005938:	f000 f820 	bl	800597c <__sfp>
 800593c:	6060      	str	r0, [r4, #4]
 800593e:	4620      	mov	r0, r4
 8005940:	f000 f81c 	bl	800597c <__sfp>
 8005944:	60a0      	str	r0, [r4, #8]
 8005946:	4620      	mov	r0, r4
 8005948:	f000 f818 	bl	800597c <__sfp>
 800594c:	2200      	movs	r2, #0
 800594e:	60e0      	str	r0, [r4, #12]
 8005950:	2104      	movs	r1, #4
 8005952:	6860      	ldr	r0, [r4, #4]
 8005954:	f7ff ff82 	bl	800585c <std>
 8005958:	68a0      	ldr	r0, [r4, #8]
 800595a:	2201      	movs	r2, #1
 800595c:	2109      	movs	r1, #9
 800595e:	f7ff ff7d 	bl	800585c <std>
 8005962:	68e0      	ldr	r0, [r4, #12]
 8005964:	2202      	movs	r2, #2
 8005966:	2112      	movs	r1, #18
 8005968:	f7ff ff78 	bl	800585c <std>
 800596c:	2301      	movs	r3, #1
 800596e:	61a3      	str	r3, [r4, #24]
 8005970:	e7d2      	b.n	8005918 <__sinit+0xc>
 8005972:	bf00      	nop
 8005974:	08006448 	.word	0x08006448
 8005978:	080058a5 	.word	0x080058a5

0800597c <__sfp>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	4607      	mov	r7, r0
 8005980:	f7ff ffac 	bl	80058dc <__sfp_lock_acquire>
 8005984:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <__sfp+0x84>)
 8005986:	681e      	ldr	r6, [r3, #0]
 8005988:	69b3      	ldr	r3, [r6, #24]
 800598a:	b913      	cbnz	r3, 8005992 <__sfp+0x16>
 800598c:	4630      	mov	r0, r6
 800598e:	f7ff ffbd 	bl	800590c <__sinit>
 8005992:	3648      	adds	r6, #72	; 0x48
 8005994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005998:	3b01      	subs	r3, #1
 800599a:	d503      	bpl.n	80059a4 <__sfp+0x28>
 800599c:	6833      	ldr	r3, [r6, #0]
 800599e:	b30b      	cbz	r3, 80059e4 <__sfp+0x68>
 80059a0:	6836      	ldr	r6, [r6, #0]
 80059a2:	e7f7      	b.n	8005994 <__sfp+0x18>
 80059a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059a8:	b9d5      	cbnz	r5, 80059e0 <__sfp+0x64>
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <__sfp+0x88>)
 80059ac:	60e3      	str	r3, [r4, #12]
 80059ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059b2:	6665      	str	r5, [r4, #100]	; 0x64
 80059b4:	f000 f847 	bl	8005a46 <__retarget_lock_init_recursive>
 80059b8:	f7ff ff96 	bl	80058e8 <__sfp_lock_release>
 80059bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059c4:	6025      	str	r5, [r4, #0]
 80059c6:	61a5      	str	r5, [r4, #24]
 80059c8:	2208      	movs	r2, #8
 80059ca:	4629      	mov	r1, r5
 80059cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059d0:	f7ff fd2c 	bl	800542c <memset>
 80059d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059dc:	4620      	mov	r0, r4
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e0:	3468      	adds	r4, #104	; 0x68
 80059e2:	e7d9      	b.n	8005998 <__sfp+0x1c>
 80059e4:	2104      	movs	r1, #4
 80059e6:	4638      	mov	r0, r7
 80059e8:	f7ff ff62 	bl	80058b0 <__sfmoreglue>
 80059ec:	4604      	mov	r4, r0
 80059ee:	6030      	str	r0, [r6, #0]
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1d5      	bne.n	80059a0 <__sfp+0x24>
 80059f4:	f7ff ff78 	bl	80058e8 <__sfp_lock_release>
 80059f8:	230c      	movs	r3, #12
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	e7ee      	b.n	80059dc <__sfp+0x60>
 80059fe:	bf00      	nop
 8005a00:	08006448 	.word	0x08006448
 8005a04:	ffff0001 	.word	0xffff0001

08005a08 <_fwalk_reent>:
 8005a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	4688      	mov	r8, r1
 8005a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a14:	2700      	movs	r7, #0
 8005a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8005a1e:	d505      	bpl.n	8005a2c <_fwalk_reent+0x24>
 8005a20:	6824      	ldr	r4, [r4, #0]
 8005a22:	2c00      	cmp	r4, #0
 8005a24:	d1f7      	bne.n	8005a16 <_fwalk_reent+0xe>
 8005a26:	4638      	mov	r0, r7
 8005a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2c:	89ab      	ldrh	r3, [r5, #12]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d907      	bls.n	8005a42 <_fwalk_reent+0x3a>
 8005a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a36:	3301      	adds	r3, #1
 8005a38:	d003      	beq.n	8005a42 <_fwalk_reent+0x3a>
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	47c0      	blx	r8
 8005a40:	4307      	orrs	r7, r0
 8005a42:	3568      	adds	r5, #104	; 0x68
 8005a44:	e7e9      	b.n	8005a1a <_fwalk_reent+0x12>

08005a46 <__retarget_lock_init_recursive>:
 8005a46:	4770      	bx	lr

08005a48 <__retarget_lock_acquire_recursive>:
 8005a48:	4770      	bx	lr

08005a4a <__retarget_lock_release_recursive>:
 8005a4a:	4770      	bx	lr

08005a4c <__swhatbuf_r>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	460e      	mov	r6, r1
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	2900      	cmp	r1, #0
 8005a56:	b096      	sub	sp, #88	; 0x58
 8005a58:	4614      	mov	r4, r2
 8005a5a:	461d      	mov	r5, r3
 8005a5c:	da07      	bge.n	8005a6e <__swhatbuf_r+0x22>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	89b3      	ldrh	r3, [r6, #12]
 8005a64:	061a      	lsls	r2, r3, #24
 8005a66:	d410      	bmi.n	8005a8a <__swhatbuf_r+0x3e>
 8005a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6c:	e00e      	b.n	8005a8c <__swhatbuf_r+0x40>
 8005a6e:	466a      	mov	r2, sp
 8005a70:	f000 fc5e 	bl	8006330 <_fstat_r>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	dbf2      	blt.n	8005a5e <__swhatbuf_r+0x12>
 8005a78:	9a01      	ldr	r2, [sp, #4]
 8005a7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a82:	425a      	negs	r2, r3
 8005a84:	415a      	adcs	r2, r3
 8005a86:	602a      	str	r2, [r5, #0]
 8005a88:	e7ee      	b.n	8005a68 <__swhatbuf_r+0x1c>
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	b016      	add	sp, #88	; 0x58
 8005a92:	bd70      	pop	{r4, r5, r6, pc}

08005a94 <__smakebuf_r>:
 8005a94:	898b      	ldrh	r3, [r1, #12]
 8005a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a98:	079d      	lsls	r5, r3, #30
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	d507      	bpl.n	8005ab0 <__smakebuf_r+0x1c>
 8005aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	6123      	str	r3, [r4, #16]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	6163      	str	r3, [r4, #20]
 8005aac:	b002      	add	sp, #8
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	ab01      	add	r3, sp, #4
 8005ab2:	466a      	mov	r2, sp
 8005ab4:	f7ff ffca 	bl	8005a4c <__swhatbuf_r>
 8005ab8:	9900      	ldr	r1, [sp, #0]
 8005aba:	4605      	mov	r5, r0
 8005abc:	4630      	mov	r0, r6
 8005abe:	f000 f879 	bl	8005bb4 <_malloc_r>
 8005ac2:	b948      	cbnz	r0, 8005ad8 <__smakebuf_r+0x44>
 8005ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac8:	059a      	lsls	r2, r3, #22
 8005aca:	d4ef      	bmi.n	8005aac <__smakebuf_r+0x18>
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	e7e3      	b.n	8005aa0 <__smakebuf_r+0xc>
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <__smakebuf_r+0x7c>)
 8005ada:	62b3      	str	r3, [r6, #40]	; 0x28
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	6020      	str	r0, [r4, #0]
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	9b00      	ldr	r3, [sp, #0]
 8005ae8:	6163      	str	r3, [r4, #20]
 8005aea:	9b01      	ldr	r3, [sp, #4]
 8005aec:	6120      	str	r0, [r4, #16]
 8005aee:	b15b      	cbz	r3, 8005b08 <__smakebuf_r+0x74>
 8005af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af4:	4630      	mov	r0, r6
 8005af6:	f000 fc2d 	bl	8006354 <_isatty_r>
 8005afa:	b128      	cbz	r0, 8005b08 <__smakebuf_r+0x74>
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	89a0      	ldrh	r0, [r4, #12]
 8005b0a:	4305      	orrs	r5, r0
 8005b0c:	81a5      	strh	r5, [r4, #12]
 8005b0e:	e7cd      	b.n	8005aac <__smakebuf_r+0x18>
 8005b10:	080058a5 	.word	0x080058a5

08005b14 <_free_r>:
 8005b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d048      	beq.n	8005bac <_free_r+0x98>
 8005b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1e:	9001      	str	r0, [sp, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f1a1 0404 	sub.w	r4, r1, #4
 8005b26:	bfb8      	it	lt
 8005b28:	18e4      	addlt	r4, r4, r3
 8005b2a:	f000 fc35 	bl	8006398 <__malloc_lock>
 8005b2e:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <_free_r+0x9c>)
 8005b30:	9801      	ldr	r0, [sp, #4]
 8005b32:	6813      	ldr	r3, [r2, #0]
 8005b34:	4615      	mov	r5, r2
 8005b36:	b933      	cbnz	r3, 8005b46 <_free_r+0x32>
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	6014      	str	r4, [r2, #0]
 8005b3c:	b003      	add	sp, #12
 8005b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b42:	f000 bc2f 	b.w	80063a4 <__malloc_unlock>
 8005b46:	42a3      	cmp	r3, r4
 8005b48:	d90b      	bls.n	8005b62 <_free_r+0x4e>
 8005b4a:	6821      	ldr	r1, [r4, #0]
 8005b4c:	1862      	adds	r2, r4, r1
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	bf04      	itt	eq
 8005b52:	681a      	ldreq	r2, [r3, #0]
 8005b54:	685b      	ldreq	r3, [r3, #4]
 8005b56:	6063      	str	r3, [r4, #4]
 8005b58:	bf04      	itt	eq
 8005b5a:	1852      	addeq	r2, r2, r1
 8005b5c:	6022      	streq	r2, [r4, #0]
 8005b5e:	602c      	str	r4, [r5, #0]
 8005b60:	e7ec      	b.n	8005b3c <_free_r+0x28>
 8005b62:	461a      	mov	r2, r3
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	b10b      	cbz	r3, 8005b6c <_free_r+0x58>
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d9fa      	bls.n	8005b62 <_free_r+0x4e>
 8005b6c:	6811      	ldr	r1, [r2, #0]
 8005b6e:	1855      	adds	r5, r2, r1
 8005b70:	42a5      	cmp	r5, r4
 8005b72:	d10b      	bne.n	8005b8c <_free_r+0x78>
 8005b74:	6824      	ldr	r4, [r4, #0]
 8005b76:	4421      	add	r1, r4
 8005b78:	1854      	adds	r4, r2, r1
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	6011      	str	r1, [r2, #0]
 8005b7e:	d1dd      	bne.n	8005b3c <_free_r+0x28>
 8005b80:	681c      	ldr	r4, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	6053      	str	r3, [r2, #4]
 8005b86:	4421      	add	r1, r4
 8005b88:	6011      	str	r1, [r2, #0]
 8005b8a:	e7d7      	b.n	8005b3c <_free_r+0x28>
 8005b8c:	d902      	bls.n	8005b94 <_free_r+0x80>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	6003      	str	r3, [r0, #0]
 8005b92:	e7d3      	b.n	8005b3c <_free_r+0x28>
 8005b94:	6825      	ldr	r5, [r4, #0]
 8005b96:	1961      	adds	r1, r4, r5
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf04      	itt	eq
 8005b9c:	6819      	ldreq	r1, [r3, #0]
 8005b9e:	685b      	ldreq	r3, [r3, #4]
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	bf04      	itt	eq
 8005ba4:	1949      	addeq	r1, r1, r5
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	6054      	str	r4, [r2, #4]
 8005baa:	e7c7      	b.n	8005b3c <_free_r+0x28>
 8005bac:	b003      	add	sp, #12
 8005bae:	bd30      	pop	{r4, r5, pc}
 8005bb0:	200000a0 	.word	0x200000a0

08005bb4 <_malloc_r>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	1ccd      	adds	r5, r1, #3
 8005bb8:	f025 0503 	bic.w	r5, r5, #3
 8005bbc:	3508      	adds	r5, #8
 8005bbe:	2d0c      	cmp	r5, #12
 8005bc0:	bf38      	it	cc
 8005bc2:	250c      	movcc	r5, #12
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	db01      	blt.n	8005bce <_malloc_r+0x1a>
 8005bca:	42a9      	cmp	r1, r5
 8005bcc:	d903      	bls.n	8005bd6 <_malloc_r+0x22>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd6:	f000 fbdf 	bl	8006398 <__malloc_lock>
 8005bda:	4921      	ldr	r1, [pc, #132]	; (8005c60 <_malloc_r+0xac>)
 8005bdc:	680a      	ldr	r2, [r1, #0]
 8005bde:	4614      	mov	r4, r2
 8005be0:	b99c      	cbnz	r4, 8005c0a <_malloc_r+0x56>
 8005be2:	4f20      	ldr	r7, [pc, #128]	; (8005c64 <_malloc_r+0xb0>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	b923      	cbnz	r3, 8005bf2 <_malloc_r+0x3e>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 fb2a 	bl	8006244 <_sbrk_r>
 8005bf0:	6038      	str	r0, [r7, #0]
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f000 fb25 	bl	8006244 <_sbrk_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d123      	bne.n	8005c46 <_malloc_r+0x92>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	4630      	mov	r0, r6
 8005c04:	f000 fbce 	bl	80063a4 <__malloc_unlock>
 8005c08:	e7e3      	b.n	8005bd2 <_malloc_r+0x1e>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	1b5b      	subs	r3, r3, r5
 8005c0e:	d417      	bmi.n	8005c40 <_malloc_r+0x8c>
 8005c10:	2b0b      	cmp	r3, #11
 8005c12:	d903      	bls.n	8005c1c <_malloc_r+0x68>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	441c      	add	r4, r3
 8005c18:	6025      	str	r5, [r4, #0]
 8005c1a:	e004      	b.n	8005c26 <_malloc_r+0x72>
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	42a2      	cmp	r2, r4
 8005c20:	bf0c      	ite	eq
 8005c22:	600b      	streq	r3, [r1, #0]
 8005c24:	6053      	strne	r3, [r2, #4]
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 fbbc 	bl	80063a4 <__malloc_unlock>
 8005c2c:	f104 000b 	add.w	r0, r4, #11
 8005c30:	1d23      	adds	r3, r4, #4
 8005c32:	f020 0007 	bic.w	r0, r0, #7
 8005c36:	1ac2      	subs	r2, r0, r3
 8005c38:	d0cc      	beq.n	8005bd4 <_malloc_r+0x20>
 8005c3a:	1a1b      	subs	r3, r3, r0
 8005c3c:	50a3      	str	r3, [r4, r2]
 8005c3e:	e7c9      	b.n	8005bd4 <_malloc_r+0x20>
 8005c40:	4622      	mov	r2, r4
 8005c42:	6864      	ldr	r4, [r4, #4]
 8005c44:	e7cc      	b.n	8005be0 <_malloc_r+0x2c>
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d0e3      	beq.n	8005c18 <_malloc_r+0x64>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 faf6 	bl	8006244 <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d1dd      	bne.n	8005c18 <_malloc_r+0x64>
 8005c5c:	e7cf      	b.n	8005bfe <_malloc_r+0x4a>
 8005c5e:	bf00      	nop
 8005c60:	200000a0 	.word	0x200000a0
 8005c64:	200000a4 	.word	0x200000a4

08005c68 <__sfputc_r>:
 8005c68:	6893      	ldr	r3, [r2, #8]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	b410      	push	{r4}
 8005c70:	6093      	str	r3, [r2, #8]
 8005c72:	da08      	bge.n	8005c86 <__sfputc_r+0x1e>
 8005c74:	6994      	ldr	r4, [r2, #24]
 8005c76:	42a3      	cmp	r3, r4
 8005c78:	db01      	blt.n	8005c7e <__sfputc_r+0x16>
 8005c7a:	290a      	cmp	r1, #10
 8005c7c:	d103      	bne.n	8005c86 <__sfputc_r+0x1e>
 8005c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c82:	f7ff bc69 	b.w	8005558 <__swbuf_r>
 8005c86:	6813      	ldr	r3, [r2, #0]
 8005c88:	1c58      	adds	r0, r3, #1
 8005c8a:	6010      	str	r0, [r2, #0]
 8005c8c:	7019      	strb	r1, [r3, #0]
 8005c8e:	4608      	mov	r0, r1
 8005c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <__sfputs_r>:
 8005c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c98:	4606      	mov	r6, r0
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	18d5      	adds	r5, r2, r3
 8005ca0:	42ac      	cmp	r4, r5
 8005ca2:	d101      	bne.n	8005ca8 <__sfputs_r+0x12>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e007      	b.n	8005cb8 <__sfputs_r+0x22>
 8005ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cac:	463a      	mov	r2, r7
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f7ff ffda 	bl	8005c68 <__sfputc_r>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d1f3      	bne.n	8005ca0 <__sfputs_r+0xa>
 8005cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cbc <_vfiprintf_r>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	b09d      	sub	sp, #116	; 0x74
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	4698      	mov	r8, r3
 8005cc8:	4606      	mov	r6, r0
 8005cca:	b118      	cbz	r0, 8005cd4 <_vfiprintf_r+0x18>
 8005ccc:	6983      	ldr	r3, [r0, #24]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <_vfiprintf_r+0x18>
 8005cd0:	f7ff fe1c 	bl	800590c <__sinit>
 8005cd4:	4b89      	ldr	r3, [pc, #548]	; (8005efc <_vfiprintf_r+0x240>)
 8005cd6:	429d      	cmp	r5, r3
 8005cd8:	d11b      	bne.n	8005d12 <_vfiprintf_r+0x56>
 8005cda:	6875      	ldr	r5, [r6, #4]
 8005cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	d405      	bmi.n	8005cee <_vfiprintf_r+0x32>
 8005ce2:	89ab      	ldrh	r3, [r5, #12]
 8005ce4:	059a      	lsls	r2, r3, #22
 8005ce6:	d402      	bmi.n	8005cee <_vfiprintf_r+0x32>
 8005ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cea:	f7ff fead 	bl	8005a48 <__retarget_lock_acquire_recursive>
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	071b      	lsls	r3, r3, #28
 8005cf2:	d501      	bpl.n	8005cf8 <_vfiprintf_r+0x3c>
 8005cf4:	692b      	ldr	r3, [r5, #16]
 8005cf6:	b9eb      	cbnz	r3, 8005d34 <_vfiprintf_r+0x78>
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff fc7e 	bl	80055fc <__swsetup_r>
 8005d00:	b1c0      	cbz	r0, 8005d34 <_vfiprintf_r+0x78>
 8005d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d04:	07dc      	lsls	r4, r3, #31
 8005d06:	d50e      	bpl.n	8005d26 <_vfiprintf_r+0x6a>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d0c:	b01d      	add	sp, #116	; 0x74
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <_vfiprintf_r+0x244>)
 8005d14:	429d      	cmp	r5, r3
 8005d16:	d101      	bne.n	8005d1c <_vfiprintf_r+0x60>
 8005d18:	68b5      	ldr	r5, [r6, #8]
 8005d1a:	e7df      	b.n	8005cdc <_vfiprintf_r+0x20>
 8005d1c:	4b79      	ldr	r3, [pc, #484]	; (8005f04 <_vfiprintf_r+0x248>)
 8005d1e:	429d      	cmp	r5, r3
 8005d20:	bf08      	it	eq
 8005d22:	68f5      	ldreq	r5, [r6, #12]
 8005d24:	e7da      	b.n	8005cdc <_vfiprintf_r+0x20>
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	0598      	lsls	r0, r3, #22
 8005d2a:	d4ed      	bmi.n	8005d08 <_vfiprintf_r+0x4c>
 8005d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d2e:	f7ff fe8c 	bl	8005a4a <__retarget_lock_release_recursive>
 8005d32:	e7e9      	b.n	8005d08 <_vfiprintf_r+0x4c>
 8005d34:	2300      	movs	r3, #0
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	2320      	movs	r3, #32
 8005d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d42:	2330      	movs	r3, #48	; 0x30
 8005d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f08 <_vfiprintf_r+0x24c>
 8005d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d4c:	f04f 0901 	mov.w	r9, #1
 8005d50:	4623      	mov	r3, r4
 8005d52:	469a      	mov	sl, r3
 8005d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d58:	b10a      	cbz	r2, 8005d5e <_vfiprintf_r+0xa2>
 8005d5a:	2a25      	cmp	r2, #37	; 0x25
 8005d5c:	d1f9      	bne.n	8005d52 <_vfiprintf_r+0x96>
 8005d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d62:	d00b      	beq.n	8005d7c <_vfiprintf_r+0xc0>
 8005d64:	465b      	mov	r3, fp
 8005d66:	4622      	mov	r2, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ff93 	bl	8005c96 <__sfputs_r>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f000 80aa 	beq.w	8005eca <_vfiprintf_r+0x20e>
 8005d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d78:	445a      	add	r2, fp
 8005d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80a2 	beq.w	8005eca <_vfiprintf_r+0x20e>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d90:	f10a 0a01 	add.w	sl, sl, #1
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	9307      	str	r3, [sp, #28]
 8005d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d9e:	4654      	mov	r4, sl
 8005da0:	2205      	movs	r2, #5
 8005da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da6:	4858      	ldr	r0, [pc, #352]	; (8005f08 <_vfiprintf_r+0x24c>)
 8005da8:	f7fa fa1a 	bl	80001e0 <memchr>
 8005dac:	9a04      	ldr	r2, [sp, #16]
 8005dae:	b9d8      	cbnz	r0, 8005de8 <_vfiprintf_r+0x12c>
 8005db0:	06d1      	lsls	r1, r2, #27
 8005db2:	bf44      	itt	mi
 8005db4:	2320      	movmi	r3, #32
 8005db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dba:	0713      	lsls	r3, r2, #28
 8005dbc:	bf44      	itt	mi
 8005dbe:	232b      	movmi	r3, #43	; 0x2b
 8005dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dca:	d015      	beq.n	8005df8 <_vfiprintf_r+0x13c>
 8005dcc:	9a07      	ldr	r2, [sp, #28]
 8005dce:	4654      	mov	r4, sl
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f04f 0c0a 	mov.w	ip, #10
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ddc:	3b30      	subs	r3, #48	; 0x30
 8005dde:	2b09      	cmp	r3, #9
 8005de0:	d94e      	bls.n	8005e80 <_vfiprintf_r+0x1c4>
 8005de2:	b1b0      	cbz	r0, 8005e12 <_vfiprintf_r+0x156>
 8005de4:	9207      	str	r2, [sp, #28]
 8005de6:	e014      	b.n	8005e12 <_vfiprintf_r+0x156>
 8005de8:	eba0 0308 	sub.w	r3, r0, r8
 8005dec:	fa09 f303 	lsl.w	r3, r9, r3
 8005df0:	4313      	orrs	r3, r2
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	46a2      	mov	sl, r4
 8005df6:	e7d2      	b.n	8005d9e <_vfiprintf_r+0xe2>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	1d19      	adds	r1, r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	9103      	str	r1, [sp, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfbb      	ittet	lt
 8005e04:	425b      	neglt	r3, r3
 8005e06:	f042 0202 	orrlt.w	r2, r2, #2
 8005e0a:	9307      	strge	r3, [sp, #28]
 8005e0c:	9307      	strlt	r3, [sp, #28]
 8005e0e:	bfb8      	it	lt
 8005e10:	9204      	strlt	r2, [sp, #16]
 8005e12:	7823      	ldrb	r3, [r4, #0]
 8005e14:	2b2e      	cmp	r3, #46	; 0x2e
 8005e16:	d10c      	bne.n	8005e32 <_vfiprintf_r+0x176>
 8005e18:	7863      	ldrb	r3, [r4, #1]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d135      	bne.n	8005e8a <_vfiprintf_r+0x1ce>
 8005e1e:	9b03      	ldr	r3, [sp, #12]
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	9203      	str	r2, [sp, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfb8      	it	lt
 8005e2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e2e:	3402      	adds	r4, #2
 8005e30:	9305      	str	r3, [sp, #20]
 8005e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f18 <_vfiprintf_r+0x25c>
 8005e36:	7821      	ldrb	r1, [r4, #0]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	f7fa f9d0 	bl	80001e0 <memchr>
 8005e40:	b140      	cbz	r0, 8005e54 <_vfiprintf_r+0x198>
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	eba0 000a 	sub.w	r0, r0, sl
 8005e48:	fa03 f000 	lsl.w	r0, r3, r0
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	4303      	orrs	r3, r0
 8005e50:	3401      	adds	r4, #1
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e58:	482c      	ldr	r0, [pc, #176]	; (8005f0c <_vfiprintf_r+0x250>)
 8005e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e5e:	2206      	movs	r2, #6
 8005e60:	f7fa f9be 	bl	80001e0 <memchr>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d03f      	beq.n	8005ee8 <_vfiprintf_r+0x22c>
 8005e68:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <_vfiprintf_r+0x254>)
 8005e6a:	bb1b      	cbnz	r3, 8005eb4 <_vfiprintf_r+0x1f8>
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	3307      	adds	r3, #7
 8005e70:	f023 0307 	bic.w	r3, r3, #7
 8005e74:	3308      	adds	r3, #8
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7a:	443b      	add	r3, r7
 8005e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7e:	e767      	b.n	8005d50 <_vfiprintf_r+0x94>
 8005e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e84:	460c      	mov	r4, r1
 8005e86:	2001      	movs	r0, #1
 8005e88:	e7a5      	b.n	8005dd6 <_vfiprintf_r+0x11a>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	3401      	adds	r4, #1
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	4619      	mov	r1, r3
 8005e92:	f04f 0c0a 	mov.w	ip, #10
 8005e96:	4620      	mov	r0, r4
 8005e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e9c:	3a30      	subs	r2, #48	; 0x30
 8005e9e:	2a09      	cmp	r2, #9
 8005ea0:	d903      	bls.n	8005eaa <_vfiprintf_r+0x1ee>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0c5      	beq.n	8005e32 <_vfiprintf_r+0x176>
 8005ea6:	9105      	str	r1, [sp, #20]
 8005ea8:	e7c3      	b.n	8005e32 <_vfiprintf_r+0x176>
 8005eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eae:	4604      	mov	r4, r0
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e7f0      	b.n	8005e96 <_vfiprintf_r+0x1da>
 8005eb4:	ab03      	add	r3, sp, #12
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <_vfiprintf_r+0x258>)
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f3af 8000 	nop.w
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	1c78      	adds	r0, r7, #1
 8005ec8:	d1d6      	bne.n	8005e78 <_vfiprintf_r+0x1bc>
 8005eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ecc:	07d9      	lsls	r1, r3, #31
 8005ece:	d405      	bmi.n	8005edc <_vfiprintf_r+0x220>
 8005ed0:	89ab      	ldrh	r3, [r5, #12]
 8005ed2:	059a      	lsls	r2, r3, #22
 8005ed4:	d402      	bmi.n	8005edc <_vfiprintf_r+0x220>
 8005ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ed8:	f7ff fdb7 	bl	8005a4a <__retarget_lock_release_recursive>
 8005edc:	89ab      	ldrh	r3, [r5, #12]
 8005ede:	065b      	lsls	r3, r3, #25
 8005ee0:	f53f af12 	bmi.w	8005d08 <_vfiprintf_r+0x4c>
 8005ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ee6:	e711      	b.n	8005d0c <_vfiprintf_r+0x50>
 8005ee8:	ab03      	add	r3, sp, #12
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	462a      	mov	r2, r5
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <_vfiprintf_r+0x258>)
 8005ef0:	a904      	add	r1, sp, #16
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f000 f880 	bl	8005ff8 <_printf_i>
 8005ef8:	e7e4      	b.n	8005ec4 <_vfiprintf_r+0x208>
 8005efa:	bf00      	nop
 8005efc:	0800646c 	.word	0x0800646c
 8005f00:	0800648c 	.word	0x0800648c
 8005f04:	0800644c 	.word	0x0800644c
 8005f08:	080064ac 	.word	0x080064ac
 8005f0c:	080064b6 	.word	0x080064b6
 8005f10:	00000000 	.word	0x00000000
 8005f14:	08005c97 	.word	0x08005c97
 8005f18:	080064b2 	.word	0x080064b2

08005f1c <_printf_common>:
 8005f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f20:	4616      	mov	r6, r2
 8005f22:	4699      	mov	r9, r3
 8005f24:	688a      	ldr	r2, [r1, #8]
 8005f26:	690b      	ldr	r3, [r1, #16]
 8005f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bfb8      	it	lt
 8005f30:	4613      	movlt	r3, r2
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f38:	4607      	mov	r7, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	b10a      	cbz	r2, 8005f42 <_printf_common+0x26>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	6033      	str	r3, [r6, #0]
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	0699      	lsls	r1, r3, #26
 8005f46:	bf42      	ittt	mi
 8005f48:	6833      	ldrmi	r3, [r6, #0]
 8005f4a:	3302      	addmi	r3, #2
 8005f4c:	6033      	strmi	r3, [r6, #0]
 8005f4e:	6825      	ldr	r5, [r4, #0]
 8005f50:	f015 0506 	ands.w	r5, r5, #6
 8005f54:	d106      	bne.n	8005f64 <_printf_common+0x48>
 8005f56:	f104 0a19 	add.w	sl, r4, #25
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	6832      	ldr	r2, [r6, #0]
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dc26      	bgt.n	8005fb2 <_printf_common+0x96>
 8005f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f68:	1e13      	subs	r3, r2, #0
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	bf18      	it	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	0692      	lsls	r2, r2, #26
 8005f72:	d42b      	bmi.n	8005fcc <_printf_common+0xb0>
 8005f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f78:	4649      	mov	r1, r9
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c0      	blx	r8
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d01e      	beq.n	8005fc0 <_printf_common+0xa4>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	68e5      	ldr	r5, [r4, #12]
 8005f86:	6832      	ldr	r2, [r6, #0]
 8005f88:	f003 0306 	and.w	r3, r3, #6
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	bf08      	it	eq
 8005f90:	1aad      	subeq	r5, r5, r2
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	6922      	ldr	r2, [r4, #16]
 8005f96:	bf0c      	ite	eq
 8005f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f9c:	2500      	movne	r5, #0
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	bfc4      	itt	gt
 8005fa2:	1a9b      	subgt	r3, r3, r2
 8005fa4:	18ed      	addgt	r5, r5, r3
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	341a      	adds	r4, #26
 8005faa:	42b5      	cmp	r5, r6
 8005fac:	d11a      	bne.n	8005fe4 <_printf_common+0xc8>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e008      	b.n	8005fc4 <_printf_common+0xa8>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4638      	mov	r0, r7
 8005fba:	47c0      	blx	r8
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d103      	bne.n	8005fc8 <_printf_common+0xac>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc8:	3501      	adds	r5, #1
 8005fca:	e7c6      	b.n	8005f5a <_printf_common+0x3e>
 8005fcc:	18e1      	adds	r1, r4, r3
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	2030      	movs	r0, #48	; 0x30
 8005fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fd6:	4422      	add	r2, r4
 8005fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	e7c7      	b.n	8005f74 <_printf_common+0x58>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c0      	blx	r8
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d0e6      	beq.n	8005fc0 <_printf_common+0xa4>
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	e7d9      	b.n	8005faa <_printf_common+0x8e>
	...

08005ff8 <_printf_i>:
 8005ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	4691      	mov	r9, r2
 8006000:	7e27      	ldrb	r7, [r4, #24]
 8006002:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006004:	2f78      	cmp	r7, #120	; 0x78
 8006006:	4680      	mov	r8, r0
 8006008:	469a      	mov	sl, r3
 800600a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800600e:	d807      	bhi.n	8006020 <_printf_i+0x28>
 8006010:	2f62      	cmp	r7, #98	; 0x62
 8006012:	d80a      	bhi.n	800602a <_printf_i+0x32>
 8006014:	2f00      	cmp	r7, #0
 8006016:	f000 80d8 	beq.w	80061ca <_printf_i+0x1d2>
 800601a:	2f58      	cmp	r7, #88	; 0x58
 800601c:	f000 80a3 	beq.w	8006166 <_printf_i+0x16e>
 8006020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006028:	e03a      	b.n	80060a0 <_printf_i+0xa8>
 800602a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800602e:	2b15      	cmp	r3, #21
 8006030:	d8f6      	bhi.n	8006020 <_printf_i+0x28>
 8006032:	a001      	add	r0, pc, #4	; (adr r0, 8006038 <_printf_i+0x40>)
 8006034:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006038:	08006091 	.word	0x08006091
 800603c:	080060a5 	.word	0x080060a5
 8006040:	08006021 	.word	0x08006021
 8006044:	08006021 	.word	0x08006021
 8006048:	08006021 	.word	0x08006021
 800604c:	08006021 	.word	0x08006021
 8006050:	080060a5 	.word	0x080060a5
 8006054:	08006021 	.word	0x08006021
 8006058:	08006021 	.word	0x08006021
 800605c:	08006021 	.word	0x08006021
 8006060:	08006021 	.word	0x08006021
 8006064:	080061b1 	.word	0x080061b1
 8006068:	080060d5 	.word	0x080060d5
 800606c:	08006193 	.word	0x08006193
 8006070:	08006021 	.word	0x08006021
 8006074:	08006021 	.word	0x08006021
 8006078:	080061d3 	.word	0x080061d3
 800607c:	08006021 	.word	0x08006021
 8006080:	080060d5 	.word	0x080060d5
 8006084:	08006021 	.word	0x08006021
 8006088:	08006021 	.word	0x08006021
 800608c:	0800619b 	.word	0x0800619b
 8006090:	680b      	ldr	r3, [r1, #0]
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	600a      	str	r2, [r1, #0]
 8006098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800609c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0a3      	b.n	80061ec <_printf_i+0x1f4>
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	6808      	ldr	r0, [r1, #0]
 80060a8:	062e      	lsls	r6, r5, #24
 80060aa:	f100 0304 	add.w	r3, r0, #4
 80060ae:	d50a      	bpl.n	80060c6 <_printf_i+0xce>
 80060b0:	6805      	ldr	r5, [r0, #0]
 80060b2:	600b      	str	r3, [r1, #0]
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	da03      	bge.n	80060c0 <_printf_i+0xc8>
 80060b8:	232d      	movs	r3, #45	; 0x2d
 80060ba:	426d      	negs	r5, r5
 80060bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c0:	485e      	ldr	r0, [pc, #376]	; (800623c <_printf_i+0x244>)
 80060c2:	230a      	movs	r3, #10
 80060c4:	e019      	b.n	80060fa <_printf_i+0x102>
 80060c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060ca:	6805      	ldr	r5, [r0, #0]
 80060cc:	600b      	str	r3, [r1, #0]
 80060ce:	bf18      	it	ne
 80060d0:	b22d      	sxthne	r5, r5
 80060d2:	e7ef      	b.n	80060b4 <_printf_i+0xbc>
 80060d4:	680b      	ldr	r3, [r1, #0]
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	1d18      	adds	r0, r3, #4
 80060da:	6008      	str	r0, [r1, #0]
 80060dc:	0628      	lsls	r0, r5, #24
 80060de:	d501      	bpl.n	80060e4 <_printf_i+0xec>
 80060e0:	681d      	ldr	r5, [r3, #0]
 80060e2:	e002      	b.n	80060ea <_printf_i+0xf2>
 80060e4:	0669      	lsls	r1, r5, #25
 80060e6:	d5fb      	bpl.n	80060e0 <_printf_i+0xe8>
 80060e8:	881d      	ldrh	r5, [r3, #0]
 80060ea:	4854      	ldr	r0, [pc, #336]	; (800623c <_printf_i+0x244>)
 80060ec:	2f6f      	cmp	r7, #111	; 0x6f
 80060ee:	bf0c      	ite	eq
 80060f0:	2308      	moveq	r3, #8
 80060f2:	230a      	movne	r3, #10
 80060f4:	2100      	movs	r1, #0
 80060f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060fa:	6866      	ldr	r6, [r4, #4]
 80060fc:	60a6      	str	r6, [r4, #8]
 80060fe:	2e00      	cmp	r6, #0
 8006100:	bfa2      	ittt	ge
 8006102:	6821      	ldrge	r1, [r4, #0]
 8006104:	f021 0104 	bicge.w	r1, r1, #4
 8006108:	6021      	strge	r1, [r4, #0]
 800610a:	b90d      	cbnz	r5, 8006110 <_printf_i+0x118>
 800610c:	2e00      	cmp	r6, #0
 800610e:	d04d      	beq.n	80061ac <_printf_i+0x1b4>
 8006110:	4616      	mov	r6, r2
 8006112:	fbb5 f1f3 	udiv	r1, r5, r3
 8006116:	fb03 5711 	mls	r7, r3, r1, r5
 800611a:	5dc7      	ldrb	r7, [r0, r7]
 800611c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006120:	462f      	mov	r7, r5
 8006122:	42bb      	cmp	r3, r7
 8006124:	460d      	mov	r5, r1
 8006126:	d9f4      	bls.n	8006112 <_printf_i+0x11a>
 8006128:	2b08      	cmp	r3, #8
 800612a:	d10b      	bne.n	8006144 <_printf_i+0x14c>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07df      	lsls	r7, r3, #31
 8006130:	d508      	bpl.n	8006144 <_printf_i+0x14c>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	6861      	ldr	r1, [r4, #4]
 8006136:	4299      	cmp	r1, r3
 8006138:	bfde      	ittt	le
 800613a:	2330      	movle	r3, #48	; 0x30
 800613c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006140:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006144:	1b92      	subs	r2, r2, r6
 8006146:	6122      	str	r2, [r4, #16]
 8006148:	f8cd a000 	str.w	sl, [sp]
 800614c:	464b      	mov	r3, r9
 800614e:	aa03      	add	r2, sp, #12
 8006150:	4621      	mov	r1, r4
 8006152:	4640      	mov	r0, r8
 8006154:	f7ff fee2 	bl	8005f1c <_printf_common>
 8006158:	3001      	adds	r0, #1
 800615a:	d14c      	bne.n	80061f6 <_printf_i+0x1fe>
 800615c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006160:	b004      	add	sp, #16
 8006162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006166:	4835      	ldr	r0, [pc, #212]	; (800623c <_printf_i+0x244>)
 8006168:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	680e      	ldr	r6, [r1, #0]
 8006170:	061f      	lsls	r7, r3, #24
 8006172:	f856 5b04 	ldr.w	r5, [r6], #4
 8006176:	600e      	str	r6, [r1, #0]
 8006178:	d514      	bpl.n	80061a4 <_printf_i+0x1ac>
 800617a:	07d9      	lsls	r1, r3, #31
 800617c:	bf44      	itt	mi
 800617e:	f043 0320 	orrmi.w	r3, r3, #32
 8006182:	6023      	strmi	r3, [r4, #0]
 8006184:	b91d      	cbnz	r5, 800618e <_printf_i+0x196>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	f023 0320 	bic.w	r3, r3, #32
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	2310      	movs	r3, #16
 8006190:	e7b0      	b.n	80060f4 <_printf_i+0xfc>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f043 0320 	orr.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	2378      	movs	r3, #120	; 0x78
 800619c:	4828      	ldr	r0, [pc, #160]	; (8006240 <_printf_i+0x248>)
 800619e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061a2:	e7e3      	b.n	800616c <_printf_i+0x174>
 80061a4:	065e      	lsls	r6, r3, #25
 80061a6:	bf48      	it	mi
 80061a8:	b2ad      	uxthmi	r5, r5
 80061aa:	e7e6      	b.n	800617a <_printf_i+0x182>
 80061ac:	4616      	mov	r6, r2
 80061ae:	e7bb      	b.n	8006128 <_printf_i+0x130>
 80061b0:	680b      	ldr	r3, [r1, #0]
 80061b2:	6826      	ldr	r6, [r4, #0]
 80061b4:	6960      	ldr	r0, [r4, #20]
 80061b6:	1d1d      	adds	r5, r3, #4
 80061b8:	600d      	str	r5, [r1, #0]
 80061ba:	0635      	lsls	r5, r6, #24
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	d501      	bpl.n	80061c4 <_printf_i+0x1cc>
 80061c0:	6018      	str	r0, [r3, #0]
 80061c2:	e002      	b.n	80061ca <_printf_i+0x1d2>
 80061c4:	0671      	lsls	r1, r6, #25
 80061c6:	d5fb      	bpl.n	80061c0 <_printf_i+0x1c8>
 80061c8:	8018      	strh	r0, [r3, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	4616      	mov	r6, r2
 80061d0:	e7ba      	b.n	8006148 <_printf_i+0x150>
 80061d2:	680b      	ldr	r3, [r1, #0]
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	600a      	str	r2, [r1, #0]
 80061d8:	681e      	ldr	r6, [r3, #0]
 80061da:	6862      	ldr	r2, [r4, #4]
 80061dc:	2100      	movs	r1, #0
 80061de:	4630      	mov	r0, r6
 80061e0:	f7f9 fffe 	bl	80001e0 <memchr>
 80061e4:	b108      	cbz	r0, 80061ea <_printf_i+0x1f2>
 80061e6:	1b80      	subs	r0, r0, r6
 80061e8:	6060      	str	r0, [r4, #4]
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	6123      	str	r3, [r4, #16]
 80061ee:	2300      	movs	r3, #0
 80061f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f4:	e7a8      	b.n	8006148 <_printf_i+0x150>
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	4632      	mov	r2, r6
 80061fa:	4649      	mov	r1, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	47d0      	blx	sl
 8006200:	3001      	adds	r0, #1
 8006202:	d0ab      	beq.n	800615c <_printf_i+0x164>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	079b      	lsls	r3, r3, #30
 8006208:	d413      	bmi.n	8006232 <_printf_i+0x23a>
 800620a:	68e0      	ldr	r0, [r4, #12]
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	4298      	cmp	r0, r3
 8006210:	bfb8      	it	lt
 8006212:	4618      	movlt	r0, r3
 8006214:	e7a4      	b.n	8006160 <_printf_i+0x168>
 8006216:	2301      	movs	r3, #1
 8006218:	4632      	mov	r2, r6
 800621a:	4649      	mov	r1, r9
 800621c:	4640      	mov	r0, r8
 800621e:	47d0      	blx	sl
 8006220:	3001      	adds	r0, #1
 8006222:	d09b      	beq.n	800615c <_printf_i+0x164>
 8006224:	3501      	adds	r5, #1
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	9903      	ldr	r1, [sp, #12]
 800622a:	1a5b      	subs	r3, r3, r1
 800622c:	42ab      	cmp	r3, r5
 800622e:	dcf2      	bgt.n	8006216 <_printf_i+0x21e>
 8006230:	e7eb      	b.n	800620a <_printf_i+0x212>
 8006232:	2500      	movs	r5, #0
 8006234:	f104 0619 	add.w	r6, r4, #25
 8006238:	e7f5      	b.n	8006226 <_printf_i+0x22e>
 800623a:	bf00      	nop
 800623c:	080064bd 	.word	0x080064bd
 8006240:	080064ce 	.word	0x080064ce

08006244 <_sbrk_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d06      	ldr	r5, [pc, #24]	; (8006260 <_sbrk_r+0x1c>)
 8006248:	2300      	movs	r3, #0
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	f7fb fd2e 	bl	8001cb0 <_sbrk>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_sbrk_r+0x1a>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_sbrk_r+0x1a>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	2000cc28 	.word	0x2000cc28

08006264 <__sread>:
 8006264:	b510      	push	{r4, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	f000 f8a0 	bl	80063b0 <_read_r>
 8006270:	2800      	cmp	r0, #0
 8006272:	bfab      	itete	ge
 8006274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006276:	89a3      	ldrhlt	r3, [r4, #12]
 8006278:	181b      	addge	r3, r3, r0
 800627a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800627e:	bfac      	ite	ge
 8006280:	6563      	strge	r3, [r4, #84]	; 0x54
 8006282:	81a3      	strhlt	r3, [r4, #12]
 8006284:	bd10      	pop	{r4, pc}

08006286 <__swrite>:
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	461f      	mov	r7, r3
 800628c:	898b      	ldrh	r3, [r1, #12]
 800628e:	05db      	lsls	r3, r3, #23
 8006290:	4605      	mov	r5, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4616      	mov	r6, r2
 8006296:	d505      	bpl.n	80062a4 <__swrite+0x1e>
 8006298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629c:	2302      	movs	r3, #2
 800629e:	2200      	movs	r2, #0
 80062a0:	f000 f868 	bl	8006374 <_lseek_r>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	4632      	mov	r2, r6
 80062b2:	463b      	mov	r3, r7
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	f000 b817 	b.w	80062ec <_write_r>

080062be <__sseek>:
 80062be:	b510      	push	{r4, lr}
 80062c0:	460c      	mov	r4, r1
 80062c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c6:	f000 f855 	bl	8006374 <_lseek_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	bf15      	itete	ne
 80062d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80062d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062da:	81a3      	strheq	r3, [r4, #12]
 80062dc:	bf18      	it	ne
 80062de:	81a3      	strhne	r3, [r4, #12]
 80062e0:	bd10      	pop	{r4, pc}

080062e2 <__sclose>:
 80062e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e6:	f000 b813 	b.w	8006310 <_close_r>
	...

080062ec <_write_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d07      	ldr	r5, [pc, #28]	; (800630c <_write_r+0x20>)
 80062f0:	4604      	mov	r4, r0
 80062f2:	4608      	mov	r0, r1
 80062f4:	4611      	mov	r1, r2
 80062f6:	2200      	movs	r2, #0
 80062f8:	602a      	str	r2, [r5, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f7fa fd2a 	bl	8000d54 <_write>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_write_r+0x1e>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_write_r+0x1e>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	2000cc28 	.word	0x2000cc28

08006310 <_close_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d06      	ldr	r5, [pc, #24]	; (800632c <_close_r+0x1c>)
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	f7fb fc93 	bl	8001c46 <_close>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_close_r+0x1a>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_close_r+0x1a>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	2000cc28 	.word	0x2000cc28

08006330 <_fstat_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d07      	ldr	r5, [pc, #28]	; (8006350 <_fstat_r+0x20>)
 8006334:	2300      	movs	r3, #0
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	f7fb fc8e 	bl	8001c5e <_fstat>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d102      	bne.n	800634c <_fstat_r+0x1c>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	b103      	cbz	r3, 800634c <_fstat_r+0x1c>
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	bf00      	nop
 8006350:	2000cc28 	.word	0x2000cc28

08006354 <_isatty_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d06      	ldr	r5, [pc, #24]	; (8006370 <_isatty_r+0x1c>)
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	f7fb fc8d 	bl	8001c7e <_isatty>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_isatty_r+0x1a>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_isatty_r+0x1a>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	2000cc28 	.word	0x2000cc28

08006374 <_lseek_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d07      	ldr	r5, [pc, #28]	; (8006394 <_lseek_r+0x20>)
 8006378:	4604      	mov	r4, r0
 800637a:	4608      	mov	r0, r1
 800637c:	4611      	mov	r1, r2
 800637e:	2200      	movs	r2, #0
 8006380:	602a      	str	r2, [r5, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	f7fb fc86 	bl	8001c94 <_lseek>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_lseek_r+0x1e>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_lseek_r+0x1e>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	2000cc28 	.word	0x2000cc28

08006398 <__malloc_lock>:
 8006398:	4801      	ldr	r0, [pc, #4]	; (80063a0 <__malloc_lock+0x8>)
 800639a:	f7ff bb55 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 800639e:	bf00      	nop
 80063a0:	2000cc20 	.word	0x2000cc20

080063a4 <__malloc_unlock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__malloc_unlock+0x8>)
 80063a6:	f7ff bb50 	b.w	8005a4a <__retarget_lock_release_recursive>
 80063aa:	bf00      	nop
 80063ac:	2000cc20 	.word	0x2000cc20

080063b0 <_read_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	4d07      	ldr	r5, [pc, #28]	; (80063d0 <_read_r+0x20>)
 80063b4:	4604      	mov	r4, r0
 80063b6:	4608      	mov	r0, r1
 80063b8:	4611      	mov	r1, r2
 80063ba:	2200      	movs	r2, #0
 80063bc:	602a      	str	r2, [r5, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	f7fb fc24 	bl	8001c0c <_read>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_read_r+0x1e>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_read_r+0x1e>
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	2000cc28 	.word	0x2000cc28

080063d4 <_init>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr

080063e0 <_fini>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr
