
SR_Parallel3RRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08009960  08009960  00019960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e88  08009e88  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009e88  08009e88  00019e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e90  08009e90  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e90  08009e90  00019e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e94  08009e94  00019e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001e0  0800a074  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  0800a074  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e726  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecb  00000000  00000000  0002e932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00030800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00031550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017202  00000000  00000000  000321e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7a7  00000000  00000000  000493ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f561  00000000  00000000  00057b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e70f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd4  00000000  00000000  000e7144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009948 	.word	0x08009948

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009948 	.word	0x08009948

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_write>:
static void MX_USART2_UART_Init(void);
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */

int _write( int file,unsigned char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <_write+0x28>)
 8000fb4:	f003 ff3d 	bl	8004e32 <HAL_UART_Transmit>
	return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200003dc 	.word	0x200003dc

08000fc8 <correction>:




float correction(unsigned long steps, unsigned long accel, unsigned long decel, unsigned max)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
	return 1.0;
 8000fd6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fda:	ee07 3a90 	vmov	s15, r3
}
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <estimate_ttc>:


float estimate_ttc(motorInfo *motor)
{
 8000ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	float tmp;
	if(motor->accel_stop <= motor->peak_velocity)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1a      	ldr	r2, [r3, #32]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	429a      	cmp	r2, r3
 8001004:	f200 8087 	bhi.w	8001116 <estimate_ttc+0x126>
		{
		motor->acc_time= motor->max_speed/(double)motor->acceleration;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa81 	bl	8000514 <__aeabi_ui2d>
 8001012:	4604      	mov	r4, r0
 8001014:	460d      	mov	r5, r1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa7a 	bl	8000514 <__aeabi_ui2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff fc18 	bl	800085c <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			tmp = (motor->max_speed)*((double)1/motor->acceleration +(double)1/motor->deceleration);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa6a 	bl	8000514 <__aeabi_ui2d>
 8001040:	4604      	mov	r4, r0
 8001042:	460d      	mov	r5, r1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa63 	bl	8000514 <__aeabi_ui2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4980      	ldr	r1, [pc, #512]	; (8001258 <estimate_ttc+0x268>)
 8001058:	f7ff fc00 	bl	800085c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4690      	mov	r8, r2
 8001062:	4699      	mov	r9, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa53 	bl	8000514 <__aeabi_ui2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	f04f 0000 	mov.w	r0, #0
 8001076:	4978      	ldr	r1, [pc, #480]	; (8001258 <estimate_ttc+0x268>)
 8001078:	f7ff fbf0 	bl	800085c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4640      	mov	r0, r8
 8001082:	4649      	mov	r1, r9
 8001084:	f7ff f90a 	bl	800029c <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4620      	mov	r0, r4
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff faba 	bl	8000608 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fdac 	bl	8000bf8 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60fb      	str	r3, [r7, #12]
			tmp += (motor->decel_start-motor->accel_stop)*(double)ALPHA*1000/motor->max_speed;
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fa57 	bl	8000558 <__aeabi_f2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa2b 	bl	8000514 <__aeabi_ui2d>
 80010be:	a362      	add	r3, pc, #392	; (adr r3, 8001248 <estimate_ttc+0x258>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff faa0 	bl	8000608 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b61      	ldr	r3, [pc, #388]	; (800125c <estimate_ttc+0x26c>)
 80010d6:	f7ff fa97 	bl	8000608 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4690      	mov	r8, r2
 80010e0:	4699      	mov	r9, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa14 	bl	8000514 <__aeabi_ui2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4640      	mov	r0, r8
 80010f2:	4649      	mov	r1, r9
 80010f4:	f7ff fbb2 	bl	800085c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	f7ff f8cc 	bl	800029c <__adddf3>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd74 	bl	8000bf8 <__aeabi_d2f>
 8001110:	4603      	mov	r3, r0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e082      	b.n	800121c <estimate_ttc+0x22c>
	else
		{
			/*tmp = (double)sqrt(2000*ALPHA*motor->total_steps);
			tmp *=1.0/sqrt(motor->acceleration) + 1.0/sqrt(motor->deceleration);
			*/
			motor->acc_time=sqrt(2000*ALPHA*motor->peak_velocity/motor->acceleration);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f9fa 	bl	8000514 <__aeabi_ui2d>
 8001120:	a34b      	add	r3, pc, #300	; (adr r3, 8001250 <estimate_ttc+0x260>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fa6f 	bl	8000608 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4614      	mov	r4, r2
 8001130:	461d      	mov	r5, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9ec 	bl	8000514 <__aeabi_ui2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff fb8a 	bl	800085c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	ec43 2b17 	vmov	d7, r2, r3
 8001150:	eeb0 0a47 	vmov.f32	s0, s14
 8001154:	eef0 0a67 	vmov.f32	s1, s15
 8001158:	f008 fb18 	bl	800978c <sqrt>
 800115c:	eeb0 7a40 	vmov.f32	s14, s0
 8001160:	eef0 7a60 	vmov.f32	s15, s1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			tmp=sqrt(2000*ALPHA*motor->peak_velocity/motor->acceleration)+sqrt(2000*ALPHA*(motor->total_steps-motor->peak_velocity)/motor->deceleration);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9d0 	bl	8000514 <__aeabi_ui2d>
 8001174:	a336      	add	r3, pc, #216	; (adr r3, 8001250 <estimate_ttc+0x260>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa45 	bl	8000608 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4614      	mov	r4, r2
 8001184:	461d      	mov	r5, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9c2 	bl	8000514 <__aeabi_ui2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7ff fb60 	bl	800085c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	ec43 2b17 	vmov	d7, r2, r3
 80011a4:	eeb0 0a47 	vmov.f32	s0, s14
 80011a8:	eef0 0a67 	vmov.f32	s1, s15
 80011ac:	f008 faee 	bl	800978c <sqrt>
 80011b0:	ec59 8b10 	vmov	r8, r9, d0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9a8 	bl	8000514 <__aeabi_ui2d>
 80011c4:	a322      	add	r3, pc, #136	; (adr r3, 8001250 <estimate_ttc+0x260>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fa1d 	bl	8000608 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f99a 	bl	8000514 <__aeabi_ui2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff fb38 	bl	800085c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	ec43 2b17 	vmov	d7, r2, r3
 80011f4:	eeb0 0a47 	vmov.f32	s0, s14
 80011f8:	eef0 0a67 	vmov.f32	s1, s15
 80011fc:	f008 fac6 	bl	800978c <sqrt>
 8001200:	ec53 2b10 	vmov	r2, r3, d0
 8001204:	4640      	mov	r0, r8
 8001206:	4649      	mov	r1, r9
 8001208:	f7ff f848 	bl	800029c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcf0 	bl	8000bf8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]

		}

	return tmp*correction(motor->total_steps,motor->acceleration,motor->deceleration,motor->max_speed);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f7ff fecc 	bl	8000fc8 <correction>
 8001230:	eeb0 7a40 	vmov.f32	s14, s0
 8001234:	edd7 7a03 	vldr	s15, [r7, #12]
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001248:	ae261898 	.word	0xae261898
 800124c:	3f5015be 	.word	0x3f5015be
 8001250:	6c226809 	.word	0x6c226809
 8001254:	3fff6a78 	.word	0x3fff6a78
 8001258:	3ff00000 	.word	0x3ff00000
 800125c:	408f4000 	.word	0x408f4000

08001260 <init_movement>:

void init_movement(motorInfo *motor, long total_steps, unsigned long accel, unsigned long decel, unsigned max)
{
 8001260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001264:	b088      	sub	sp, #32
 8001266:	af00      	add	r7, sp, #0
 8001268:	61f8      	str	r0, [r7, #28]
 800126a:	61b9      	str	r1, [r7, #24]
 800126c:	617a      	str	r2, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]


		max = max <= MIN_VEL? MIN_VEL:max;
 8001270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001272:	f240 6222 	movw	r2, #1570	; 0x622
 8001276:	4293      	cmp	r3, r2
 8001278:	d90a      	bls.n	8001290 <init_movement+0x30>
 800127a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800127c:	f7ff f94a 	bl	8000514 <__aeabi_ui2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc96 	bl	8000bb8 <__aeabi_d2uiz>
 800128c:	4603      	mov	r3, r0
 800128e:	e001      	b.n	8001294 <init_movement+0x34>
 8001290:	f240 6322 	movw	r3, #1570	; 0x622
 8001294:	643b      	str	r3, [r7, #64]	; 0x40
		motor->max_speed = (max >= MAX_VEL) ? MAX_VEL : max;
 8001296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001298:	f646 3260 	movw	r2, #27488	; 0x6b60
 800129c:	4293      	cmp	r3, r2
 800129e:	d80a      	bhi.n	80012b6 <init_movement+0x56>
 80012a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012a2:	f7ff f937 	bl	8000514 <__aeabi_ui2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fc83 	bl	8000bb8 <__aeabi_d2uiz>
 80012b2:	4603      	mov	r3, r0
 80012b4:	e001      	b.n	80012ba <init_movement+0x5a>
 80012b6:	f646 3360 	movw	r3, #27488	; 0x6b60
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	6013      	str	r3, [r2, #0]
		motor->dir = total_steps>0 ? 1 : -1;
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd01      	ble.n	80012c8 <init_movement+0x68>
 80012c4:	2201      	movs	r2, #1
 80012c6:	e001      	b.n	80012cc <init_movement+0x6c>
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	609a      	str	r2, [r3, #8]

		HAL_GPIO_WritePin(motor->GPIOX, motor->GPIO_Label, motor->dir > 0);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	6958      	ldr	r0, [r3, #20]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	8b19      	ldrh	r1, [r3, #24]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfcc      	ite	gt
 80012e0:	2301      	movgt	r3, #1
 80012e2:	2300      	movle	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	f002 f8be 	bl	8003468 <HAL_GPIO_WritePin>


		motor->total_steps=total_steps>0?total_steps:-total_steps;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfb8      	it	lt
 80012f2:	425b      	neglt	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	63da      	str	r2, [r3, #60]	; 0x3c
		motor->rest=0;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
		motor->state=ACCEL;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		motor->auto_reload=0.676*CLK_FRQ*sqrt(2000*ALPHA/accel);// length of current pulse in timer ticks
 8001308:	6978      	ldr	r0, [r7, #20]
 800130a:	f7ff f903 	bl	8000514 <__aeabi_ui2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	a176      	add	r1, pc, #472	; (adr r1, 80014ec <init_movement+0x28c>)
 8001314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001318:	f7ff faa0 	bl	800085c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	ec43 2b17 	vmov	d7, r2, r3
 8001324:	eeb0 0a47 	vmov.f32	s0, s14
 8001328:	eef0 0a67 	vmov.f32	s1, s15
 800132c:	f008 fa2e 	bl	800978c <sqrt>
 8001330:	ec51 0b10 	vmov	r0, r1, d0
 8001334:	a36f      	add	r3, pc, #444	; (adr r3, 80014f4 <init_movement+0x294>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f965 	bl	8000608 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fc37 	bl	8000bb8 <__aeabi_d2uiz>
 800134a:	4602      	mov	r2, r0
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	60da      	str	r2, [r3, #12]
		motor->max_speed_ARR = CLK_FRQ*ALPHA*1000/motor->max_speed;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8dd 	bl	8000514 <__aeabi_ui2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	a167      	add	r1, pc, #412	; (adr r1, 80014fc <init_movement+0x29c>)
 8001360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001364:	f7ff fa7a 	bl	800085c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc22 	bl	8000bb8 <__aeabi_d2uiz>
 8001374:	4602      	mov	r2, r0
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	605a      	str	r2, [r3, #4]
		motor->accel_stop = motor->max_speed*motor->max_speed/(2000*ALPHA*accel);
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8c4 	bl	8000514 <__aeabi_ui2d>
 800138c:	e9c7 0100 	strd	r0, r1, [r7]
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff f8bf 	bl	8000514 <__aeabi_ui2d>
 8001396:	a355      	add	r3, pc, #340	; (adr r3, 80014ec <init_movement+0x28c>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f934 	bl	8000608 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013a8:	f7ff fa58 	bl	800085c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fc00 	bl	8000bb8 <__aeabi_d2uiz>
 80013b8:	4602      	mov	r2, r0
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	621a      	str	r2, [r3, #32]

		if(!motor->accel_stop)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <init_movement+0x16c>
			motor->accel_stop =1 ;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2201      	movs	r2, #1
 80013ca:	621a      	str	r2, [r3, #32]


		motor->peak_velocity=(motor->total_steps*(unsigned long long)decel)/(accel+decel);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d0:	2200      	movs	r2, #0
 80013d2:	469a      	mov	sl, r3
 80013d4:	4693      	mov	fp, r2
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2200      	movs	r2, #0
 80013da:	4698      	mov	r8, r3
 80013dc:	4691      	mov	r9, r2
 80013de:	fb08 f20b 	mul.w	r2, r8, fp
 80013e2:	fb0a f309 	mul.w	r3, sl, r9
 80013e6:	4413      	add	r3, r2
 80013e8:	fbaa 4508 	umull	r4, r5, sl, r8
 80013ec:	442b      	add	r3, r5
 80013ee:	461d      	mov	r5, r3
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4413      	add	r3, r2
 80013f6:	2200      	movs	r2, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	60fa      	str	r2, [r7, #12]
 80013fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001400:	4620      	mov	r0, r4
 8001402:	4629      	mov	r1, r5
 8001404:	f7ff fc48 	bl	8000c98 <__aeabi_uldivmod>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	61da      	str	r2, [r3, #28]

		if(!motor->peak_velocity)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <init_movement+0x1be>
			motor->peak_velocity =1;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2201      	movs	r2, #1
 800141c:	61da      	str	r2, [r3, #28]

		if(motor->accel_stop <= motor->peak_velocity)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	429a      	cmp	r2, r3
 8001428:	d80d      	bhi.n	8001446 <init_movement+0x1e6>
			motor->decel_start= (motor->total_steps-(motor->accel_stop*accel)/decel);
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	6979      	ldr	r1, [r7, #20]
 8001434:	fb03 f101 	mul.w	r1, r3, r1
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	fbb1 f3f3 	udiv	r3, r1, r3
 800143e:	1ad2      	subs	r2, r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
 8001444:	e003      	b.n	800144e <init_movement+0x1ee>
		else
			motor->decel_start = motor->peak_velocity;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	625a      	str	r2, [r3, #36]	; 0x24


		motor->movement_done=0;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		motor->acceleration=accel;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
		motor->deceleration=decel;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
		motor->steps=0;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	2200      	movs	r2, #0
 8001466:	639a      	str	r2, [r3, #56]	; 0x38

		motor->time_to_complete=estimate_ttc(motor);
 8001468:	69f8      	ldr	r0, [r7, #28]
 800146a:	f7ff fdc1 	bl	8000ff0 <estimate_ttc>
 800146e:	ee10 3a10 	vmov	r3, s0
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f870 	bl	8000558 <__aeabi_f2d>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	69f9      	ldr	r1, [r7, #28]
 800147e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		motor->T1=motor->T2=motor->T3=0;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	2200      	movs	r2, #0
 8001486:	64da      	str	r2, [r3, #76]	; 0x4c
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	649a      	str	r2, [r3, #72]	; 0x48
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	645a      	str	r2, [r3, #68]	; 0x44

		motor->timer->Instance->ARR=motor->auto_reload;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	68d2      	ldr	r2, [r2, #12]
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
		//generujemy update resetując rejestry
		//bez tego nie działa, 4 godziny życia za mną :(
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	615a      	str	r2, [r3, #20]


  		motor->T1 = __HAL_TIM_GET_COUNTER(&htim5);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <init_movement+0x288>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
		HAL_TIM_OC_Start(motor->timer,TIM_CHANNEL_1);
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fdaf 	bl	800402c <HAL_TIM_OC_Start>
	    HAL_TIM_Base_Start_IT(motor->timer);
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fcca 	bl	8003e6c <HAL_TIM_Base_Start_IT>




}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014e2:	bf00      	nop
 80014e4:	f3af 8000 	nop.w
 80014e8:	20000394 	.word	0x20000394
 80014ec:	6c226809 	.word	0x6c226809
 80014f0:	3fff6a78 	.word	0x3fff6a78
 80014f4:	00000001 	.word	0x00000001
 80014f8:	418b13a4 	.word	0x418b13a4
 80014fc:	c5ffffff 	.word	0xc5ffffff
 8001500:	4193a95e 	.word	0x4193a95e

08001504 <reset_motor>:
void reset_motor(motorInfo *motor,TIM_HandleTypeDef *timer,GPIO_TypeDef *GPIOX,uint16_t GPIO_Label)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	807b      	strh	r3, [r7, #2]
	motor->timer = timer;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	611a      	str	r2, [r3, #16]
	motor->GPIOX = GPIOX;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	615a      	str	r2, [r3, #20]
	motor->GPIO_Label=GPIO_Label;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	887a      	ldrh	r2, [r7, #2]
 8001522:	831a      	strh	r2, [r3, #24]
	test.movement_done=1;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <reset_motor+0x60>)
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	motor->step_position=0;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(motor->GPIOX, motor->GPIO_Label, motor->dir>0);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6958      	ldr	r0, [r3, #20]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8b19      	ldrh	r1, [r3, #24]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	bfcc      	ite	gt
 8001542:	2301      	movgt	r3, #1
 8001544:	2300      	movle	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	f001 ff8d 	bl	8003468 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Stop(motor->timer,TIM_CHANNEL_1);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fe19 	bl	800418c <HAL_TIM_OC_Stop>


}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000480 	.word	0x20000480

08001568 <calculate_auto_reload>:




unsigned long calculate_auto_reload(motorInfo *motor)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

	if(motor->steps < motor->total_steps)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <calculate_auto_reload+0x24>
	{
		motor->step_position+=motor->dir;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	441a      	add	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
 800158a:	e003      	b.n	8001594 <calculate_auto_reload+0x2c>
	}
	else
		motor->state=STOP;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	motor->steps++;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	639a      	str	r2, [r3, #56]	; 0x38
	unsigned long  tmp=0;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]

	switch (motor->state)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	f200 80c9 	bhi.w	8001742 <calculate_auto_reload+0x1da>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <calculate_auto_reload+0x50>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	08001603 	.word	0x08001603
 80015c0:	080016e1 	.word	0x080016e1
 80015c4:	080016b1 	.word	0x080016b1
	{
	case STOP:

		motor->movement_done=1;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		flag_htim2_done=1;
 80015d0:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <calculate_auto_reload+0x1e8>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(motor->timer,TIM_CHANNEL_1);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 fdd5 	bl	800418c <HAL_TIM_OC_Stop>
		HAL_TIM_Base_Stop_IT(motor->timer);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fca2 	bl	8003f30 <HAL_TIM_Base_Stop_IT>


			motor->T3 = __HAL_TIM_GET_COUNTER(&htim5) - motor->T3;
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <calculate_auto_reload+0x1ec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	1ad2      	subs	r2, r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	64da      	str	r2, [r3, #76]	; 0x4c

		return motor->auto_reload;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	e0a1      	b.n	8001746 <calculate_auto_reload+0x1de>
		break;
	case ACCEL:

		tmp=motor->rest;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	60fb      	str	r3, [r7, #12]
		motor->rest =(2*motor->auto_reload + tmp)%(4*motor->steps + 1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	005a      	lsls	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	3201      	adds	r2, #1
 800161a:	fbb3 f1f2 	udiv	r1, r3, r2
 800161e:	fb01 f202 	mul.w	r2, r1, r2
 8001622:	1a9a      	subs	r2, r3, r2
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
		motor->auto_reload -= (2*motor->auto_reload + tmp)/(4*motor->steps + 1);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	005a      	lsls	r2, r3, #1
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	441a      	add	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	3301      	adds	r3, #1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68d2      	ldr	r2, [r2, #12]
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	60da      	str	r2, [r3, #12]

		if(motor->steps>=motor->decel_start)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	429a      	cmp	r2, r3
 8001652:	d311      	bcc.n	8001678 <calculate_auto_reload+0x110>
			{
	  		 motor->T1 = __HAL_TIM_GET_COUNTER(&htim5)-motor->T1;
 8001654:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <calculate_auto_reload+0x1ec>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	1ad2      	subs	r2, r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44

	  	//	 htim5.Instance->CNT=0;
	  		 motor->T3 =  __HAL_TIM_GET_COUNTER(&htim5);
 8001664:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <calculate_auto_reload+0x1ec>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	64da      	str	r2, [r3, #76]	; 0x4c

				motor->state=DECEL;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2202      	movs	r2, #2
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5);

			motor->state = RUN;
			motor->auto_reload = motor->max_speed_ARR;
		}
		break;
 8001676:	e061      	b.n	800173c <calculate_auto_reload+0x1d4>
		else if(motor->steps >= motor->accel_stop)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	429a      	cmp	r2, r3
 8001682:	d35b      	bcc.n	800173c <calculate_auto_reload+0x1d4>
			motor->T1 = __HAL_TIM_GET_COUNTER(&htim5)-motor->T1;
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <calculate_auto_reload+0x1ec>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	1ad2      	subs	r2, r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	645a      	str	r2, [r3, #68]	; 0x44
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5);
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <calculate_auto_reload+0x1ec>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	649a      	str	r2, [r3, #72]	; 0x48
			motor->state = RUN;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			motor->auto_reload = motor->max_speed_ARR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60da      	str	r2, [r3, #12]
		break;
 80016ae:	e045      	b.n	800173c <calculate_auto_reload+0x1d4>
	case RUN:
		if(motor->steps >= motor->decel_start)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d341      	bcc.n	8001740 <calculate_auto_reload+0x1d8>
		{
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5)-motor->T2;
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <calculate_auto_reload+0x1ec>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	1ad2      	subs	r2, r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	649a      	str	r2, [r3, #72]	; 0x48
		//	htim5.Instance->CNT=0;
			motor->T3 =  __HAL_TIM_GET_COUNTER(&htim5);
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <calculate_auto_reload+0x1ec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	64da      	str	r2, [r3, #76]	; 0x4c
			motor->state=DECEL;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				//motor->rest=0;
		}
		break;
 80016de:	e02f      	b.n	8001740 <calculate_auto_reload+0x1d8>
	case DECEL:
		tmp=motor->rest;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	60fb      	str	r3, [r7, #12]
		motor->rest =(long)((2*motor->auto_reload + motor->rest))%(4*((long)(motor->steps-motor->total_steps)) + 1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	005a      	lsls	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	4413      	add	r3, r2
 80016f2:	461a      	mov	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	1acb      	subs	r3, r1, r3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	3301      	adds	r3, #1
 8001702:	fb92 f1f3 	sdiv	r1, r2, r3
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
		motor->auto_reload -= (long)((2*motor->auto_reload + tmp))/(4*((long)(motor->steps-motor->total_steps)) + 1);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	005a      	lsls	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	4619      	mov	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	3301      	adds	r3, #1
 800172c:	fb91 f2f3 	sdiv	r2, r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	1a9a      	subs	r2, r3, r2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60da      	str	r2, [r3, #12]
		break;
 800173a:	e002      	b.n	8001742 <calculate_auto_reload+0x1da>
		break;
 800173c:	bf00      	nop
 800173e:	e000      	b.n	8001742 <calculate_auto_reload+0x1da>
		break;
 8001740:	bf00      	nop

	}



	return (motor->auto_reload);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]


}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200004e8 	.word	0x200004e8
 8001754:	20000394 	.word	0x20000394

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b08a      	sub	sp, #40	; 0x28
 800175e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001760:	f000 ff78 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001764:	f000 f9ba 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001768:	f000 fbc8 	bl	8001efc <MX_GPIO_Init>
  MX_TIM3_Init();
 800176c:	f000 fa7a 	bl	8001c64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001770:	f000 fad2 	bl	8001d18 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001774:	f000 fa1e 	bl	8001bb4 <MX_TIM2_Init>
  MX_DMA_Init();
 8001778:	f000 fba0 	bl	8001ebc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800177c:	f000 fb74 	bl	8001e68 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001780:	f000 fb24 	bl	8001dcc <MX_TIM5_Init>





	  reset_motor(&test,&htim2,STEPPER_DIR_1_GPIO_Port, STEPPER_DIR_1_Pin);
 8001784:	2340      	movs	r3, #64	; 0x40
 8001786:	4abc      	ldr	r2, [pc, #752]	; (8001a78 <main+0x320>)
 8001788:	49bc      	ldr	r1, [pc, #752]	; (8001a7c <main+0x324>)
 800178a:	48bd      	ldr	r0, [pc, #756]	; (8001a80 <main+0x328>)
 800178c:	f7ff feba 	bl	8001504 <reset_motor>


	  HAL_TIM_Base_Start_IT(&htim3);
 8001790:	48bc      	ldr	r0, [pc, #752]	; (8001a84 <main+0x32c>)
 8001792:	f002 fb6b 	bl	8003e6c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim4);
 8001796:	48bc      	ldr	r0, [pc, #752]	; (8001a88 <main+0x330>)
 8001798:	f002 fb68 	bl	8003e6c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim5);
 800179c:	48bb      	ldr	r0, [pc, #748]	; (8001a8c <main+0x334>)
 800179e:	f002 fb65 	bl	8003e6c <HAL_TIM_Base_Start_IT>



  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	49ba      	ldr	r1, [pc, #744]	; (8001a90 <main+0x338>)
 80017a6:	48bb      	ldr	r0, [pc, #748]	; (8001a94 <main+0x33c>)
 80017a8:	f003 fbd5 	bl	8004f56 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 80017ac:	4bba      	ldr	r3, [pc, #744]	; (8001a98 <main+0x340>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4bb9      	ldr	r3, [pc, #740]	; (8001a98 <main+0x340>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0208 	bic.w	r2, r2, #8
 80017ba:	601a      	str	r2, [r3, #0]


flag_htim2_done=flag_command_recieved=0;
 80017bc:	2300      	movs	r3, #0
 80017be:	4ab7      	ldr	r2, [pc, #732]	; (8001a9c <main+0x344>)
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4ab7      	ldr	r2, [pc, #732]	; (8001aa0 <main+0x348>)
 80017c4:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_htim2_done)
 80017c6:	4bb6      	ldr	r3, [pc, #728]	; (8001aa0 <main+0x348>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8115 	beq.w	80019fa <main+0x2a2>
	  {
		  timer_val = __HAL_TIM_GET_COUNTER(&htim5)-timer_val;
 80017d0:	4bae      	ldr	r3, [pc, #696]	; (8001a8c <main+0x334>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]

		  printf("Done in %f, expected: %f MotorPos: %d\r\n",timer_val/1000000.0,test.time_to_complete, test.step_position);
 80017dc:	6978      	ldr	r0, [r7, #20]
 80017de:	f7fe fe99 	bl	8000514 <__aeabi_ui2d>
 80017e2:	a3a3      	add	r3, pc, #652	; (adr r3, 8001a70 <main+0x318>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7ff f838 	bl	800085c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	4ba2      	ldr	r3, [pc, #648]	; (8001a80 <main+0x328>)
 80017f6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80017fa:	49a1      	ldr	r1, [pc, #644]	; (8001a80 <main+0x328>)
 80017fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80017fe:	9102      	str	r1, [sp, #8]
 8001800:	e9cd 2300 	strd	r2, r3, [sp]
 8001804:	4622      	mov	r2, r4
 8001806:	462b      	mov	r3, r5
 8001808:	48a6      	ldr	r0, [pc, #664]	; (8001aa4 <main+0x34c>)
 800180a:	f005 f99f 	bl	8006b4c <iprintf>
		  printf("Time breakdown --- T1: %f   T2: %f   T3: %f\r\n", (double)test.T1/1000000, (double)test.T2/1000000, (double)test.T3/1000000);
 800180e:	4b9c      	ldr	r3, [pc, #624]	; (8001a80 <main+0x328>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe7e 	bl	8000514 <__aeabi_ui2d>
 8001818:	a395      	add	r3, pc, #596	; (adr r3, 8001a70 <main+0x318>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7ff f81d 	bl	800085c <__aeabi_ddiv>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4690      	mov	r8, r2
 8001828:	4699      	mov	r9, r3
 800182a:	4b95      	ldr	r3, [pc, #596]	; (8001a80 <main+0x328>)
 800182c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe70 	bl	8000514 <__aeabi_ui2d>
 8001834:	a38e      	add	r3, pc, #568	; (adr r3, 8001a70 <main+0x318>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7ff f80f 	bl	800085c <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4614      	mov	r4, r2
 8001844:	461d      	mov	r5, r3
 8001846:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <main+0x328>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe62 	bl	8000514 <__aeabi_ui2d>
 8001850:	a387      	add	r3, pc, #540	; (adr r3, 8001a70 <main+0x318>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7ff f801 	bl	800085c <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001862:	e9cd 4500 	strd	r4, r5, [sp]
 8001866:	4642      	mov	r2, r8
 8001868:	464b      	mov	r3, r9
 800186a:	488f      	ldr	r0, [pc, #572]	; (8001aa8 <main+0x350>)
 800186c:	f005 f96e 	bl	8006b4c <iprintf>
		tmp = ((double)test.T1/1000000+(double)test.T2/1000000+(double)test.T3/1000000);
 8001870:	4b83      	ldr	r3, [pc, #524]	; (8001a80 <main+0x328>)
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe4d 	bl	8000514 <__aeabi_ui2d>
 800187a:	a37d      	add	r3, pc, #500	; (adr r3, 8001a70 <main+0x318>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe ffec 	bl	800085c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4b7c      	ldr	r3, [pc, #496]	; (8001a80 <main+0x328>)
 800188e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe3f 	bl	8000514 <__aeabi_ui2d>
 8001896:	a376      	add	r3, pc, #472	; (adr r3, 8001a70 <main+0x318>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe ffde 	bl	800085c <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fcf8 	bl	800029c <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
 80018b4:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <main+0x328>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe2b 	bl	8000514 <__aeabi_ui2d>
 80018be:	a36c      	add	r3, pc, #432	; (adr r3, 8001a70 <main+0x318>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe ffca 	bl	800085c <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7fe fce4 	bl	800029c <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f98c 	bl	8000bf8 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	613b      	str	r3, [r7, #16]
		 printf("T_approx - T_exact : %fs , Error as percentege of actual time %f \n",test.time_to_complete-tmp,(test.time_to_complete*100.0/tmp-100.0));
 80018e4:	4b66      	ldr	r3, [pc, #408]	; (8001a80 <main+0x328>)
 80018e6:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80018ea:	6938      	ldr	r0, [r7, #16]
 80018ec:	f7fe fe34 	bl	8000558 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fcce 	bl	8000298 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <main+0x328>)
 8001906:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b67      	ldr	r3, [pc, #412]	; (8001aac <main+0x354>)
 8001910:	f7fe fe7a 	bl	8000608 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4690      	mov	r8, r2
 800191a:	4699      	mov	r9, r3
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7fe fe1b 	bl	8000558 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4640      	mov	r0, r8
 8001928:	4649      	mov	r1, r9
 800192a:	f7fe ff97 	bl	800085c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <main+0x354>)
 800193c:	f7fe fcac 	bl	8000298 <__aeabi_dsub>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9cd 2300 	strd	r2, r3, [sp]
 8001948:	4622      	mov	r2, r4
 800194a:	462b      	mov	r3, r5
 800194c:	4858      	ldr	r0, [pc, #352]	; (8001ab0 <main+0x358>)
 800194e:	f005 f8fd 	bl	8006b4c <iprintf>
		 tmp = ((double)test.T1/1000000);
 8001952:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <main+0x328>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fddc 	bl	8000514 <__aeabi_ui2d>
 800195c:	a344      	add	r3, pc, #272	; (adr r3, 8001a70 <main+0x318>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe ff7b 	bl	800085c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f943 	bl	8000bf8 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	613b      	str	r3, [r7, #16]
		 printf("acc time estimate: %fs ,Delta %fs, error as percentage: %f",test.acc_time,(test.acc_time-tmp), test.acc_time*100.0/tmp-100.0);
 8001976:	4b42      	ldr	r3, [pc, #264]	; (8001a80 <main+0x328>)
 8001978:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800197c:	4b40      	ldr	r3, [pc, #256]	; (8001a80 <main+0x328>)
 800197e:	e9d3 8914 	ldrd	r8, r9, [r3, #80]	; 0x50
 8001982:	6938      	ldr	r0, [r7, #16]
 8001984:	f7fe fde8 	bl	8000558 <__aeabi_f2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4640      	mov	r0, r8
 800198e:	4649      	mov	r1, r9
 8001990:	f7fe fc82 	bl	8000298 <__aeabi_dsub>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4690      	mov	r8, r2
 800199a:	4699      	mov	r9, r3
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <main+0x328>)
 800199e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <main+0x354>)
 80019a8:	f7fe fe2e 	bl	8000608 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4692      	mov	sl, r2
 80019b2:	469b      	mov	fp, r3
 80019b4:	6938      	ldr	r0, [r7, #16]
 80019b6:	f7fe fdcf 	bl	8000558 <__aeabi_f2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4650      	mov	r0, sl
 80019c0:	4659      	mov	r1, fp
 80019c2:	f7fe ff4b 	bl	800085c <__aeabi_ddiv>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b36      	ldr	r3, [pc, #216]	; (8001aac <main+0x354>)
 80019d4:	f7fe fc60 	bl	8000298 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019e0:	e9cd 8900 	strd	r8, r9, [sp]
 80019e4:	4622      	mov	r2, r4
 80019e6:	462b      	mov	r3, r5
 80019e8:	4832      	ldr	r0, [pc, #200]	; (8001ab4 <main+0x35c>)
 80019ea:	f005 f8af 	bl	8006b4c <iprintf>
		  printf("\r\n\r\n---------\r\n\r\n");
 80019ee:	4832      	ldr	r0, [pc, #200]	; (8001ab8 <main+0x360>)
 80019f0:	f005 f932 	bl	8006c58 <puts>
		  flag_htim2_done=0;
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <main+0x348>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

	  }

	  if(flag_command_recieved)
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <main+0x344>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f43f aee1 	beq.w	80017c6 <main+0x6e>
	  {
		  memcpy(MainBuf,RxBuf,size_recieved);
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <main+0x364>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4921      	ldr	r1, [pc, #132]	; (8001a90 <main+0x338>)
 8001a0c:	482c      	ldr	r0, [pc, #176]	; (8001ac0 <main+0x368>)
 8001a0e:	f004 fc1d 	bl	800624c <memcpy>
		  		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	491e      	ldr	r1, [pc, #120]	; (8001a90 <main+0x338>)
 8001a16:	481f      	ldr	r0, [pc, #124]	; (8001a94 <main+0x33c>)
 8001a18:	f003 fa9d 	bl	8004f56 <HAL_UARTEx_ReceiveToIdle_DMA>
		  		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <main+0x340>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <main+0x340>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0208 	bic.w	r2, r2, #8
 8001a2a:	601a      	str	r2, [r3, #0]

		  		printf("Recieved: %s \r\n",MainBuf);
 8001a2c:	4924      	ldr	r1, [pc, #144]	; (8001ac0 <main+0x368>)
 8001a2e:	4825      	ldr	r0, [pc, #148]	; (8001ac4 <main+0x36c>)
 8001a30:	f005 f88c 	bl	8006b4c <iprintf>

		  		sscanf(MainBuf,"%d %u %u %u",&steps, &accel, &decel, &max_speed);
 8001a34:	f107 010c 	add.w	r1, r7, #12
 8001a38:	1d3a      	adds	r2, r7, #4
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	463b      	mov	r3, r7
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	460b      	mov	r3, r1
 8001a46:	4920      	ldr	r1, [pc, #128]	; (8001ac8 <main+0x370>)
 8001a48:	481d      	ldr	r0, [pc, #116]	; (8001ac0 <main+0x368>)
 8001a4a:	f005 f90d 	bl	8006c68 <siscanf>
		  		//accel, decel in 1m rad/s^2
		  		//max_speed in 1m rad/s
		  		init_movement(&test,steps,accel,decel,max_speed);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	4808      	ldr	r0, [pc, #32]	; (8001a80 <main+0x328>)
 8001a60:	f7ff fbfe 	bl	8001260 <init_movement>


		  		//htim5.Instance->CNT=0;
		  		timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <main+0x334>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	e02f      	b.n	8001acc <main+0x374>
 8001a6c:	f3af 8000 	nop.w
 8001a70:	00000000 	.word	0x00000000
 8001a74:	412e8480 	.word	0x412e8480
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	200002bc 	.word	0x200002bc
 8001a80:	20000480 	.word	0x20000480
 8001a84:	20000304 	.word	0x20000304
 8001a88:	2000034c 	.word	0x2000034c
 8001a8c:	20000394 	.word	0x20000394
 8001a90:	200001fc 	.word	0x200001fc
 8001a94:	200003dc 	.word	0x200003dc
 8001a98:	20000420 	.word	0x20000420
 8001a9c:	200004ec 	.word	0x200004ec
 8001aa0:	200004e8 	.word	0x200004e8
 8001aa4:	08009960 	.word	0x08009960
 8001aa8:	08009988 	.word	0x08009988
 8001aac:	40590000 	.word	0x40590000
 8001ab0:	080099b8 	.word	0x080099b8
 8001ab4:	080099fc 	.word	0x080099fc
 8001ab8:	08009a38 	.word	0x08009a38
 8001abc:	200004f0 	.word	0x200004f0
 8001ac0:	2000023c 	.word	0x2000023c
 8001ac4:	08009a4c 	.word	0x08009a4c
 8001ac8:	08009a5c 	.word	0x08009a5c
 8001acc:	617b      	str	r3, [r7, #20]
		  		flag_command_recieved=0;
 8001ace:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <main+0x380>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
	  if(flag_htim2_done)
 8001ad4:	e677      	b.n	80017c6 <main+0x6e>
 8001ad6:	bf00      	nop
 8001ad8:	200004ec 	.word	0x200004ec

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 fbbc 	bl	8006268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <SystemClock_Config+0xd0>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a28      	ldr	r2, [pc, #160]	; (8001bac <SystemClock_Config+0xd0>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b26      	ldr	r3, [pc, #152]	; (8001bac <SystemClock_Config+0xd0>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <SystemClock_Config+0xd4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <SystemClock_Config+0xd4>)
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <SystemClock_Config+0xd4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b44:	2310      	movs	r3, #16
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b50:	2310      	movs	r3, #16
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b5e:	2307      	movs	r3, #7
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fc98 	bl	800349c <HAL_RCC_OscConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b72:	f000 fa73 	bl	800205c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b76:	230f      	movs	r3, #15
 8001b78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2102      	movs	r1, #2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fefa 	bl	800398c <HAL_RCC_ClockConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b9e:	f000 fa5d 	bl	800205c <Error_Handler>
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	3750      	adds	r7, #80	; 0x50
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	f107 0320 	add.w	r3, r7, #32
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	615a      	str	r2, [r3, #20]
 8001bd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84-1;
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001bec:	2253      	movs	r2, #83	; 0x53
 8001bee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001bfc:	4818      	ldr	r0, [pc, #96]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001bfe:	f002 f9c6 	bl	8003f8e <HAL_TIM_OC_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c08:	f000 fa28 	bl	800205c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4811      	ldr	r0, [pc, #68]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001c1c:	f003 f83a 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001c26:	f000 fa19 	bl	800205c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001c2a:	2330      	movs	r3, #48	; 0x30
 8001c2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001c42:	f002 fc0f 	bl	8004464 <HAL_TIM_OC_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001c4c:	f000 fa06 	bl	800205c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <MX_TIM2_Init+0xac>)
 8001c52:	f000 fab5 	bl	80021c0 <HAL_TIM_MspPostInit>

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200002bc 	.word	0x200002bc

08001c64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <MX_TIM3_Init+0xb0>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001c8e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001cae:	4818      	ldr	r0, [pc, #96]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001cb0:	f002 f96d 	bl	8003f8e <HAL_TIM_OC_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001cba:	f000 f9cf 	bl	800205c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4810      	ldr	r0, [pc, #64]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001cce:	f002 ffe1 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001cd8:	f000 f9c0 	bl	800205c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001cf4:	f002 fbb6 	bl	8004464 <HAL_TIM_OC_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001cfe:	f000 f9ad 	bl	800205c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d02:	4803      	ldr	r0, [pc, #12]	; (8001d10 <MX_TIM3_Init+0xac>)
 8001d04:	f000 fa5c 	bl	80021c0 <HAL_TIM_MspPostInit>

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000304 	.word	0x20000304
 8001d14:	40000400 	.word	0x40000400

08001d18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001d3c:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <MX_TIM4_Init+0xb0>)
 8001d3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001d60:	4818      	ldr	r0, [pc, #96]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001d62:	f002 f914 	bl	8003f8e <HAL_TIM_OC_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d6c:	f000 f976 	bl	800205c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001d80:	f002 ff88 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d8a:	f000 f967 	bl	800205c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2200      	movs	r2, #0
 8001da2:	4619      	mov	r1, r3
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001da6:	f002 fb5d 	bl	8004464 <HAL_TIM_OC_ConfigChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001db0:	f000 f954 	bl	800205c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <MX_TIM4_Init+0xac>)
 8001db6:	f000 fa03 	bl	80021c0 <HAL_TIM_MspPostInit>

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000034c 	.word	0x2000034c
 8001dc8:	40000800 	.word	0x40000800

08001dcc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001dea:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <MX_TIM5_Init+0x98>)
 8001dec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001df0:	2253      	movs	r2, #83	; 0x53
 8001df2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e00:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e0e:	4814      	ldr	r0, [pc, #80]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001e10:	f001 ffdc 	bl	8003dcc <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001e1a:	f000 f91f 	bl	800205c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480d      	ldr	r0, [pc, #52]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001e2c:	f002 fb76 	bl	800451c <HAL_TIM_ConfigClockSource>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001e36:	f000 f911 	bl	800205c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e42:	463b      	mov	r3, r7
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_TIM5_Init+0x94>)
 8001e48:	f002 ff24 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001e52:	f000 f903 	bl	800205c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000394 	.word	0x20000394
 8001e64:	40000c00 	.word	0x40000c00

08001e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <MX_USART2_UART_Init+0x50>)
 8001e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001ea0:	f002 ff7a 	bl	8004d98 <HAL_UART_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eaa:	f000 f8d7 	bl	800205c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200003dc 	.word	0x200003dc
 8001eb8:	40004400 	.word	0x40004400

08001ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_DMA_Init+0x3c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <MX_DMA_Init+0x3c>)
 8001ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_DMA_Init+0x3c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2010      	movs	r0, #16
 8001ee4:	f000 fd03 	bl	80028ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ee8:	2010      	movs	r0, #16
 8001eea:	f000 fd1c 	bl	8002926 <HAL_NVIC_EnableIRQ>

}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a29      	ldr	r2, [pc, #164]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <MX_GPIO_Init+0xe0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001f88:	4815      	ldr	r0, [pc, #84]	; (8001fe0 <MX_GPIO_Init+0xe4>)
 8001f8a:	f001 fa6d 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_DIR_1_GPIO_Port, STEPPER_DIR_1_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2140      	movs	r1, #64	; 0x40
 8001f92:	4814      	ldr	r0, [pc, #80]	; (8001fe4 <MX_GPIO_Init+0xe8>)
 8001f94:	f001 fa68 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEPPER_DIR_3_Pin STEPPER_DIR_2_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin;
 8001f98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <MX_GPIO_Init+0xe4>)
 8001fb2:	f001 f8d5 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEPPER_DIR_1_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_1_Pin;
 8001fb6:	2340      	movs	r3, #64	; 0x40
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEPPER_DIR_1_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <MX_GPIO_Init+0xe8>)
 8001fce:	f001 f8c7 	bl	8003160 <HAL_GPIO_Init>

}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	; 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_UARTEx_RxEventCallback+0x30>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d105      	bne.n	800200a <HAL_UARTEx_RxEventCallback+0x22>
	{
		flag_command_recieved=1;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <HAL_UARTEx_RxEventCallback+0x34>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]
		size_recieved=Size;
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_UARTEx_RxEventCallback+0x38>)
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	8013      	strh	r3, [r2, #0]
	}

}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40004400 	.word	0x40004400
 800201c:	200004ec 	.word	0x200004ec
 8002020:	200004f0 	.word	0x200004f0

08002024 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	if(htim == test.timer)
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	d10c      	bne.n	8002050 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(!test.movement_done)
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002038:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_TIM_PeriodElapsedCallback+0x2c>
			TIM2->ARR=calculate_auto_reload(&test);
 8002042:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002046:	4804      	ldr	r0, [pc, #16]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002048:	f7ff fa8e 	bl	8001568 <calculate_auto_reload>
 800204c:	4603      	mov	r3, r0
 800204e:	62e3      	str	r3, [r4, #44]	; 0x2c


	}
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	20000480 	.word	0x20000480

0800205c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002060:	b672      	cpsid	i
}
 8002062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002064:	e7fe      	b.n	8002064 <Error_Handler+0x8>
	...

08002068 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_MspInit+0x4c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_MspInit+0x4c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020a6:	2007      	movs	r0, #7
 80020a8:	f000 fc16 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800

080020b8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d116      	bne.n	80020f8 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a27      	ldr	r2, [pc, #156]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	201c      	movs	r0, #28
 80020ec:	f000 fbff 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f0:	201c      	movs	r0, #28
 80020f2:	f000 fc18 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020f6:	e036      	b.n	8002166 <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_TIM_OC_MspInit+0xbc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d116      	bne.n	8002130 <HAL_TIM_OC_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a19      	ldr	r2, [pc, #100]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	201d      	movs	r0, #29
 8002124:	f000 fbe3 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002128:	201d      	movs	r0, #29
 800212a:	f000 fbfc 	bl	8002926 <HAL_NVIC_EnableIRQ>
}
 800212e:	e01a      	b.n	8002166 <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM4)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_TIM_OC_MspInit+0xc0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d115      	bne.n	8002166 <HAL_TIM_OC_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_TIM_OC_MspInit+0xb8>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	201e      	movs	r0, #30
 800215c:	f000 fbc7 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002160:	201e      	movs	r0, #30
 8002162:	f000 fbe0 	bl	8002926 <HAL_NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40000400 	.word	0x40000400
 8002178:	40000800 	.word	0x40000800

0800217c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <HAL_TIM_Base_MspInit+0x3c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10d      	bne.n	80021aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_TIM_Base_MspInit+0x40>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_TIM_Base_MspInit+0x40>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_TIM_Base_MspInit+0x40>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40000c00 	.word	0x40000c00
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d11e      	bne.n	8002220 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a33      	ldr	r2, [pc, #204]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEPPER_PULSE_1_Pin;
 80021fe:	2320      	movs	r3, #32
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800220e:	2301      	movs	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_1_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4828      	ldr	r0, [pc, #160]	; (80022bc <HAL_TIM_MspPostInit+0xfc>)
 800221a:	f000 ffa1 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800221e:	e046      	b.n	80022ae <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <HAL_TIM_MspPostInit+0x100>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d11e      	bne.n	8002268 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEPPER_PULSE_2_Pin;
 8002246:	2340      	movs	r3, #64	; 0x40
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002256:	2302      	movs	r3, #2
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_2_GPIO_Port, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4816      	ldr	r0, [pc, #88]	; (80022bc <HAL_TIM_MspPostInit+0xfc>)
 8002262:	f000 ff7d 	bl	8003160 <HAL_GPIO_Init>
}
 8002266:	e022      	b.n	80022ae <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_TIM_MspPostInit+0x104>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11d      	bne.n	80022ae <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_TIM_MspPostInit+0xf8>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_PULSE_3_Pin;
 800228e:	2340      	movs	r3, #64	; 0x40
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800229e:	2302      	movs	r3, #2
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_3_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4807      	ldr	r0, [pc, #28]	; (80022c8 <HAL_TIM_MspPostInit+0x108>)
 80022aa:	f000 ff59 	bl	8003160 <HAL_GPIO_Init>
}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40000800 	.word	0x40000800
 80022c8:	40020400 	.word	0x40020400

080022cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a34      	ldr	r2, [pc, #208]	; (80023bc <HAL_UART_MspInit+0xf0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d161      	bne.n	80023b2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b33      	ldr	r3, [pc, #204]	; (80023c0 <HAL_UART_MspInit+0xf4>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a32      	ldr	r2, [pc, #200]	; (80023c0 <HAL_UART_MspInit+0xf4>)
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_UART_MspInit+0xf4>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <HAL_UART_MspInit+0xf4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a2b      	ldr	r2, [pc, #172]	; (80023c0 <HAL_UART_MspInit+0xf4>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_UART_MspInit+0xf4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002326:	230c      	movs	r3, #12
 8002328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002336:	2307      	movs	r3, #7
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	4820      	ldr	r0, [pc, #128]	; (80023c4 <HAL_UART_MspInit+0xf8>)
 8002342:	f000 ff0d 	bl	8003160 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 8002348:	4a20      	ldr	r2, [pc, #128]	; (80023cc <HAL_UART_MspInit+0x100>)
 800234a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 800234e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002352:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 8002362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002366:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002386:	4810      	ldr	r0, [pc, #64]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 8002388:	f000 fae8 	bl	800295c <HAL_DMA_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002392:	f7ff fe63 	bl	800205c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_UART_MspInit+0xfc>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	2026      	movs	r0, #38	; 0x26
 80023a8:	f000 faa1 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023ac:	2026      	movs	r0, #38	; 0x26
 80023ae:	f000 faba 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	; 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40004400 	.word	0x40004400
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	20000420 	.word	0x20000420
 80023cc:	40026088 	.word	0x40026088

080023d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <NMI_Handler+0x4>

080023d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <HardFault_Handler+0x4>

080023dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <MemManage_Handler+0x4>

080023e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <UsageFault_Handler+0x4>

080023ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241c:	f000 f96c 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <DMA1_Stream5_IRQHandler+0x10>)
 800242a:	f000 fc2f 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000420 	.word	0x20000420

08002438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <TIM2_IRQHandler+0x10>)
 800243e:	f001 ff09 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200002bc 	.word	0x200002bc

0800244c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TIM3_IRQHandler+0x10>)
 8002452:	f001 feff 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000304 	.word	0x20000304

08002460 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <TIM4_IRQHandler+0x10>)
 8002466:	f001 fef5 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000034c 	.word	0x2000034c

08002474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <USART2_IRQHandler+0x10>)
 800247a:	f002 fdd1 	bl	8005020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200003dc 	.word	0x200003dc

08002488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
	return 1;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_kill>:

int _kill(int pid, int sig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024a2:	f003 fea9 	bl	80061f8 <__errno>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2216      	movs	r2, #22
 80024aa:	601a      	str	r2, [r3, #0]
	return -1;
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_exit>:

void _exit (int status)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ffe7 	bl	8002498 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ca:	e7fe      	b.n	80024ca <_exit+0x12>

080024cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e00a      	b.n	80024f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024de:	f3af 8000 	nop.w
 80024e2:	4601      	mov	r1, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	60ba      	str	r2, [r7, #8]
 80024ea:	b2ca      	uxtb	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf0      	blt.n	80024de <_read+0x12>
	}

return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
	return -1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252e:	605a      	str	r2, [r3, #4]
	return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_isatty>:

int _isatty(int file)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
	return 1;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
	return 0;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f003 fe2a 	bl	80061f8 <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20018000 	.word	0x20018000
 80025d0:	00000400 	.word	0x00000400
 80025d4:	200004f4 	.word	0x200004f4
 80025d8:	20000510 	.word	0x20000510

080025dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <SystemInit+0x20>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <SystemInit+0x20>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002606:	490e      	ldr	r1, [pc, #56]	; (8002640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800261c:	4c0b      	ldr	r4, [pc, #44]	; (800264c <LoopFillZerobss+0x26>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800262a:	f7ff ffd7 	bl	80025dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262e:	f003 fde9 	bl	8006204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002632:	f7ff f891 	bl	8001758 <main>
  bx  lr    
 8002636:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002638:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002644:	08009e98 	.word	0x08009e98
  ldr r2, =_sbss
 8002648:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800264c:	2000050c 	.word	0x2000050c

08002650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_Init+0x40>)
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_Init+0x40>)
 800266a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_Init+0x40>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f92b 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	2000      	movs	r0, #0
 8002684:	f000 f808 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002688:	f7ff fcee 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f943 	bl	8002942 <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d4:	f000 f90b 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000008 	.word	0x20000008
 80026f4:	20000004 	.word	0x20000004

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000008 	.word	0x20000008
 800271c:	200004f8 	.word	0x200004f8

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200004f8 	.word	0x200004f8

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4907      	ldr	r1, [pc, #28]	; (80027d4 <__NVIC_EnableIRQ+0x38>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff29 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff3e 	bl	8002780 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff31 	bl	800279c <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff feda 	bl	8002720 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e099      	b.n	8002aac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	e00f      	b.n	80029ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299a:	f7ff fec1 	bl	8002720 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d908      	bls.n	80029ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e078      	b.n	8002aac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e8      	bne.n	800299a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <HAL_DMA_Init+0x158>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0307 	bic.w	r3, r3, #7
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d117      	bne.n	8002a7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fb01 	bl	8003068 <DMA_CheckFifoParam>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2240      	movs	r2, #64	; 0x40
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fab8 	bl	8002ffc <DMA_CalcBaseAndBitshift>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	223f      	movs	r2, #63	; 0x3f
 8002a96:	409a      	lsls	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	f010803f 	.word	0xf010803f

08002ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_DMA_Start_IT+0x26>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e040      	b.n	8002b60 <HAL_DMA_Start_IT+0xa8>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d12f      	bne.n	8002b52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa4a 	bl	8002fa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	223f      	movs	r2, #63	; 0x3f
 8002b12:	409a      	lsls	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0216 	orr.w	r2, r2, #22
 8002b26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e005      	b.n	8002b5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b76:	f7ff fdd3 	bl	8002720 <HAL_GetTick>
 8002b7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e052      	b.n	8002c40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0216 	bic.w	r2, r2, #22
 8002ba8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_DMA_Abort+0x62>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0208 	bic.w	r2, r2, #8
 8002bd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bea:	e013      	b.n	8002c14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bec:	f7ff fd98 	bl	8002720 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d90c      	bls.n	8002c14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2203      	movs	r2, #3
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e015      	b.n	8002c40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e4      	bne.n	8002bec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	223f      	movs	r2, #63	; 0x3f
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d004      	beq.n	8002c66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00c      	b.n	8002c80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2205      	movs	r2, #5
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c98:	4b8e      	ldr	r3, [pc, #568]	; (8002ed4 <HAL_DMA_IRQHandler+0x248>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a8e      	ldr	r2, [pc, #568]	; (8002ed8 <HAL_DMA_IRQHandler+0x24c>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	0a9b      	lsrs	r3, r3, #10
 8002ca4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0204 	bic.w	r2, r2, #4
 8002cde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d012      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	f043 0202 	orr.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2204      	movs	r2, #4
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	2204      	movs	r2, #4
 8002d52:	409a      	lsls	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	2210      	movs	r2, #16
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d043      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03c      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	2210      	movs	r2, #16
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d018      	beq.n	8002dce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d024      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
 8002dba:	e01f      	b.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e016      	b.n	8002dfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0208 	bic.w	r2, r2, #8
 8002dea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	2220      	movs	r2, #32
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 808f 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8087 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	2220      	movs	r2, #32
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d136      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0216 	bic.w	r2, r2, #22
 8002e44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x1da>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0208 	bic.w	r2, r2, #8
 8002e74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	223f      	movs	r2, #63	; 0x3f
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d07e      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
        }
        return;
 8002ea2:	e079      	b.n	8002f98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d031      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
 8002ed0:	e02c      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
 8002eec:	e01e      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0210 	bic.w	r2, r2, #16
 8002f0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d032      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2205      	movs	r2, #5
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d307      	bcc.n	8002f74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f2      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x2cc>
 8002f72:	e000      	b.n	8002f76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
 8002f96:	e000      	b.n	8002f9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f98:	bf00      	nop
    }
  }
}
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d108      	bne.n	8002fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fde:	e007      	b.n	8002ff0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3b10      	subs	r3, #16
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <DMA_CalcBaseAndBitshift+0x64>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003016:	4a13      	ldr	r2, [pc, #76]	; (8003064 <DMA_CalcBaseAndBitshift+0x68>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d909      	bls.n	800303e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	659a      	str	r2, [r3, #88]	; 0x58
 800303c:	e007      	b.n	800304e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	aaaaaaab 	.word	0xaaaaaaab
 8003064:	08009a8c 	.word	0x08009a8c

08003068 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11f      	bne.n	80030c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d856      	bhi.n	8003136 <DMA_CheckFifoParam+0xce>
 8003088:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <DMA_CheckFifoParam+0x28>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030b3 	.word	0x080030b3
 8003098:	080030a1 	.word	0x080030a1
 800309c:	08003137 	.word	0x08003137
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d046      	beq.n	800313a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e043      	b.n	800313a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030ba:	d140      	bne.n	800313e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c0:	e03d      	b.n	800313e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ca:	d121      	bne.n	8003110 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d837      	bhi.n	8003142 <DMA_CheckFifoParam+0xda>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <DMA_CheckFifoParam+0x70>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030ef 	.word	0x080030ef
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	08003101 	.word	0x08003101
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e030      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d025      	beq.n	8003146 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e022      	b.n	8003146 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003108:	d11f      	bne.n	800314a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800310e:	e01c      	b.n	800314a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d903      	bls.n	800311e <DMA_CheckFifoParam+0xb6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800311c:	e018      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      break;
 8003122:	e015      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e00b      	b.n	800314e <DMA_CheckFifoParam+0xe6>
      break;
 8003136:	bf00      	nop
 8003138:	e00a      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e008      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e006      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e004      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;   
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
    }
  } 
  
  return status; 
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e159      	b.n	8003430 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 8148 	bne.w	800342a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80a2 	beq.w	800342a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a56      	ldr	r2, [pc, #344]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b54      	ldr	r3, [pc, #336]	; (8003448 <HAL_GPIO_Init+0x2e8>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_GPIO_Init+0x2ec>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a49      	ldr	r2, [pc, #292]	; (8003450 <HAL_GPIO_Init+0x2f0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x202>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a48      	ldr	r2, [pc, #288]	; (8003454 <HAL_GPIO_Init+0x2f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x1fe>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a47      	ldr	r2, [pc, #284]	; (8003458 <HAL_GPIO_Init+0x2f8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x1fa>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a46      	ldr	r2, [pc, #280]	; (800345c <HAL_GPIO_Init+0x2fc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x1f6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a45      	ldr	r2, [pc, #276]	; (8003460 <HAL_GPIO_Init+0x300>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x1f2>
 800334e:	2304      	movs	r3, #4
 8003350:	e008      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003352:	2307      	movs	r3, #7
 8003354:	e006      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003356:	2303      	movs	r3, #3
 8003358:	e004      	b.n	8003364 <HAL_GPIO_Init+0x204>
 800335a:	2302      	movs	r3, #2
 800335c:	e002      	b.n	8003364 <HAL_GPIO_Init+0x204>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003362:	2300      	movs	r3, #0
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f002 0203 	and.w	r2, r2, #3
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	4093      	lsls	r3, r2
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003374:	4935      	ldr	r1, [pc, #212]	; (800344c <HAL_GPIO_Init+0x2ec>)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_GPIO_Init+0x304>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033a6:	4a2f      	ldr	r2, [pc, #188]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d0:	4a24      	ldr	r2, [pc, #144]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033fa:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_GPIO_Init+0x304>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003400:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_GPIO_Init+0x304>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003424:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <HAL_GPIO_Init+0x304>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3301      	adds	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b0f      	cmp	r3, #15
 8003434:	f67f aea2 	bls.w	800317c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40013800 	.word	0x40013800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40013c00 	.word	0x40013c00

08003468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
 8003474:	4613      	mov	r3, r2
 8003476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003478:	787b      	ldrb	r3, [r7, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003484:	e003      	b.n	800348e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	041a      	lsls	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	619a      	str	r2, [r3, #24]
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e267      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d075      	beq.n	80035a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ba:	4b88      	ldr	r3, [pc, #544]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d00c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c6:	4b85      	ldr	r3, [pc, #532]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d112      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d2:	4b82      	ldr	r3, [pc, #520]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034de:	d10b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	4b7e      	ldr	r3, [pc, #504]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05b      	beq.n	80035a4 <HAL_RCC_OscConfig+0x108>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d157      	bne.n	80035a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e242      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x74>
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a75      	ldr	r2, [pc, #468]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x98>
 800351a:	4b70      	ldr	r3, [pc, #448]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6f      	ldr	r2, [pc, #444]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b6d      	ldr	r3, [pc, #436]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6c      	ldr	r2, [pc, #432]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xb0>
 8003534:	4b69      	ldr	r3, [pc, #420]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a68      	ldr	r2, [pc, #416]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b66      	ldr	r3, [pc, #408]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a65      	ldr	r2, [pc, #404]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7ff f8e4 	bl	8002720 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7ff f8e0 	bl	8002720 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e207      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b5b      	ldr	r3, [pc, #364]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xc0>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7ff f8d0 	bl	8002720 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7ff f8cc 	bl	8002720 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1f3      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	4b51      	ldr	r3, [pc, #324]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0xe8>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d063      	beq.n	800367a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035be:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d11c      	bne.n	8003604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ca:	4b44      	ldr	r3, [pc, #272]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	4b41      	ldr	r3, [pc, #260]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_RCC_OscConfig+0x152>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1c7      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ee:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4937      	ldr	r1, [pc, #220]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	e03a      	b.n	800367a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800360c:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCC_OscConfig+0x244>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7ff f885 	bl	8002720 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361a:	f7ff f881 	bl	8002720 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1a8      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4925      	ldr	r1, [pc, #148]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364e:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <HAL_RCC_OscConfig+0x244>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7ff f864 	bl	8002720 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365c:	f7ff f860 	bl	8002720 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e187      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d036      	beq.n	80036f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_RCC_OscConfig+0x248>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7ff f844 	bl	8002720 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369c:	f7ff f840 	bl	8002720 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e167      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_OscConfig+0x240>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x200>
 80036ba:	e01b      	b.n	80036f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_OscConfig+0x248>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c2:	f7ff f82d 	bl	8002720 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	e00e      	b.n	80036e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ca:	f7ff f829 	bl	8002720 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d907      	bls.n	80036e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e150      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
 80036dc:	40023800 	.word	0x40023800
 80036e0:	42470000 	.word	0x42470000
 80036e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e8:	4b88      	ldr	r3, [pc, #544]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ea      	bne.n	80036ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8097 	beq.w	8003830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003706:	4b81      	ldr	r3, [pc, #516]	; (800390c <HAL_RCC_OscConfig+0x470>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10f      	bne.n	8003732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	4b7d      	ldr	r3, [pc, #500]	; (800390c <HAL_RCC_OscConfig+0x470>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a7c      	ldr	r2, [pc, #496]	; (800390c <HAL_RCC_OscConfig+0x470>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b7a      	ldr	r3, [pc, #488]	; (800390c <HAL_RCC_OscConfig+0x470>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	4b77      	ldr	r3, [pc, #476]	; (8003910 <HAL_RCC_OscConfig+0x474>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373e:	4b74      	ldr	r3, [pc, #464]	; (8003910 <HAL_RCC_OscConfig+0x474>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a73      	ldr	r2, [pc, #460]	; (8003910 <HAL_RCC_OscConfig+0x474>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374a:	f7fe ffe9 	bl	8002720 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7fe ffe5 	bl	8002720 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e10c      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCC_OscConfig+0x474>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x2ea>
 8003778:	4b64      	ldr	r3, [pc, #400]	; (800390c <HAL_RCC_OscConfig+0x470>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4a63      	ldr	r2, [pc, #396]	; (800390c <HAL_RCC_OscConfig+0x470>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6713      	str	r3, [r2, #112]	; 0x70
 8003784:	e01c      	b.n	80037c0 <HAL_RCC_OscConfig+0x324>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b05      	cmp	r3, #5
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x30c>
 800378e:	4b5f      	ldr	r3, [pc, #380]	; (800390c <HAL_RCC_OscConfig+0x470>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a5e      	ldr	r2, [pc, #376]	; (800390c <HAL_RCC_OscConfig+0x470>)
 8003794:	f043 0304 	orr.w	r3, r3, #4
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	4b5c      	ldr	r3, [pc, #368]	; (800390c <HAL_RCC_OscConfig+0x470>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a5b      	ldr	r2, [pc, #364]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0x324>
 80037a8:	4b58      	ldr	r3, [pc, #352]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a57      	ldr	r2, [pc, #348]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
 80037b4:	4b55      	ldr	r3, [pc, #340]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a54      	ldr	r2, [pc, #336]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80037ba:	f023 0304 	bic.w	r3, r3, #4
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe ffaa 	bl	8002720 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fe ffa6 	bl	8002720 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0cb      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	4b49      	ldr	r3, [pc, #292]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0ee      	beq.n	80037d0 <HAL_RCC_OscConfig+0x334>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f4:	f7fe ff94 	bl	8002720 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037fc:	f7fe ff90 	bl	8002720 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0b5      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003812:	4b3e      	ldr	r3, [pc, #248]	; (800390c <HAL_RCC_OscConfig+0x470>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ee      	bne.n	80037fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d105      	bne.n	8003830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003824:	4b39      	ldr	r3, [pc, #228]	; (800390c <HAL_RCC_OscConfig+0x470>)
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	4a38      	ldr	r2, [pc, #224]	; (800390c <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a1 	beq.w	800397c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800383a:	4b34      	ldr	r3, [pc, #208]	; (800390c <HAL_RCC_OscConfig+0x470>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b08      	cmp	r3, #8
 8003844:	d05c      	beq.n	8003900 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d141      	bne.n	80038d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384e:	4b31      	ldr	r3, [pc, #196]	; (8003914 <HAL_RCC_OscConfig+0x478>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe ff64 	bl	8002720 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe ff60 	bl	8002720 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e087      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386e:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_RCC_OscConfig+0x470>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	019b      	lsls	r3, r3, #6
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	3b01      	subs	r3, #1
 8003894:	041b      	lsls	r3, r3, #16
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	491b      	ldr	r1, [pc, #108]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_RCC_OscConfig+0x478>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe ff39 	bl	8002720 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fe ff35 	bl	8002720 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e05c      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x416>
 80038d0:	e054      	b.n	800397c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_RCC_OscConfig+0x478>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fe ff22 	bl	8002720 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe ff1e 	bl	8002720 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e045      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_RCC_OscConfig+0x470>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x444>
 80038fe:	e03d      	b.n	800397c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d107      	bne.n	8003918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e038      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000
 8003914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x4ec>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d028      	beq.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d121      	bne.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d11a      	bne.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800394e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003950:	4293      	cmp	r3, r2
 8003952:	d111      	bne.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	3b01      	subs	r3, #1
 8003962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d107      	bne.n	8003978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800

0800398c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0cc      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b68      	ldr	r3, [pc, #416]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d90c      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b63      	ldr	r3, [pc, #396]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0b8      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a58      	ldr	r2, [pc, #352]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f8:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	494d      	ldr	r1, [pc, #308]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d044      	beq.n	8003aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d119      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e067      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4934      	ldr	r1, [pc, #208]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7fe fe50 	bl	8002720 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fe fe4c 	bl	8002720 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e04f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d20c      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4916      	ldr	r1, [pc, #88]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	490e      	ldr	r1, [pc, #56]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b12:	f000 f821 	bl	8003b58 <HAL_RCC_GetSysClockFreq>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	490a      	ldr	r1, [pc, #40]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fdb0 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	08009a74 	.word	0x08009a74
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b5c:	b094      	sub	sp, #80	; 0x50
 8003b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	647b      	str	r3, [r7, #68]	; 0x44
 8003b64:	2300      	movs	r3, #0
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b68:	2300      	movs	r3, #0
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b70:	4b79      	ldr	r3, [pc, #484]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d00d      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x40>
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	f200 80e1 	bhi.w	8003d44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x34>
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b8a:	e0db      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b73      	ldr	r3, [pc, #460]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b90:	e0db      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b92:	4b73      	ldr	r3, [pc, #460]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b96:	e0d8      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b98:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba2:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d063      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	f04f 0000 	mov.w	r0, #0
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	0159      	lsls	r1, r3, #5
 8003bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bdc:	0150      	lsls	r0, r2, #5
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4621      	mov	r1, r4
 8003be4:	1a51      	subs	r1, r2, r1
 8003be6:	6139      	str	r1, [r7, #16]
 8003be8:	4629      	mov	r1, r5
 8003bea:	eb63 0301 	sbc.w	r3, r3, r1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	018b      	lsls	r3, r1, #6
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c06:	4651      	mov	r1, sl
 8003c08:	018a      	lsls	r2, r1, #6
 8003c0a:	4651      	mov	r1, sl
 8003c0c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c10:	4659      	mov	r1, fp
 8003c12:	eb63 0901 	sbc.w	r9, r3, r1
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c2a:	4690      	mov	r8, r2
 8003c2c:	4699      	mov	r9, r3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	eb18 0303 	adds.w	r3, r8, r3
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	462b      	mov	r3, r5
 8003c38:	eb49 0303 	adc.w	r3, r9, r3
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	024b      	lsls	r3, r1, #9
 8003c4e:	4621      	mov	r1, r4
 8003c50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c54:	4621      	mov	r1, r4
 8003c56:	024a      	lsls	r2, r1, #9
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5e:	2200      	movs	r2, #0
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c68:	f7fd f816 	bl	8000c98 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c74:	e058      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	4611      	mov	r1, r2
 8003c82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	f04f 0000 	mov.w	r0, #0
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	0159      	lsls	r1, r3, #5
 8003c9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca2:	0150      	lsls	r0, r2, #5
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4641      	mov	r1, r8
 8003caa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cae:	4649      	mov	r1, r9
 8003cb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cc8:	ebb2 040a 	subs.w	r4, r2, sl
 8003ccc:	eb63 050b 	sbc.w	r5, r3, fp
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	00eb      	lsls	r3, r5, #3
 8003cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cde:	00e2      	lsls	r2, r4, #3
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	4643      	mov	r3, r8
 8003ce6:	18e3      	adds	r3, r4, r3
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	464b      	mov	r3, r9
 8003cec:	eb45 0303 	adc.w	r3, r5, r3
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfe:	4629      	mov	r1, r5
 8003d00:	028b      	lsls	r3, r1, #10
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d08:	4621      	mov	r1, r4
 8003d0a:	028a      	lsls	r2, r1, #10
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	2200      	movs	r2, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	61fa      	str	r2, [r7, #28]
 8003d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d1c:	f7fc ffbc 	bl	8000c98 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3750      	adds	r7, #80	; 0x50
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	007a1200 	.word	0x007a1200

08003d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000000 	.word	0x20000000

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08009a84 	.word	0x08009a84

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffdc 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0b5b      	lsrs	r3, r3, #13
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08009a84 	.word	0x08009a84

08003dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe f9c2 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 fc76 	bl	80046fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d001      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e044      	b.n	8003f0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1e      	ldr	r2, [pc, #120]	; (8003f1c <HAL_TIM_Base_Start_IT+0xb0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d018      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d013      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <HAL_TIM_Base_Start_IT+0xb4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00e      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d009      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_TIM_Base_Start_IT+0xbc>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_TIM_Base_Start_IT+0xc0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d111      	bne.n	8003efc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d010      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	e007      	b.n	8003f0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40014000 	.word	0x40014000

08003f30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10f      	bne.n	8003f78 <HAL_TIM_Base_Stop_IT+0x48>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	f240 4344 	movw	r3, #1092	; 0x444
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_Base_Stop_IT+0x48>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e041      	b.n	8004024 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d106      	bne.n	8003fba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fe f87f 	bl	80020b8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f000 fb95 	bl	80046fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <HAL_TIM_OC_Start+0x24>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e022      	b.n	8004096 <HAL_TIM_OC_Start+0x6a>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b04      	cmp	r3, #4
 8004054:	d109      	bne.n	800406a <HAL_TIM_OC_Start+0x3e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	bf14      	ite	ne
 8004062:	2301      	movne	r3, #1
 8004064:	2300      	moveq	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	e015      	b.n	8004096 <HAL_TIM_OC_Start+0x6a>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d109      	bne.n	8004084 <HAL_TIM_OC_Start+0x58>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e008      	b.n	8004096 <HAL_TIM_OC_Start+0x6a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e068      	b.n	8004170 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_OC_Start+0x82>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ac:	e013      	b.n	80040d6 <HAL_TIM_OC_Start+0xaa>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d104      	bne.n	80040be <HAL_TIM_OC_Start+0x92>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	e00b      	b.n	80040d6 <HAL_TIM_OC_Start+0xaa>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_OC_Start+0xa2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040cc:	e003      	b.n	80040d6 <HAL_TIM_OC_Start+0xaa>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2201      	movs	r2, #1
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fdb2 	bl	8004c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a23      	ldr	r2, [pc, #140]	; (8004178 <HAL_TIM_OC_Start+0x14c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d107      	bne.n	80040fe <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <HAL_TIM_OC_Start+0x14c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d018      	beq.n	800413a <HAL_TIM_OC_Start+0x10e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d013      	beq.n	800413a <HAL_TIM_OC_Start+0x10e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_TIM_OC_Start+0x150>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00e      	beq.n	800413a <HAL_TIM_OC_Start+0x10e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a17      	ldr	r2, [pc, #92]	; (8004180 <HAL_TIM_OC_Start+0x154>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_TIM_OC_Start+0x10e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <HAL_TIM_OC_Start+0x158>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_TIM_OC_Start+0x10e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a14      	ldr	r2, [pc, #80]	; (8004188 <HAL_TIM_OC_Start+0x15c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d111      	bne.n	800415e <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b06      	cmp	r3, #6
 800414a:	d010      	beq.n	800416e <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415c:	e007      	b.n	800416e <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40010000 	.word	0x40010000
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40014000 	.word	0x40014000

0800418c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	6839      	ldr	r1, [r7, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fd52 	bl	8004c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <HAL_TIM_OC_Stop+0xc4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d117      	bne.n	80041de <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <HAL_TIM_OC_Stop+0x52>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	f240 4344 	movw	r3, #1092	; 0x444
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <HAL_TIM_OC_Stop+0x52>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <HAL_TIM_OC_Stop+0x82>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	f240 4344 	movw	r3, #1092	; 0x444
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <HAL_TIM_OC_Stop+0x82>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <HAL_TIM_OC_Stop+0x92>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800421c:	e013      	b.n	8004246 <HAL_TIM_OC_Stop+0xba>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d104      	bne.n	800422e <HAL_TIM_OC_Stop+0xa2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	e00b      	b.n	8004246 <HAL_TIM_OC_Stop+0xba>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d104      	bne.n	800423e <HAL_TIM_OC_Stop+0xb2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423c:	e003      	b.n	8004246 <HAL_TIM_OC_Stop+0xba>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40010000 	.word	0x40010000

08004254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0202 	mvn.w	r2, #2
 8004280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa11 	bl	80046be <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fa03 	bl	80046aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fa14 	bl	80046d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0204 	mvn.w	r2, #4
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f9e7 	bl	80046be <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f9d9 	bl	80046aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f9ea 	bl	80046d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	d122      	bne.n	8004358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0208 	mvn.w	r2, #8
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f9bd 	bl	80046be <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9af 	bl	80046aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f9c0 	bl	80046d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b10      	cmp	r3, #16
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0210 	mvn.w	r2, #16
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2208      	movs	r2, #8
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f993 	bl	80046be <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f985 	bl	80046aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f996 	bl	80046d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0201 	mvn.w	r2, #1
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fe26 	bl	8002024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fcc0 	bl	8004d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f95b 	bl	80046e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0220 	mvn.w	r2, #32
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fc8a 	bl	8004d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_TIM_OC_ConfigChannel+0x1e>
 800447e:	2302      	movs	r3, #2
 8004480:	e048      	b.n	8004514 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	d839      	bhi.n	8004504 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044cd 	.word	0x080044cd
 800449c:	08004505 	.word	0x08004505
 80044a0:	08004505 	.word	0x08004505
 80044a4:	08004505 	.word	0x08004505
 80044a8:	080044db 	.word	0x080044db
 80044ac:	08004505 	.word	0x08004505
 80044b0:	08004505 	.word	0x08004505
 80044b4:	08004505 	.word	0x08004505
 80044b8:	080044e9 	.word	0x080044e9
 80044bc:	08004505 	.word	0x08004505
 80044c0:	08004505 	.word	0x08004505
 80044c4:	08004505 	.word	0x08004505
 80044c8:	080044f7 	.word	0x080044f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f992 	bl	80047fc <TIM_OC1_SetConfig>
      break;
 80044d8:	e017      	b.n	800450a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f9f1 	bl	80048c8 <TIM_OC2_SetConfig>
      break;
 80044e6:	e010      	b.n	800450a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fa56 	bl	80049a0 <TIM_OC3_SetConfig>
      break;
 80044f4:	e009      	b.n	800450a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fab9 	bl	8004a74 <TIM_OC4_SetConfig>
      break;
 8004502:	e002      	b.n	800450a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
      break;
 8004508:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIM_ConfigClockSource+0x1c>
 8004534:	2302      	movs	r3, #2
 8004536:	e0b4      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x186>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800455e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004570:	d03e      	beq.n	80045f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004576:	f200 8087 	bhi.w	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457e:	f000 8086 	beq.w	800468e <HAL_TIM_ConfigClockSource+0x172>
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	d87f      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b70      	cmp	r3, #112	; 0x70
 800458a:	d01a      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0xa6>
 800458c:	2b70      	cmp	r3, #112	; 0x70
 800458e:	d87b      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b60      	cmp	r3, #96	; 0x60
 8004592:	d050      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x11a>
 8004594:	2b60      	cmp	r3, #96	; 0x60
 8004596:	d877      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b50      	cmp	r3, #80	; 0x50
 800459a:	d03c      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0xfa>
 800459c:	2b50      	cmp	r3, #80	; 0x50
 800459e:	d873      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d058      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x13a>
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d86f      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b30      	cmp	r3, #48	; 0x30
 80045aa:	d064      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d86b      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d060      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d867      	bhi.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d05c      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d05a      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x15a>
 80045c0:	e062      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6899      	ldr	r1, [r3, #8]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f000 fb19 	bl	8004c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	609a      	str	r2, [r3, #8]
      break;
 80045ee:	e04f      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6899      	ldr	r1, [r3, #8]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f000 fb02 	bl	8004c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004612:	609a      	str	r2, [r3, #8]
      break;
 8004614:	e03c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	461a      	mov	r2, r3
 8004624:	f000 fa76 	bl	8004b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2150      	movs	r1, #80	; 0x50
 800462e:	4618      	mov	r0, r3
 8004630:	f000 facf 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 8004634:	e02c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fa95 	bl	8004b72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2160      	movs	r1, #96	; 0x60
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fabf 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 8004654:	e01c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fa56 	bl	8004b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2140      	movs	r1, #64	; 0x40
 800466e:	4618      	mov	r0, r3
 8004670:	f000 faaf 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 8004674:	e00c      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f000 faa6 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 8004686:	e003      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
      break;
 800468c:	e000      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800468e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a34      	ldr	r2, [pc, #208]	; (80047e0 <TIM_Base_SetConfig+0xe4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00f      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471a:	d00b      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a31      	ldr	r2, [pc, #196]	; (80047e4 <TIM_Base_SetConfig+0xe8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a30      	ldr	r2, [pc, #192]	; (80047e8 <TIM_Base_SetConfig+0xec>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2f      	ldr	r2, [pc, #188]	; (80047ec <TIM_Base_SetConfig+0xf0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <TIM_Base_SetConfig+0xe4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01b      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d017      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <TIM_Base_SetConfig+0xe8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <TIM_Base_SetConfig+0xec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00f      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a20      	ldr	r2, [pc, #128]	; (80047ec <TIM_Base_SetConfig+0xf0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <TIM_Base_SetConfig+0xf4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <TIM_Base_SetConfig+0xf8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <TIM_Base_SetConfig+0xfc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <TIM_Base_SetConfig+0xe4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d103      	bne.n	80047cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	615a      	str	r2, [r3, #20]
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800

080047fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f023 0201 	bic.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 0302 	bic.w	r3, r3, #2
 8004844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <TIM_OC1_SetConfig+0xc8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d10c      	bne.n	8004872 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0308 	bic.w	r3, r3, #8
 800485e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <TIM_OC1_SetConfig+0xc8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d111      	bne.n	800489e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40010000 	.word	0x40010000

080048c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0320 	bic.w	r3, r3, #32
 8004912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1e      	ldr	r2, [pc, #120]	; (800499c <TIM_OC2_SetConfig+0xd4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10d      	bne.n	8004944 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <TIM_OC2_SetConfig+0xd4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d113      	bne.n	8004974 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000

080049a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <TIM_OC3_SetConfig+0xd0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10d      	bne.n	8004a1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <TIM_OC3_SetConfig+0xd0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d113      	bne.n	8004a4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40010000 	.word	0x40010000

08004a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <TIM_OC4_SetConfig+0x9c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d109      	bne.n	8004ae8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40010000 	.word	0x40010000

08004b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f023 030a 	bic.w	r3, r3, #10
 8004b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b087      	sub	sp, #28
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f023 0210 	bic.w	r2, r3, #16
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f043 0307 	orr.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	021a      	lsls	r2, r3, #8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a1a      	ldr	r2, [r3, #32]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1a      	ldr	r2, [r3, #32]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e050      	b.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d018      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf8:	d013      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00e      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a16      	ldr	r2, [pc, #88]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10c      	bne.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	40014000 	.word	0x40014000

08004d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e03f      	b.n	8004e2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fd fa84 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	; 0x24
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 ff97 	bl	8005d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b08a      	sub	sp, #40	; 0x28
 8004e36:	af02      	add	r7, sp, #8
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d17c      	bne.n	8004f4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_UART_Transmit+0x2c>
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e075      	b.n	8004f4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_UART_Transmit+0x3e>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e06e      	b.n	8004f4e <HAL_UART_Transmit+0x11c>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2221      	movs	r2, #33	; 0x21
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e86:	f7fd fc4b 	bl	8002720 <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea0:	d108      	bne.n	8004eb4 <HAL_UART_Transmit+0x82>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e003      	b.n	8004ebc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ec4:	e02a      	b.n	8004f1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fc53 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e036      	b.n	8004f4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10b      	bne.n	8004efe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	3302      	adds	r3, #2
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	e007      	b.n	8004f0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1cf      	bne.n	8004ec6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2140      	movs	r1, #64	; 0x40
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fc23 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e006      	b.n	8004f4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e000      	b.n	8004f4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f4c:	2302      	movs	r3, #2
  }
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3720      	adds	r7, #32
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b08c      	sub	sp, #48	; 0x30
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	4613      	mov	r3, r2
 8004f62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d152      	bne.n	8005016 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e04b      	b.n	8005018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e044      	b.n	8005018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fc58 	bl	8005858 <UART_Start_Receive_DMA>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d12c      	bne.n	8005010 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d125      	bne.n	800500a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f043 0310 	orr.w	r3, r3, #16
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ff6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6a39      	ldr	r1, [r7, #32]
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	61fb      	str	r3, [r7, #28]
   return(result);
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e5      	bne.n	8004fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005008:	e002      	b.n	8005010 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005014:	e000      	b.n	8005018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005016:	2302      	movs	r3, #2
  }
}
 8005018:	4618      	mov	r0, r3
 800501a:	3730      	adds	r7, #48	; 0x30
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b0ba      	sub	sp, #232	; 0xe8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005046:	2300      	movs	r3, #0
 8005048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800504c:	2300      	movs	r3, #0
 800504e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800505e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_UART_IRQHandler+0x66>
 8005072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fd8b 	bl	8005b9a <UART_Receive_IT>
      return;
 8005084:	e256      	b.n	8005534 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80de 	beq.w	800524c <HAL_UART_IRQHandler+0x22c>
 8005090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80d1 	beq.w	800524c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_UART_IRQHandler+0xae>
 80050b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f043 0201 	orr.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_UART_IRQHandler+0xd2>
 80050da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0202 	orr.w	r2, r3, #2
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <HAL_UART_IRQHandler+0xf6>
 80050fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f043 0204 	orr.w	r2, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d011      	beq.n	8005146 <HAL_UART_IRQHandler+0x126>
 8005122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d105      	bne.n	800513a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800512e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f043 0208 	orr.w	r2, r3, #8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 81ed 	beq.w	800552a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_UART_IRQHandler+0x14e>
 800515c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fd16 	bl	8005b9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <HAL_UART_IRQHandler+0x17a>
 8005192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d04f      	beq.n	800523a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fc1e 	bl	80059dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d141      	bne.n	8005232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3314      	adds	r3, #20
 80051b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1d9      	bne.n	80051ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d013      	beq.n	800522a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	4a7d      	ldr	r2, [pc, #500]	; (80053fc <HAL_UART_IRQHandler+0x3dc>)
 8005208:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	4618      	mov	r0, r3
 8005210:	f7fd fd1a 	bl	8002c48 <HAL_DMA_Abort_IT>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d016      	beq.n	8005248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005224:	4610      	mov	r0, r2
 8005226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	e00e      	b.n	8005248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9a4 	bl	8005578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	e00a      	b.n	8005248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9a0 	bl	8005578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e006      	b.n	8005248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f99c 	bl	8005578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005246:	e170      	b.n	800552a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	bf00      	nop
    return;
 800524a:	e16e      	b.n	800552a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	2b01      	cmp	r3, #1
 8005252:	f040 814a 	bne.w	80054ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8143 	beq.w	80054ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 813c 	beq.w	80054ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	f040 80b4 	bne.w	8005400 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8140 	beq.w	800552e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052b6:	429a      	cmp	r2, r3
 80052b8:	f080 8139 	bcs.w	800552e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ce:	f000 8088 	beq.w	80053e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800530a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1d9      	bne.n	80052d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800532e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3314      	adds	r3, #20
 800533e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800534a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e1      	bne.n	800531e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3314      	adds	r3, #20
 8005360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800536a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800536c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800537e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800538c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e3      	bne.n	800535a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b2:	f023 0310 	bic.w	r3, r3, #16
 80053b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80053c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e3      	bne.n	80053a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fd fbc3 	bl	8002b68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fc fdf8 	bl	8001fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053f8:	e099      	b.n	800552e <HAL_UART_IRQHandler+0x50e>
 80053fa:	bf00      	nop
 80053fc:	08005aa3 	.word	0x08005aa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005408:	b29b      	uxth	r3, r3
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 808b 	beq.w	8005532 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800541c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8086 	beq.w	8005532 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800544a:	647a      	str	r2, [r7, #68]	; 0x44
 800544c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e3      	bne.n	8005426 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3314      	adds	r3, #20
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	623b      	str	r3, [r7, #32]
   return(result);
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3314      	adds	r3, #20
 800547e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005482:	633a      	str	r2, [r7, #48]	; 0x30
 8005484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e3      	bne.n	800545e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0310 	bic.w	r3, r3, #16
 80054ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054c8:	61fa      	str	r2, [r7, #28]
 80054ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	69b9      	ldr	r1, [r7, #24]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	617b      	str	r3, [r7, #20]
   return(result);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e3      	bne.n	80054a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7fc fd80 	bl	8001fe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054e8:	e023      	b.n	8005532 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <HAL_UART_IRQHandler+0x4ea>
 80054f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fae1 	bl	8005aca <UART_Transmit_IT>
    return;
 8005508:	e014      	b.n	8005534 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00e      	beq.n	8005534 <HAL_UART_IRQHandler+0x514>
 8005516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fb21 	bl	8005b6a <UART_EndTransmit_IT>
    return;
 8005528:	e004      	b.n	8005534 <HAL_UART_IRQHandler+0x514>
    return;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <HAL_UART_IRQHandler+0x514>
      return;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <HAL_UART_IRQHandler+0x514>
      return;
 8005532:	bf00      	nop
  }
}
 8005534:	37e8      	adds	r7, #232	; 0xe8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop

0800553c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b09c      	sub	sp, #112	; 0x70
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d172      	bne.n	800568e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80055a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055aa:	2200      	movs	r2, #0
 80055ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80055c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80055d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e5      	bne.n	80055ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3314      	adds	r3, #20
 80055e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	667b      	str	r3, [r7, #100]	; 0x64
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3314      	adds	r3, #20
 8005600:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005602:	647a      	str	r2, [r7, #68]	; 0x44
 8005604:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3314      	adds	r3, #20
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	623b      	str	r3, [r7, #32]
   return(result);
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562c:	663b      	str	r3, [r7, #96]	; 0x60
 800562e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005636:	633a      	str	r2, [r7, #48]	; 0x30
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800564a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	2b01      	cmp	r3, #1
 8005658:	d119      	bne.n	800568e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	60fb      	str	r3, [r7, #12]
   return(result);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f023 0310 	bic.w	r3, r3, #16
 8005670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800567a:	61fa      	str	r2, [r7, #28]
 800567c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	69b9      	ldr	r1, [r7, #24]
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	617b      	str	r3, [r7, #20]
   return(result);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	2b01      	cmp	r3, #1
 8005694:	d106      	bne.n	80056a4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800569a:	4619      	mov	r1, r3
 800569c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800569e:	f7fc fca3 	bl	8001fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056a2:	e002      	b.n	80056aa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80056a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80056a6:	f7ff ff53 	bl	8005550 <HAL_UART_RxCpltCallback>
}
 80056aa:	bf00      	nop
 80056ac:	3770      	adds	r7, #112	; 0x70
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d108      	bne.n	80056da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	4619      	mov	r1, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7fc fc88 	bl	8001fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056d8:	e002      	b.n	80056e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff ff42 	bl	8005564 <HAL_UART_RxHalfCpltCallback>
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b21      	cmp	r3, #33	; 0x21
 800571a:	d108      	bne.n	800572e <UART_DMAError+0x46>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005728:	68b8      	ldr	r0, [r7, #8]
 800572a:	f000 f92f 	bl	800598c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b22      	cmp	r3, #34	; 0x22
 800574e:	d108      	bne.n	8005762 <UART_DMAError+0x7a>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2200      	movs	r2, #0
 800575a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800575c:	68b8      	ldr	r0, [r7, #8]
 800575e:	f000 f93d 	bl	80059dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0210 	orr.w	r2, r3, #16
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800576e:	68b8      	ldr	r0, [r7, #8]
 8005770:	f7ff ff02 	bl	8005578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b090      	sub	sp, #64	; 0x40
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578c:	e050      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005794:	d04c      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <UART_WaitOnFlagUntilTimeout+0x30>
 800579c:	f7fc ffc0 	bl	8002720 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d241      	bcs.n	8005830 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057cc:	637a      	str	r2, [r7, #52]	; 0x34
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005800:	623a      	str	r2, [r7, #32]
 8005802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	69f9      	ldr	r1, [r7, #28]
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	61bb      	str	r3, [r7, #24]
   return(result);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e00f      	b.n	8005850 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	429a      	cmp	r2, r3
 800584c:	d09f      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3740      	adds	r7, #64	; 0x40
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b098      	sub	sp, #96	; 0x60
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2222      	movs	r2, #34	; 0x22
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	4a3e      	ldr	r2, [pc, #248]	; (8005980 <UART_Start_Receive_DMA+0x128>)
 8005886:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	4a3d      	ldr	r2, [pc, #244]	; (8005984 <UART_Start_Receive_DMA+0x12c>)
 800588e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	4a3c      	ldr	r2, [pc, #240]	; (8005988 <UART_Start_Receive_DMA+0x130>)
 8005896:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	2200      	movs	r2, #0
 800589e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80058a0:	f107 0308 	add.w	r3, r7, #8
 80058a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	f7fd f8fe 	bl	8002ab8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80058fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e5      	bne.n	80058da <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3314      	adds	r3, #20
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	657b      	str	r3, [r7, #84]	; 0x54
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800592e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e5      	bne.n	800590e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3314      	adds	r3, #20
 8005948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	617b      	str	r3, [r7, #20]
   return(result);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005958:	653b      	str	r3, [r7, #80]	; 0x50
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3314      	adds	r3, #20
 8005960:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005962:	627a      	str	r2, [r7, #36]	; 0x24
 8005964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6a39      	ldr	r1, [r7, #32]
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e5      	bne.n	8005942 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3760      	adds	r7, #96	; 0x60
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	0800558d 	.word	0x0800558d
 8005984:	080056b3 	.word	0x080056b3
 8005988:	080056e9 	.word	0x080056e9

0800598c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b089      	sub	sp, #36	; 0x24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	61ba      	str	r2, [r7, #24]
 80059b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6979      	ldr	r1, [r7, #20]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	613b      	str	r3, [r7, #16]
   return(result);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80059d0:	bf00      	nop
 80059d2:	3724      	adds	r7, #36	; 0x24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059dc:	b480      	push	{r7}
 80059de:	b095      	sub	sp, #84	; 0x54
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a04:	643a      	str	r2, [r7, #64]	; 0x40
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e5      	bne.n	80059e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f023 0301 	bic.w	r3, r3, #1
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3314      	adds	r3, #20
 8005a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e5      	bne.n	8005a18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d119      	bne.n	8005a88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f023 0310 	bic.w	r3, r3, #16
 8005a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a74:	61ba      	str	r2, [r7, #24]
 8005a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6979      	ldr	r1, [r7, #20]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	613b      	str	r3, [r7, #16]
   return(result);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a96:	bf00      	nop
 8005a98:	3754      	adds	r7, #84	; 0x54
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff fd5b 	bl	8005578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b21      	cmp	r3, #33	; 0x21
 8005adc:	d13e      	bne.n	8005b5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d114      	bne.n	8005b12 <UART_Transmit_IT+0x48>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d110      	bne.n	8005b12 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	621a      	str	r2, [r3, #32]
 8005b10:	e008      	b.n	8005b24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6211      	str	r1, [r2, #32]
 8005b1c:	781a      	ldrb	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4619      	mov	r1, r3
 8005b32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10f      	bne.n	8005b58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e000      	b.n	8005b5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fcd6 	bl	800553c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b08c      	sub	sp, #48	; 0x30
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b22      	cmp	r3, #34	; 0x22
 8005bac:	f040 80ab 	bne.w	8005d06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb8:	d117      	bne.n	8005bea <UART_Receive_IT+0x50>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d113      	bne.n	8005bea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
 8005be8:	e026      	b.n	8005c38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d007      	beq.n	8005c0e <UART_Receive_IT+0x74>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <UART_Receive_IT+0x82>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	e008      	b.n	8005c2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4619      	mov	r1, r3
 8005c46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d15a      	bne.n	8005d02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0220 	bic.w	r2, r2, #32
 8005c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d135      	bne.n	8005cf8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f023 0310 	bic.w	r3, r3, #16
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	623a      	str	r2, [r7, #32]
 8005cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	69f9      	ldr	r1, [r7, #28]
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b10      	cmp	r3, #16
 8005cd2:	d10a      	bne.n	8005cea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fc f979 	bl	8001fe8 <HAL_UARTEx_RxEventCallback>
 8005cf6:	e002      	b.n	8005cfe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff fc29 	bl	8005550 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e002      	b.n	8005d08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
  }
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3730      	adds	r7, #48	; 0x30
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d14:	b0c0      	sub	sp, #256	; 0x100
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2c:	68d9      	ldr	r1, [r3, #12]
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	ea40 0301 	orr.w	r3, r0, r1
 8005d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d68:	f021 010c 	bic.w	r1, r1, #12
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d76:	430b      	orrs	r3, r1
 8005d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8a:	6999      	ldr	r1, [r3, #24]
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	ea40 0301 	orr.w	r3, r0, r1
 8005d96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b8f      	ldr	r3, [pc, #572]	; (8005fdc <UART_SetConfig+0x2cc>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d005      	beq.n	8005db0 <UART_SetConfig+0xa0>
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b8d      	ldr	r3, [pc, #564]	; (8005fe0 <UART_SetConfig+0x2d0>)
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d104      	bne.n	8005dba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db0:	f7fd fff8 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8005db4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005db8:	e003      	b.n	8005dc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dba:	f7fd ffdf 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8005dbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dcc:	f040 810c 	bne.w	8005fe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	1891      	adds	r1, r2, r2
 8005de8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dea:	415b      	adcs	r3, r3
 8005dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005df2:	4621      	mov	r1, r4
 8005df4:	eb12 0801 	adds.w	r8, r2, r1
 8005df8:	4629      	mov	r1, r5
 8005dfa:	eb43 0901 	adc.w	r9, r3, r1
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e12:	4690      	mov	r8, r2
 8005e14:	4699      	mov	r9, r3
 8005e16:	4623      	mov	r3, r4
 8005e18:	eb18 0303 	adds.w	r3, r8, r3
 8005e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e20:	462b      	mov	r3, r5
 8005e22:	eb49 0303 	adc.w	r3, r9, r3
 8005e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e3e:	460b      	mov	r3, r1
 8005e40:	18db      	adds	r3, r3, r3
 8005e42:	653b      	str	r3, [r7, #80]	; 0x50
 8005e44:	4613      	mov	r3, r2
 8005e46:	eb42 0303 	adc.w	r3, r2, r3
 8005e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e54:	f7fa ff20 	bl	8000c98 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4b61      	ldr	r3, [pc, #388]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	011c      	lsls	r4, r3, #4
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	1891      	adds	r1, r2, r2
 8005e7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e80:	415b      	adcs	r3, r3
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e88:	4641      	mov	r1, r8
 8005e8a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e8e:	4649      	mov	r1, r9
 8005e90:	eb43 0b01 	adc.w	fp, r3, r1
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ea8:	4692      	mov	sl, r2
 8005eaa:	469b      	mov	fp, r3
 8005eac:	4643      	mov	r3, r8
 8005eae:	eb1a 0303 	adds.w	r3, sl, r3
 8005eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8005ebc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ecc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ed0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	18db      	adds	r3, r3, r3
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eda:	4613      	mov	r3, r2
 8005edc:	eb42 0303 	adc.w	r3, r2, r3
 8005ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005eea:	f7fa fed5 	bl	8000c98 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2264      	movs	r2, #100	; 0x64
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	1acb      	subs	r3, r1, r3
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f18:	441c      	add	r4, r3
 8005f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	1891      	adds	r1, r2, r2
 8005f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f34:	415b      	adcs	r3, r3
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	1851      	adds	r1, r2, r1
 8005f40:	6339      	str	r1, [r7, #48]	; 0x30
 8005f42:	4649      	mov	r1, r9
 8005f44:	414b      	adcs	r3, r1
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f54:	4659      	mov	r1, fp
 8005f56:	00cb      	lsls	r3, r1, #3
 8005f58:	4651      	mov	r1, sl
 8005f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5e:	4651      	mov	r1, sl
 8005f60:	00ca      	lsls	r2, r1, #3
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	4642      	mov	r2, r8
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f70:	464b      	mov	r3, r9
 8005f72:	460a      	mov	r2, r1
 8005f74:	eb42 0303 	adc.w	r3, r2, r3
 8005f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f90:	460b      	mov	r3, r1
 8005f92:	18db      	adds	r3, r3, r3
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f96:	4613      	mov	r3, r2
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fa6:	f7fa fe77 	bl	8000c98 <__aeabi_uldivmod>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	2164      	movs	r1, #100	; 0x64
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	3332      	adds	r3, #50	; 0x32
 8005fc2:	4a08      	ldr	r2, [pc, #32]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	f003 0207 	and.w	r2, r3, #7
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4422      	add	r2, r4
 8005fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fd8:	e105      	b.n	80061e6 <UART_SetConfig+0x4d6>
 8005fda:	bf00      	nop
 8005fdc:	40011000 	.word	0x40011000
 8005fe0:	40011400 	.word	0x40011400
 8005fe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ff2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ffa:	4642      	mov	r2, r8
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	1891      	adds	r1, r2, r2
 8006000:	6239      	str	r1, [r7, #32]
 8006002:	415b      	adcs	r3, r3
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800600a:	4641      	mov	r1, r8
 800600c:	1854      	adds	r4, r2, r1
 800600e:	4649      	mov	r1, r9
 8006010:	eb43 0501 	adc.w	r5, r3, r1
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	00eb      	lsls	r3, r5, #3
 800601e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006022:	00e2      	lsls	r2, r4, #3
 8006024:	4614      	mov	r4, r2
 8006026:	461d      	mov	r5, r3
 8006028:	4643      	mov	r3, r8
 800602a:	18e3      	adds	r3, r4, r3
 800602c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006030:	464b      	mov	r3, r9
 8006032:	eb45 0303 	adc.w	r3, r5, r3
 8006036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006056:	4629      	mov	r1, r5
 8006058:	008b      	lsls	r3, r1, #2
 800605a:	4621      	mov	r1, r4
 800605c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006060:	4621      	mov	r1, r4
 8006062:	008a      	lsls	r2, r1, #2
 8006064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006068:	f7fa fe16 	bl	8000c98 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4b60      	ldr	r3, [pc, #384]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006072:	fba3 2302 	umull	r2, r3, r3, r2
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	011c      	lsls	r4, r3, #4
 800607a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006084:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	1891      	adds	r1, r2, r2
 8006092:	61b9      	str	r1, [r7, #24]
 8006094:	415b      	adcs	r3, r3
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800609c:	4641      	mov	r1, r8
 800609e:	1851      	adds	r1, r2, r1
 80060a0:	6139      	str	r1, [r7, #16]
 80060a2:	4649      	mov	r1, r9
 80060a4:	414b      	adcs	r3, r1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b4:	4659      	mov	r1, fp
 80060b6:	00cb      	lsls	r3, r1, #3
 80060b8:	4651      	mov	r1, sl
 80060ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060be:	4651      	mov	r1, sl
 80060c0:	00ca      	lsls	r2, r1, #3
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	4642      	mov	r2, r8
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d0:	464b      	mov	r3, r9
 80060d2:	460a      	mov	r2, r1
 80060d4:	eb42 0303 	adc.w	r3, r2, r3
 80060d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80060e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060f4:	4649      	mov	r1, r9
 80060f6:	008b      	lsls	r3, r1, #2
 80060f8:	4641      	mov	r1, r8
 80060fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060fe:	4641      	mov	r1, r8
 8006100:	008a      	lsls	r2, r1, #2
 8006102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006106:	f7fa fdc7 	bl	8000c98 <__aeabi_uldivmod>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006110:	fba3 1302 	umull	r1, r3, r3, r2
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	2164      	movs	r1, #100	; 0x64
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	3332      	adds	r3, #50	; 0x32
 8006122:	4a34      	ldr	r2, [pc, #208]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612e:	441c      	add	r4, r3
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006134:	2200      	movs	r2, #0
 8006136:	673b      	str	r3, [r7, #112]	; 0x70
 8006138:	677a      	str	r2, [r7, #116]	; 0x74
 800613a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800613e:	4642      	mov	r2, r8
 8006140:	464b      	mov	r3, r9
 8006142:	1891      	adds	r1, r2, r2
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	415b      	adcs	r3, r3
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800614e:	4641      	mov	r1, r8
 8006150:	1851      	adds	r1, r2, r1
 8006152:	6039      	str	r1, [r7, #0]
 8006154:	4649      	mov	r1, r9
 8006156:	414b      	adcs	r3, r1
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	f04f 0300 	mov.w	r3, #0
 8006162:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006166:	4659      	mov	r1, fp
 8006168:	00cb      	lsls	r3, r1, #3
 800616a:	4651      	mov	r1, sl
 800616c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006170:	4651      	mov	r1, sl
 8006172:	00ca      	lsls	r2, r1, #3
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	4603      	mov	r3, r0
 800617a:	4642      	mov	r2, r8
 800617c:	189b      	adds	r3, r3, r2
 800617e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006180:	464b      	mov	r3, r9
 8006182:	460a      	mov	r2, r1
 8006184:	eb42 0303 	adc.w	r3, r2, r3
 8006188:	66fb      	str	r3, [r7, #108]	; 0x6c
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	663b      	str	r3, [r7, #96]	; 0x60
 8006194:	667a      	str	r2, [r7, #100]	; 0x64
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061a2:	4649      	mov	r1, r9
 80061a4:	008b      	lsls	r3, r1, #2
 80061a6:	4641      	mov	r1, r8
 80061a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ac:	4641      	mov	r1, r8
 80061ae:	008a      	lsls	r2, r1, #2
 80061b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061b4:	f7fa fd70 	bl	8000c98 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <UART_SetConfig+0x4e4>)
 80061be:	fba3 1302 	umull	r1, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	2164      	movs	r1, #100	; 0x64
 80061c6:	fb01 f303 	mul.w	r3, r1, r3
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	3332      	adds	r3, #50	; 0x32
 80061d0:	4a08      	ldr	r2, [pc, #32]	; (80061f4 <UART_SetConfig+0x4e4>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4422      	add	r2, r4
 80061e4:	609a      	str	r2, [r3, #8]
}
 80061e6:	bf00      	nop
 80061e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061ec:	46bd      	mov	sp, r7
 80061ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f2:	bf00      	nop
 80061f4:	51eb851f 	.word	0x51eb851f

080061f8 <__errno>:
 80061f8:	4b01      	ldr	r3, [pc, #4]	; (8006200 <__errno+0x8>)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	2000000c 	.word	0x2000000c

08006204 <__libc_init_array>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	4d0d      	ldr	r5, [pc, #52]	; (800623c <__libc_init_array+0x38>)
 8006208:	4c0d      	ldr	r4, [pc, #52]	; (8006240 <__libc_init_array+0x3c>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	2600      	movs	r6, #0
 8006210:	42a6      	cmp	r6, r4
 8006212:	d109      	bne.n	8006228 <__libc_init_array+0x24>
 8006214:	4d0b      	ldr	r5, [pc, #44]	; (8006244 <__libc_init_array+0x40>)
 8006216:	4c0c      	ldr	r4, [pc, #48]	; (8006248 <__libc_init_array+0x44>)
 8006218:	f003 fb96 	bl	8009948 <_init>
 800621c:	1b64      	subs	r4, r4, r5
 800621e:	10a4      	asrs	r4, r4, #2
 8006220:	2600      	movs	r6, #0
 8006222:	42a6      	cmp	r6, r4
 8006224:	d105      	bne.n	8006232 <__libc_init_array+0x2e>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	f855 3b04 	ldr.w	r3, [r5], #4
 800622c:	4798      	blx	r3
 800622e:	3601      	adds	r6, #1
 8006230:	e7ee      	b.n	8006210 <__libc_init_array+0xc>
 8006232:	f855 3b04 	ldr.w	r3, [r5], #4
 8006236:	4798      	blx	r3
 8006238:	3601      	adds	r6, #1
 800623a:	e7f2      	b.n	8006222 <__libc_init_array+0x1e>
 800623c:	08009e90 	.word	0x08009e90
 8006240:	08009e90 	.word	0x08009e90
 8006244:	08009e90 	.word	0x08009e90
 8006248:	08009e94 	.word	0x08009e94

0800624c <memcpy>:
 800624c:	440a      	add	r2, r1
 800624e:	4291      	cmp	r1, r2
 8006250:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006254:	d100      	bne.n	8006258 <memcpy+0xc>
 8006256:	4770      	bx	lr
 8006258:	b510      	push	{r4, lr}
 800625a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006262:	4291      	cmp	r1, r2
 8006264:	d1f9      	bne.n	800625a <memcpy+0xe>
 8006266:	bd10      	pop	{r4, pc}

08006268 <memset>:
 8006268:	4402      	add	r2, r0
 800626a:	4603      	mov	r3, r0
 800626c:	4293      	cmp	r3, r2
 800626e:	d100      	bne.n	8006272 <memset+0xa>
 8006270:	4770      	bx	lr
 8006272:	f803 1b01 	strb.w	r1, [r3], #1
 8006276:	e7f9      	b.n	800626c <memset+0x4>

08006278 <__cvt>:
 8006278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800627c:	ec55 4b10 	vmov	r4, r5, d0
 8006280:	2d00      	cmp	r5, #0
 8006282:	460e      	mov	r6, r1
 8006284:	4619      	mov	r1, r3
 8006286:	462b      	mov	r3, r5
 8006288:	bfbb      	ittet	lt
 800628a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800628e:	461d      	movlt	r5, r3
 8006290:	2300      	movge	r3, #0
 8006292:	232d      	movlt	r3, #45	; 0x2d
 8006294:	700b      	strb	r3, [r1, #0]
 8006296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800629c:	4691      	mov	r9, r2
 800629e:	f023 0820 	bic.w	r8, r3, #32
 80062a2:	bfbc      	itt	lt
 80062a4:	4622      	movlt	r2, r4
 80062a6:	4614      	movlt	r4, r2
 80062a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062ac:	d005      	beq.n	80062ba <__cvt+0x42>
 80062ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062b2:	d100      	bne.n	80062b6 <__cvt+0x3e>
 80062b4:	3601      	adds	r6, #1
 80062b6:	2102      	movs	r1, #2
 80062b8:	e000      	b.n	80062bc <__cvt+0x44>
 80062ba:	2103      	movs	r1, #3
 80062bc:	ab03      	add	r3, sp, #12
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	ab02      	add	r3, sp, #8
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	ec45 4b10 	vmov	d0, r4, r5
 80062c8:	4653      	mov	r3, sl
 80062ca:	4632      	mov	r2, r6
 80062cc:	f000 feac 	bl	8007028 <_dtoa_r>
 80062d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062d4:	4607      	mov	r7, r0
 80062d6:	d102      	bne.n	80062de <__cvt+0x66>
 80062d8:	f019 0f01 	tst.w	r9, #1
 80062dc:	d022      	beq.n	8006324 <__cvt+0xac>
 80062de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062e2:	eb07 0906 	add.w	r9, r7, r6
 80062e6:	d110      	bne.n	800630a <__cvt+0x92>
 80062e8:	783b      	ldrb	r3, [r7, #0]
 80062ea:	2b30      	cmp	r3, #48	; 0x30
 80062ec:	d10a      	bne.n	8006304 <__cvt+0x8c>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7fa fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 80062fa:	b918      	cbnz	r0, 8006304 <__cvt+0x8c>
 80062fc:	f1c6 0601 	rsb	r6, r6, #1
 8006300:	f8ca 6000 	str.w	r6, [sl]
 8006304:	f8da 3000 	ldr.w	r3, [sl]
 8006308:	4499      	add	r9, r3
 800630a:	2200      	movs	r2, #0
 800630c:	2300      	movs	r3, #0
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7fa fbe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006316:	b108      	cbz	r0, 800631c <__cvt+0xa4>
 8006318:	f8cd 900c 	str.w	r9, [sp, #12]
 800631c:	2230      	movs	r2, #48	; 0x30
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	454b      	cmp	r3, r9
 8006322:	d307      	bcc.n	8006334 <__cvt+0xbc>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006328:	1bdb      	subs	r3, r3, r7
 800632a:	4638      	mov	r0, r7
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	b004      	add	sp, #16
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	9103      	str	r1, [sp, #12]
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e7f0      	b.n	800631e <__cvt+0xa6>

0800633c <__exponent>:
 800633c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800633e:	4603      	mov	r3, r0
 8006340:	2900      	cmp	r1, #0
 8006342:	bfb8      	it	lt
 8006344:	4249      	neglt	r1, r1
 8006346:	f803 2b02 	strb.w	r2, [r3], #2
 800634a:	bfb4      	ite	lt
 800634c:	222d      	movlt	r2, #45	; 0x2d
 800634e:	222b      	movge	r2, #43	; 0x2b
 8006350:	2909      	cmp	r1, #9
 8006352:	7042      	strb	r2, [r0, #1]
 8006354:	dd2a      	ble.n	80063ac <__exponent+0x70>
 8006356:	f10d 0407 	add.w	r4, sp, #7
 800635a:	46a4      	mov	ip, r4
 800635c:	270a      	movs	r7, #10
 800635e:	46a6      	mov	lr, r4
 8006360:	460a      	mov	r2, r1
 8006362:	fb91 f6f7 	sdiv	r6, r1, r7
 8006366:	fb07 1516 	mls	r5, r7, r6, r1
 800636a:	3530      	adds	r5, #48	; 0x30
 800636c:	2a63      	cmp	r2, #99	; 0x63
 800636e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006376:	4631      	mov	r1, r6
 8006378:	dcf1      	bgt.n	800635e <__exponent+0x22>
 800637a:	3130      	adds	r1, #48	; 0x30
 800637c:	f1ae 0502 	sub.w	r5, lr, #2
 8006380:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006384:	1c44      	adds	r4, r0, #1
 8006386:	4629      	mov	r1, r5
 8006388:	4561      	cmp	r1, ip
 800638a:	d30a      	bcc.n	80063a2 <__exponent+0x66>
 800638c:	f10d 0209 	add.w	r2, sp, #9
 8006390:	eba2 020e 	sub.w	r2, r2, lr
 8006394:	4565      	cmp	r5, ip
 8006396:	bf88      	it	hi
 8006398:	2200      	movhi	r2, #0
 800639a:	4413      	add	r3, r2
 800639c:	1a18      	subs	r0, r3, r0
 800639e:	b003      	add	sp, #12
 80063a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063aa:	e7ed      	b.n	8006388 <__exponent+0x4c>
 80063ac:	2330      	movs	r3, #48	; 0x30
 80063ae:	3130      	adds	r1, #48	; 0x30
 80063b0:	7083      	strb	r3, [r0, #2]
 80063b2:	70c1      	strb	r1, [r0, #3]
 80063b4:	1d03      	adds	r3, r0, #4
 80063b6:	e7f1      	b.n	800639c <__exponent+0x60>

080063b8 <_printf_float>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	ed2d 8b02 	vpush	{d8}
 80063c0:	b08d      	sub	sp, #52	; 0x34
 80063c2:	460c      	mov	r4, r1
 80063c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063c8:	4616      	mov	r6, r2
 80063ca:	461f      	mov	r7, r3
 80063cc:	4605      	mov	r5, r0
 80063ce:	f001 fdd1 	bl	8007f74 <_localeconv_r>
 80063d2:	f8d0 a000 	ldr.w	sl, [r0]
 80063d6:	4650      	mov	r0, sl
 80063d8:	f7f9 ff02 	bl	80001e0 <strlen>
 80063dc:	2300      	movs	r3, #0
 80063de:	930a      	str	r3, [sp, #40]	; 0x28
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	9305      	str	r3, [sp, #20]
 80063e4:	f8d8 3000 	ldr.w	r3, [r8]
 80063e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063ec:	3307      	adds	r3, #7
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	f103 0208 	add.w	r2, r3, #8
 80063f6:	f8c8 2000 	str.w	r2, [r8]
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006402:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800640a:	9307      	str	r3, [sp, #28]
 800640c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006410:	ee08 0a10 	vmov	s16, r0
 8006414:	4b9f      	ldr	r3, [pc, #636]	; (8006694 <_printf_float+0x2dc>)
 8006416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800641a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800641e:	f7fa fb8d 	bl	8000b3c <__aeabi_dcmpun>
 8006422:	bb88      	cbnz	r0, 8006488 <_printf_float+0xd0>
 8006424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006428:	4b9a      	ldr	r3, [pc, #616]	; (8006694 <_printf_float+0x2dc>)
 800642a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800642e:	f7fa fb67 	bl	8000b00 <__aeabi_dcmple>
 8006432:	bb48      	cbnz	r0, 8006488 <_printf_float+0xd0>
 8006434:	2200      	movs	r2, #0
 8006436:	2300      	movs	r3, #0
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7fa fb56 	bl	8000aec <__aeabi_dcmplt>
 8006440:	b110      	cbz	r0, 8006448 <_printf_float+0x90>
 8006442:	232d      	movs	r3, #45	; 0x2d
 8006444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006448:	4b93      	ldr	r3, [pc, #588]	; (8006698 <_printf_float+0x2e0>)
 800644a:	4894      	ldr	r0, [pc, #592]	; (800669c <_printf_float+0x2e4>)
 800644c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006450:	bf94      	ite	ls
 8006452:	4698      	movls	r8, r3
 8006454:	4680      	movhi	r8, r0
 8006456:	2303      	movs	r3, #3
 8006458:	6123      	str	r3, [r4, #16]
 800645a:	9b05      	ldr	r3, [sp, #20]
 800645c:	f023 0204 	bic.w	r2, r3, #4
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	f04f 0900 	mov.w	r9, #0
 8006466:	9700      	str	r7, [sp, #0]
 8006468:	4633      	mov	r3, r6
 800646a:	aa0b      	add	r2, sp, #44	; 0x2c
 800646c:	4621      	mov	r1, r4
 800646e:	4628      	mov	r0, r5
 8006470:	f000 f9d8 	bl	8006824 <_printf_common>
 8006474:	3001      	adds	r0, #1
 8006476:	f040 8090 	bne.w	800659a <_printf_float+0x1e2>
 800647a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800647e:	b00d      	add	sp, #52	; 0x34
 8006480:	ecbd 8b02 	vpop	{d8}
 8006484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa fb54 	bl	8000b3c <__aeabi_dcmpun>
 8006494:	b140      	cbz	r0, 80064a8 <_printf_float+0xf0>
 8006496:	464b      	mov	r3, r9
 8006498:	2b00      	cmp	r3, #0
 800649a:	bfbc      	itt	lt
 800649c:	232d      	movlt	r3, #45	; 0x2d
 800649e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064a2:	487f      	ldr	r0, [pc, #508]	; (80066a0 <_printf_float+0x2e8>)
 80064a4:	4b7f      	ldr	r3, [pc, #508]	; (80066a4 <_printf_float+0x2ec>)
 80064a6:	e7d1      	b.n	800644c <_printf_float+0x94>
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064ae:	9206      	str	r2, [sp, #24]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	d13f      	bne.n	8006534 <_printf_float+0x17c>
 80064b4:	2306      	movs	r3, #6
 80064b6:	6063      	str	r3, [r4, #4]
 80064b8:	9b05      	ldr	r3, [sp, #20]
 80064ba:	6861      	ldr	r1, [r4, #4]
 80064bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064c0:	2300      	movs	r3, #0
 80064c2:	9303      	str	r3, [sp, #12]
 80064c4:	ab0a      	add	r3, sp, #40	; 0x28
 80064c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064ca:	ab09      	add	r3, sp, #36	; 0x24
 80064cc:	ec49 8b10 	vmov	d0, r8, r9
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	6022      	str	r2, [r4, #0]
 80064d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064d8:	4628      	mov	r0, r5
 80064da:	f7ff fecd 	bl	8006278 <__cvt>
 80064de:	9b06      	ldr	r3, [sp, #24]
 80064e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064e2:	2b47      	cmp	r3, #71	; 0x47
 80064e4:	4680      	mov	r8, r0
 80064e6:	d108      	bne.n	80064fa <_printf_float+0x142>
 80064e8:	1cc8      	adds	r0, r1, #3
 80064ea:	db02      	blt.n	80064f2 <_printf_float+0x13a>
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	4299      	cmp	r1, r3
 80064f0:	dd41      	ble.n	8006576 <_printf_float+0x1be>
 80064f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80064f6:	fa5f fb8b 	uxtb.w	fp, fp
 80064fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064fe:	d820      	bhi.n	8006542 <_printf_float+0x18a>
 8006500:	3901      	subs	r1, #1
 8006502:	465a      	mov	r2, fp
 8006504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006508:	9109      	str	r1, [sp, #36]	; 0x24
 800650a:	f7ff ff17 	bl	800633c <__exponent>
 800650e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006510:	1813      	adds	r3, r2, r0
 8006512:	2a01      	cmp	r2, #1
 8006514:	4681      	mov	r9, r0
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	dc02      	bgt.n	8006520 <_printf_float+0x168>
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	07d2      	lsls	r2, r2, #31
 800651e:	d501      	bpl.n	8006524 <_printf_float+0x16c>
 8006520:	3301      	adds	r3, #1
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006528:	2b00      	cmp	r3, #0
 800652a:	d09c      	beq.n	8006466 <_printf_float+0xae>
 800652c:	232d      	movs	r3, #45	; 0x2d
 800652e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006532:	e798      	b.n	8006466 <_printf_float+0xae>
 8006534:	9a06      	ldr	r2, [sp, #24]
 8006536:	2a47      	cmp	r2, #71	; 0x47
 8006538:	d1be      	bne.n	80064b8 <_printf_float+0x100>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1bc      	bne.n	80064b8 <_printf_float+0x100>
 800653e:	2301      	movs	r3, #1
 8006540:	e7b9      	b.n	80064b6 <_printf_float+0xfe>
 8006542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006546:	d118      	bne.n	800657a <_printf_float+0x1c2>
 8006548:	2900      	cmp	r1, #0
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	dd0b      	ble.n	8006566 <_printf_float+0x1ae>
 800654e:	6121      	str	r1, [r4, #16]
 8006550:	b913      	cbnz	r3, 8006558 <_printf_float+0x1a0>
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	07d0      	lsls	r0, r2, #31
 8006556:	d502      	bpl.n	800655e <_printf_float+0x1a6>
 8006558:	3301      	adds	r3, #1
 800655a:	440b      	add	r3, r1
 800655c:	6123      	str	r3, [r4, #16]
 800655e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006560:	f04f 0900 	mov.w	r9, #0
 8006564:	e7de      	b.n	8006524 <_printf_float+0x16c>
 8006566:	b913      	cbnz	r3, 800656e <_printf_float+0x1b6>
 8006568:	6822      	ldr	r2, [r4, #0]
 800656a:	07d2      	lsls	r2, r2, #31
 800656c:	d501      	bpl.n	8006572 <_printf_float+0x1ba>
 800656e:	3302      	adds	r3, #2
 8006570:	e7f4      	b.n	800655c <_printf_float+0x1a4>
 8006572:	2301      	movs	r3, #1
 8006574:	e7f2      	b.n	800655c <_printf_float+0x1a4>
 8006576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800657a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800657c:	4299      	cmp	r1, r3
 800657e:	db05      	blt.n	800658c <_printf_float+0x1d4>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	6121      	str	r1, [r4, #16]
 8006584:	07d8      	lsls	r0, r3, #31
 8006586:	d5ea      	bpl.n	800655e <_printf_float+0x1a6>
 8006588:	1c4b      	adds	r3, r1, #1
 800658a:	e7e7      	b.n	800655c <_printf_float+0x1a4>
 800658c:	2900      	cmp	r1, #0
 800658e:	bfd4      	ite	le
 8006590:	f1c1 0202 	rsble	r2, r1, #2
 8006594:	2201      	movgt	r2, #1
 8006596:	4413      	add	r3, r2
 8006598:	e7e0      	b.n	800655c <_printf_float+0x1a4>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	055a      	lsls	r2, r3, #21
 800659e:	d407      	bmi.n	80065b0 <_printf_float+0x1f8>
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	4642      	mov	r2, r8
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	d12c      	bne.n	8006608 <_printf_float+0x250>
 80065ae:	e764      	b.n	800647a <_printf_float+0xc2>
 80065b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065b4:	f240 80e0 	bls.w	8006778 <_printf_float+0x3c0>
 80065b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	f7fa fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d034      	beq.n	8006632 <_printf_float+0x27a>
 80065c8:	4a37      	ldr	r2, [pc, #220]	; (80066a8 <_printf_float+0x2f0>)
 80065ca:	2301      	movs	r3, #1
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	f43f af51 	beq.w	800647a <_printf_float+0xc2>
 80065d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065dc:	429a      	cmp	r2, r3
 80065de:	db02      	blt.n	80065e6 <_printf_float+0x22e>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	07d8      	lsls	r0, r3, #31
 80065e4:	d510      	bpl.n	8006608 <_printf_float+0x250>
 80065e6:	ee18 3a10 	vmov	r3, s16
 80065ea:	4652      	mov	r2, sl
 80065ec:	4631      	mov	r1, r6
 80065ee:	4628      	mov	r0, r5
 80065f0:	47b8      	blx	r7
 80065f2:	3001      	adds	r0, #1
 80065f4:	f43f af41 	beq.w	800647a <_printf_float+0xc2>
 80065f8:	f04f 0800 	mov.w	r8, #0
 80065fc:	f104 091a 	add.w	r9, r4, #26
 8006600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006602:	3b01      	subs	r3, #1
 8006604:	4543      	cmp	r3, r8
 8006606:	dc09      	bgt.n	800661c <_printf_float+0x264>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	079b      	lsls	r3, r3, #30
 800660c:	f100 8105 	bmi.w	800681a <_printf_float+0x462>
 8006610:	68e0      	ldr	r0, [r4, #12]
 8006612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006614:	4298      	cmp	r0, r3
 8006616:	bfb8      	it	lt
 8006618:	4618      	movlt	r0, r3
 800661a:	e730      	b.n	800647e <_printf_float+0xc6>
 800661c:	2301      	movs	r3, #1
 800661e:	464a      	mov	r2, r9
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af27 	beq.w	800647a <_printf_float+0xc2>
 800662c:	f108 0801 	add.w	r8, r8, #1
 8006630:	e7e6      	b.n	8006600 <_printf_float+0x248>
 8006632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc39      	bgt.n	80066ac <_printf_float+0x2f4>
 8006638:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <_printf_float+0x2f0>)
 800663a:	2301      	movs	r3, #1
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	47b8      	blx	r7
 8006642:	3001      	adds	r0, #1
 8006644:	f43f af19 	beq.w	800647a <_printf_float+0xc2>
 8006648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800664c:	4313      	orrs	r3, r2
 800664e:	d102      	bne.n	8006656 <_printf_float+0x29e>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	07d9      	lsls	r1, r3, #31
 8006654:	d5d8      	bpl.n	8006608 <_printf_float+0x250>
 8006656:	ee18 3a10 	vmov	r3, s16
 800665a:	4652      	mov	r2, sl
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f af09 	beq.w	800647a <_printf_float+0xc2>
 8006668:	f04f 0900 	mov.w	r9, #0
 800666c:	f104 0a1a 	add.w	sl, r4, #26
 8006670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006672:	425b      	negs	r3, r3
 8006674:	454b      	cmp	r3, r9
 8006676:	dc01      	bgt.n	800667c <_printf_float+0x2c4>
 8006678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667a:	e792      	b.n	80065a2 <_printf_float+0x1ea>
 800667c:	2301      	movs	r3, #1
 800667e:	4652      	mov	r2, sl
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f aef7 	beq.w	800647a <_printf_float+0xc2>
 800668c:	f109 0901 	add.w	r9, r9, #1
 8006690:	e7ee      	b.n	8006670 <_printf_float+0x2b8>
 8006692:	bf00      	nop
 8006694:	7fefffff 	.word	0x7fefffff
 8006698:	08009a98 	.word	0x08009a98
 800669c:	08009a9c 	.word	0x08009a9c
 80066a0:	08009aa4 	.word	0x08009aa4
 80066a4:	08009aa0 	.word	0x08009aa0
 80066a8:	08009d29 	.word	0x08009d29
 80066ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066b0:	429a      	cmp	r2, r3
 80066b2:	bfa8      	it	ge
 80066b4:	461a      	movge	r2, r3
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	4691      	mov	r9, r2
 80066ba:	dc37      	bgt.n	800672c <_printf_float+0x374>
 80066bc:	f04f 0b00 	mov.w	fp, #0
 80066c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066c4:	f104 021a 	add.w	r2, r4, #26
 80066c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	eba3 0309 	sub.w	r3, r3, r9
 80066d0:	455b      	cmp	r3, fp
 80066d2:	dc33      	bgt.n	800673c <_printf_float+0x384>
 80066d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066d8:	429a      	cmp	r2, r3
 80066da:	db3b      	blt.n	8006754 <_printf_float+0x39c>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	07da      	lsls	r2, r3, #31
 80066e0:	d438      	bmi.n	8006754 <_printf_float+0x39c>
 80066e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e4:	9a05      	ldr	r2, [sp, #20]
 80066e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066e8:	1a9a      	subs	r2, r3, r2
 80066ea:	eba3 0901 	sub.w	r9, r3, r1
 80066ee:	4591      	cmp	r9, r2
 80066f0:	bfa8      	it	ge
 80066f2:	4691      	movge	r9, r2
 80066f4:	f1b9 0f00 	cmp.w	r9, #0
 80066f8:	dc35      	bgt.n	8006766 <_printf_float+0x3ae>
 80066fa:	f04f 0800 	mov.w	r8, #0
 80066fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006702:	f104 0a1a 	add.w	sl, r4, #26
 8006706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800670a:	1a9b      	subs	r3, r3, r2
 800670c:	eba3 0309 	sub.w	r3, r3, r9
 8006710:	4543      	cmp	r3, r8
 8006712:	f77f af79 	ble.w	8006608 <_printf_float+0x250>
 8006716:	2301      	movs	r3, #1
 8006718:	4652      	mov	r2, sl
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f aeaa 	beq.w	800647a <_printf_float+0xc2>
 8006726:	f108 0801 	add.w	r8, r8, #1
 800672a:	e7ec      	b.n	8006706 <_printf_float+0x34e>
 800672c:	4613      	mov	r3, r2
 800672e:	4631      	mov	r1, r6
 8006730:	4642      	mov	r2, r8
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	d1c0      	bne.n	80066bc <_printf_float+0x304>
 800673a:	e69e      	b.n	800647a <_printf_float+0xc2>
 800673c:	2301      	movs	r3, #1
 800673e:	4631      	mov	r1, r6
 8006740:	4628      	mov	r0, r5
 8006742:	9205      	str	r2, [sp, #20]
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f ae97 	beq.w	800647a <_printf_float+0xc2>
 800674c:	9a05      	ldr	r2, [sp, #20]
 800674e:	f10b 0b01 	add.w	fp, fp, #1
 8006752:	e7b9      	b.n	80066c8 <_printf_float+0x310>
 8006754:	ee18 3a10 	vmov	r3, s16
 8006758:	4652      	mov	r2, sl
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	d1be      	bne.n	80066e2 <_printf_float+0x32a>
 8006764:	e689      	b.n	800647a <_printf_float+0xc2>
 8006766:	9a05      	ldr	r2, [sp, #20]
 8006768:	464b      	mov	r3, r9
 800676a:	4442      	add	r2, r8
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	d1c1      	bne.n	80066fa <_printf_float+0x342>
 8006776:	e680      	b.n	800647a <_printf_float+0xc2>
 8006778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677a:	2a01      	cmp	r2, #1
 800677c:	dc01      	bgt.n	8006782 <_printf_float+0x3ca>
 800677e:	07db      	lsls	r3, r3, #31
 8006780:	d538      	bpl.n	80067f4 <_printf_float+0x43c>
 8006782:	2301      	movs	r3, #1
 8006784:	4642      	mov	r2, r8
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	f43f ae74 	beq.w	800647a <_printf_float+0xc2>
 8006792:	ee18 3a10 	vmov	r3, s16
 8006796:	4652      	mov	r2, sl
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f ae6b 	beq.w	800647a <_printf_float+0xc2>
 80067a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067a8:	2200      	movs	r2, #0
 80067aa:	2300      	movs	r3, #0
 80067ac:	f7fa f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80067b0:	b9d8      	cbnz	r0, 80067ea <_printf_float+0x432>
 80067b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b4:	f108 0201 	add.w	r2, r8, #1
 80067b8:	3b01      	subs	r3, #1
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	d10e      	bne.n	80067e2 <_printf_float+0x42a>
 80067c4:	e659      	b.n	800647a <_printf_float+0xc2>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4652      	mov	r2, sl
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	f43f ae52 	beq.w	800647a <_printf_float+0xc2>
 80067d6:	f108 0801 	add.w	r8, r8, #1
 80067da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067dc:	3b01      	subs	r3, #1
 80067de:	4543      	cmp	r3, r8
 80067e0:	dcf1      	bgt.n	80067c6 <_printf_float+0x40e>
 80067e2:	464b      	mov	r3, r9
 80067e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067e8:	e6dc      	b.n	80065a4 <_printf_float+0x1ec>
 80067ea:	f04f 0800 	mov.w	r8, #0
 80067ee:	f104 0a1a 	add.w	sl, r4, #26
 80067f2:	e7f2      	b.n	80067da <_printf_float+0x422>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4642      	mov	r2, r8
 80067f8:	e7df      	b.n	80067ba <_printf_float+0x402>
 80067fa:	2301      	movs	r3, #1
 80067fc:	464a      	mov	r2, r9
 80067fe:	4631      	mov	r1, r6
 8006800:	4628      	mov	r0, r5
 8006802:	47b8      	blx	r7
 8006804:	3001      	adds	r0, #1
 8006806:	f43f ae38 	beq.w	800647a <_printf_float+0xc2>
 800680a:	f108 0801 	add.w	r8, r8, #1
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006812:	1a5b      	subs	r3, r3, r1
 8006814:	4543      	cmp	r3, r8
 8006816:	dcf0      	bgt.n	80067fa <_printf_float+0x442>
 8006818:	e6fa      	b.n	8006610 <_printf_float+0x258>
 800681a:	f04f 0800 	mov.w	r8, #0
 800681e:	f104 0919 	add.w	r9, r4, #25
 8006822:	e7f4      	b.n	800680e <_printf_float+0x456>

08006824 <_printf_common>:
 8006824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	4616      	mov	r6, r2
 800682a:	4699      	mov	r9, r3
 800682c:	688a      	ldr	r2, [r1, #8]
 800682e:	690b      	ldr	r3, [r1, #16]
 8006830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006834:	4293      	cmp	r3, r2
 8006836:	bfb8      	it	lt
 8006838:	4613      	movlt	r3, r2
 800683a:	6033      	str	r3, [r6, #0]
 800683c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006840:	4607      	mov	r7, r0
 8006842:	460c      	mov	r4, r1
 8006844:	b10a      	cbz	r2, 800684a <_printf_common+0x26>
 8006846:	3301      	adds	r3, #1
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	0699      	lsls	r1, r3, #26
 800684e:	bf42      	ittt	mi
 8006850:	6833      	ldrmi	r3, [r6, #0]
 8006852:	3302      	addmi	r3, #2
 8006854:	6033      	strmi	r3, [r6, #0]
 8006856:	6825      	ldr	r5, [r4, #0]
 8006858:	f015 0506 	ands.w	r5, r5, #6
 800685c:	d106      	bne.n	800686c <_printf_common+0x48>
 800685e:	f104 0a19 	add.w	sl, r4, #25
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	6832      	ldr	r2, [r6, #0]
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	42ab      	cmp	r3, r5
 800686a:	dc26      	bgt.n	80068ba <_printf_common+0x96>
 800686c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006870:	1e13      	subs	r3, r2, #0
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	bf18      	it	ne
 8006876:	2301      	movne	r3, #1
 8006878:	0692      	lsls	r2, r2, #26
 800687a:	d42b      	bmi.n	80068d4 <_printf_common+0xb0>
 800687c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006880:	4649      	mov	r1, r9
 8006882:	4638      	mov	r0, r7
 8006884:	47c0      	blx	r8
 8006886:	3001      	adds	r0, #1
 8006888:	d01e      	beq.n	80068c8 <_printf_common+0xa4>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	68e5      	ldr	r5, [r4, #12]
 800688e:	6832      	ldr	r2, [r6, #0]
 8006890:	f003 0306 	and.w	r3, r3, #6
 8006894:	2b04      	cmp	r3, #4
 8006896:	bf08      	it	eq
 8006898:	1aad      	subeq	r5, r5, r2
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	6922      	ldr	r2, [r4, #16]
 800689e:	bf0c      	ite	eq
 80068a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a4:	2500      	movne	r5, #0
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bfc4      	itt	gt
 80068aa:	1a9b      	subgt	r3, r3, r2
 80068ac:	18ed      	addgt	r5, r5, r3
 80068ae:	2600      	movs	r6, #0
 80068b0:	341a      	adds	r4, #26
 80068b2:	42b5      	cmp	r5, r6
 80068b4:	d11a      	bne.n	80068ec <_printf_common+0xc8>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e008      	b.n	80068cc <_printf_common+0xa8>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4649      	mov	r1, r9
 80068c0:	4638      	mov	r0, r7
 80068c2:	47c0      	blx	r8
 80068c4:	3001      	adds	r0, #1
 80068c6:	d103      	bne.n	80068d0 <_printf_common+0xac>
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d0:	3501      	adds	r5, #1
 80068d2:	e7c6      	b.n	8006862 <_printf_common+0x3e>
 80068d4:	18e1      	adds	r1, r4, r3
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	2030      	movs	r0, #48	; 0x30
 80068da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068de:	4422      	add	r2, r4
 80068e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068e8:	3302      	adds	r3, #2
 80068ea:	e7c7      	b.n	800687c <_printf_common+0x58>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4622      	mov	r2, r4
 80068f0:	4649      	mov	r1, r9
 80068f2:	4638      	mov	r0, r7
 80068f4:	47c0      	blx	r8
 80068f6:	3001      	adds	r0, #1
 80068f8:	d0e6      	beq.n	80068c8 <_printf_common+0xa4>
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7d9      	b.n	80068b2 <_printf_common+0x8e>
	...

08006900 <_printf_i>:
 8006900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	7e0f      	ldrb	r7, [r1, #24]
 8006906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006908:	2f78      	cmp	r7, #120	; 0x78
 800690a:	4691      	mov	r9, r2
 800690c:	4680      	mov	r8, r0
 800690e:	460c      	mov	r4, r1
 8006910:	469a      	mov	sl, r3
 8006912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006916:	d807      	bhi.n	8006928 <_printf_i+0x28>
 8006918:	2f62      	cmp	r7, #98	; 0x62
 800691a:	d80a      	bhi.n	8006932 <_printf_i+0x32>
 800691c:	2f00      	cmp	r7, #0
 800691e:	f000 80d8 	beq.w	8006ad2 <_printf_i+0x1d2>
 8006922:	2f58      	cmp	r7, #88	; 0x58
 8006924:	f000 80a3 	beq.w	8006a6e <_printf_i+0x16e>
 8006928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800692c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006930:	e03a      	b.n	80069a8 <_printf_i+0xa8>
 8006932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006936:	2b15      	cmp	r3, #21
 8006938:	d8f6      	bhi.n	8006928 <_printf_i+0x28>
 800693a:	a101      	add	r1, pc, #4	; (adr r1, 8006940 <_printf_i+0x40>)
 800693c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006940:	08006999 	.word	0x08006999
 8006944:	080069ad 	.word	0x080069ad
 8006948:	08006929 	.word	0x08006929
 800694c:	08006929 	.word	0x08006929
 8006950:	08006929 	.word	0x08006929
 8006954:	08006929 	.word	0x08006929
 8006958:	080069ad 	.word	0x080069ad
 800695c:	08006929 	.word	0x08006929
 8006960:	08006929 	.word	0x08006929
 8006964:	08006929 	.word	0x08006929
 8006968:	08006929 	.word	0x08006929
 800696c:	08006ab9 	.word	0x08006ab9
 8006970:	080069dd 	.word	0x080069dd
 8006974:	08006a9b 	.word	0x08006a9b
 8006978:	08006929 	.word	0x08006929
 800697c:	08006929 	.word	0x08006929
 8006980:	08006adb 	.word	0x08006adb
 8006984:	08006929 	.word	0x08006929
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006929 	.word	0x08006929
 8006990:	08006929 	.word	0x08006929
 8006994:	08006aa3 	.word	0x08006aa3
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	1d1a      	adds	r2, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	602a      	str	r2, [r5, #0]
 80069a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0a3      	b.n	8006af4 <_printf_i+0x1f4>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	6829      	ldr	r1, [r5, #0]
 80069b0:	0606      	lsls	r6, r0, #24
 80069b2:	f101 0304 	add.w	r3, r1, #4
 80069b6:	d50a      	bpl.n	80069ce <_printf_i+0xce>
 80069b8:	680e      	ldr	r6, [r1, #0]
 80069ba:	602b      	str	r3, [r5, #0]
 80069bc:	2e00      	cmp	r6, #0
 80069be:	da03      	bge.n	80069c8 <_printf_i+0xc8>
 80069c0:	232d      	movs	r3, #45	; 0x2d
 80069c2:	4276      	negs	r6, r6
 80069c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c8:	485e      	ldr	r0, [pc, #376]	; (8006b44 <_printf_i+0x244>)
 80069ca:	230a      	movs	r3, #10
 80069cc:	e019      	b.n	8006a02 <_printf_i+0x102>
 80069ce:	680e      	ldr	r6, [r1, #0]
 80069d0:	602b      	str	r3, [r5, #0]
 80069d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069d6:	bf18      	it	ne
 80069d8:	b236      	sxthne	r6, r6
 80069da:	e7ef      	b.n	80069bc <_printf_i+0xbc>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	6820      	ldr	r0, [r4, #0]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	6029      	str	r1, [r5, #0]
 80069e4:	0601      	lsls	r1, r0, #24
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0xec>
 80069e8:	681e      	ldr	r6, [r3, #0]
 80069ea:	e002      	b.n	80069f2 <_printf_i+0xf2>
 80069ec:	0646      	lsls	r6, r0, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0xe8>
 80069f0:	881e      	ldrh	r6, [r3, #0]
 80069f2:	4854      	ldr	r0, [pc, #336]	; (8006b44 <_printf_i+0x244>)
 80069f4:	2f6f      	cmp	r7, #111	; 0x6f
 80069f6:	bf0c      	ite	eq
 80069f8:	2308      	moveq	r3, #8
 80069fa:	230a      	movne	r3, #10
 80069fc:	2100      	movs	r1, #0
 80069fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a02:	6865      	ldr	r5, [r4, #4]
 8006a04:	60a5      	str	r5, [r4, #8]
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	bfa2      	ittt	ge
 8006a0a:	6821      	ldrge	r1, [r4, #0]
 8006a0c:	f021 0104 	bicge.w	r1, r1, #4
 8006a10:	6021      	strge	r1, [r4, #0]
 8006a12:	b90e      	cbnz	r6, 8006a18 <_printf_i+0x118>
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	d04d      	beq.n	8006ab4 <_printf_i+0x1b4>
 8006a18:	4615      	mov	r5, r2
 8006a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a22:	5dc7      	ldrb	r7, [r0, r7]
 8006a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a28:	4637      	mov	r7, r6
 8006a2a:	42bb      	cmp	r3, r7
 8006a2c:	460e      	mov	r6, r1
 8006a2e:	d9f4      	bls.n	8006a1a <_printf_i+0x11a>
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d10b      	bne.n	8006a4c <_printf_i+0x14c>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	07de      	lsls	r6, r3, #31
 8006a38:	d508      	bpl.n	8006a4c <_printf_i+0x14c>
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	6861      	ldr	r1, [r4, #4]
 8006a3e:	4299      	cmp	r1, r3
 8006a40:	bfde      	ittt	le
 8006a42:	2330      	movle	r3, #48	; 0x30
 8006a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a4c:	1b52      	subs	r2, r2, r5
 8006a4e:	6122      	str	r2, [r4, #16]
 8006a50:	f8cd a000 	str.w	sl, [sp]
 8006a54:	464b      	mov	r3, r9
 8006a56:	aa03      	add	r2, sp, #12
 8006a58:	4621      	mov	r1, r4
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f7ff fee2 	bl	8006824 <_printf_common>
 8006a60:	3001      	adds	r0, #1
 8006a62:	d14c      	bne.n	8006afe <_printf_i+0x1fe>
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a68:	b004      	add	sp, #16
 8006a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6e:	4835      	ldr	r0, [pc, #212]	; (8006b44 <_printf_i+0x244>)
 8006a70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a74:	6829      	ldr	r1, [r5, #0]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a7c:	6029      	str	r1, [r5, #0]
 8006a7e:	061d      	lsls	r5, r3, #24
 8006a80:	d514      	bpl.n	8006aac <_printf_i+0x1ac>
 8006a82:	07df      	lsls	r7, r3, #31
 8006a84:	bf44      	itt	mi
 8006a86:	f043 0320 	orrmi.w	r3, r3, #32
 8006a8a:	6023      	strmi	r3, [r4, #0]
 8006a8c:	b91e      	cbnz	r6, 8006a96 <_printf_i+0x196>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f023 0320 	bic.w	r3, r3, #32
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	2310      	movs	r3, #16
 8006a98:	e7b0      	b.n	80069fc <_printf_i+0xfc>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	f043 0320 	orr.w	r3, r3, #32
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	2378      	movs	r3, #120	; 0x78
 8006aa4:	4828      	ldr	r0, [pc, #160]	; (8006b48 <_printf_i+0x248>)
 8006aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aaa:	e7e3      	b.n	8006a74 <_printf_i+0x174>
 8006aac:	0659      	lsls	r1, r3, #25
 8006aae:	bf48      	it	mi
 8006ab0:	b2b6      	uxthmi	r6, r6
 8006ab2:	e7e6      	b.n	8006a82 <_printf_i+0x182>
 8006ab4:	4615      	mov	r5, r2
 8006ab6:	e7bb      	b.n	8006a30 <_printf_i+0x130>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	6826      	ldr	r6, [r4, #0]
 8006abc:	6961      	ldr	r1, [r4, #20]
 8006abe:	1d18      	adds	r0, r3, #4
 8006ac0:	6028      	str	r0, [r5, #0]
 8006ac2:	0635      	lsls	r5, r6, #24
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	d501      	bpl.n	8006acc <_printf_i+0x1cc>
 8006ac8:	6019      	str	r1, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <_printf_i+0x1d2>
 8006acc:	0670      	lsls	r0, r6, #25
 8006ace:	d5fb      	bpl.n	8006ac8 <_printf_i+0x1c8>
 8006ad0:	8019      	strh	r1, [r3, #0]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	4615      	mov	r5, r2
 8006ad8:	e7ba      	b.n	8006a50 <_printf_i+0x150>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	602a      	str	r2, [r5, #0]
 8006ae0:	681d      	ldr	r5, [r3, #0]
 8006ae2:	6862      	ldr	r2, [r4, #4]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f7f9 fb82 	bl	80001f0 <memchr>
 8006aec:	b108      	cbz	r0, 8006af2 <_printf_i+0x1f2>
 8006aee:	1b40      	subs	r0, r0, r5
 8006af0:	6060      	str	r0, [r4, #4]
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	2300      	movs	r3, #0
 8006af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006afc:	e7a8      	b.n	8006a50 <_printf_i+0x150>
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	462a      	mov	r2, r5
 8006b02:	4649      	mov	r1, r9
 8006b04:	4640      	mov	r0, r8
 8006b06:	47d0      	blx	sl
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d0ab      	beq.n	8006a64 <_printf_i+0x164>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	079b      	lsls	r3, r3, #30
 8006b10:	d413      	bmi.n	8006b3a <_printf_i+0x23a>
 8006b12:	68e0      	ldr	r0, [r4, #12]
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	4298      	cmp	r0, r3
 8006b18:	bfb8      	it	lt
 8006b1a:	4618      	movlt	r0, r3
 8006b1c:	e7a4      	b.n	8006a68 <_printf_i+0x168>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4632      	mov	r2, r6
 8006b22:	4649      	mov	r1, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	47d0      	blx	sl
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d09b      	beq.n	8006a64 <_printf_i+0x164>
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	9903      	ldr	r1, [sp, #12]
 8006b32:	1a5b      	subs	r3, r3, r1
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	dcf2      	bgt.n	8006b1e <_printf_i+0x21e>
 8006b38:	e7eb      	b.n	8006b12 <_printf_i+0x212>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	f104 0619 	add.w	r6, r4, #25
 8006b40:	e7f5      	b.n	8006b2e <_printf_i+0x22e>
 8006b42:	bf00      	nop
 8006b44:	08009aa8 	.word	0x08009aa8
 8006b48:	08009ab9 	.word	0x08009ab9

08006b4c <iprintf>:
 8006b4c:	b40f      	push	{r0, r1, r2, r3}
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <iprintf+0x2c>)
 8006b50:	b513      	push	{r0, r1, r4, lr}
 8006b52:	681c      	ldr	r4, [r3, #0]
 8006b54:	b124      	cbz	r4, 8006b60 <iprintf+0x14>
 8006b56:	69a3      	ldr	r3, [r4, #24]
 8006b58:	b913      	cbnz	r3, 8006b60 <iprintf+0x14>
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f001 f96c 	bl	8007e38 <__sinit>
 8006b60:	ab05      	add	r3, sp, #20
 8006b62:	9a04      	ldr	r2, [sp, #16]
 8006b64:	68a1      	ldr	r1, [r4, #8]
 8006b66:	9301      	str	r3, [sp, #4]
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f002 f901 	bl	8008d70 <_vfiprintf_r>
 8006b6e:	b002      	add	sp, #8
 8006b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b74:	b004      	add	sp, #16
 8006b76:	4770      	bx	lr
 8006b78:	2000000c 	.word	0x2000000c

08006b7c <_puts_r>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	460e      	mov	r6, r1
 8006b80:	4605      	mov	r5, r0
 8006b82:	b118      	cbz	r0, 8006b8c <_puts_r+0x10>
 8006b84:	6983      	ldr	r3, [r0, #24]
 8006b86:	b90b      	cbnz	r3, 8006b8c <_puts_r+0x10>
 8006b88:	f001 f956 	bl	8007e38 <__sinit>
 8006b8c:	69ab      	ldr	r3, [r5, #24]
 8006b8e:	68ac      	ldr	r4, [r5, #8]
 8006b90:	b913      	cbnz	r3, 8006b98 <_puts_r+0x1c>
 8006b92:	4628      	mov	r0, r5
 8006b94:	f001 f950 	bl	8007e38 <__sinit>
 8006b98:	4b2c      	ldr	r3, [pc, #176]	; (8006c4c <_puts_r+0xd0>)
 8006b9a:	429c      	cmp	r4, r3
 8006b9c:	d120      	bne.n	8006be0 <_puts_r+0x64>
 8006b9e:	686c      	ldr	r4, [r5, #4]
 8006ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba2:	07db      	lsls	r3, r3, #31
 8006ba4:	d405      	bmi.n	8006bb2 <_puts_r+0x36>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	0598      	lsls	r0, r3, #22
 8006baa:	d402      	bmi.n	8006bb2 <_puts_r+0x36>
 8006bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bae:	f001 f9e6 	bl	8007f7e <__retarget_lock_acquire_recursive>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	0719      	lsls	r1, r3, #28
 8006bb6:	d51d      	bpl.n	8006bf4 <_puts_r+0x78>
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	b1db      	cbz	r3, 8006bf4 <_puts_r+0x78>
 8006bbc:	3e01      	subs	r6, #1
 8006bbe:	68a3      	ldr	r3, [r4, #8]
 8006bc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	bb39      	cbnz	r1, 8006c1a <_puts_r+0x9e>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	da38      	bge.n	8006c40 <_puts_r+0xc4>
 8006bce:	4622      	mov	r2, r4
 8006bd0:	210a      	movs	r1, #10
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f8ba 	bl	8006d4c <__swbuf_r>
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d011      	beq.n	8006c00 <_puts_r+0x84>
 8006bdc:	250a      	movs	r5, #10
 8006bde:	e011      	b.n	8006c04 <_puts_r+0x88>
 8006be0:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <_puts_r+0xd4>)
 8006be2:	429c      	cmp	r4, r3
 8006be4:	d101      	bne.n	8006bea <_puts_r+0x6e>
 8006be6:	68ac      	ldr	r4, [r5, #8]
 8006be8:	e7da      	b.n	8006ba0 <_puts_r+0x24>
 8006bea:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <_puts_r+0xd8>)
 8006bec:	429c      	cmp	r4, r3
 8006bee:	bf08      	it	eq
 8006bf0:	68ec      	ldreq	r4, [r5, #12]
 8006bf2:	e7d5      	b.n	8006ba0 <_puts_r+0x24>
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f90c 	bl	8006e14 <__swsetup_r>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d0dd      	beq.n	8006bbc <_puts_r+0x40>
 8006c00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c06:	07da      	lsls	r2, r3, #31
 8006c08:	d405      	bmi.n	8006c16 <_puts_r+0x9a>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	059b      	lsls	r3, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_puts_r+0x9a>
 8006c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c12:	f001 f9b5 	bl	8007f80 <__retarget_lock_release_recursive>
 8006c16:	4628      	mov	r0, r5
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da04      	bge.n	8006c28 <_puts_r+0xac>
 8006c1e:	69a2      	ldr	r2, [r4, #24]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	dc06      	bgt.n	8006c32 <_puts_r+0xb6>
 8006c24:	290a      	cmp	r1, #10
 8006c26:	d004      	beq.n	8006c32 <_puts_r+0xb6>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	6022      	str	r2, [r4, #0]
 8006c2e:	7019      	strb	r1, [r3, #0]
 8006c30:	e7c5      	b.n	8006bbe <_puts_r+0x42>
 8006c32:	4622      	mov	r2, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f889 	bl	8006d4c <__swbuf_r>
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d1bf      	bne.n	8006bbe <_puts_r+0x42>
 8006c3e:	e7df      	b.n	8006c00 <_puts_r+0x84>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	250a      	movs	r5, #10
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	6022      	str	r2, [r4, #0]
 8006c48:	701d      	strb	r5, [r3, #0]
 8006c4a:	e7db      	b.n	8006c04 <_puts_r+0x88>
 8006c4c:	08009b7c 	.word	0x08009b7c
 8006c50:	08009b9c 	.word	0x08009b9c
 8006c54:	08009b5c 	.word	0x08009b5c

08006c58 <puts>:
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <puts+0xc>)
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	f7ff bf8d 	b.w	8006b7c <_puts_r>
 8006c62:	bf00      	nop
 8006c64:	2000000c 	.word	0x2000000c

08006c68 <siscanf>:
 8006c68:	b40e      	push	{r1, r2, r3}
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	b09f      	sub	sp, #124	; 0x7c
 8006c6e:	ac21      	add	r4, sp, #132	; 0x84
 8006c70:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c74:	f854 2b04 	ldr.w	r2, [r4], #4
 8006c78:	9201      	str	r2, [sp, #4]
 8006c7a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006c7e:	9004      	str	r0, [sp, #16]
 8006c80:	9008      	str	r0, [sp, #32]
 8006c82:	f7f9 faad 	bl	80001e0 <strlen>
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <siscanf+0x50>)
 8006c88:	9005      	str	r0, [sp, #20]
 8006c8a:	9009      	str	r0, [sp, #36]	; 0x24
 8006c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c8e:	480b      	ldr	r0, [pc, #44]	; (8006cbc <siscanf+0x54>)
 8006c90:	9a01      	ldr	r2, [sp, #4]
 8006c92:	6800      	ldr	r0, [r0, #0]
 8006c94:	9403      	str	r4, [sp, #12]
 8006c96:	2300      	movs	r3, #0
 8006c98:	9311      	str	r3, [sp, #68]	; 0x44
 8006c9a:	9316      	str	r3, [sp, #88]	; 0x58
 8006c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ca0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006ca4:	a904      	add	r1, sp, #16
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	f001 fec0 	bl	8008a2c <__ssvfiscanf_r>
 8006cac:	b01f      	add	sp, #124	; 0x7c
 8006cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb2:	b003      	add	sp, #12
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	2000000c 	.word	0x2000000c

08006cc0 <__sread>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	f002 fad4 	bl	8009274 <_read_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	bfab      	itete	ge
 8006cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd4:	181b      	addge	r3, r3, r0
 8006cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cda:	bfac      	ite	ge
 8006cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cde:	81a3      	strhlt	r3, [r4, #12]
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <__seofread>:
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	4770      	bx	lr

08006ce6 <__swrite>:
 8006ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cea:	461f      	mov	r7, r3
 8006cec:	898b      	ldrh	r3, [r1, #12]
 8006cee:	05db      	lsls	r3, r3, #23
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	4616      	mov	r6, r2
 8006cf6:	d505      	bpl.n	8006d04 <__swrite+0x1e>
 8006cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f001 f940 	bl	8007f84 <_lseek_r>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	4632      	mov	r2, r6
 8006d12:	463b      	mov	r3, r7
 8006d14:	4628      	mov	r0, r5
 8006d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1a:	f000 b869 	b.w	8006df0 <_write_r>

08006d1e <__sseek>:
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	460c      	mov	r4, r1
 8006d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d26:	f001 f92d 	bl	8007f84 <_lseek_r>
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	bf15      	itete	ne
 8006d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d3a:	81a3      	strheq	r3, [r4, #12]
 8006d3c:	bf18      	it	ne
 8006d3e:	81a3      	strhne	r3, [r4, #12]
 8006d40:	bd10      	pop	{r4, pc}

08006d42 <__sclose>:
 8006d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d46:	f000 b8d3 	b.w	8006ef0 <_close_r>
	...

08006d4c <__swbuf_r>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	460e      	mov	r6, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	4605      	mov	r5, r0
 8006d54:	b118      	cbz	r0, 8006d5e <__swbuf_r+0x12>
 8006d56:	6983      	ldr	r3, [r0, #24]
 8006d58:	b90b      	cbnz	r3, 8006d5e <__swbuf_r+0x12>
 8006d5a:	f001 f86d 	bl	8007e38 <__sinit>
 8006d5e:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <__swbuf_r+0x98>)
 8006d60:	429c      	cmp	r4, r3
 8006d62:	d12b      	bne.n	8006dbc <__swbuf_r+0x70>
 8006d64:	686c      	ldr	r4, [r5, #4]
 8006d66:	69a3      	ldr	r3, [r4, #24]
 8006d68:	60a3      	str	r3, [r4, #8]
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	071a      	lsls	r2, r3, #28
 8006d6e:	d52f      	bpl.n	8006dd0 <__swbuf_r+0x84>
 8006d70:	6923      	ldr	r3, [r4, #16]
 8006d72:	b36b      	cbz	r3, 8006dd0 <__swbuf_r+0x84>
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	1ac0      	subs	r0, r0, r3
 8006d7a:	6963      	ldr	r3, [r4, #20]
 8006d7c:	b2f6      	uxtb	r6, r6
 8006d7e:	4283      	cmp	r3, r0
 8006d80:	4637      	mov	r7, r6
 8006d82:	dc04      	bgt.n	8006d8e <__swbuf_r+0x42>
 8006d84:	4621      	mov	r1, r4
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 ffc2 	bl	8007d10 <_fflush_r>
 8006d8c:	bb30      	cbnz	r0, 8006ddc <__swbuf_r+0x90>
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	60a3      	str	r3, [r4, #8]
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	6022      	str	r2, [r4, #0]
 8006d9a:	701e      	strb	r6, [r3, #0]
 8006d9c:	6963      	ldr	r3, [r4, #20]
 8006d9e:	3001      	adds	r0, #1
 8006da0:	4283      	cmp	r3, r0
 8006da2:	d004      	beq.n	8006dae <__swbuf_r+0x62>
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	07db      	lsls	r3, r3, #31
 8006da8:	d506      	bpl.n	8006db8 <__swbuf_r+0x6c>
 8006daa:	2e0a      	cmp	r6, #10
 8006dac:	d104      	bne.n	8006db8 <__swbuf_r+0x6c>
 8006dae:	4621      	mov	r1, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 ffad 	bl	8007d10 <_fflush_r>
 8006db6:	b988      	cbnz	r0, 8006ddc <__swbuf_r+0x90>
 8006db8:	4638      	mov	r0, r7
 8006dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <__swbuf_r+0x9c>)
 8006dbe:	429c      	cmp	r4, r3
 8006dc0:	d101      	bne.n	8006dc6 <__swbuf_r+0x7a>
 8006dc2:	68ac      	ldr	r4, [r5, #8]
 8006dc4:	e7cf      	b.n	8006d66 <__swbuf_r+0x1a>
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <__swbuf_r+0xa0>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	bf08      	it	eq
 8006dcc:	68ec      	ldreq	r4, [r5, #12]
 8006dce:	e7ca      	b.n	8006d66 <__swbuf_r+0x1a>
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 f81e 	bl	8006e14 <__swsetup_r>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d0cb      	beq.n	8006d74 <__swbuf_r+0x28>
 8006ddc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006de0:	e7ea      	b.n	8006db8 <__swbuf_r+0x6c>
 8006de2:	bf00      	nop
 8006de4:	08009b7c 	.word	0x08009b7c
 8006de8:	08009b9c 	.word	0x08009b9c
 8006dec:	08009b5c 	.word	0x08009b5c

08006df0 <_write_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4d07      	ldr	r5, [pc, #28]	; (8006e10 <_write_r+0x20>)
 8006df4:	4604      	mov	r4, r0
 8006df6:	4608      	mov	r0, r1
 8006df8:	4611      	mov	r1, r2
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f7fa f8cc 	bl	8000f9c <_write>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_write_r+0x1e>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_write_r+0x1e>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000508 	.word	0x20000508

08006e14 <__swsetup_r>:
 8006e14:	4b32      	ldr	r3, [pc, #200]	; (8006ee0 <__swsetup_r+0xcc>)
 8006e16:	b570      	push	{r4, r5, r6, lr}
 8006e18:	681d      	ldr	r5, [r3, #0]
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	b125      	cbz	r5, 8006e2a <__swsetup_r+0x16>
 8006e20:	69ab      	ldr	r3, [r5, #24]
 8006e22:	b913      	cbnz	r3, 8006e2a <__swsetup_r+0x16>
 8006e24:	4628      	mov	r0, r5
 8006e26:	f001 f807 	bl	8007e38 <__sinit>
 8006e2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ee4 <__swsetup_r+0xd0>)
 8006e2c:	429c      	cmp	r4, r3
 8006e2e:	d10f      	bne.n	8006e50 <__swsetup_r+0x3c>
 8006e30:	686c      	ldr	r4, [r5, #4]
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e38:	0719      	lsls	r1, r3, #28
 8006e3a:	d42c      	bmi.n	8006e96 <__swsetup_r+0x82>
 8006e3c:	06dd      	lsls	r5, r3, #27
 8006e3e:	d411      	bmi.n	8006e64 <__swsetup_r+0x50>
 8006e40:	2309      	movs	r3, #9
 8006e42:	6033      	str	r3, [r6, #0]
 8006e44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e48:	81a3      	strh	r3, [r4, #12]
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e4e:	e03e      	b.n	8006ece <__swsetup_r+0xba>
 8006e50:	4b25      	ldr	r3, [pc, #148]	; (8006ee8 <__swsetup_r+0xd4>)
 8006e52:	429c      	cmp	r4, r3
 8006e54:	d101      	bne.n	8006e5a <__swsetup_r+0x46>
 8006e56:	68ac      	ldr	r4, [r5, #8]
 8006e58:	e7eb      	b.n	8006e32 <__swsetup_r+0x1e>
 8006e5a:	4b24      	ldr	r3, [pc, #144]	; (8006eec <__swsetup_r+0xd8>)
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	bf08      	it	eq
 8006e60:	68ec      	ldreq	r4, [r5, #12]
 8006e62:	e7e6      	b.n	8006e32 <__swsetup_r+0x1e>
 8006e64:	0758      	lsls	r0, r3, #29
 8006e66:	d512      	bpl.n	8006e8e <__swsetup_r+0x7a>
 8006e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6a:	b141      	cbz	r1, 8006e7e <__swsetup_r+0x6a>
 8006e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e70:	4299      	cmp	r1, r3
 8006e72:	d002      	beq.n	8006e7a <__swsetup_r+0x66>
 8006e74:	4630      	mov	r0, r6
 8006e76:	f001 fc9f 	bl	80087b8 <_free_r>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	2300      	movs	r3, #0
 8006e88:	6063      	str	r3, [r4, #4]
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f043 0308 	orr.w	r3, r3, #8
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	b94b      	cbnz	r3, 8006eae <__swsetup_r+0x9a>
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea4:	d003      	beq.n	8006eae <__swsetup_r+0x9a>
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f001 f8a3 	bl	8007ff4 <__smakebuf_r>
 8006eae:	89a0      	ldrh	r0, [r4, #12]
 8006eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eb4:	f010 0301 	ands.w	r3, r0, #1
 8006eb8:	d00a      	beq.n	8006ed0 <__swsetup_r+0xbc>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60a3      	str	r3, [r4, #8]
 8006ebe:	6963      	ldr	r3, [r4, #20]
 8006ec0:	425b      	negs	r3, r3
 8006ec2:	61a3      	str	r3, [r4, #24]
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	b943      	cbnz	r3, 8006eda <__swsetup_r+0xc6>
 8006ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ecc:	d1ba      	bne.n	8006e44 <__swsetup_r+0x30>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	0781      	lsls	r1, r0, #30
 8006ed2:	bf58      	it	pl
 8006ed4:	6963      	ldrpl	r3, [r4, #20]
 8006ed6:	60a3      	str	r3, [r4, #8]
 8006ed8:	e7f4      	b.n	8006ec4 <__swsetup_r+0xb0>
 8006eda:	2000      	movs	r0, #0
 8006edc:	e7f7      	b.n	8006ece <__swsetup_r+0xba>
 8006ede:	bf00      	nop
 8006ee0:	2000000c 	.word	0x2000000c
 8006ee4:	08009b7c 	.word	0x08009b7c
 8006ee8:	08009b9c 	.word	0x08009b9c
 8006eec:	08009b5c 	.word	0x08009b5c

08006ef0 <_close_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d06      	ldr	r5, [pc, #24]	; (8006f0c <_close_r+0x1c>)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	f7fb fb03 	bl	8002506 <_close>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_close_r+0x1a>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_close_r+0x1a>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	20000508 	.word	0x20000508

08006f10 <quorem>:
 8006f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	6903      	ldr	r3, [r0, #16]
 8006f16:	690c      	ldr	r4, [r1, #16]
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	f2c0 8081 	blt.w	8007022 <quorem+0x112>
 8006f20:	3c01      	subs	r4, #1
 8006f22:	f101 0814 	add.w	r8, r1, #20
 8006f26:	f100 0514 	add.w	r5, r0, #20
 8006f2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f44:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f48:	d331      	bcc.n	8006fae <quorem+0x9e>
 8006f4a:	f04f 0e00 	mov.w	lr, #0
 8006f4e:	4640      	mov	r0, r8
 8006f50:	46ac      	mov	ip, r5
 8006f52:	46f2      	mov	sl, lr
 8006f54:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f58:	b293      	uxth	r3, r2
 8006f5a:	fb06 e303 	mla	r3, r6, r3, lr
 8006f5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ebaa 0303 	sub.w	r3, sl, r3
 8006f68:	f8dc a000 	ldr.w	sl, [ip]
 8006f6c:	0c12      	lsrs	r2, r2, #16
 8006f6e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f72:	fb06 e202 	mla	r2, r6, r2, lr
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	9b00      	ldr	r3, [sp, #0]
 8006f7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f7e:	b292      	uxth	r2, r2
 8006f80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f88:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f8c:	4581      	cmp	r9, r0
 8006f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f92:	f84c 3b04 	str.w	r3, [ip], #4
 8006f96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f9a:	d2db      	bcs.n	8006f54 <quorem+0x44>
 8006f9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fa0:	b92b      	cbnz	r3, 8006fae <quorem+0x9e>
 8006fa2:	9b01      	ldr	r3, [sp, #4]
 8006fa4:	3b04      	subs	r3, #4
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	d32e      	bcc.n	800700a <quorem+0xfa>
 8006fac:	613c      	str	r4, [r7, #16]
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f001 faea 	bl	8008588 <__mcmp>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	db24      	blt.n	8007002 <quorem+0xf2>
 8006fb8:	3601      	adds	r6, #1
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f04f 0c00 	mov.w	ip, #0
 8006fc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fc4:	f8d0 e000 	ldr.w	lr, [r0]
 8006fc8:	b293      	uxth	r3, r2
 8006fca:	ebac 0303 	sub.w	r3, ip, r3
 8006fce:	0c12      	lsrs	r2, r2, #16
 8006fd0:	fa13 f38e 	uxtah	r3, r3, lr
 8006fd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fe2:	45c1      	cmp	r9, r8
 8006fe4:	f840 3b04 	str.w	r3, [r0], #4
 8006fe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fec:	d2e8      	bcs.n	8006fc0 <quorem+0xb0>
 8006fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ff6:	b922      	cbnz	r2, 8007002 <quorem+0xf2>
 8006ff8:	3b04      	subs	r3, #4
 8006ffa:	429d      	cmp	r5, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	d30a      	bcc.n	8007016 <quorem+0x106>
 8007000:	613c      	str	r4, [r7, #16]
 8007002:	4630      	mov	r0, r6
 8007004:	b003      	add	sp, #12
 8007006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	3b04      	subs	r3, #4
 800700e:	2a00      	cmp	r2, #0
 8007010:	d1cc      	bne.n	8006fac <quorem+0x9c>
 8007012:	3c01      	subs	r4, #1
 8007014:	e7c7      	b.n	8006fa6 <quorem+0x96>
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	3b04      	subs	r3, #4
 800701a:	2a00      	cmp	r2, #0
 800701c:	d1f0      	bne.n	8007000 <quorem+0xf0>
 800701e:	3c01      	subs	r4, #1
 8007020:	e7eb      	b.n	8006ffa <quorem+0xea>
 8007022:	2000      	movs	r0, #0
 8007024:	e7ee      	b.n	8007004 <quorem+0xf4>
	...

08007028 <_dtoa_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	ed2d 8b04 	vpush	{d8-d9}
 8007030:	ec57 6b10 	vmov	r6, r7, d0
 8007034:	b093      	sub	sp, #76	; 0x4c
 8007036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800703c:	9106      	str	r1, [sp, #24]
 800703e:	ee10 aa10 	vmov	sl, s0
 8007042:	4604      	mov	r4, r0
 8007044:	9209      	str	r2, [sp, #36]	; 0x24
 8007046:	930c      	str	r3, [sp, #48]	; 0x30
 8007048:	46bb      	mov	fp, r7
 800704a:	b975      	cbnz	r5, 800706a <_dtoa_r+0x42>
 800704c:	2010      	movs	r0, #16
 800704e:	f001 f811 	bl	8008074 <malloc>
 8007052:	4602      	mov	r2, r0
 8007054:	6260      	str	r0, [r4, #36]	; 0x24
 8007056:	b920      	cbnz	r0, 8007062 <_dtoa_r+0x3a>
 8007058:	4ba7      	ldr	r3, [pc, #668]	; (80072f8 <_dtoa_r+0x2d0>)
 800705a:	21ea      	movs	r1, #234	; 0xea
 800705c:	48a7      	ldr	r0, [pc, #668]	; (80072fc <_dtoa_r+0x2d4>)
 800705e:	f002 fa95 	bl	800958c <__assert_func>
 8007062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007066:	6005      	str	r5, [r0, #0]
 8007068:	60c5      	str	r5, [r0, #12]
 800706a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800706c:	6819      	ldr	r1, [r3, #0]
 800706e:	b151      	cbz	r1, 8007086 <_dtoa_r+0x5e>
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	604a      	str	r2, [r1, #4]
 8007074:	2301      	movs	r3, #1
 8007076:	4093      	lsls	r3, r2
 8007078:	608b      	str	r3, [r1, #8]
 800707a:	4620      	mov	r0, r4
 800707c:	f001 f842 	bl	8008104 <_Bfree>
 8007080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	1e3b      	subs	r3, r7, #0
 8007088:	bfaa      	itet	ge
 800708a:	2300      	movge	r3, #0
 800708c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007090:	f8c8 3000 	strge.w	r3, [r8]
 8007094:	4b9a      	ldr	r3, [pc, #616]	; (8007300 <_dtoa_r+0x2d8>)
 8007096:	bfbc      	itt	lt
 8007098:	2201      	movlt	r2, #1
 800709a:	f8c8 2000 	strlt.w	r2, [r8]
 800709e:	ea33 030b 	bics.w	r3, r3, fp
 80070a2:	d11b      	bne.n	80070dc <_dtoa_r+0xb4>
 80070a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070b0:	4333      	orrs	r3, r6
 80070b2:	f000 8592 	beq.w	8007bda <_dtoa_r+0xbb2>
 80070b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b8:	b963      	cbnz	r3, 80070d4 <_dtoa_r+0xac>
 80070ba:	4b92      	ldr	r3, [pc, #584]	; (8007304 <_dtoa_r+0x2dc>)
 80070bc:	e022      	b.n	8007104 <_dtoa_r+0xdc>
 80070be:	4b92      	ldr	r3, [pc, #584]	; (8007308 <_dtoa_r+0x2e0>)
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	3308      	adds	r3, #8
 80070c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	9801      	ldr	r0, [sp, #4]
 80070ca:	b013      	add	sp, #76	; 0x4c
 80070cc:	ecbd 8b04 	vpop	{d8-d9}
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	4b8b      	ldr	r3, [pc, #556]	; (8007304 <_dtoa_r+0x2dc>)
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	3303      	adds	r3, #3
 80070da:	e7f3      	b.n	80070c4 <_dtoa_r+0x9c>
 80070dc:	2200      	movs	r2, #0
 80070de:	2300      	movs	r3, #0
 80070e0:	4650      	mov	r0, sl
 80070e2:	4659      	mov	r1, fp
 80070e4:	f7f9 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80070e8:	ec4b ab19 	vmov	d9, sl, fp
 80070ec:	4680      	mov	r8, r0
 80070ee:	b158      	cbz	r0, 8007108 <_dtoa_r+0xe0>
 80070f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070f2:	2301      	movs	r3, #1
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 856b 	beq.w	8007bd4 <_dtoa_r+0xbac>
 80070fe:	4883      	ldr	r0, [pc, #524]	; (800730c <_dtoa_r+0x2e4>)
 8007100:	6018      	str	r0, [r3, #0]
 8007102:	1e43      	subs	r3, r0, #1
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	e7df      	b.n	80070c8 <_dtoa_r+0xa0>
 8007108:	ec4b ab10 	vmov	d0, sl, fp
 800710c:	aa10      	add	r2, sp, #64	; 0x40
 800710e:	a911      	add	r1, sp, #68	; 0x44
 8007110:	4620      	mov	r0, r4
 8007112:	f001 fadf 	bl	80086d4 <__d2b>
 8007116:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800711a:	ee08 0a10 	vmov	s16, r0
 800711e:	2d00      	cmp	r5, #0
 8007120:	f000 8084 	beq.w	800722c <_dtoa_r+0x204>
 8007124:	ee19 3a90 	vmov	r3, s19
 8007128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800712c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007130:	4656      	mov	r6, sl
 8007132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800713a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800713e:	4b74      	ldr	r3, [pc, #464]	; (8007310 <_dtoa_r+0x2e8>)
 8007140:	2200      	movs	r2, #0
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 f8a7 	bl	8000298 <__aeabi_dsub>
 800714a:	a365      	add	r3, pc, #404	; (adr r3, 80072e0 <_dtoa_r+0x2b8>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 fa5a 	bl	8000608 <__aeabi_dmul>
 8007154:	a364      	add	r3, pc, #400	; (adr r3, 80072e8 <_dtoa_r+0x2c0>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 f89f 	bl	800029c <__adddf3>
 800715e:	4606      	mov	r6, r0
 8007160:	4628      	mov	r0, r5
 8007162:	460f      	mov	r7, r1
 8007164:	f7f9 f9e6 	bl	8000534 <__aeabi_i2d>
 8007168:	a361      	add	r3, pc, #388	; (adr r3, 80072f0 <_dtoa_r+0x2c8>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 fa4b 	bl	8000608 <__aeabi_dmul>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 f88f 	bl	800029c <__adddf3>
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	f7f9 fcf1 	bl	8000b68 <__aeabi_d2iz>
 8007186:	2200      	movs	r2, #0
 8007188:	9000      	str	r0, [sp, #0]
 800718a:	2300      	movs	r3, #0
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	f7f9 fcac 	bl	8000aec <__aeabi_dcmplt>
 8007194:	b150      	cbz	r0, 80071ac <_dtoa_r+0x184>
 8007196:	9800      	ldr	r0, [sp, #0]
 8007198:	f7f9 f9cc 	bl	8000534 <__aeabi_i2d>
 800719c:	4632      	mov	r2, r6
 800719e:	463b      	mov	r3, r7
 80071a0:	f7f9 fc9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80071a4:	b910      	cbnz	r0, 80071ac <_dtoa_r+0x184>
 80071a6:	9b00      	ldr	r3, [sp, #0]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	2b16      	cmp	r3, #22
 80071b0:	d85a      	bhi.n	8007268 <_dtoa_r+0x240>
 80071b2:	9a00      	ldr	r2, [sp, #0]
 80071b4:	4b57      	ldr	r3, [pc, #348]	; (8007314 <_dtoa_r+0x2ec>)
 80071b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	ec51 0b19 	vmov	r0, r1, d9
 80071c2:	f7f9 fc93 	bl	8000aec <__aeabi_dcmplt>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d050      	beq.n	800726c <_dtoa_r+0x244>
 80071ca:	9b00      	ldr	r3, [sp, #0]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071d6:	1b5d      	subs	r5, r3, r5
 80071d8:	1e6b      	subs	r3, r5, #1
 80071da:	9305      	str	r3, [sp, #20]
 80071dc:	bf45      	ittet	mi
 80071de:	f1c5 0301 	rsbmi	r3, r5, #1
 80071e2:	9304      	strmi	r3, [sp, #16]
 80071e4:	2300      	movpl	r3, #0
 80071e6:	2300      	movmi	r3, #0
 80071e8:	bf4c      	ite	mi
 80071ea:	9305      	strmi	r3, [sp, #20]
 80071ec:	9304      	strpl	r3, [sp, #16]
 80071ee:	9b00      	ldr	r3, [sp, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	db3d      	blt.n	8007270 <_dtoa_r+0x248>
 80071f4:	9b05      	ldr	r3, [sp, #20]
 80071f6:	9a00      	ldr	r2, [sp, #0]
 80071f8:	920a      	str	r2, [sp, #40]	; 0x28
 80071fa:	4413      	add	r3, r2
 80071fc:	9305      	str	r3, [sp, #20]
 80071fe:	2300      	movs	r3, #0
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	9b06      	ldr	r3, [sp, #24]
 8007204:	2b09      	cmp	r3, #9
 8007206:	f200 8089 	bhi.w	800731c <_dtoa_r+0x2f4>
 800720a:	2b05      	cmp	r3, #5
 800720c:	bfc4      	itt	gt
 800720e:	3b04      	subgt	r3, #4
 8007210:	9306      	strgt	r3, [sp, #24]
 8007212:	9b06      	ldr	r3, [sp, #24]
 8007214:	f1a3 0302 	sub.w	r3, r3, #2
 8007218:	bfcc      	ite	gt
 800721a:	2500      	movgt	r5, #0
 800721c:	2501      	movle	r5, #1
 800721e:	2b03      	cmp	r3, #3
 8007220:	f200 8087 	bhi.w	8007332 <_dtoa_r+0x30a>
 8007224:	e8df f003 	tbb	[pc, r3]
 8007228:	59383a2d 	.word	0x59383a2d
 800722c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007230:	441d      	add	r5, r3
 8007232:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007236:	2b20      	cmp	r3, #32
 8007238:	bfc1      	itttt	gt
 800723a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800723e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007242:	fa0b f303 	lslgt.w	r3, fp, r3
 8007246:	fa26 f000 	lsrgt.w	r0, r6, r0
 800724a:	bfda      	itte	le
 800724c:	f1c3 0320 	rsble	r3, r3, #32
 8007250:	fa06 f003 	lslle.w	r0, r6, r3
 8007254:	4318      	orrgt	r0, r3
 8007256:	f7f9 f95d 	bl	8000514 <__aeabi_ui2d>
 800725a:	2301      	movs	r3, #1
 800725c:	4606      	mov	r6, r0
 800725e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007262:	3d01      	subs	r5, #1
 8007264:	930e      	str	r3, [sp, #56]	; 0x38
 8007266:	e76a      	b.n	800713e <_dtoa_r+0x116>
 8007268:	2301      	movs	r3, #1
 800726a:	e7b2      	b.n	80071d2 <_dtoa_r+0x1aa>
 800726c:	900b      	str	r0, [sp, #44]	; 0x2c
 800726e:	e7b1      	b.n	80071d4 <_dtoa_r+0x1ac>
 8007270:	9b04      	ldr	r3, [sp, #16]
 8007272:	9a00      	ldr	r2, [sp, #0]
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	4253      	negs	r3, r2
 800727a:	9307      	str	r3, [sp, #28]
 800727c:	2300      	movs	r3, #0
 800727e:	930a      	str	r3, [sp, #40]	; 0x28
 8007280:	e7bf      	b.n	8007202 <_dtoa_r+0x1da>
 8007282:	2300      	movs	r3, #0
 8007284:	9308      	str	r3, [sp, #32]
 8007286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	dc55      	bgt.n	8007338 <_dtoa_r+0x310>
 800728c:	2301      	movs	r3, #1
 800728e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007292:	461a      	mov	r2, r3
 8007294:	9209      	str	r2, [sp, #36]	; 0x24
 8007296:	e00c      	b.n	80072b2 <_dtoa_r+0x28a>
 8007298:	2301      	movs	r3, #1
 800729a:	e7f3      	b.n	8007284 <_dtoa_r+0x25c>
 800729c:	2300      	movs	r3, #0
 800729e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a0:	9308      	str	r3, [sp, #32]
 80072a2:	9b00      	ldr	r3, [sp, #0]
 80072a4:	4413      	add	r3, r2
 80072a6:	9302      	str	r3, [sp, #8]
 80072a8:	3301      	adds	r3, #1
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	9303      	str	r3, [sp, #12]
 80072ae:	bfb8      	it	lt
 80072b0:	2301      	movlt	r3, #1
 80072b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072b4:	2200      	movs	r2, #0
 80072b6:	6042      	str	r2, [r0, #4]
 80072b8:	2204      	movs	r2, #4
 80072ba:	f102 0614 	add.w	r6, r2, #20
 80072be:	429e      	cmp	r6, r3
 80072c0:	6841      	ldr	r1, [r0, #4]
 80072c2:	d93d      	bls.n	8007340 <_dtoa_r+0x318>
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 fedd 	bl	8008084 <_Balloc>
 80072ca:	9001      	str	r0, [sp, #4]
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d13b      	bne.n	8007348 <_dtoa_r+0x320>
 80072d0:	4b11      	ldr	r3, [pc, #68]	; (8007318 <_dtoa_r+0x2f0>)
 80072d2:	4602      	mov	r2, r0
 80072d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072d8:	e6c0      	b.n	800705c <_dtoa_r+0x34>
 80072da:	2301      	movs	r3, #1
 80072dc:	e7df      	b.n	800729e <_dtoa_r+0x276>
 80072de:	bf00      	nop
 80072e0:	636f4361 	.word	0x636f4361
 80072e4:	3fd287a7 	.word	0x3fd287a7
 80072e8:	8b60c8b3 	.word	0x8b60c8b3
 80072ec:	3fc68a28 	.word	0x3fc68a28
 80072f0:	509f79fb 	.word	0x509f79fb
 80072f4:	3fd34413 	.word	0x3fd34413
 80072f8:	08009ad7 	.word	0x08009ad7
 80072fc:	08009aee 	.word	0x08009aee
 8007300:	7ff00000 	.word	0x7ff00000
 8007304:	08009ad3 	.word	0x08009ad3
 8007308:	08009aca 	.word	0x08009aca
 800730c:	08009d2a 	.word	0x08009d2a
 8007310:	3ff80000 	.word	0x3ff80000
 8007314:	08009c40 	.word	0x08009c40
 8007318:	08009b49 	.word	0x08009b49
 800731c:	2501      	movs	r5, #1
 800731e:	2300      	movs	r3, #0
 8007320:	9306      	str	r3, [sp, #24]
 8007322:	9508      	str	r5, [sp, #32]
 8007324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007328:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	2312      	movs	r3, #18
 8007330:	e7b0      	b.n	8007294 <_dtoa_r+0x26c>
 8007332:	2301      	movs	r3, #1
 8007334:	9308      	str	r3, [sp, #32]
 8007336:	e7f5      	b.n	8007324 <_dtoa_r+0x2fc>
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800733e:	e7b8      	b.n	80072b2 <_dtoa_r+0x28a>
 8007340:	3101      	adds	r1, #1
 8007342:	6041      	str	r1, [r0, #4]
 8007344:	0052      	lsls	r2, r2, #1
 8007346:	e7b8      	b.n	80072ba <_dtoa_r+0x292>
 8007348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800734a:	9a01      	ldr	r2, [sp, #4]
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	2b0e      	cmp	r3, #14
 8007352:	f200 809d 	bhi.w	8007490 <_dtoa_r+0x468>
 8007356:	2d00      	cmp	r5, #0
 8007358:	f000 809a 	beq.w	8007490 <_dtoa_r+0x468>
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	dd32      	ble.n	80073c8 <_dtoa_r+0x3a0>
 8007362:	4ab7      	ldr	r2, [pc, #732]	; (8007640 <_dtoa_r+0x618>)
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800736c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007370:	9b00      	ldr	r3, [sp, #0]
 8007372:	05d8      	lsls	r0, r3, #23
 8007374:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007378:	d516      	bpl.n	80073a8 <_dtoa_r+0x380>
 800737a:	4bb2      	ldr	r3, [pc, #712]	; (8007644 <_dtoa_r+0x61c>)
 800737c:	ec51 0b19 	vmov	r0, r1, d9
 8007380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007384:	f7f9 fa6a 	bl	800085c <__aeabi_ddiv>
 8007388:	f007 070f 	and.w	r7, r7, #15
 800738c:	4682      	mov	sl, r0
 800738e:	468b      	mov	fp, r1
 8007390:	2503      	movs	r5, #3
 8007392:	4eac      	ldr	r6, [pc, #688]	; (8007644 <_dtoa_r+0x61c>)
 8007394:	b957      	cbnz	r7, 80073ac <_dtoa_r+0x384>
 8007396:	4642      	mov	r2, r8
 8007398:	464b      	mov	r3, r9
 800739a:	4650      	mov	r0, sl
 800739c:	4659      	mov	r1, fp
 800739e:	f7f9 fa5d 	bl	800085c <__aeabi_ddiv>
 80073a2:	4682      	mov	sl, r0
 80073a4:	468b      	mov	fp, r1
 80073a6:	e028      	b.n	80073fa <_dtoa_r+0x3d2>
 80073a8:	2502      	movs	r5, #2
 80073aa:	e7f2      	b.n	8007392 <_dtoa_r+0x36a>
 80073ac:	07f9      	lsls	r1, r7, #31
 80073ae:	d508      	bpl.n	80073c2 <_dtoa_r+0x39a>
 80073b0:	4640      	mov	r0, r8
 80073b2:	4649      	mov	r1, r9
 80073b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073b8:	f7f9 f926 	bl	8000608 <__aeabi_dmul>
 80073bc:	3501      	adds	r5, #1
 80073be:	4680      	mov	r8, r0
 80073c0:	4689      	mov	r9, r1
 80073c2:	107f      	asrs	r7, r7, #1
 80073c4:	3608      	adds	r6, #8
 80073c6:	e7e5      	b.n	8007394 <_dtoa_r+0x36c>
 80073c8:	f000 809b 	beq.w	8007502 <_dtoa_r+0x4da>
 80073cc:	9b00      	ldr	r3, [sp, #0]
 80073ce:	4f9d      	ldr	r7, [pc, #628]	; (8007644 <_dtoa_r+0x61c>)
 80073d0:	425e      	negs	r6, r3
 80073d2:	4b9b      	ldr	r3, [pc, #620]	; (8007640 <_dtoa_r+0x618>)
 80073d4:	f006 020f 	and.w	r2, r6, #15
 80073d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	ec51 0b19 	vmov	r0, r1, d9
 80073e4:	f7f9 f910 	bl	8000608 <__aeabi_dmul>
 80073e8:	1136      	asrs	r6, r6, #4
 80073ea:	4682      	mov	sl, r0
 80073ec:	468b      	mov	fp, r1
 80073ee:	2300      	movs	r3, #0
 80073f0:	2502      	movs	r5, #2
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d17a      	bne.n	80074ec <_dtoa_r+0x4c4>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1d3      	bne.n	80073a2 <_dtoa_r+0x37a>
 80073fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8082 	beq.w	8007506 <_dtoa_r+0x4de>
 8007402:	4b91      	ldr	r3, [pc, #580]	; (8007648 <_dtoa_r+0x620>)
 8007404:	2200      	movs	r2, #0
 8007406:	4650      	mov	r0, sl
 8007408:	4659      	mov	r1, fp
 800740a:	f7f9 fb6f 	bl	8000aec <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d079      	beq.n	8007506 <_dtoa_r+0x4de>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d076      	beq.n	8007506 <_dtoa_r+0x4de>
 8007418:	9b02      	ldr	r3, [sp, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	dd36      	ble.n	800748c <_dtoa_r+0x464>
 800741e:	9b00      	ldr	r3, [sp, #0]
 8007420:	4650      	mov	r0, sl
 8007422:	4659      	mov	r1, fp
 8007424:	1e5f      	subs	r7, r3, #1
 8007426:	2200      	movs	r2, #0
 8007428:	4b88      	ldr	r3, [pc, #544]	; (800764c <_dtoa_r+0x624>)
 800742a:	f7f9 f8ed 	bl	8000608 <__aeabi_dmul>
 800742e:	9e02      	ldr	r6, [sp, #8]
 8007430:	4682      	mov	sl, r0
 8007432:	468b      	mov	fp, r1
 8007434:	3501      	adds	r5, #1
 8007436:	4628      	mov	r0, r5
 8007438:	f7f9 f87c 	bl	8000534 <__aeabi_i2d>
 800743c:	4652      	mov	r2, sl
 800743e:	465b      	mov	r3, fp
 8007440:	f7f9 f8e2 	bl	8000608 <__aeabi_dmul>
 8007444:	4b82      	ldr	r3, [pc, #520]	; (8007650 <_dtoa_r+0x628>)
 8007446:	2200      	movs	r2, #0
 8007448:	f7f8 ff28 	bl	800029c <__adddf3>
 800744c:	46d0      	mov	r8, sl
 800744e:	46d9      	mov	r9, fp
 8007450:	4682      	mov	sl, r0
 8007452:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007456:	2e00      	cmp	r6, #0
 8007458:	d158      	bne.n	800750c <_dtoa_r+0x4e4>
 800745a:	4b7e      	ldr	r3, [pc, #504]	; (8007654 <_dtoa_r+0x62c>)
 800745c:	2200      	movs	r2, #0
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	f7f8 ff19 	bl	8000298 <__aeabi_dsub>
 8007466:	4652      	mov	r2, sl
 8007468:	465b      	mov	r3, fp
 800746a:	4680      	mov	r8, r0
 800746c:	4689      	mov	r9, r1
 800746e:	f7f9 fb5b 	bl	8000b28 <__aeabi_dcmpgt>
 8007472:	2800      	cmp	r0, #0
 8007474:	f040 8295 	bne.w	80079a2 <_dtoa_r+0x97a>
 8007478:	4652      	mov	r2, sl
 800747a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800747e:	4640      	mov	r0, r8
 8007480:	4649      	mov	r1, r9
 8007482:	f7f9 fb33 	bl	8000aec <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f040 8289 	bne.w	800799e <_dtoa_r+0x976>
 800748c:	ec5b ab19 	vmov	sl, fp, d9
 8007490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007492:	2b00      	cmp	r3, #0
 8007494:	f2c0 8148 	blt.w	8007728 <_dtoa_r+0x700>
 8007498:	9a00      	ldr	r2, [sp, #0]
 800749a:	2a0e      	cmp	r2, #14
 800749c:	f300 8144 	bgt.w	8007728 <_dtoa_r+0x700>
 80074a0:	4b67      	ldr	r3, [pc, #412]	; (8007640 <_dtoa_r+0x618>)
 80074a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f280 80d5 	bge.w	800765c <_dtoa_r+0x634>
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f300 80d1 	bgt.w	800765c <_dtoa_r+0x634>
 80074ba:	f040 826f 	bne.w	800799c <_dtoa_r+0x974>
 80074be:	4b65      	ldr	r3, [pc, #404]	; (8007654 <_dtoa_r+0x62c>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f9 f89f 	bl	8000608 <__aeabi_dmul>
 80074ca:	4652      	mov	r2, sl
 80074cc:	465b      	mov	r3, fp
 80074ce:	f7f9 fb21 	bl	8000b14 <__aeabi_dcmpge>
 80074d2:	9e03      	ldr	r6, [sp, #12]
 80074d4:	4637      	mov	r7, r6
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f040 8245 	bne.w	8007966 <_dtoa_r+0x93e>
 80074dc:	9d01      	ldr	r5, [sp, #4]
 80074de:	2331      	movs	r3, #49	; 0x31
 80074e0:	f805 3b01 	strb.w	r3, [r5], #1
 80074e4:	9b00      	ldr	r3, [sp, #0]
 80074e6:	3301      	adds	r3, #1
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	e240      	b.n	800796e <_dtoa_r+0x946>
 80074ec:	07f2      	lsls	r2, r6, #31
 80074ee:	d505      	bpl.n	80074fc <_dtoa_r+0x4d4>
 80074f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f4:	f7f9 f888 	bl	8000608 <__aeabi_dmul>
 80074f8:	3501      	adds	r5, #1
 80074fa:	2301      	movs	r3, #1
 80074fc:	1076      	asrs	r6, r6, #1
 80074fe:	3708      	adds	r7, #8
 8007500:	e777      	b.n	80073f2 <_dtoa_r+0x3ca>
 8007502:	2502      	movs	r5, #2
 8007504:	e779      	b.n	80073fa <_dtoa_r+0x3d2>
 8007506:	9f00      	ldr	r7, [sp, #0]
 8007508:	9e03      	ldr	r6, [sp, #12]
 800750a:	e794      	b.n	8007436 <_dtoa_r+0x40e>
 800750c:	9901      	ldr	r1, [sp, #4]
 800750e:	4b4c      	ldr	r3, [pc, #304]	; (8007640 <_dtoa_r+0x618>)
 8007510:	4431      	add	r1, r6
 8007512:	910d      	str	r1, [sp, #52]	; 0x34
 8007514:	9908      	ldr	r1, [sp, #32]
 8007516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800751a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800751e:	2900      	cmp	r1, #0
 8007520:	d043      	beq.n	80075aa <_dtoa_r+0x582>
 8007522:	494d      	ldr	r1, [pc, #308]	; (8007658 <_dtoa_r+0x630>)
 8007524:	2000      	movs	r0, #0
 8007526:	f7f9 f999 	bl	800085c <__aeabi_ddiv>
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	f7f8 feb3 	bl	8000298 <__aeabi_dsub>
 8007532:	9d01      	ldr	r5, [sp, #4]
 8007534:	4682      	mov	sl, r0
 8007536:	468b      	mov	fp, r1
 8007538:	4649      	mov	r1, r9
 800753a:	4640      	mov	r0, r8
 800753c:	f7f9 fb14 	bl	8000b68 <__aeabi_d2iz>
 8007540:	4606      	mov	r6, r0
 8007542:	f7f8 fff7 	bl	8000534 <__aeabi_i2d>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	f7f8 fea3 	bl	8000298 <__aeabi_dsub>
 8007552:	3630      	adds	r6, #48	; 0x30
 8007554:	f805 6b01 	strb.w	r6, [r5], #1
 8007558:	4652      	mov	r2, sl
 800755a:	465b      	mov	r3, fp
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	f7f9 fac4 	bl	8000aec <__aeabi_dcmplt>
 8007564:	2800      	cmp	r0, #0
 8007566:	d163      	bne.n	8007630 <_dtoa_r+0x608>
 8007568:	4642      	mov	r2, r8
 800756a:	464b      	mov	r3, r9
 800756c:	4936      	ldr	r1, [pc, #216]	; (8007648 <_dtoa_r+0x620>)
 800756e:	2000      	movs	r0, #0
 8007570:	f7f8 fe92 	bl	8000298 <__aeabi_dsub>
 8007574:	4652      	mov	r2, sl
 8007576:	465b      	mov	r3, fp
 8007578:	f7f9 fab8 	bl	8000aec <__aeabi_dcmplt>
 800757c:	2800      	cmp	r0, #0
 800757e:	f040 80b5 	bne.w	80076ec <_dtoa_r+0x6c4>
 8007582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007584:	429d      	cmp	r5, r3
 8007586:	d081      	beq.n	800748c <_dtoa_r+0x464>
 8007588:	4b30      	ldr	r3, [pc, #192]	; (800764c <_dtoa_r+0x624>)
 800758a:	2200      	movs	r2, #0
 800758c:	4650      	mov	r0, sl
 800758e:	4659      	mov	r1, fp
 8007590:	f7f9 f83a 	bl	8000608 <__aeabi_dmul>
 8007594:	4b2d      	ldr	r3, [pc, #180]	; (800764c <_dtoa_r+0x624>)
 8007596:	4682      	mov	sl, r0
 8007598:	468b      	mov	fp, r1
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	2200      	movs	r2, #0
 80075a0:	f7f9 f832 	bl	8000608 <__aeabi_dmul>
 80075a4:	4680      	mov	r8, r0
 80075a6:	4689      	mov	r9, r1
 80075a8:	e7c6      	b.n	8007538 <_dtoa_r+0x510>
 80075aa:	4650      	mov	r0, sl
 80075ac:	4659      	mov	r1, fp
 80075ae:	f7f9 f82b 	bl	8000608 <__aeabi_dmul>
 80075b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b4:	9d01      	ldr	r5, [sp, #4]
 80075b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075b8:	4682      	mov	sl, r0
 80075ba:	468b      	mov	fp, r1
 80075bc:	4649      	mov	r1, r9
 80075be:	4640      	mov	r0, r8
 80075c0:	f7f9 fad2 	bl	8000b68 <__aeabi_d2iz>
 80075c4:	4606      	mov	r6, r0
 80075c6:	f7f8 ffb5 	bl	8000534 <__aeabi_i2d>
 80075ca:	3630      	adds	r6, #48	; 0x30
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4640      	mov	r0, r8
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7f8 fe60 	bl	8000298 <__aeabi_dsub>
 80075d8:	f805 6b01 	strb.w	r6, [r5], #1
 80075dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075de:	429d      	cmp	r5, r3
 80075e0:	4680      	mov	r8, r0
 80075e2:	4689      	mov	r9, r1
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	d124      	bne.n	8007634 <_dtoa_r+0x60c>
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <_dtoa_r+0x630>)
 80075ec:	4650      	mov	r0, sl
 80075ee:	4659      	mov	r1, fp
 80075f0:	f7f8 fe54 	bl	800029c <__adddf3>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	f7f9 fa94 	bl	8000b28 <__aeabi_dcmpgt>
 8007600:	2800      	cmp	r0, #0
 8007602:	d173      	bne.n	80076ec <_dtoa_r+0x6c4>
 8007604:	4652      	mov	r2, sl
 8007606:	465b      	mov	r3, fp
 8007608:	4913      	ldr	r1, [pc, #76]	; (8007658 <_dtoa_r+0x630>)
 800760a:	2000      	movs	r0, #0
 800760c:	f7f8 fe44 	bl	8000298 <__aeabi_dsub>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f9 fa68 	bl	8000aec <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f43f af35 	beq.w	800748c <_dtoa_r+0x464>
 8007622:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007624:	1e6b      	subs	r3, r5, #1
 8007626:	930f      	str	r3, [sp, #60]	; 0x3c
 8007628:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800762c:	2b30      	cmp	r3, #48	; 0x30
 800762e:	d0f8      	beq.n	8007622 <_dtoa_r+0x5fa>
 8007630:	9700      	str	r7, [sp, #0]
 8007632:	e049      	b.n	80076c8 <_dtoa_r+0x6a0>
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <_dtoa_r+0x624>)
 8007636:	f7f8 ffe7 	bl	8000608 <__aeabi_dmul>
 800763a:	4680      	mov	r8, r0
 800763c:	4689      	mov	r9, r1
 800763e:	e7bd      	b.n	80075bc <_dtoa_r+0x594>
 8007640:	08009c40 	.word	0x08009c40
 8007644:	08009c18 	.word	0x08009c18
 8007648:	3ff00000 	.word	0x3ff00000
 800764c:	40240000 	.word	0x40240000
 8007650:	401c0000 	.word	0x401c0000
 8007654:	40140000 	.word	0x40140000
 8007658:	3fe00000 	.word	0x3fe00000
 800765c:	9d01      	ldr	r5, [sp, #4]
 800765e:	4656      	mov	r6, sl
 8007660:	465f      	mov	r7, fp
 8007662:	4642      	mov	r2, r8
 8007664:	464b      	mov	r3, r9
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f9 f8f7 	bl	800085c <__aeabi_ddiv>
 800766e:	f7f9 fa7b 	bl	8000b68 <__aeabi_d2iz>
 8007672:	4682      	mov	sl, r0
 8007674:	f7f8 ff5e 	bl	8000534 <__aeabi_i2d>
 8007678:	4642      	mov	r2, r8
 800767a:	464b      	mov	r3, r9
 800767c:	f7f8 ffc4 	bl	8000608 <__aeabi_dmul>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4630      	mov	r0, r6
 8007686:	4639      	mov	r1, r7
 8007688:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800768c:	f7f8 fe04 	bl	8000298 <__aeabi_dsub>
 8007690:	f805 6b01 	strb.w	r6, [r5], #1
 8007694:	9e01      	ldr	r6, [sp, #4]
 8007696:	9f03      	ldr	r7, [sp, #12]
 8007698:	1bae      	subs	r6, r5, r6
 800769a:	42b7      	cmp	r7, r6
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	d135      	bne.n	800770e <_dtoa_r+0x6e6>
 80076a2:	f7f8 fdfb 	bl	800029c <__adddf3>
 80076a6:	4642      	mov	r2, r8
 80076a8:	464b      	mov	r3, r9
 80076aa:	4606      	mov	r6, r0
 80076ac:	460f      	mov	r7, r1
 80076ae:	f7f9 fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 80076b2:	b9d0      	cbnz	r0, 80076ea <_dtoa_r+0x6c2>
 80076b4:	4642      	mov	r2, r8
 80076b6:	464b      	mov	r3, r9
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f9 fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80076c0:	b110      	cbz	r0, 80076c8 <_dtoa_r+0x6a0>
 80076c2:	f01a 0f01 	tst.w	sl, #1
 80076c6:	d110      	bne.n	80076ea <_dtoa_r+0x6c2>
 80076c8:	4620      	mov	r0, r4
 80076ca:	ee18 1a10 	vmov	r1, s16
 80076ce:	f000 fd19 	bl	8008104 <_Bfree>
 80076d2:	2300      	movs	r3, #0
 80076d4:	9800      	ldr	r0, [sp, #0]
 80076d6:	702b      	strb	r3, [r5, #0]
 80076d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076da:	3001      	adds	r0, #1
 80076dc:	6018      	str	r0, [r3, #0]
 80076de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f43f acf1 	beq.w	80070c8 <_dtoa_r+0xa0>
 80076e6:	601d      	str	r5, [r3, #0]
 80076e8:	e4ee      	b.n	80070c8 <_dtoa_r+0xa0>
 80076ea:	9f00      	ldr	r7, [sp, #0]
 80076ec:	462b      	mov	r3, r5
 80076ee:	461d      	mov	r5, r3
 80076f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076f4:	2a39      	cmp	r2, #57	; 0x39
 80076f6:	d106      	bne.n	8007706 <_dtoa_r+0x6de>
 80076f8:	9a01      	ldr	r2, [sp, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d1f7      	bne.n	80076ee <_dtoa_r+0x6c6>
 80076fe:	9901      	ldr	r1, [sp, #4]
 8007700:	2230      	movs	r2, #48	; 0x30
 8007702:	3701      	adds	r7, #1
 8007704:	700a      	strb	r2, [r1, #0]
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	3201      	adds	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e790      	b.n	8007630 <_dtoa_r+0x608>
 800770e:	4ba6      	ldr	r3, [pc, #664]	; (80079a8 <_dtoa_r+0x980>)
 8007710:	2200      	movs	r2, #0
 8007712:	f7f8 ff79 	bl	8000608 <__aeabi_dmul>
 8007716:	2200      	movs	r2, #0
 8007718:	2300      	movs	r3, #0
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	f7f9 f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 8007722:	2800      	cmp	r0, #0
 8007724:	d09d      	beq.n	8007662 <_dtoa_r+0x63a>
 8007726:	e7cf      	b.n	80076c8 <_dtoa_r+0x6a0>
 8007728:	9a08      	ldr	r2, [sp, #32]
 800772a:	2a00      	cmp	r2, #0
 800772c:	f000 80d7 	beq.w	80078de <_dtoa_r+0x8b6>
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	2a01      	cmp	r2, #1
 8007734:	f300 80ba 	bgt.w	80078ac <_dtoa_r+0x884>
 8007738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800773a:	2a00      	cmp	r2, #0
 800773c:	f000 80b2 	beq.w	80078a4 <_dtoa_r+0x87c>
 8007740:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007744:	9e07      	ldr	r6, [sp, #28]
 8007746:	9d04      	ldr	r5, [sp, #16]
 8007748:	9a04      	ldr	r2, [sp, #16]
 800774a:	441a      	add	r2, r3
 800774c:	9204      	str	r2, [sp, #16]
 800774e:	9a05      	ldr	r2, [sp, #20]
 8007750:	2101      	movs	r1, #1
 8007752:	441a      	add	r2, r3
 8007754:	4620      	mov	r0, r4
 8007756:	9205      	str	r2, [sp, #20]
 8007758:	f000 fd8c 	bl	8008274 <__i2b>
 800775c:	4607      	mov	r7, r0
 800775e:	2d00      	cmp	r5, #0
 8007760:	dd0c      	ble.n	800777c <_dtoa_r+0x754>
 8007762:	9b05      	ldr	r3, [sp, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dd09      	ble.n	800777c <_dtoa_r+0x754>
 8007768:	42ab      	cmp	r3, r5
 800776a:	9a04      	ldr	r2, [sp, #16]
 800776c:	bfa8      	it	ge
 800776e:	462b      	movge	r3, r5
 8007770:	1ad2      	subs	r2, r2, r3
 8007772:	9204      	str	r2, [sp, #16]
 8007774:	9a05      	ldr	r2, [sp, #20]
 8007776:	1aed      	subs	r5, r5, r3
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	9305      	str	r3, [sp, #20]
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	b31b      	cbz	r3, 80077c8 <_dtoa_r+0x7a0>
 8007780:	9b08      	ldr	r3, [sp, #32]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 80af 	beq.w	80078e6 <_dtoa_r+0x8be>
 8007788:	2e00      	cmp	r6, #0
 800778a:	dd13      	ble.n	80077b4 <_dtoa_r+0x78c>
 800778c:	4639      	mov	r1, r7
 800778e:	4632      	mov	r2, r6
 8007790:	4620      	mov	r0, r4
 8007792:	f000 fe2f 	bl	80083f4 <__pow5mult>
 8007796:	ee18 2a10 	vmov	r2, s16
 800779a:	4601      	mov	r1, r0
 800779c:	4607      	mov	r7, r0
 800779e:	4620      	mov	r0, r4
 80077a0:	f000 fd7e 	bl	80082a0 <__multiply>
 80077a4:	ee18 1a10 	vmov	r1, s16
 80077a8:	4680      	mov	r8, r0
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fcaa 	bl	8008104 <_Bfree>
 80077b0:	ee08 8a10 	vmov	s16, r8
 80077b4:	9b07      	ldr	r3, [sp, #28]
 80077b6:	1b9a      	subs	r2, r3, r6
 80077b8:	d006      	beq.n	80077c8 <_dtoa_r+0x7a0>
 80077ba:	ee18 1a10 	vmov	r1, s16
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 fe18 	bl	80083f4 <__pow5mult>
 80077c4:	ee08 0a10 	vmov	s16, r0
 80077c8:	2101      	movs	r1, #1
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 fd52 	bl	8008274 <__i2b>
 80077d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	4606      	mov	r6, r0
 80077d6:	f340 8088 	ble.w	80078ea <_dtoa_r+0x8c2>
 80077da:	461a      	mov	r2, r3
 80077dc:	4601      	mov	r1, r0
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 fe08 	bl	80083f4 <__pow5mult>
 80077e4:	9b06      	ldr	r3, [sp, #24]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	4606      	mov	r6, r0
 80077ea:	f340 8081 	ble.w	80078f0 <_dtoa_r+0x8c8>
 80077ee:	f04f 0800 	mov.w	r8, #0
 80077f2:	6933      	ldr	r3, [r6, #16]
 80077f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077f8:	6918      	ldr	r0, [r3, #16]
 80077fa:	f000 fceb 	bl	80081d4 <__hi0bits>
 80077fe:	f1c0 0020 	rsb	r0, r0, #32
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	4418      	add	r0, r3
 8007806:	f010 001f 	ands.w	r0, r0, #31
 800780a:	f000 8092 	beq.w	8007932 <_dtoa_r+0x90a>
 800780e:	f1c0 0320 	rsb	r3, r0, #32
 8007812:	2b04      	cmp	r3, #4
 8007814:	f340 808a 	ble.w	800792c <_dtoa_r+0x904>
 8007818:	f1c0 001c 	rsb	r0, r0, #28
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	4403      	add	r3, r0
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	9b05      	ldr	r3, [sp, #20]
 8007824:	4403      	add	r3, r0
 8007826:	4405      	add	r5, r0
 8007828:	9305      	str	r3, [sp, #20]
 800782a:	9b04      	ldr	r3, [sp, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	dd07      	ble.n	8007840 <_dtoa_r+0x818>
 8007830:	ee18 1a10 	vmov	r1, s16
 8007834:	461a      	mov	r2, r3
 8007836:	4620      	mov	r0, r4
 8007838:	f000 fe36 	bl	80084a8 <__lshift>
 800783c:	ee08 0a10 	vmov	s16, r0
 8007840:	9b05      	ldr	r3, [sp, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd05      	ble.n	8007852 <_dtoa_r+0x82a>
 8007846:	4631      	mov	r1, r6
 8007848:	461a      	mov	r2, r3
 800784a:	4620      	mov	r0, r4
 800784c:	f000 fe2c 	bl	80084a8 <__lshift>
 8007850:	4606      	mov	r6, r0
 8007852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d06e      	beq.n	8007936 <_dtoa_r+0x90e>
 8007858:	ee18 0a10 	vmov	r0, s16
 800785c:	4631      	mov	r1, r6
 800785e:	f000 fe93 	bl	8008588 <__mcmp>
 8007862:	2800      	cmp	r0, #0
 8007864:	da67      	bge.n	8007936 <_dtoa_r+0x90e>
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	3b01      	subs	r3, #1
 800786a:	ee18 1a10 	vmov	r1, s16
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	220a      	movs	r2, #10
 8007872:	2300      	movs	r3, #0
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fc67 	bl	8008148 <__multadd>
 800787a:	9b08      	ldr	r3, [sp, #32]
 800787c:	ee08 0a10 	vmov	s16, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 81b1 	beq.w	8007be8 <_dtoa_r+0xbc0>
 8007886:	2300      	movs	r3, #0
 8007888:	4639      	mov	r1, r7
 800788a:	220a      	movs	r2, #10
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fc5b 	bl	8008148 <__multadd>
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	4607      	mov	r7, r0
 8007898:	f300 808e 	bgt.w	80079b8 <_dtoa_r+0x990>
 800789c:	9b06      	ldr	r3, [sp, #24]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	dc51      	bgt.n	8007946 <_dtoa_r+0x91e>
 80078a2:	e089      	b.n	80079b8 <_dtoa_r+0x990>
 80078a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078aa:	e74b      	b.n	8007744 <_dtoa_r+0x71c>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	1e5e      	subs	r6, r3, #1
 80078b0:	9b07      	ldr	r3, [sp, #28]
 80078b2:	42b3      	cmp	r3, r6
 80078b4:	bfbf      	itttt	lt
 80078b6:	9b07      	ldrlt	r3, [sp, #28]
 80078b8:	9607      	strlt	r6, [sp, #28]
 80078ba:	1af2      	sublt	r2, r6, r3
 80078bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078be:	bfb6      	itet	lt
 80078c0:	189b      	addlt	r3, r3, r2
 80078c2:	1b9e      	subge	r6, r3, r6
 80078c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	bfb8      	it	lt
 80078ca:	2600      	movlt	r6, #0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfb7      	itett	lt
 80078d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078d8:	1a9d      	sublt	r5, r3, r2
 80078da:	2300      	movlt	r3, #0
 80078dc:	e734      	b.n	8007748 <_dtoa_r+0x720>
 80078de:	9e07      	ldr	r6, [sp, #28]
 80078e0:	9d04      	ldr	r5, [sp, #16]
 80078e2:	9f08      	ldr	r7, [sp, #32]
 80078e4:	e73b      	b.n	800775e <_dtoa_r+0x736>
 80078e6:	9a07      	ldr	r2, [sp, #28]
 80078e8:	e767      	b.n	80077ba <_dtoa_r+0x792>
 80078ea:	9b06      	ldr	r3, [sp, #24]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	dc18      	bgt.n	8007922 <_dtoa_r+0x8fa>
 80078f0:	f1ba 0f00 	cmp.w	sl, #0
 80078f4:	d115      	bne.n	8007922 <_dtoa_r+0x8fa>
 80078f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078fa:	b993      	cbnz	r3, 8007922 <_dtoa_r+0x8fa>
 80078fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007900:	0d1b      	lsrs	r3, r3, #20
 8007902:	051b      	lsls	r3, r3, #20
 8007904:	b183      	cbz	r3, 8007928 <_dtoa_r+0x900>
 8007906:	9b04      	ldr	r3, [sp, #16]
 8007908:	3301      	adds	r3, #1
 800790a:	9304      	str	r3, [sp, #16]
 800790c:	9b05      	ldr	r3, [sp, #20]
 800790e:	3301      	adds	r3, #1
 8007910:	9305      	str	r3, [sp, #20]
 8007912:	f04f 0801 	mov.w	r8, #1
 8007916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007918:	2b00      	cmp	r3, #0
 800791a:	f47f af6a 	bne.w	80077f2 <_dtoa_r+0x7ca>
 800791e:	2001      	movs	r0, #1
 8007920:	e76f      	b.n	8007802 <_dtoa_r+0x7da>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	e7f6      	b.n	8007916 <_dtoa_r+0x8ee>
 8007928:	4698      	mov	r8, r3
 800792a:	e7f4      	b.n	8007916 <_dtoa_r+0x8ee>
 800792c:	f43f af7d 	beq.w	800782a <_dtoa_r+0x802>
 8007930:	4618      	mov	r0, r3
 8007932:	301c      	adds	r0, #28
 8007934:	e772      	b.n	800781c <_dtoa_r+0x7f4>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	dc37      	bgt.n	80079ac <_dtoa_r+0x984>
 800793c:	9b06      	ldr	r3, [sp, #24]
 800793e:	2b02      	cmp	r3, #2
 8007940:	dd34      	ble.n	80079ac <_dtoa_r+0x984>
 8007942:	9b03      	ldr	r3, [sp, #12]
 8007944:	9302      	str	r3, [sp, #8]
 8007946:	9b02      	ldr	r3, [sp, #8]
 8007948:	b96b      	cbnz	r3, 8007966 <_dtoa_r+0x93e>
 800794a:	4631      	mov	r1, r6
 800794c:	2205      	movs	r2, #5
 800794e:	4620      	mov	r0, r4
 8007950:	f000 fbfa 	bl	8008148 <__multadd>
 8007954:	4601      	mov	r1, r0
 8007956:	4606      	mov	r6, r0
 8007958:	ee18 0a10 	vmov	r0, s16
 800795c:	f000 fe14 	bl	8008588 <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	f73f adbb 	bgt.w	80074dc <_dtoa_r+0x4b4>
 8007966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007968:	9d01      	ldr	r5, [sp, #4]
 800796a:	43db      	mvns	r3, r3
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	f04f 0800 	mov.w	r8, #0
 8007972:	4631      	mov	r1, r6
 8007974:	4620      	mov	r0, r4
 8007976:	f000 fbc5 	bl	8008104 <_Bfree>
 800797a:	2f00      	cmp	r7, #0
 800797c:	f43f aea4 	beq.w	80076c8 <_dtoa_r+0x6a0>
 8007980:	f1b8 0f00 	cmp.w	r8, #0
 8007984:	d005      	beq.n	8007992 <_dtoa_r+0x96a>
 8007986:	45b8      	cmp	r8, r7
 8007988:	d003      	beq.n	8007992 <_dtoa_r+0x96a>
 800798a:	4641      	mov	r1, r8
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fbb9 	bl	8008104 <_Bfree>
 8007992:	4639      	mov	r1, r7
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fbb5 	bl	8008104 <_Bfree>
 800799a:	e695      	b.n	80076c8 <_dtoa_r+0x6a0>
 800799c:	2600      	movs	r6, #0
 800799e:	4637      	mov	r7, r6
 80079a0:	e7e1      	b.n	8007966 <_dtoa_r+0x93e>
 80079a2:	9700      	str	r7, [sp, #0]
 80079a4:	4637      	mov	r7, r6
 80079a6:	e599      	b.n	80074dc <_dtoa_r+0x4b4>
 80079a8:	40240000 	.word	0x40240000
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80ca 	beq.w	8007b48 <_dtoa_r+0xb20>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	2d00      	cmp	r5, #0
 80079ba:	dd05      	ble.n	80079c8 <_dtoa_r+0x9a0>
 80079bc:	4639      	mov	r1, r7
 80079be:	462a      	mov	r2, r5
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 fd71 	bl	80084a8 <__lshift>
 80079c6:	4607      	mov	r7, r0
 80079c8:	f1b8 0f00 	cmp.w	r8, #0
 80079cc:	d05b      	beq.n	8007a86 <_dtoa_r+0xa5e>
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 fb57 	bl	8008084 <_Balloc>
 80079d6:	4605      	mov	r5, r0
 80079d8:	b928      	cbnz	r0, 80079e6 <_dtoa_r+0x9be>
 80079da:	4b87      	ldr	r3, [pc, #540]	; (8007bf8 <_dtoa_r+0xbd0>)
 80079dc:	4602      	mov	r2, r0
 80079de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079e2:	f7ff bb3b 	b.w	800705c <_dtoa_r+0x34>
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	3202      	adds	r2, #2
 80079ea:	0092      	lsls	r2, r2, #2
 80079ec:	f107 010c 	add.w	r1, r7, #12
 80079f0:	300c      	adds	r0, #12
 80079f2:	f7fe fc2b 	bl	800624c <memcpy>
 80079f6:	2201      	movs	r2, #1
 80079f8:	4629      	mov	r1, r5
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fd54 	bl	80084a8 <__lshift>
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	f103 0901 	add.w	r9, r3, #1
 8007a06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	f00a 0301 	and.w	r3, sl, #1
 8007a12:	46b8      	mov	r8, r7
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	4607      	mov	r7, r0
 8007a18:	4631      	mov	r1, r6
 8007a1a:	ee18 0a10 	vmov	r0, s16
 8007a1e:	f7ff fa77 	bl	8006f10 <quorem>
 8007a22:	4641      	mov	r1, r8
 8007a24:	9002      	str	r0, [sp, #8]
 8007a26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a2a:	ee18 0a10 	vmov	r0, s16
 8007a2e:	f000 fdab 	bl	8008588 <__mcmp>
 8007a32:	463a      	mov	r2, r7
 8007a34:	9003      	str	r0, [sp, #12]
 8007a36:	4631      	mov	r1, r6
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 fdc1 	bl	80085c0 <__mdiff>
 8007a3e:	68c2      	ldr	r2, [r0, #12]
 8007a40:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007a44:	4605      	mov	r5, r0
 8007a46:	bb02      	cbnz	r2, 8007a8a <_dtoa_r+0xa62>
 8007a48:	4601      	mov	r1, r0
 8007a4a:	ee18 0a10 	vmov	r0, s16
 8007a4e:	f000 fd9b 	bl	8008588 <__mcmp>
 8007a52:	4602      	mov	r2, r0
 8007a54:	4629      	mov	r1, r5
 8007a56:	4620      	mov	r0, r4
 8007a58:	9207      	str	r2, [sp, #28]
 8007a5a:	f000 fb53 	bl	8008104 <_Bfree>
 8007a5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a62:	ea43 0102 	orr.w	r1, r3, r2
 8007a66:	9b04      	ldr	r3, [sp, #16]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	464d      	mov	r5, r9
 8007a6c:	d10f      	bne.n	8007a8e <_dtoa_r+0xa66>
 8007a6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a72:	d02a      	beq.n	8007aca <_dtoa_r+0xaa2>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd02      	ble.n	8007a80 <_dtoa_r+0xa58>
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a80:	f88b a000 	strb.w	sl, [fp]
 8007a84:	e775      	b.n	8007972 <_dtoa_r+0x94a>
 8007a86:	4638      	mov	r0, r7
 8007a88:	e7ba      	b.n	8007a00 <_dtoa_r+0x9d8>
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	e7e2      	b.n	8007a54 <_dtoa_r+0xa2c>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	db04      	blt.n	8007a9e <_dtoa_r+0xa76>
 8007a94:	9906      	ldr	r1, [sp, #24]
 8007a96:	430b      	orrs	r3, r1
 8007a98:	9904      	ldr	r1, [sp, #16]
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	d122      	bne.n	8007ae4 <_dtoa_r+0xabc>
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	ddee      	ble.n	8007a80 <_dtoa_r+0xa58>
 8007aa2:	ee18 1a10 	vmov	r1, s16
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 fcfd 	bl	80084a8 <__lshift>
 8007aae:	4631      	mov	r1, r6
 8007ab0:	ee08 0a10 	vmov	s16, r0
 8007ab4:	f000 fd68 	bl	8008588 <__mcmp>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	dc03      	bgt.n	8007ac4 <_dtoa_r+0xa9c>
 8007abc:	d1e0      	bne.n	8007a80 <_dtoa_r+0xa58>
 8007abe:	f01a 0f01 	tst.w	sl, #1
 8007ac2:	d0dd      	beq.n	8007a80 <_dtoa_r+0xa58>
 8007ac4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ac8:	d1d7      	bne.n	8007a7a <_dtoa_r+0xa52>
 8007aca:	2339      	movs	r3, #57	; 0x39
 8007acc:	f88b 3000 	strb.w	r3, [fp]
 8007ad0:	462b      	mov	r3, r5
 8007ad2:	461d      	mov	r5, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ada:	2a39      	cmp	r2, #57	; 0x39
 8007adc:	d071      	beq.n	8007bc2 <_dtoa_r+0xb9a>
 8007ade:	3201      	adds	r2, #1
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	e746      	b.n	8007972 <_dtoa_r+0x94a>
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	dd07      	ble.n	8007af8 <_dtoa_r+0xad0>
 8007ae8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aec:	d0ed      	beq.n	8007aca <_dtoa_r+0xaa2>
 8007aee:	f10a 0301 	add.w	r3, sl, #1
 8007af2:	f88b 3000 	strb.w	r3, [fp]
 8007af6:	e73c      	b.n	8007972 <_dtoa_r+0x94a>
 8007af8:	9b05      	ldr	r3, [sp, #20]
 8007afa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007afe:	4599      	cmp	r9, r3
 8007b00:	d047      	beq.n	8007b92 <_dtoa_r+0xb6a>
 8007b02:	ee18 1a10 	vmov	r1, s16
 8007b06:	2300      	movs	r3, #0
 8007b08:	220a      	movs	r2, #10
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fb1c 	bl	8008148 <__multadd>
 8007b10:	45b8      	cmp	r8, r7
 8007b12:	ee08 0a10 	vmov	s16, r0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	f04f 020a 	mov.w	r2, #10
 8007b1e:	4641      	mov	r1, r8
 8007b20:	4620      	mov	r0, r4
 8007b22:	d106      	bne.n	8007b32 <_dtoa_r+0xb0a>
 8007b24:	f000 fb10 	bl	8008148 <__multadd>
 8007b28:	4680      	mov	r8, r0
 8007b2a:	4607      	mov	r7, r0
 8007b2c:	f109 0901 	add.w	r9, r9, #1
 8007b30:	e772      	b.n	8007a18 <_dtoa_r+0x9f0>
 8007b32:	f000 fb09 	bl	8008148 <__multadd>
 8007b36:	4639      	mov	r1, r7
 8007b38:	4680      	mov	r8, r0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fb02 	bl	8008148 <__multadd>
 8007b44:	4607      	mov	r7, r0
 8007b46:	e7f1      	b.n	8007b2c <_dtoa_r+0xb04>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	9302      	str	r3, [sp, #8]
 8007b4c:	9d01      	ldr	r5, [sp, #4]
 8007b4e:	ee18 0a10 	vmov	r0, s16
 8007b52:	4631      	mov	r1, r6
 8007b54:	f7ff f9dc 	bl	8006f10 <quorem>
 8007b58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b5c:	9b01      	ldr	r3, [sp, #4]
 8007b5e:	f805 ab01 	strb.w	sl, [r5], #1
 8007b62:	1aea      	subs	r2, r5, r3
 8007b64:	9b02      	ldr	r3, [sp, #8]
 8007b66:	4293      	cmp	r3, r2
 8007b68:	dd09      	ble.n	8007b7e <_dtoa_r+0xb56>
 8007b6a:	ee18 1a10 	vmov	r1, s16
 8007b6e:	2300      	movs	r3, #0
 8007b70:	220a      	movs	r2, #10
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fae8 	bl	8008148 <__multadd>
 8007b78:	ee08 0a10 	vmov	s16, r0
 8007b7c:	e7e7      	b.n	8007b4e <_dtoa_r+0xb26>
 8007b7e:	9b02      	ldr	r3, [sp, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bfc8      	it	gt
 8007b84:	461d      	movgt	r5, r3
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	bfd8      	it	le
 8007b8a:	2501      	movle	r5, #1
 8007b8c:	441d      	add	r5, r3
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	ee18 1a10 	vmov	r1, s16
 8007b96:	2201      	movs	r2, #1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fc85 	bl	80084a8 <__lshift>
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	ee08 0a10 	vmov	s16, r0
 8007ba4:	f000 fcf0 	bl	8008588 <__mcmp>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	dc91      	bgt.n	8007ad0 <_dtoa_r+0xaa8>
 8007bac:	d102      	bne.n	8007bb4 <_dtoa_r+0xb8c>
 8007bae:	f01a 0f01 	tst.w	sl, #1
 8007bb2:	d18d      	bne.n	8007ad0 <_dtoa_r+0xaa8>
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bbc:	2a30      	cmp	r2, #48	; 0x30
 8007bbe:	d0fa      	beq.n	8007bb6 <_dtoa_r+0xb8e>
 8007bc0:	e6d7      	b.n	8007972 <_dtoa_r+0x94a>
 8007bc2:	9a01      	ldr	r2, [sp, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d184      	bne.n	8007ad2 <_dtoa_r+0xaaa>
 8007bc8:	9b00      	ldr	r3, [sp, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	2331      	movs	r3, #49	; 0x31
 8007bd0:	7013      	strb	r3, [r2, #0]
 8007bd2:	e6ce      	b.n	8007972 <_dtoa_r+0x94a>
 8007bd4:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <_dtoa_r+0xbd4>)
 8007bd6:	f7ff ba95 	b.w	8007104 <_dtoa_r+0xdc>
 8007bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f47f aa6e 	bne.w	80070be <_dtoa_r+0x96>
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <_dtoa_r+0xbd8>)
 8007be4:	f7ff ba8e 	b.w	8007104 <_dtoa_r+0xdc>
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dcae      	bgt.n	8007b4c <_dtoa_r+0xb24>
 8007bee:	9b06      	ldr	r3, [sp, #24]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	f73f aea8 	bgt.w	8007946 <_dtoa_r+0x91e>
 8007bf6:	e7a9      	b.n	8007b4c <_dtoa_r+0xb24>
 8007bf8:	08009b49 	.word	0x08009b49
 8007bfc:	08009d29 	.word	0x08009d29
 8007c00:	08009aca 	.word	0x08009aca

08007c04 <__sflush_r>:
 8007c04:	898a      	ldrh	r2, [r1, #12]
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	0710      	lsls	r0, r2, #28
 8007c0e:	460c      	mov	r4, r1
 8007c10:	d458      	bmi.n	8007cc4 <__sflush_r+0xc0>
 8007c12:	684b      	ldr	r3, [r1, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dc05      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dc02      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	d0f9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c30:	682f      	ldr	r7, [r5, #0]
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	d032      	beq.n	8007c9c <__sflush_r+0x98>
 8007c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	075a      	lsls	r2, r3, #29
 8007c3c:	d505      	bpl.n	8007c4a <__sflush_r+0x46>
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	1ac0      	subs	r0, r0, r3
 8007c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c44:	b10b      	cbz	r3, 8007c4a <__sflush_r+0x46>
 8007c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c48:	1ac0      	subs	r0, r0, r3
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c50:	6a21      	ldr	r1, [r4, #32]
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b0      	blx	r6
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	d106      	bne.n	8007c6a <__sflush_r+0x66>
 8007c5c:	6829      	ldr	r1, [r5, #0]
 8007c5e:	291d      	cmp	r1, #29
 8007c60:	d82c      	bhi.n	8007cbc <__sflush_r+0xb8>
 8007c62:	4a2a      	ldr	r2, [pc, #168]	; (8007d0c <__sflush_r+0x108>)
 8007c64:	40ca      	lsrs	r2, r1
 8007c66:	07d6      	lsls	r6, r2, #31
 8007c68:	d528      	bpl.n	8007cbc <__sflush_r+0xb8>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	6062      	str	r2, [r4, #4]
 8007c6e:	04d9      	lsls	r1, r3, #19
 8007c70:	6922      	ldr	r2, [r4, #16]
 8007c72:	6022      	str	r2, [r4, #0]
 8007c74:	d504      	bpl.n	8007c80 <__sflush_r+0x7c>
 8007c76:	1c42      	adds	r2, r0, #1
 8007c78:	d101      	bne.n	8007c7e <__sflush_r+0x7a>
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	b903      	cbnz	r3, 8007c80 <__sflush_r+0x7c>
 8007c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c82:	602f      	str	r7, [r5, #0]
 8007c84:	2900      	cmp	r1, #0
 8007c86:	d0ca      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c8c:	4299      	cmp	r1, r3
 8007c8e:	d002      	beq.n	8007c96 <__sflush_r+0x92>
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 fd91 	bl	80087b8 <_free_r>
 8007c96:	2000      	movs	r0, #0
 8007c98:	6360      	str	r0, [r4, #52]	; 0x34
 8007c9a:	e7c1      	b.n	8007c20 <__sflush_r+0x1c>
 8007c9c:	6a21      	ldr	r1, [r4, #32]
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b0      	blx	r6
 8007ca4:	1c41      	adds	r1, r0, #1
 8007ca6:	d1c7      	bne.n	8007c38 <__sflush_r+0x34>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c4      	beq.n	8007c38 <__sflush_r+0x34>
 8007cae:	2b1d      	cmp	r3, #29
 8007cb0:	d001      	beq.n	8007cb6 <__sflush_r+0xb2>
 8007cb2:	2b16      	cmp	r3, #22
 8007cb4:	d101      	bne.n	8007cba <__sflush_r+0xb6>
 8007cb6:	602f      	str	r7, [r5, #0]
 8007cb8:	e7b1      	b.n	8007c1e <__sflush_r+0x1a>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	e7ad      	b.n	8007c20 <__sflush_r+0x1c>
 8007cc4:	690f      	ldr	r7, [r1, #16]
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	d0a9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007cca:	0793      	lsls	r3, r2, #30
 8007ccc:	680e      	ldr	r6, [r1, #0]
 8007cce:	bf08      	it	eq
 8007cd0:	694b      	ldreq	r3, [r1, #20]
 8007cd2:	600f      	str	r7, [r1, #0]
 8007cd4:	bf18      	it	ne
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	eba6 0807 	sub.w	r8, r6, r7
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	dd9c      	ble.n	8007c1e <__sflush_r+0x1a>
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ce8:	4643      	mov	r3, r8
 8007cea:	463a      	mov	r2, r7
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b0      	blx	r6
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dc06      	bgt.n	8007d02 <__sflush_r+0xfe>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d00:	e78e      	b.n	8007c20 <__sflush_r+0x1c>
 8007d02:	4407      	add	r7, r0
 8007d04:	eba8 0800 	sub.w	r8, r8, r0
 8007d08:	e7e9      	b.n	8007cde <__sflush_r+0xda>
 8007d0a:	bf00      	nop
 8007d0c:	20400001 	.word	0x20400001

08007d10 <_fflush_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	690b      	ldr	r3, [r1, #16]
 8007d14:	4605      	mov	r5, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	b913      	cbnz	r3, 8007d20 <_fflush_r+0x10>
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	b118      	cbz	r0, 8007d2a <_fflush_r+0x1a>
 8007d22:	6983      	ldr	r3, [r0, #24]
 8007d24:	b90b      	cbnz	r3, 8007d2a <_fflush_r+0x1a>
 8007d26:	f000 f887 	bl	8007e38 <__sinit>
 8007d2a:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <_fflush_r+0x6c>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	d11b      	bne.n	8007d68 <_fflush_r+0x58>
 8007d30:	686c      	ldr	r4, [r5, #4]
 8007d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0ef      	beq.n	8007d1a <_fflush_r+0xa>
 8007d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d3c:	07d0      	lsls	r0, r2, #31
 8007d3e:	d404      	bmi.n	8007d4a <_fflush_r+0x3a>
 8007d40:	0599      	lsls	r1, r3, #22
 8007d42:	d402      	bmi.n	8007d4a <_fflush_r+0x3a>
 8007d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d46:	f000 f91a 	bl	8007f7e <__retarget_lock_acquire_recursive>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	f7ff ff59 	bl	8007c04 <__sflush_r>
 8007d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d54:	07da      	lsls	r2, r3, #31
 8007d56:	4605      	mov	r5, r0
 8007d58:	d4e0      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	059b      	lsls	r3, r3, #22
 8007d5e:	d4dd      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d62:	f000 f90d 	bl	8007f80 <__retarget_lock_release_recursive>
 8007d66:	e7d9      	b.n	8007d1c <_fflush_r+0xc>
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <_fflush_r+0x70>)
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d101      	bne.n	8007d72 <_fflush_r+0x62>
 8007d6e:	68ac      	ldr	r4, [r5, #8]
 8007d70:	e7df      	b.n	8007d32 <_fflush_r+0x22>
 8007d72:	4b04      	ldr	r3, [pc, #16]	; (8007d84 <_fflush_r+0x74>)
 8007d74:	429c      	cmp	r4, r3
 8007d76:	bf08      	it	eq
 8007d78:	68ec      	ldreq	r4, [r5, #12]
 8007d7a:	e7da      	b.n	8007d32 <_fflush_r+0x22>
 8007d7c:	08009b7c 	.word	0x08009b7c
 8007d80:	08009b9c 	.word	0x08009b9c
 8007d84:	08009b5c 	.word	0x08009b5c

08007d88 <std>:
 8007d88:	2300      	movs	r3, #0
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d96:	6083      	str	r3, [r0, #8]
 8007d98:	8181      	strh	r1, [r0, #12]
 8007d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d9c:	81c2      	strh	r2, [r0, #14]
 8007d9e:	6183      	str	r3, [r0, #24]
 8007da0:	4619      	mov	r1, r3
 8007da2:	2208      	movs	r2, #8
 8007da4:	305c      	adds	r0, #92	; 0x5c
 8007da6:	f7fe fa5f 	bl	8006268 <memset>
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <std+0x38>)
 8007dac:	6263      	str	r3, [r4, #36]	; 0x24
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <std+0x3c>)
 8007db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <std+0x40>)
 8007db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <std+0x44>)
 8007db8:	6224      	str	r4, [r4, #32]
 8007dba:	6323      	str	r3, [r4, #48]	; 0x30
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	bf00      	nop
 8007dc0:	08006cc1 	.word	0x08006cc1
 8007dc4:	08006ce7 	.word	0x08006ce7
 8007dc8:	08006d1f 	.word	0x08006d1f
 8007dcc:	08006d43 	.word	0x08006d43

08007dd0 <_cleanup_r>:
 8007dd0:	4901      	ldr	r1, [pc, #4]	; (8007dd8 <_cleanup_r+0x8>)
 8007dd2:	f000 b8af 	b.w	8007f34 <_fwalk_reent>
 8007dd6:	bf00      	nop
 8007dd8:	08007d11 	.word	0x08007d11

08007ddc <__sfmoreglue>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	2268      	movs	r2, #104	; 0x68
 8007de0:	1e4d      	subs	r5, r1, #1
 8007de2:	4355      	muls	r5, r2
 8007de4:	460e      	mov	r6, r1
 8007de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dea:	f000 fd51 	bl	8008890 <_malloc_r>
 8007dee:	4604      	mov	r4, r0
 8007df0:	b140      	cbz	r0, 8007e04 <__sfmoreglue+0x28>
 8007df2:	2100      	movs	r1, #0
 8007df4:	e9c0 1600 	strd	r1, r6, [r0]
 8007df8:	300c      	adds	r0, #12
 8007dfa:	60a0      	str	r0, [r4, #8]
 8007dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e00:	f7fe fa32 	bl	8006268 <memset>
 8007e04:	4620      	mov	r0, r4
 8007e06:	bd70      	pop	{r4, r5, r6, pc}

08007e08 <__sfp_lock_acquire>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__sfp_lock_acquire+0x8>)
 8007e0a:	f000 b8b8 	b.w	8007f7e <__retarget_lock_acquire_recursive>
 8007e0e:	bf00      	nop
 8007e10:	200004fd 	.word	0x200004fd

08007e14 <__sfp_lock_release>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__sfp_lock_release+0x8>)
 8007e16:	f000 b8b3 	b.w	8007f80 <__retarget_lock_release_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	200004fd 	.word	0x200004fd

08007e20 <__sinit_lock_acquire>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__sinit_lock_acquire+0x8>)
 8007e22:	f000 b8ac 	b.w	8007f7e <__retarget_lock_acquire_recursive>
 8007e26:	bf00      	nop
 8007e28:	200004fe 	.word	0x200004fe

08007e2c <__sinit_lock_release>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__sinit_lock_release+0x8>)
 8007e2e:	f000 b8a7 	b.w	8007f80 <__retarget_lock_release_recursive>
 8007e32:	bf00      	nop
 8007e34:	200004fe 	.word	0x200004fe

08007e38 <__sinit>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	f7ff fff0 	bl	8007e20 <__sinit_lock_acquire>
 8007e40:	69a3      	ldr	r3, [r4, #24]
 8007e42:	b11b      	cbz	r3, 8007e4c <__sinit+0x14>
 8007e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e48:	f7ff bff0 	b.w	8007e2c <__sinit_lock_release>
 8007e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e50:	6523      	str	r3, [r4, #80]	; 0x50
 8007e52:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <__sinit+0x68>)
 8007e54:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <__sinit+0x6c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e5a:	42a3      	cmp	r3, r4
 8007e5c:	bf04      	itt	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	61a3      	streq	r3, [r4, #24]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 f820 	bl	8007ea8 <__sfp>
 8007e68:	6060      	str	r0, [r4, #4]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 f81c 	bl	8007ea8 <__sfp>
 8007e70:	60a0      	str	r0, [r4, #8]
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 f818 	bl	8007ea8 <__sfp>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	60e0      	str	r0, [r4, #12]
 8007e7c:	2104      	movs	r1, #4
 8007e7e:	6860      	ldr	r0, [r4, #4]
 8007e80:	f7ff ff82 	bl	8007d88 <std>
 8007e84:	68a0      	ldr	r0, [r4, #8]
 8007e86:	2201      	movs	r2, #1
 8007e88:	2109      	movs	r1, #9
 8007e8a:	f7ff ff7d 	bl	8007d88 <std>
 8007e8e:	68e0      	ldr	r0, [r4, #12]
 8007e90:	2202      	movs	r2, #2
 8007e92:	2112      	movs	r1, #18
 8007e94:	f7ff ff78 	bl	8007d88 <std>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	61a3      	str	r3, [r4, #24]
 8007e9c:	e7d2      	b.n	8007e44 <__sinit+0xc>
 8007e9e:	bf00      	nop
 8007ea0:	08009a94 	.word	0x08009a94
 8007ea4:	08007dd1 	.word	0x08007dd1

08007ea8 <__sfp>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	4607      	mov	r7, r0
 8007eac:	f7ff ffac 	bl	8007e08 <__sfp_lock_acquire>
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <__sfp+0x84>)
 8007eb2:	681e      	ldr	r6, [r3, #0]
 8007eb4:	69b3      	ldr	r3, [r6, #24]
 8007eb6:	b913      	cbnz	r3, 8007ebe <__sfp+0x16>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7ff ffbd 	bl	8007e38 <__sinit>
 8007ebe:	3648      	adds	r6, #72	; 0x48
 8007ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	d503      	bpl.n	8007ed0 <__sfp+0x28>
 8007ec8:	6833      	ldr	r3, [r6, #0]
 8007eca:	b30b      	cbz	r3, 8007f10 <__sfp+0x68>
 8007ecc:	6836      	ldr	r6, [r6, #0]
 8007ece:	e7f7      	b.n	8007ec0 <__sfp+0x18>
 8007ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ed4:	b9d5      	cbnz	r5, 8007f0c <__sfp+0x64>
 8007ed6:	4b16      	ldr	r3, [pc, #88]	; (8007f30 <__sfp+0x88>)
 8007ed8:	60e3      	str	r3, [r4, #12]
 8007eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ede:	6665      	str	r5, [r4, #100]	; 0x64
 8007ee0:	f000 f84c 	bl	8007f7c <__retarget_lock_init_recursive>
 8007ee4:	f7ff ff96 	bl	8007e14 <__sfp_lock_release>
 8007ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ef0:	6025      	str	r5, [r4, #0]
 8007ef2:	61a5      	str	r5, [r4, #24]
 8007ef4:	2208      	movs	r2, #8
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007efc:	f7fe f9b4 	bl	8006268 <memset>
 8007f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f08:	4620      	mov	r0, r4
 8007f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0c:	3468      	adds	r4, #104	; 0x68
 8007f0e:	e7d9      	b.n	8007ec4 <__sfp+0x1c>
 8007f10:	2104      	movs	r1, #4
 8007f12:	4638      	mov	r0, r7
 8007f14:	f7ff ff62 	bl	8007ddc <__sfmoreglue>
 8007f18:	4604      	mov	r4, r0
 8007f1a:	6030      	str	r0, [r6, #0]
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1d5      	bne.n	8007ecc <__sfp+0x24>
 8007f20:	f7ff ff78 	bl	8007e14 <__sfp_lock_release>
 8007f24:	230c      	movs	r3, #12
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	e7ee      	b.n	8007f08 <__sfp+0x60>
 8007f2a:	bf00      	nop
 8007f2c:	08009a94 	.word	0x08009a94
 8007f30:	ffff0001 	.word	0xffff0001

08007f34 <_fwalk_reent>:
 8007f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f38:	4606      	mov	r6, r0
 8007f3a:	4688      	mov	r8, r1
 8007f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f40:	2700      	movs	r7, #0
 8007f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f46:	f1b9 0901 	subs.w	r9, r9, #1
 8007f4a:	d505      	bpl.n	8007f58 <_fwalk_reent+0x24>
 8007f4c:	6824      	ldr	r4, [r4, #0]
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d1f7      	bne.n	8007f42 <_fwalk_reent+0xe>
 8007f52:	4638      	mov	r0, r7
 8007f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d907      	bls.n	8007f6e <_fwalk_reent+0x3a>
 8007f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f62:	3301      	adds	r3, #1
 8007f64:	d003      	beq.n	8007f6e <_fwalk_reent+0x3a>
 8007f66:	4629      	mov	r1, r5
 8007f68:	4630      	mov	r0, r6
 8007f6a:	47c0      	blx	r8
 8007f6c:	4307      	orrs	r7, r0
 8007f6e:	3568      	adds	r5, #104	; 0x68
 8007f70:	e7e9      	b.n	8007f46 <_fwalk_reent+0x12>
	...

08007f74 <_localeconv_r>:
 8007f74:	4800      	ldr	r0, [pc, #0]	; (8007f78 <_localeconv_r+0x4>)
 8007f76:	4770      	bx	lr
 8007f78:	20000160 	.word	0x20000160

08007f7c <__retarget_lock_init_recursive>:
 8007f7c:	4770      	bx	lr

08007f7e <__retarget_lock_acquire_recursive>:
 8007f7e:	4770      	bx	lr

08007f80 <__retarget_lock_release_recursive>:
 8007f80:	4770      	bx	lr
	...

08007f84 <_lseek_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	; (8007fa4 <_lseek_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7fa fade 	bl	8002554 <_lseek>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_lseek_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_lseek_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	20000508 	.word	0x20000508

08007fa8 <__swhatbuf_r>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	460e      	mov	r6, r1
 8007fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	b096      	sub	sp, #88	; 0x58
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	461d      	mov	r5, r3
 8007fb8:	da08      	bge.n	8007fcc <__swhatbuf_r+0x24>
 8007fba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	602a      	str	r2, [r5, #0]
 8007fc2:	061a      	lsls	r2, r3, #24
 8007fc4:	d410      	bmi.n	8007fe8 <__swhatbuf_r+0x40>
 8007fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fca:	e00e      	b.n	8007fea <__swhatbuf_r+0x42>
 8007fcc:	466a      	mov	r2, sp
 8007fce:	f001 fb0d 	bl	80095ec <_fstat_r>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	dbf1      	blt.n	8007fba <__swhatbuf_r+0x12>
 8007fd6:	9a01      	ldr	r2, [sp, #4]
 8007fd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fe0:	425a      	negs	r2, r3
 8007fe2:	415a      	adcs	r2, r3
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	e7ee      	b.n	8007fc6 <__swhatbuf_r+0x1e>
 8007fe8:	2340      	movs	r3, #64	; 0x40
 8007fea:	2000      	movs	r0, #0
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	b016      	add	sp, #88	; 0x58
 8007ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ff4 <__smakebuf_r>:
 8007ff4:	898b      	ldrh	r3, [r1, #12]
 8007ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff8:	079d      	lsls	r5, r3, #30
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	d507      	bpl.n	8008010 <__smakebuf_r+0x1c>
 8008000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	2301      	movs	r3, #1
 800800a:	6163      	str	r3, [r4, #20]
 800800c:	b002      	add	sp, #8
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	ab01      	add	r3, sp, #4
 8008012:	466a      	mov	r2, sp
 8008014:	f7ff ffc8 	bl	8007fa8 <__swhatbuf_r>
 8008018:	9900      	ldr	r1, [sp, #0]
 800801a:	4605      	mov	r5, r0
 800801c:	4630      	mov	r0, r6
 800801e:	f000 fc37 	bl	8008890 <_malloc_r>
 8008022:	b948      	cbnz	r0, 8008038 <__smakebuf_r+0x44>
 8008024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008028:	059a      	lsls	r2, r3, #22
 800802a:	d4ef      	bmi.n	800800c <__smakebuf_r+0x18>
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	f043 0302 	orr.w	r3, r3, #2
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	e7e3      	b.n	8008000 <__smakebuf_r+0xc>
 8008038:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <__smakebuf_r+0x7c>)
 800803a:	62b3      	str	r3, [r6, #40]	; 0x28
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	6020      	str	r0, [r4, #0]
 8008040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	6163      	str	r3, [r4, #20]
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	6120      	str	r0, [r4, #16]
 800804e:	b15b      	cbz	r3, 8008068 <__smakebuf_r+0x74>
 8008050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008054:	4630      	mov	r0, r6
 8008056:	f001 fadb 	bl	8009610 <_isatty_r>
 800805a:	b128      	cbz	r0, 8008068 <__smakebuf_r+0x74>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	f043 0301 	orr.w	r3, r3, #1
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	89a0      	ldrh	r0, [r4, #12]
 800806a:	4305      	orrs	r5, r0
 800806c:	81a5      	strh	r5, [r4, #12]
 800806e:	e7cd      	b.n	800800c <__smakebuf_r+0x18>
 8008070:	08007dd1 	.word	0x08007dd1

08008074 <malloc>:
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <malloc+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f000 bc09 	b.w	8008890 <_malloc_r>
 800807e:	bf00      	nop
 8008080:	2000000c 	.word	0x2000000c

08008084 <_Balloc>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008088:	4604      	mov	r4, r0
 800808a:	460d      	mov	r5, r1
 800808c:	b976      	cbnz	r6, 80080ac <_Balloc+0x28>
 800808e:	2010      	movs	r0, #16
 8008090:	f7ff fff0 	bl	8008074 <malloc>
 8008094:	4602      	mov	r2, r0
 8008096:	6260      	str	r0, [r4, #36]	; 0x24
 8008098:	b920      	cbnz	r0, 80080a4 <_Balloc+0x20>
 800809a:	4b18      	ldr	r3, [pc, #96]	; (80080fc <_Balloc+0x78>)
 800809c:	4818      	ldr	r0, [pc, #96]	; (8008100 <_Balloc+0x7c>)
 800809e:	2166      	movs	r1, #102	; 0x66
 80080a0:	f001 fa74 	bl	800958c <__assert_func>
 80080a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080a8:	6006      	str	r6, [r0, #0]
 80080aa:	60c6      	str	r6, [r0, #12]
 80080ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080ae:	68f3      	ldr	r3, [r6, #12]
 80080b0:	b183      	cbz	r3, 80080d4 <_Balloc+0x50>
 80080b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ba:	b9b8      	cbnz	r0, 80080ec <_Balloc+0x68>
 80080bc:	2101      	movs	r1, #1
 80080be:	fa01 f605 	lsl.w	r6, r1, r5
 80080c2:	1d72      	adds	r2, r6, #5
 80080c4:	0092      	lsls	r2, r2, #2
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fb60 	bl	800878c <_calloc_r>
 80080cc:	b160      	cbz	r0, 80080e8 <_Balloc+0x64>
 80080ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080d2:	e00e      	b.n	80080f2 <_Balloc+0x6e>
 80080d4:	2221      	movs	r2, #33	; 0x21
 80080d6:	2104      	movs	r1, #4
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 fb57 	bl	800878c <_calloc_r>
 80080de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e0:	60f0      	str	r0, [r6, #12]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e4      	bne.n	80080b2 <_Balloc+0x2e>
 80080e8:	2000      	movs	r0, #0
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	6802      	ldr	r2, [r0, #0]
 80080ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080f2:	2300      	movs	r3, #0
 80080f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080f8:	e7f7      	b.n	80080ea <_Balloc+0x66>
 80080fa:	bf00      	nop
 80080fc:	08009ad7 	.word	0x08009ad7
 8008100:	08009bbc 	.word	0x08009bbc

08008104 <_Bfree>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008108:	4605      	mov	r5, r0
 800810a:	460c      	mov	r4, r1
 800810c:	b976      	cbnz	r6, 800812c <_Bfree+0x28>
 800810e:	2010      	movs	r0, #16
 8008110:	f7ff ffb0 	bl	8008074 <malloc>
 8008114:	4602      	mov	r2, r0
 8008116:	6268      	str	r0, [r5, #36]	; 0x24
 8008118:	b920      	cbnz	r0, 8008124 <_Bfree+0x20>
 800811a:	4b09      	ldr	r3, [pc, #36]	; (8008140 <_Bfree+0x3c>)
 800811c:	4809      	ldr	r0, [pc, #36]	; (8008144 <_Bfree+0x40>)
 800811e:	218a      	movs	r1, #138	; 0x8a
 8008120:	f001 fa34 	bl	800958c <__assert_func>
 8008124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008128:	6006      	str	r6, [r0, #0]
 800812a:	60c6      	str	r6, [r0, #12]
 800812c:	b13c      	cbz	r4, 800813e <_Bfree+0x3a>
 800812e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008130:	6862      	ldr	r2, [r4, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008138:	6021      	str	r1, [r4, #0]
 800813a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	08009ad7 	.word	0x08009ad7
 8008144:	08009bbc 	.word	0x08009bbc

08008148 <__multadd>:
 8008148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814c:	690d      	ldr	r5, [r1, #16]
 800814e:	4607      	mov	r7, r0
 8008150:	460c      	mov	r4, r1
 8008152:	461e      	mov	r6, r3
 8008154:	f101 0c14 	add.w	ip, r1, #20
 8008158:	2000      	movs	r0, #0
 800815a:	f8dc 3000 	ldr.w	r3, [ip]
 800815e:	b299      	uxth	r1, r3
 8008160:	fb02 6101 	mla	r1, r2, r1, r6
 8008164:	0c1e      	lsrs	r6, r3, #16
 8008166:	0c0b      	lsrs	r3, r1, #16
 8008168:	fb02 3306 	mla	r3, r2, r6, r3
 800816c:	b289      	uxth	r1, r1
 800816e:	3001      	adds	r0, #1
 8008170:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008174:	4285      	cmp	r5, r0
 8008176:	f84c 1b04 	str.w	r1, [ip], #4
 800817a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800817e:	dcec      	bgt.n	800815a <__multadd+0x12>
 8008180:	b30e      	cbz	r6, 80081c6 <__multadd+0x7e>
 8008182:	68a3      	ldr	r3, [r4, #8]
 8008184:	42ab      	cmp	r3, r5
 8008186:	dc19      	bgt.n	80081bc <__multadd+0x74>
 8008188:	6861      	ldr	r1, [r4, #4]
 800818a:	4638      	mov	r0, r7
 800818c:	3101      	adds	r1, #1
 800818e:	f7ff ff79 	bl	8008084 <_Balloc>
 8008192:	4680      	mov	r8, r0
 8008194:	b928      	cbnz	r0, 80081a2 <__multadd+0x5a>
 8008196:	4602      	mov	r2, r0
 8008198:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <__multadd+0x84>)
 800819a:	480d      	ldr	r0, [pc, #52]	; (80081d0 <__multadd+0x88>)
 800819c:	21b5      	movs	r1, #181	; 0xb5
 800819e:	f001 f9f5 	bl	800958c <__assert_func>
 80081a2:	6922      	ldr	r2, [r4, #16]
 80081a4:	3202      	adds	r2, #2
 80081a6:	f104 010c 	add.w	r1, r4, #12
 80081aa:	0092      	lsls	r2, r2, #2
 80081ac:	300c      	adds	r0, #12
 80081ae:	f7fe f84d 	bl	800624c <memcpy>
 80081b2:	4621      	mov	r1, r4
 80081b4:	4638      	mov	r0, r7
 80081b6:	f7ff ffa5 	bl	8008104 <_Bfree>
 80081ba:	4644      	mov	r4, r8
 80081bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081c0:	3501      	adds	r5, #1
 80081c2:	615e      	str	r6, [r3, #20]
 80081c4:	6125      	str	r5, [r4, #16]
 80081c6:	4620      	mov	r0, r4
 80081c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081cc:	08009b49 	.word	0x08009b49
 80081d0:	08009bbc 	.word	0x08009bbc

080081d4 <__hi0bits>:
 80081d4:	0c03      	lsrs	r3, r0, #16
 80081d6:	041b      	lsls	r3, r3, #16
 80081d8:	b9d3      	cbnz	r3, 8008210 <__hi0bits+0x3c>
 80081da:	0400      	lsls	r0, r0, #16
 80081dc:	2310      	movs	r3, #16
 80081de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081e2:	bf04      	itt	eq
 80081e4:	0200      	lsleq	r0, r0, #8
 80081e6:	3308      	addeq	r3, #8
 80081e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081ec:	bf04      	itt	eq
 80081ee:	0100      	lsleq	r0, r0, #4
 80081f0:	3304      	addeq	r3, #4
 80081f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081f6:	bf04      	itt	eq
 80081f8:	0080      	lsleq	r0, r0, #2
 80081fa:	3302      	addeq	r3, #2
 80081fc:	2800      	cmp	r0, #0
 80081fe:	db05      	blt.n	800820c <__hi0bits+0x38>
 8008200:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008204:	f103 0301 	add.w	r3, r3, #1
 8008208:	bf08      	it	eq
 800820a:	2320      	moveq	r3, #32
 800820c:	4618      	mov	r0, r3
 800820e:	4770      	bx	lr
 8008210:	2300      	movs	r3, #0
 8008212:	e7e4      	b.n	80081de <__hi0bits+0xa>

08008214 <__lo0bits>:
 8008214:	6803      	ldr	r3, [r0, #0]
 8008216:	f013 0207 	ands.w	r2, r3, #7
 800821a:	4601      	mov	r1, r0
 800821c:	d00b      	beq.n	8008236 <__lo0bits+0x22>
 800821e:	07da      	lsls	r2, r3, #31
 8008220:	d423      	bmi.n	800826a <__lo0bits+0x56>
 8008222:	0798      	lsls	r0, r3, #30
 8008224:	bf49      	itett	mi
 8008226:	085b      	lsrmi	r3, r3, #1
 8008228:	089b      	lsrpl	r3, r3, #2
 800822a:	2001      	movmi	r0, #1
 800822c:	600b      	strmi	r3, [r1, #0]
 800822e:	bf5c      	itt	pl
 8008230:	600b      	strpl	r3, [r1, #0]
 8008232:	2002      	movpl	r0, #2
 8008234:	4770      	bx	lr
 8008236:	b298      	uxth	r0, r3
 8008238:	b9a8      	cbnz	r0, 8008266 <__lo0bits+0x52>
 800823a:	0c1b      	lsrs	r3, r3, #16
 800823c:	2010      	movs	r0, #16
 800823e:	b2da      	uxtb	r2, r3
 8008240:	b90a      	cbnz	r2, 8008246 <__lo0bits+0x32>
 8008242:	3008      	adds	r0, #8
 8008244:	0a1b      	lsrs	r3, r3, #8
 8008246:	071a      	lsls	r2, r3, #28
 8008248:	bf04      	itt	eq
 800824a:	091b      	lsreq	r3, r3, #4
 800824c:	3004      	addeq	r0, #4
 800824e:	079a      	lsls	r2, r3, #30
 8008250:	bf04      	itt	eq
 8008252:	089b      	lsreq	r3, r3, #2
 8008254:	3002      	addeq	r0, #2
 8008256:	07da      	lsls	r2, r3, #31
 8008258:	d403      	bmi.n	8008262 <__lo0bits+0x4e>
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	f100 0001 	add.w	r0, r0, #1
 8008260:	d005      	beq.n	800826e <__lo0bits+0x5a>
 8008262:	600b      	str	r3, [r1, #0]
 8008264:	4770      	bx	lr
 8008266:	4610      	mov	r0, r2
 8008268:	e7e9      	b.n	800823e <__lo0bits+0x2a>
 800826a:	2000      	movs	r0, #0
 800826c:	4770      	bx	lr
 800826e:	2020      	movs	r0, #32
 8008270:	4770      	bx	lr
	...

08008274 <__i2b>:
 8008274:	b510      	push	{r4, lr}
 8008276:	460c      	mov	r4, r1
 8008278:	2101      	movs	r1, #1
 800827a:	f7ff ff03 	bl	8008084 <_Balloc>
 800827e:	4602      	mov	r2, r0
 8008280:	b928      	cbnz	r0, 800828e <__i2b+0x1a>
 8008282:	4b05      	ldr	r3, [pc, #20]	; (8008298 <__i2b+0x24>)
 8008284:	4805      	ldr	r0, [pc, #20]	; (800829c <__i2b+0x28>)
 8008286:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800828a:	f001 f97f 	bl	800958c <__assert_func>
 800828e:	2301      	movs	r3, #1
 8008290:	6144      	str	r4, [r0, #20]
 8008292:	6103      	str	r3, [r0, #16]
 8008294:	bd10      	pop	{r4, pc}
 8008296:	bf00      	nop
 8008298:	08009b49 	.word	0x08009b49
 800829c:	08009bbc 	.word	0x08009bbc

080082a0 <__multiply>:
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	4691      	mov	r9, r2
 80082a6:	690a      	ldr	r2, [r1, #16]
 80082a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	bfb8      	it	lt
 80082b0:	460b      	movlt	r3, r1
 80082b2:	460c      	mov	r4, r1
 80082b4:	bfbc      	itt	lt
 80082b6:	464c      	movlt	r4, r9
 80082b8:	4699      	movlt	r9, r3
 80082ba:	6927      	ldr	r7, [r4, #16]
 80082bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082c0:	68a3      	ldr	r3, [r4, #8]
 80082c2:	6861      	ldr	r1, [r4, #4]
 80082c4:	eb07 060a 	add.w	r6, r7, sl
 80082c8:	42b3      	cmp	r3, r6
 80082ca:	b085      	sub	sp, #20
 80082cc:	bfb8      	it	lt
 80082ce:	3101      	addlt	r1, #1
 80082d0:	f7ff fed8 	bl	8008084 <_Balloc>
 80082d4:	b930      	cbnz	r0, 80082e4 <__multiply+0x44>
 80082d6:	4602      	mov	r2, r0
 80082d8:	4b44      	ldr	r3, [pc, #272]	; (80083ec <__multiply+0x14c>)
 80082da:	4845      	ldr	r0, [pc, #276]	; (80083f0 <__multiply+0x150>)
 80082dc:	f240 115d 	movw	r1, #349	; 0x15d
 80082e0:	f001 f954 	bl	800958c <__assert_func>
 80082e4:	f100 0514 	add.w	r5, r0, #20
 80082e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082ec:	462b      	mov	r3, r5
 80082ee:	2200      	movs	r2, #0
 80082f0:	4543      	cmp	r3, r8
 80082f2:	d321      	bcc.n	8008338 <__multiply+0x98>
 80082f4:	f104 0314 	add.w	r3, r4, #20
 80082f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082fc:	f109 0314 	add.w	r3, r9, #20
 8008300:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	1b3a      	subs	r2, r7, r4
 8008308:	3a15      	subs	r2, #21
 800830a:	f022 0203 	bic.w	r2, r2, #3
 800830e:	3204      	adds	r2, #4
 8008310:	f104 0115 	add.w	r1, r4, #21
 8008314:	428f      	cmp	r7, r1
 8008316:	bf38      	it	cc
 8008318:	2204      	movcc	r2, #4
 800831a:	9201      	str	r2, [sp, #4]
 800831c:	9a02      	ldr	r2, [sp, #8]
 800831e:	9303      	str	r3, [sp, #12]
 8008320:	429a      	cmp	r2, r3
 8008322:	d80c      	bhi.n	800833e <__multiply+0x9e>
 8008324:	2e00      	cmp	r6, #0
 8008326:	dd03      	ble.n	8008330 <__multiply+0x90>
 8008328:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800832c:	2b00      	cmp	r3, #0
 800832e:	d05a      	beq.n	80083e6 <__multiply+0x146>
 8008330:	6106      	str	r6, [r0, #16]
 8008332:	b005      	add	sp, #20
 8008334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008338:	f843 2b04 	str.w	r2, [r3], #4
 800833c:	e7d8      	b.n	80082f0 <__multiply+0x50>
 800833e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008342:	f1ba 0f00 	cmp.w	sl, #0
 8008346:	d024      	beq.n	8008392 <__multiply+0xf2>
 8008348:	f104 0e14 	add.w	lr, r4, #20
 800834c:	46a9      	mov	r9, r5
 800834e:	f04f 0c00 	mov.w	ip, #0
 8008352:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008356:	f8d9 1000 	ldr.w	r1, [r9]
 800835a:	fa1f fb82 	uxth.w	fp, r2
 800835e:	b289      	uxth	r1, r1
 8008360:	fb0a 110b 	mla	r1, sl, fp, r1
 8008364:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008368:	f8d9 2000 	ldr.w	r2, [r9]
 800836c:	4461      	add	r1, ip
 800836e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008372:	fb0a c20b 	mla	r2, sl, fp, ip
 8008376:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800837a:	b289      	uxth	r1, r1
 800837c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008380:	4577      	cmp	r7, lr
 8008382:	f849 1b04 	str.w	r1, [r9], #4
 8008386:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800838a:	d8e2      	bhi.n	8008352 <__multiply+0xb2>
 800838c:	9a01      	ldr	r2, [sp, #4]
 800838e:	f845 c002 	str.w	ip, [r5, r2]
 8008392:	9a03      	ldr	r2, [sp, #12]
 8008394:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008398:	3304      	adds	r3, #4
 800839a:	f1b9 0f00 	cmp.w	r9, #0
 800839e:	d020      	beq.n	80083e2 <__multiply+0x142>
 80083a0:	6829      	ldr	r1, [r5, #0]
 80083a2:	f104 0c14 	add.w	ip, r4, #20
 80083a6:	46ae      	mov	lr, r5
 80083a8:	f04f 0a00 	mov.w	sl, #0
 80083ac:	f8bc b000 	ldrh.w	fp, [ip]
 80083b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083b4:	fb09 220b 	mla	r2, r9, fp, r2
 80083b8:	4492      	add	sl, r2
 80083ba:	b289      	uxth	r1, r1
 80083bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80083c0:	f84e 1b04 	str.w	r1, [lr], #4
 80083c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083c8:	f8be 1000 	ldrh.w	r1, [lr]
 80083cc:	0c12      	lsrs	r2, r2, #16
 80083ce:	fb09 1102 	mla	r1, r9, r2, r1
 80083d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083d6:	4567      	cmp	r7, ip
 80083d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083dc:	d8e6      	bhi.n	80083ac <__multiply+0x10c>
 80083de:	9a01      	ldr	r2, [sp, #4]
 80083e0:	50a9      	str	r1, [r5, r2]
 80083e2:	3504      	adds	r5, #4
 80083e4:	e79a      	b.n	800831c <__multiply+0x7c>
 80083e6:	3e01      	subs	r6, #1
 80083e8:	e79c      	b.n	8008324 <__multiply+0x84>
 80083ea:	bf00      	nop
 80083ec:	08009b49 	.word	0x08009b49
 80083f0:	08009bbc 	.word	0x08009bbc

080083f4 <__pow5mult>:
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	4615      	mov	r5, r2
 80083fa:	f012 0203 	ands.w	r2, r2, #3
 80083fe:	4606      	mov	r6, r0
 8008400:	460f      	mov	r7, r1
 8008402:	d007      	beq.n	8008414 <__pow5mult+0x20>
 8008404:	4c25      	ldr	r4, [pc, #148]	; (800849c <__pow5mult+0xa8>)
 8008406:	3a01      	subs	r2, #1
 8008408:	2300      	movs	r3, #0
 800840a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800840e:	f7ff fe9b 	bl	8008148 <__multadd>
 8008412:	4607      	mov	r7, r0
 8008414:	10ad      	asrs	r5, r5, #2
 8008416:	d03d      	beq.n	8008494 <__pow5mult+0xa0>
 8008418:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800841a:	b97c      	cbnz	r4, 800843c <__pow5mult+0x48>
 800841c:	2010      	movs	r0, #16
 800841e:	f7ff fe29 	bl	8008074 <malloc>
 8008422:	4602      	mov	r2, r0
 8008424:	6270      	str	r0, [r6, #36]	; 0x24
 8008426:	b928      	cbnz	r0, 8008434 <__pow5mult+0x40>
 8008428:	4b1d      	ldr	r3, [pc, #116]	; (80084a0 <__pow5mult+0xac>)
 800842a:	481e      	ldr	r0, [pc, #120]	; (80084a4 <__pow5mult+0xb0>)
 800842c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008430:	f001 f8ac 	bl	800958c <__assert_func>
 8008434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008438:	6004      	str	r4, [r0, #0]
 800843a:	60c4      	str	r4, [r0, #12]
 800843c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008444:	b94c      	cbnz	r4, 800845a <__pow5mult+0x66>
 8008446:	f240 2171 	movw	r1, #625	; 0x271
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ff12 	bl	8008274 <__i2b>
 8008450:	2300      	movs	r3, #0
 8008452:	f8c8 0008 	str.w	r0, [r8, #8]
 8008456:	4604      	mov	r4, r0
 8008458:	6003      	str	r3, [r0, #0]
 800845a:	f04f 0900 	mov.w	r9, #0
 800845e:	07eb      	lsls	r3, r5, #31
 8008460:	d50a      	bpl.n	8008478 <__pow5mult+0x84>
 8008462:	4639      	mov	r1, r7
 8008464:	4622      	mov	r2, r4
 8008466:	4630      	mov	r0, r6
 8008468:	f7ff ff1a 	bl	80082a0 <__multiply>
 800846c:	4639      	mov	r1, r7
 800846e:	4680      	mov	r8, r0
 8008470:	4630      	mov	r0, r6
 8008472:	f7ff fe47 	bl	8008104 <_Bfree>
 8008476:	4647      	mov	r7, r8
 8008478:	106d      	asrs	r5, r5, #1
 800847a:	d00b      	beq.n	8008494 <__pow5mult+0xa0>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	b938      	cbnz	r0, 8008490 <__pow5mult+0x9c>
 8008480:	4622      	mov	r2, r4
 8008482:	4621      	mov	r1, r4
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff ff0b 	bl	80082a0 <__multiply>
 800848a:	6020      	str	r0, [r4, #0]
 800848c:	f8c0 9000 	str.w	r9, [r0]
 8008490:	4604      	mov	r4, r0
 8008492:	e7e4      	b.n	800845e <__pow5mult+0x6a>
 8008494:	4638      	mov	r0, r7
 8008496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849a:	bf00      	nop
 800849c:	08009d08 	.word	0x08009d08
 80084a0:	08009ad7 	.word	0x08009ad7
 80084a4:	08009bbc 	.word	0x08009bbc

080084a8 <__lshift>:
 80084a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	460c      	mov	r4, r1
 80084ae:	6849      	ldr	r1, [r1, #4]
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	4607      	mov	r7, r0
 80084ba:	4691      	mov	r9, r2
 80084bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084c0:	f108 0601 	add.w	r6, r8, #1
 80084c4:	42b3      	cmp	r3, r6
 80084c6:	db0b      	blt.n	80084e0 <__lshift+0x38>
 80084c8:	4638      	mov	r0, r7
 80084ca:	f7ff fddb 	bl	8008084 <_Balloc>
 80084ce:	4605      	mov	r5, r0
 80084d0:	b948      	cbnz	r0, 80084e6 <__lshift+0x3e>
 80084d2:	4602      	mov	r2, r0
 80084d4:	4b2a      	ldr	r3, [pc, #168]	; (8008580 <__lshift+0xd8>)
 80084d6:	482b      	ldr	r0, [pc, #172]	; (8008584 <__lshift+0xdc>)
 80084d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084dc:	f001 f856 	bl	800958c <__assert_func>
 80084e0:	3101      	adds	r1, #1
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	e7ee      	b.n	80084c4 <__lshift+0x1c>
 80084e6:	2300      	movs	r3, #0
 80084e8:	f100 0114 	add.w	r1, r0, #20
 80084ec:	f100 0210 	add.w	r2, r0, #16
 80084f0:	4618      	mov	r0, r3
 80084f2:	4553      	cmp	r3, sl
 80084f4:	db37      	blt.n	8008566 <__lshift+0xbe>
 80084f6:	6920      	ldr	r0, [r4, #16]
 80084f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084fc:	f104 0314 	add.w	r3, r4, #20
 8008500:	f019 091f 	ands.w	r9, r9, #31
 8008504:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008508:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800850c:	d02f      	beq.n	800856e <__lshift+0xc6>
 800850e:	f1c9 0e20 	rsb	lr, r9, #32
 8008512:	468a      	mov	sl, r1
 8008514:	f04f 0c00 	mov.w	ip, #0
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	fa02 f209 	lsl.w	r2, r2, r9
 800851e:	ea42 020c 	orr.w	r2, r2, ip
 8008522:	f84a 2b04 	str.w	r2, [sl], #4
 8008526:	f853 2b04 	ldr.w	r2, [r3], #4
 800852a:	4298      	cmp	r0, r3
 800852c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008530:	d8f2      	bhi.n	8008518 <__lshift+0x70>
 8008532:	1b03      	subs	r3, r0, r4
 8008534:	3b15      	subs	r3, #21
 8008536:	f023 0303 	bic.w	r3, r3, #3
 800853a:	3304      	adds	r3, #4
 800853c:	f104 0215 	add.w	r2, r4, #21
 8008540:	4290      	cmp	r0, r2
 8008542:	bf38      	it	cc
 8008544:	2304      	movcc	r3, #4
 8008546:	f841 c003 	str.w	ip, [r1, r3]
 800854a:	f1bc 0f00 	cmp.w	ip, #0
 800854e:	d001      	beq.n	8008554 <__lshift+0xac>
 8008550:	f108 0602 	add.w	r6, r8, #2
 8008554:	3e01      	subs	r6, #1
 8008556:	4638      	mov	r0, r7
 8008558:	612e      	str	r6, [r5, #16]
 800855a:	4621      	mov	r1, r4
 800855c:	f7ff fdd2 	bl	8008104 <_Bfree>
 8008560:	4628      	mov	r0, r5
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	f842 0f04 	str.w	r0, [r2, #4]!
 800856a:	3301      	adds	r3, #1
 800856c:	e7c1      	b.n	80084f2 <__lshift+0x4a>
 800856e:	3904      	subs	r1, #4
 8008570:	f853 2b04 	ldr.w	r2, [r3], #4
 8008574:	f841 2f04 	str.w	r2, [r1, #4]!
 8008578:	4298      	cmp	r0, r3
 800857a:	d8f9      	bhi.n	8008570 <__lshift+0xc8>
 800857c:	e7ea      	b.n	8008554 <__lshift+0xac>
 800857e:	bf00      	nop
 8008580:	08009b49 	.word	0x08009b49
 8008584:	08009bbc 	.word	0x08009bbc

08008588 <__mcmp>:
 8008588:	b530      	push	{r4, r5, lr}
 800858a:	6902      	ldr	r2, [r0, #16]
 800858c:	690c      	ldr	r4, [r1, #16]
 800858e:	1b12      	subs	r2, r2, r4
 8008590:	d10e      	bne.n	80085b0 <__mcmp+0x28>
 8008592:	f100 0314 	add.w	r3, r0, #20
 8008596:	3114      	adds	r1, #20
 8008598:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800859c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085a8:	42a5      	cmp	r5, r4
 80085aa:	d003      	beq.n	80085b4 <__mcmp+0x2c>
 80085ac:	d305      	bcc.n	80085ba <__mcmp+0x32>
 80085ae:	2201      	movs	r2, #1
 80085b0:	4610      	mov	r0, r2
 80085b2:	bd30      	pop	{r4, r5, pc}
 80085b4:	4283      	cmp	r3, r0
 80085b6:	d3f3      	bcc.n	80085a0 <__mcmp+0x18>
 80085b8:	e7fa      	b.n	80085b0 <__mcmp+0x28>
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085be:	e7f7      	b.n	80085b0 <__mcmp+0x28>

080085c0 <__mdiff>:
 80085c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	460c      	mov	r4, r1
 80085c6:	4606      	mov	r6, r0
 80085c8:	4611      	mov	r1, r2
 80085ca:	4620      	mov	r0, r4
 80085cc:	4690      	mov	r8, r2
 80085ce:	f7ff ffdb 	bl	8008588 <__mcmp>
 80085d2:	1e05      	subs	r5, r0, #0
 80085d4:	d110      	bne.n	80085f8 <__mdiff+0x38>
 80085d6:	4629      	mov	r1, r5
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff fd53 	bl	8008084 <_Balloc>
 80085de:	b930      	cbnz	r0, 80085ee <__mdiff+0x2e>
 80085e0:	4b3a      	ldr	r3, [pc, #232]	; (80086cc <__mdiff+0x10c>)
 80085e2:	4602      	mov	r2, r0
 80085e4:	f240 2132 	movw	r1, #562	; 0x232
 80085e8:	4839      	ldr	r0, [pc, #228]	; (80086d0 <__mdiff+0x110>)
 80085ea:	f000 ffcf 	bl	800958c <__assert_func>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f8:	bfa4      	itt	ge
 80085fa:	4643      	movge	r3, r8
 80085fc:	46a0      	movge	r8, r4
 80085fe:	4630      	mov	r0, r6
 8008600:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008604:	bfa6      	itte	ge
 8008606:	461c      	movge	r4, r3
 8008608:	2500      	movge	r5, #0
 800860a:	2501      	movlt	r5, #1
 800860c:	f7ff fd3a 	bl	8008084 <_Balloc>
 8008610:	b920      	cbnz	r0, 800861c <__mdiff+0x5c>
 8008612:	4b2e      	ldr	r3, [pc, #184]	; (80086cc <__mdiff+0x10c>)
 8008614:	4602      	mov	r2, r0
 8008616:	f44f 7110 	mov.w	r1, #576	; 0x240
 800861a:	e7e5      	b.n	80085e8 <__mdiff+0x28>
 800861c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008620:	6926      	ldr	r6, [r4, #16]
 8008622:	60c5      	str	r5, [r0, #12]
 8008624:	f104 0914 	add.w	r9, r4, #20
 8008628:	f108 0514 	add.w	r5, r8, #20
 800862c:	f100 0e14 	add.w	lr, r0, #20
 8008630:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008634:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008638:	f108 0210 	add.w	r2, r8, #16
 800863c:	46f2      	mov	sl, lr
 800863e:	2100      	movs	r1, #0
 8008640:	f859 3b04 	ldr.w	r3, [r9], #4
 8008644:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008648:	fa1f f883 	uxth.w	r8, r3
 800864c:	fa11 f18b 	uxtah	r1, r1, fp
 8008650:	0c1b      	lsrs	r3, r3, #16
 8008652:	eba1 0808 	sub.w	r8, r1, r8
 8008656:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800865a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800865e:	fa1f f888 	uxth.w	r8, r8
 8008662:	1419      	asrs	r1, r3, #16
 8008664:	454e      	cmp	r6, r9
 8008666:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800866a:	f84a 3b04 	str.w	r3, [sl], #4
 800866e:	d8e7      	bhi.n	8008640 <__mdiff+0x80>
 8008670:	1b33      	subs	r3, r6, r4
 8008672:	3b15      	subs	r3, #21
 8008674:	f023 0303 	bic.w	r3, r3, #3
 8008678:	3304      	adds	r3, #4
 800867a:	3415      	adds	r4, #21
 800867c:	42a6      	cmp	r6, r4
 800867e:	bf38      	it	cc
 8008680:	2304      	movcc	r3, #4
 8008682:	441d      	add	r5, r3
 8008684:	4473      	add	r3, lr
 8008686:	469e      	mov	lr, r3
 8008688:	462e      	mov	r6, r5
 800868a:	4566      	cmp	r6, ip
 800868c:	d30e      	bcc.n	80086ac <__mdiff+0xec>
 800868e:	f10c 0203 	add.w	r2, ip, #3
 8008692:	1b52      	subs	r2, r2, r5
 8008694:	f022 0203 	bic.w	r2, r2, #3
 8008698:	3d03      	subs	r5, #3
 800869a:	45ac      	cmp	ip, r5
 800869c:	bf38      	it	cc
 800869e:	2200      	movcc	r2, #0
 80086a0:	441a      	add	r2, r3
 80086a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086a6:	b17b      	cbz	r3, 80086c8 <__mdiff+0x108>
 80086a8:	6107      	str	r7, [r0, #16]
 80086aa:	e7a3      	b.n	80085f4 <__mdiff+0x34>
 80086ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80086b0:	fa11 f288 	uxtah	r2, r1, r8
 80086b4:	1414      	asrs	r4, r2, #16
 80086b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086ba:	b292      	uxth	r2, r2
 80086bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086c0:	f84e 2b04 	str.w	r2, [lr], #4
 80086c4:	1421      	asrs	r1, r4, #16
 80086c6:	e7e0      	b.n	800868a <__mdiff+0xca>
 80086c8:	3f01      	subs	r7, #1
 80086ca:	e7ea      	b.n	80086a2 <__mdiff+0xe2>
 80086cc:	08009b49 	.word	0x08009b49
 80086d0:	08009bbc 	.word	0x08009bbc

080086d4 <__d2b>:
 80086d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086d8:	4689      	mov	r9, r1
 80086da:	2101      	movs	r1, #1
 80086dc:	ec57 6b10 	vmov	r6, r7, d0
 80086e0:	4690      	mov	r8, r2
 80086e2:	f7ff fccf 	bl	8008084 <_Balloc>
 80086e6:	4604      	mov	r4, r0
 80086e8:	b930      	cbnz	r0, 80086f8 <__d2b+0x24>
 80086ea:	4602      	mov	r2, r0
 80086ec:	4b25      	ldr	r3, [pc, #148]	; (8008784 <__d2b+0xb0>)
 80086ee:	4826      	ldr	r0, [pc, #152]	; (8008788 <__d2b+0xb4>)
 80086f0:	f240 310a 	movw	r1, #778	; 0x30a
 80086f4:	f000 ff4a 	bl	800958c <__assert_func>
 80086f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008700:	bb35      	cbnz	r5, 8008750 <__d2b+0x7c>
 8008702:	2e00      	cmp	r6, #0
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	d028      	beq.n	800875a <__d2b+0x86>
 8008708:	4668      	mov	r0, sp
 800870a:	9600      	str	r6, [sp, #0]
 800870c:	f7ff fd82 	bl	8008214 <__lo0bits>
 8008710:	9900      	ldr	r1, [sp, #0]
 8008712:	b300      	cbz	r0, 8008756 <__d2b+0x82>
 8008714:	9a01      	ldr	r2, [sp, #4]
 8008716:	f1c0 0320 	rsb	r3, r0, #32
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	430b      	orrs	r3, r1
 8008720:	40c2      	lsrs	r2, r0
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	9201      	str	r2, [sp, #4]
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	61a3      	str	r3, [r4, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	bf14      	ite	ne
 800872e:	2202      	movne	r2, #2
 8008730:	2201      	moveq	r2, #1
 8008732:	6122      	str	r2, [r4, #16]
 8008734:	b1d5      	cbz	r5, 800876c <__d2b+0x98>
 8008736:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800873a:	4405      	add	r5, r0
 800873c:	f8c9 5000 	str.w	r5, [r9]
 8008740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008744:	f8c8 0000 	str.w	r0, [r8]
 8008748:	4620      	mov	r0, r4
 800874a:	b003      	add	sp, #12
 800874c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008754:	e7d5      	b.n	8008702 <__d2b+0x2e>
 8008756:	6161      	str	r1, [r4, #20]
 8008758:	e7e5      	b.n	8008726 <__d2b+0x52>
 800875a:	a801      	add	r0, sp, #4
 800875c:	f7ff fd5a 	bl	8008214 <__lo0bits>
 8008760:	9b01      	ldr	r3, [sp, #4]
 8008762:	6163      	str	r3, [r4, #20]
 8008764:	2201      	movs	r2, #1
 8008766:	6122      	str	r2, [r4, #16]
 8008768:	3020      	adds	r0, #32
 800876a:	e7e3      	b.n	8008734 <__d2b+0x60>
 800876c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008770:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008774:	f8c9 0000 	str.w	r0, [r9]
 8008778:	6918      	ldr	r0, [r3, #16]
 800877a:	f7ff fd2b 	bl	80081d4 <__hi0bits>
 800877e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008782:	e7df      	b.n	8008744 <__d2b+0x70>
 8008784:	08009b49 	.word	0x08009b49
 8008788:	08009bbc 	.word	0x08009bbc

0800878c <_calloc_r>:
 800878c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800878e:	fba1 2402 	umull	r2, r4, r1, r2
 8008792:	b94c      	cbnz	r4, 80087a8 <_calloc_r+0x1c>
 8008794:	4611      	mov	r1, r2
 8008796:	9201      	str	r2, [sp, #4]
 8008798:	f000 f87a 	bl	8008890 <_malloc_r>
 800879c:	9a01      	ldr	r2, [sp, #4]
 800879e:	4605      	mov	r5, r0
 80087a0:	b930      	cbnz	r0, 80087b0 <_calloc_r+0x24>
 80087a2:	4628      	mov	r0, r5
 80087a4:	b003      	add	sp, #12
 80087a6:	bd30      	pop	{r4, r5, pc}
 80087a8:	220c      	movs	r2, #12
 80087aa:	6002      	str	r2, [r0, #0]
 80087ac:	2500      	movs	r5, #0
 80087ae:	e7f8      	b.n	80087a2 <_calloc_r+0x16>
 80087b0:	4621      	mov	r1, r4
 80087b2:	f7fd fd59 	bl	8006268 <memset>
 80087b6:	e7f4      	b.n	80087a2 <_calloc_r+0x16>

080087b8 <_free_r>:
 80087b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087ba:	2900      	cmp	r1, #0
 80087bc:	d044      	beq.n	8008848 <_free_r+0x90>
 80087be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c2:	9001      	str	r0, [sp, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f1a1 0404 	sub.w	r4, r1, #4
 80087ca:	bfb8      	it	lt
 80087cc:	18e4      	addlt	r4, r4, r3
 80087ce:	f000 ff41 	bl	8009654 <__malloc_lock>
 80087d2:	4a1e      	ldr	r2, [pc, #120]	; (800884c <_free_r+0x94>)
 80087d4:	9801      	ldr	r0, [sp, #4]
 80087d6:	6813      	ldr	r3, [r2, #0]
 80087d8:	b933      	cbnz	r3, 80087e8 <_free_r+0x30>
 80087da:	6063      	str	r3, [r4, #4]
 80087dc:	6014      	str	r4, [r2, #0]
 80087de:	b003      	add	sp, #12
 80087e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087e4:	f000 bf3c 	b.w	8009660 <__malloc_unlock>
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	d908      	bls.n	80087fe <_free_r+0x46>
 80087ec:	6825      	ldr	r5, [r4, #0]
 80087ee:	1961      	adds	r1, r4, r5
 80087f0:	428b      	cmp	r3, r1
 80087f2:	bf01      	itttt	eq
 80087f4:	6819      	ldreq	r1, [r3, #0]
 80087f6:	685b      	ldreq	r3, [r3, #4]
 80087f8:	1949      	addeq	r1, r1, r5
 80087fa:	6021      	streq	r1, [r4, #0]
 80087fc:	e7ed      	b.n	80087da <_free_r+0x22>
 80087fe:	461a      	mov	r2, r3
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	b10b      	cbz	r3, 8008808 <_free_r+0x50>
 8008804:	42a3      	cmp	r3, r4
 8008806:	d9fa      	bls.n	80087fe <_free_r+0x46>
 8008808:	6811      	ldr	r1, [r2, #0]
 800880a:	1855      	adds	r5, r2, r1
 800880c:	42a5      	cmp	r5, r4
 800880e:	d10b      	bne.n	8008828 <_free_r+0x70>
 8008810:	6824      	ldr	r4, [r4, #0]
 8008812:	4421      	add	r1, r4
 8008814:	1854      	adds	r4, r2, r1
 8008816:	42a3      	cmp	r3, r4
 8008818:	6011      	str	r1, [r2, #0]
 800881a:	d1e0      	bne.n	80087de <_free_r+0x26>
 800881c:	681c      	ldr	r4, [r3, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	6053      	str	r3, [r2, #4]
 8008822:	4421      	add	r1, r4
 8008824:	6011      	str	r1, [r2, #0]
 8008826:	e7da      	b.n	80087de <_free_r+0x26>
 8008828:	d902      	bls.n	8008830 <_free_r+0x78>
 800882a:	230c      	movs	r3, #12
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	e7d6      	b.n	80087de <_free_r+0x26>
 8008830:	6825      	ldr	r5, [r4, #0]
 8008832:	1961      	adds	r1, r4, r5
 8008834:	428b      	cmp	r3, r1
 8008836:	bf04      	itt	eq
 8008838:	6819      	ldreq	r1, [r3, #0]
 800883a:	685b      	ldreq	r3, [r3, #4]
 800883c:	6063      	str	r3, [r4, #4]
 800883e:	bf04      	itt	eq
 8008840:	1949      	addeq	r1, r1, r5
 8008842:	6021      	streq	r1, [r4, #0]
 8008844:	6054      	str	r4, [r2, #4]
 8008846:	e7ca      	b.n	80087de <_free_r+0x26>
 8008848:	b003      	add	sp, #12
 800884a:	bd30      	pop	{r4, r5, pc}
 800884c:	20000500 	.word	0x20000500

08008850 <sbrk_aligned>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	4e0e      	ldr	r6, [pc, #56]	; (800888c <sbrk_aligned+0x3c>)
 8008854:	460c      	mov	r4, r1
 8008856:	6831      	ldr	r1, [r6, #0]
 8008858:	4605      	mov	r5, r0
 800885a:	b911      	cbnz	r1, 8008862 <sbrk_aligned+0x12>
 800885c:	f000 fd1c 	bl	8009298 <_sbrk_r>
 8008860:	6030      	str	r0, [r6, #0]
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 fd17 	bl	8009298 <_sbrk_r>
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	d00a      	beq.n	8008884 <sbrk_aligned+0x34>
 800886e:	1cc4      	adds	r4, r0, #3
 8008870:	f024 0403 	bic.w	r4, r4, #3
 8008874:	42a0      	cmp	r0, r4
 8008876:	d007      	beq.n	8008888 <sbrk_aligned+0x38>
 8008878:	1a21      	subs	r1, r4, r0
 800887a:	4628      	mov	r0, r5
 800887c:	f000 fd0c 	bl	8009298 <_sbrk_r>
 8008880:	3001      	adds	r0, #1
 8008882:	d101      	bne.n	8008888 <sbrk_aligned+0x38>
 8008884:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008888:	4620      	mov	r0, r4
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	20000504 	.word	0x20000504

08008890 <_malloc_r>:
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	1ccd      	adds	r5, r1, #3
 8008896:	f025 0503 	bic.w	r5, r5, #3
 800889a:	3508      	adds	r5, #8
 800889c:	2d0c      	cmp	r5, #12
 800889e:	bf38      	it	cc
 80088a0:	250c      	movcc	r5, #12
 80088a2:	2d00      	cmp	r5, #0
 80088a4:	4607      	mov	r7, r0
 80088a6:	db01      	blt.n	80088ac <_malloc_r+0x1c>
 80088a8:	42a9      	cmp	r1, r5
 80088aa:	d905      	bls.n	80088b8 <_malloc_r+0x28>
 80088ac:	230c      	movs	r3, #12
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	2600      	movs	r6, #0
 80088b2:	4630      	mov	r0, r6
 80088b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b8:	4e2e      	ldr	r6, [pc, #184]	; (8008974 <_malloc_r+0xe4>)
 80088ba:	f000 fecb 	bl	8009654 <__malloc_lock>
 80088be:	6833      	ldr	r3, [r6, #0]
 80088c0:	461c      	mov	r4, r3
 80088c2:	bb34      	cbnz	r4, 8008912 <_malloc_r+0x82>
 80088c4:	4629      	mov	r1, r5
 80088c6:	4638      	mov	r0, r7
 80088c8:	f7ff ffc2 	bl	8008850 <sbrk_aligned>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	4604      	mov	r4, r0
 80088d0:	d14d      	bne.n	800896e <_malloc_r+0xde>
 80088d2:	6834      	ldr	r4, [r6, #0]
 80088d4:	4626      	mov	r6, r4
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d140      	bne.n	800895c <_malloc_r+0xcc>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	4631      	mov	r1, r6
 80088de:	4638      	mov	r0, r7
 80088e0:	eb04 0803 	add.w	r8, r4, r3
 80088e4:	f000 fcd8 	bl	8009298 <_sbrk_r>
 80088e8:	4580      	cmp	r8, r0
 80088ea:	d13a      	bne.n	8008962 <_malloc_r+0xd2>
 80088ec:	6821      	ldr	r1, [r4, #0]
 80088ee:	3503      	adds	r5, #3
 80088f0:	1a6d      	subs	r5, r5, r1
 80088f2:	f025 0503 	bic.w	r5, r5, #3
 80088f6:	3508      	adds	r5, #8
 80088f8:	2d0c      	cmp	r5, #12
 80088fa:	bf38      	it	cc
 80088fc:	250c      	movcc	r5, #12
 80088fe:	4629      	mov	r1, r5
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff ffa5 	bl	8008850 <sbrk_aligned>
 8008906:	3001      	adds	r0, #1
 8008908:	d02b      	beq.n	8008962 <_malloc_r+0xd2>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	442b      	add	r3, r5
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	e00e      	b.n	8008930 <_malloc_r+0xa0>
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	1b52      	subs	r2, r2, r5
 8008916:	d41e      	bmi.n	8008956 <_malloc_r+0xc6>
 8008918:	2a0b      	cmp	r2, #11
 800891a:	d916      	bls.n	800894a <_malloc_r+0xba>
 800891c:	1961      	adds	r1, r4, r5
 800891e:	42a3      	cmp	r3, r4
 8008920:	6025      	str	r5, [r4, #0]
 8008922:	bf18      	it	ne
 8008924:	6059      	strne	r1, [r3, #4]
 8008926:	6863      	ldr	r3, [r4, #4]
 8008928:	bf08      	it	eq
 800892a:	6031      	streq	r1, [r6, #0]
 800892c:	5162      	str	r2, [r4, r5]
 800892e:	604b      	str	r3, [r1, #4]
 8008930:	4638      	mov	r0, r7
 8008932:	f104 060b 	add.w	r6, r4, #11
 8008936:	f000 fe93 	bl	8009660 <__malloc_unlock>
 800893a:	f026 0607 	bic.w	r6, r6, #7
 800893e:	1d23      	adds	r3, r4, #4
 8008940:	1af2      	subs	r2, r6, r3
 8008942:	d0b6      	beq.n	80088b2 <_malloc_r+0x22>
 8008944:	1b9b      	subs	r3, r3, r6
 8008946:	50a3      	str	r3, [r4, r2]
 8008948:	e7b3      	b.n	80088b2 <_malloc_r+0x22>
 800894a:	6862      	ldr	r2, [r4, #4]
 800894c:	42a3      	cmp	r3, r4
 800894e:	bf0c      	ite	eq
 8008950:	6032      	streq	r2, [r6, #0]
 8008952:	605a      	strne	r2, [r3, #4]
 8008954:	e7ec      	b.n	8008930 <_malloc_r+0xa0>
 8008956:	4623      	mov	r3, r4
 8008958:	6864      	ldr	r4, [r4, #4]
 800895a:	e7b2      	b.n	80088c2 <_malloc_r+0x32>
 800895c:	4634      	mov	r4, r6
 800895e:	6876      	ldr	r6, [r6, #4]
 8008960:	e7b9      	b.n	80088d6 <_malloc_r+0x46>
 8008962:	230c      	movs	r3, #12
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	4638      	mov	r0, r7
 8008968:	f000 fe7a 	bl	8009660 <__malloc_unlock>
 800896c:	e7a1      	b.n	80088b2 <_malloc_r+0x22>
 800896e:	6025      	str	r5, [r4, #0]
 8008970:	e7de      	b.n	8008930 <_malloc_r+0xa0>
 8008972:	bf00      	nop
 8008974:	20000500 	.word	0x20000500

08008978 <_sungetc_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	1c4b      	adds	r3, r1, #1
 800897c:	4614      	mov	r4, r2
 800897e:	d103      	bne.n	8008988 <_sungetc_r+0x10>
 8008980:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008984:	4628      	mov	r0, r5
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	8993      	ldrh	r3, [r2, #12]
 800898a:	f023 0320 	bic.w	r3, r3, #32
 800898e:	8193      	strh	r3, [r2, #12]
 8008990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008992:	6852      	ldr	r2, [r2, #4]
 8008994:	b2cd      	uxtb	r5, r1
 8008996:	b18b      	cbz	r3, 80089bc <_sungetc_r+0x44>
 8008998:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800899a:	4293      	cmp	r3, r2
 800899c:	dd08      	ble.n	80089b0 <_sungetc_r+0x38>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	1e5a      	subs	r2, r3, #1
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80089a8:	6863      	ldr	r3, [r4, #4]
 80089aa:	3301      	adds	r3, #1
 80089ac:	6063      	str	r3, [r4, #4]
 80089ae:	e7e9      	b.n	8008984 <_sungetc_r+0xc>
 80089b0:	4621      	mov	r1, r4
 80089b2:	f000 fdb1 	bl	8009518 <__submore>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d0f1      	beq.n	800899e <_sungetc_r+0x26>
 80089ba:	e7e1      	b.n	8008980 <_sungetc_r+0x8>
 80089bc:	6921      	ldr	r1, [r4, #16]
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	b151      	cbz	r1, 80089d8 <_sungetc_r+0x60>
 80089c2:	4299      	cmp	r1, r3
 80089c4:	d208      	bcs.n	80089d8 <_sungetc_r+0x60>
 80089c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80089ca:	42a9      	cmp	r1, r5
 80089cc:	d104      	bne.n	80089d8 <_sungetc_r+0x60>
 80089ce:	3b01      	subs	r3, #1
 80089d0:	3201      	adds	r2, #1
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	6062      	str	r2, [r4, #4]
 80089d6:	e7d5      	b.n	8008984 <_sungetc_r+0xc>
 80089d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80089dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089e0:	6363      	str	r3, [r4, #52]	; 0x34
 80089e2:	2303      	movs	r3, #3
 80089e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80089e6:	4623      	mov	r3, r4
 80089e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	2301      	movs	r3, #1
 80089f0:	e7dc      	b.n	80089ac <_sungetc_r+0x34>

080089f2 <__ssrefill_r>:
 80089f2:	b510      	push	{r4, lr}
 80089f4:	460c      	mov	r4, r1
 80089f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80089f8:	b169      	cbz	r1, 8008a16 <__ssrefill_r+0x24>
 80089fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089fe:	4299      	cmp	r1, r3
 8008a00:	d001      	beq.n	8008a06 <__ssrefill_r+0x14>
 8008a02:	f7ff fed9 	bl	80087b8 <_free_r>
 8008a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a08:	6063      	str	r3, [r4, #4]
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a0e:	b113      	cbz	r3, 8008a16 <__ssrefill_r+0x24>
 8008a10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	bd10      	pop	{r4, pc}
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6063      	str	r3, [r4, #4]
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	f043 0320 	orr.w	r3, r3, #32
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a2a:	e7f3      	b.n	8008a14 <__ssrefill_r+0x22>

08008a2c <__ssvfiscanf_r>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	460c      	mov	r4, r1
 8008a32:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008a36:	2100      	movs	r1, #0
 8008a38:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008a3c:	49a6      	ldr	r1, [pc, #664]	; (8008cd8 <__ssvfiscanf_r+0x2ac>)
 8008a3e:	91a0      	str	r1, [sp, #640]	; 0x280
 8008a40:	f10d 0804 	add.w	r8, sp, #4
 8008a44:	49a5      	ldr	r1, [pc, #660]	; (8008cdc <__ssvfiscanf_r+0x2b0>)
 8008a46:	4fa6      	ldr	r7, [pc, #664]	; (8008ce0 <__ssvfiscanf_r+0x2b4>)
 8008a48:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008ce4 <__ssvfiscanf_r+0x2b8>
 8008a4c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008a50:	4606      	mov	r6, r0
 8008a52:	91a1      	str	r1, [sp, #644]	; 0x284
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	7813      	ldrb	r3, [r2, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 815a 	beq.w	8008d12 <__ssvfiscanf_r+0x2e6>
 8008a5e:	5dd9      	ldrb	r1, [r3, r7]
 8008a60:	f011 0108 	ands.w	r1, r1, #8
 8008a64:	f102 0501 	add.w	r5, r2, #1
 8008a68:	d019      	beq.n	8008a9e <__ssvfiscanf_r+0x72>
 8008a6a:	6863      	ldr	r3, [r4, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd0f      	ble.n	8008a90 <__ssvfiscanf_r+0x64>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	781a      	ldrb	r2, [r3, #0]
 8008a74:	5cba      	ldrb	r2, [r7, r2]
 8008a76:	0712      	lsls	r2, r2, #28
 8008a78:	d401      	bmi.n	8008a7e <__ssvfiscanf_r+0x52>
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	e7eb      	b.n	8008a56 <__ssvfiscanf_r+0x2a>
 8008a7e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a80:	3201      	adds	r2, #1
 8008a82:	9245      	str	r2, [sp, #276]	; 0x114
 8008a84:	6862      	ldr	r2, [r4, #4]
 8008a86:	3301      	adds	r3, #1
 8008a88:	3a01      	subs	r2, #1
 8008a8a:	6062      	str	r2, [r4, #4]
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	e7ec      	b.n	8008a6a <__ssvfiscanf_r+0x3e>
 8008a90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a92:	4621      	mov	r1, r4
 8008a94:	4630      	mov	r0, r6
 8008a96:	4798      	blx	r3
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d0e9      	beq.n	8008a70 <__ssvfiscanf_r+0x44>
 8008a9c:	e7ed      	b.n	8008a7a <__ssvfiscanf_r+0x4e>
 8008a9e:	2b25      	cmp	r3, #37	; 0x25
 8008aa0:	d012      	beq.n	8008ac8 <__ssvfiscanf_r+0x9c>
 8008aa2:	469a      	mov	sl, r3
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f340 8091 	ble.w	8008bce <__ssvfiscanf_r+0x1a2>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	7813      	ldrb	r3, [r2, #0]
 8008ab0:	4553      	cmp	r3, sl
 8008ab2:	f040 812e 	bne.w	8008d12 <__ssvfiscanf_r+0x2e6>
 8008ab6:	6863      	ldr	r3, [r4, #4]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	6063      	str	r3, [r4, #4]
 8008abc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008abe:	3201      	adds	r2, #1
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	6022      	str	r2, [r4, #0]
 8008ac4:	9345      	str	r3, [sp, #276]	; 0x114
 8008ac6:	e7d8      	b.n	8008a7a <__ssvfiscanf_r+0x4e>
 8008ac8:	9141      	str	r1, [sp, #260]	; 0x104
 8008aca:	9143      	str	r1, [sp, #268]	; 0x10c
 8008acc:	7853      	ldrb	r3, [r2, #1]
 8008ace:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad0:	bf02      	ittt	eq
 8008ad2:	2310      	moveq	r3, #16
 8008ad4:	1c95      	addeq	r5, r2, #2
 8008ad6:	9341      	streq	r3, [sp, #260]	; 0x104
 8008ad8:	220a      	movs	r2, #10
 8008ada:	46aa      	mov	sl, r5
 8008adc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008ae0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008ae4:	2b09      	cmp	r3, #9
 8008ae6:	d91d      	bls.n	8008b24 <__ssvfiscanf_r+0xf8>
 8008ae8:	487e      	ldr	r0, [pc, #504]	; (8008ce4 <__ssvfiscanf_r+0x2b8>)
 8008aea:	2203      	movs	r2, #3
 8008aec:	f7f7 fb80 	bl	80001f0 <memchr>
 8008af0:	b140      	cbz	r0, 8008b04 <__ssvfiscanf_r+0xd8>
 8008af2:	2301      	movs	r3, #1
 8008af4:	eba0 0009 	sub.w	r0, r0, r9
 8008af8:	fa03 f000 	lsl.w	r0, r3, r0
 8008afc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008afe:	4318      	orrs	r0, r3
 8008b00:	9041      	str	r0, [sp, #260]	; 0x104
 8008b02:	4655      	mov	r5, sl
 8008b04:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b08:	2b78      	cmp	r3, #120	; 0x78
 8008b0a:	d806      	bhi.n	8008b1a <__ssvfiscanf_r+0xee>
 8008b0c:	2b57      	cmp	r3, #87	; 0x57
 8008b0e:	d810      	bhi.n	8008b32 <__ssvfiscanf_r+0x106>
 8008b10:	2b25      	cmp	r3, #37	; 0x25
 8008b12:	d0c6      	beq.n	8008aa2 <__ssvfiscanf_r+0x76>
 8008b14:	d856      	bhi.n	8008bc4 <__ssvfiscanf_r+0x198>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d064      	beq.n	8008be4 <__ssvfiscanf_r+0x1b8>
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b1e:	230a      	movs	r3, #10
 8008b20:	9342      	str	r3, [sp, #264]	; 0x108
 8008b22:	e071      	b.n	8008c08 <__ssvfiscanf_r+0x1dc>
 8008b24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008b26:	fb02 1103 	mla	r1, r2, r3, r1
 8008b2a:	3930      	subs	r1, #48	; 0x30
 8008b2c:	9143      	str	r1, [sp, #268]	; 0x10c
 8008b2e:	4655      	mov	r5, sl
 8008b30:	e7d3      	b.n	8008ada <__ssvfiscanf_r+0xae>
 8008b32:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008b36:	2a20      	cmp	r2, #32
 8008b38:	d8ef      	bhi.n	8008b1a <__ssvfiscanf_r+0xee>
 8008b3a:	a101      	add	r1, pc, #4	; (adr r1, 8008b40 <__ssvfiscanf_r+0x114>)
 8008b3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b40:	08008bf3 	.word	0x08008bf3
 8008b44:	08008b1b 	.word	0x08008b1b
 8008b48:	08008b1b 	.word	0x08008b1b
 8008b4c:	08008c51 	.word	0x08008c51
 8008b50:	08008b1b 	.word	0x08008b1b
 8008b54:	08008b1b 	.word	0x08008b1b
 8008b58:	08008b1b 	.word	0x08008b1b
 8008b5c:	08008b1b 	.word	0x08008b1b
 8008b60:	08008b1b 	.word	0x08008b1b
 8008b64:	08008b1b 	.word	0x08008b1b
 8008b68:	08008b1b 	.word	0x08008b1b
 8008b6c:	08008c67 	.word	0x08008c67
 8008b70:	08008c3d 	.word	0x08008c3d
 8008b74:	08008bcb 	.word	0x08008bcb
 8008b78:	08008bcb 	.word	0x08008bcb
 8008b7c:	08008bcb 	.word	0x08008bcb
 8008b80:	08008b1b 	.word	0x08008b1b
 8008b84:	08008c41 	.word	0x08008c41
 8008b88:	08008b1b 	.word	0x08008b1b
 8008b8c:	08008b1b 	.word	0x08008b1b
 8008b90:	08008b1b 	.word	0x08008b1b
 8008b94:	08008b1b 	.word	0x08008b1b
 8008b98:	08008c77 	.word	0x08008c77
 8008b9c:	08008c49 	.word	0x08008c49
 8008ba0:	08008beb 	.word	0x08008beb
 8008ba4:	08008b1b 	.word	0x08008b1b
 8008ba8:	08008b1b 	.word	0x08008b1b
 8008bac:	08008c73 	.word	0x08008c73
 8008bb0:	08008b1b 	.word	0x08008b1b
 8008bb4:	08008c3d 	.word	0x08008c3d
 8008bb8:	08008b1b 	.word	0x08008b1b
 8008bbc:	08008b1b 	.word	0x08008b1b
 8008bc0:	08008bf3 	.word	0x08008bf3
 8008bc4:	3b45      	subs	r3, #69	; 0x45
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d8a7      	bhi.n	8008b1a <__ssvfiscanf_r+0xee>
 8008bca:	2305      	movs	r3, #5
 8008bcc:	e01b      	b.n	8008c06 <__ssvfiscanf_r+0x1da>
 8008bce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4798      	blx	r3
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f43f af68 	beq.w	8008aac <__ssvfiscanf_r+0x80>
 8008bdc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f040 808d 	bne.w	8008cfe <__ssvfiscanf_r+0x2d2>
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008be8:	e08f      	b.n	8008d0a <__ssvfiscanf_r+0x2de>
 8008bea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008bec:	f042 0220 	orr.w	r2, r2, #32
 8008bf0:	9241      	str	r2, [sp, #260]	; 0x104
 8008bf2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bf8:	9241      	str	r2, [sp, #260]	; 0x104
 8008bfa:	2210      	movs	r2, #16
 8008bfc:	2b6f      	cmp	r3, #111	; 0x6f
 8008bfe:	9242      	str	r2, [sp, #264]	; 0x108
 8008c00:	bf34      	ite	cc
 8008c02:	2303      	movcc	r3, #3
 8008c04:	2304      	movcs	r3, #4
 8008c06:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c08:	6863      	ldr	r3, [r4, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dd42      	ble.n	8008c94 <__ssvfiscanf_r+0x268>
 8008c0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c10:	0659      	lsls	r1, r3, #25
 8008c12:	d404      	bmi.n	8008c1e <__ssvfiscanf_r+0x1f2>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	5cba      	ldrb	r2, [r7, r2]
 8008c1a:	0712      	lsls	r2, r2, #28
 8008c1c:	d441      	bmi.n	8008ca2 <__ssvfiscanf_r+0x276>
 8008c1e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	dc50      	bgt.n	8008cc6 <__ssvfiscanf_r+0x29a>
 8008c24:	466b      	mov	r3, sp
 8008c26:	4622      	mov	r2, r4
 8008c28:	a941      	add	r1, sp, #260	; 0x104
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f000 f9d0 	bl	8008fd0 <_scanf_chars>
 8008c30:	2801      	cmp	r0, #1
 8008c32:	d06e      	beq.n	8008d12 <__ssvfiscanf_r+0x2e6>
 8008c34:	2802      	cmp	r0, #2
 8008c36:	f47f af20 	bne.w	8008a7a <__ssvfiscanf_r+0x4e>
 8008c3a:	e7cf      	b.n	8008bdc <__ssvfiscanf_r+0x1b0>
 8008c3c:	220a      	movs	r2, #10
 8008c3e:	e7dd      	b.n	8008bfc <__ssvfiscanf_r+0x1d0>
 8008c40:	2300      	movs	r3, #0
 8008c42:	9342      	str	r3, [sp, #264]	; 0x108
 8008c44:	2303      	movs	r3, #3
 8008c46:	e7de      	b.n	8008c06 <__ssvfiscanf_r+0x1da>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	9342      	str	r3, [sp, #264]	; 0x108
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	e7da      	b.n	8008c06 <__ssvfiscanf_r+0x1da>
 8008c50:	4629      	mov	r1, r5
 8008c52:	4640      	mov	r0, r8
 8008c54:	f000 fb30 	bl	80092b8 <__sccl>
 8008c58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5e:	9341      	str	r3, [sp, #260]	; 0x104
 8008c60:	4605      	mov	r5, r0
 8008c62:	2301      	movs	r3, #1
 8008c64:	e7cf      	b.n	8008c06 <__ssvfiscanf_r+0x1da>
 8008c66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6c:	9341      	str	r3, [sp, #260]	; 0x104
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e7c9      	b.n	8008c06 <__ssvfiscanf_r+0x1da>
 8008c72:	2302      	movs	r3, #2
 8008c74:	e7c7      	b.n	8008c06 <__ssvfiscanf_r+0x1da>
 8008c76:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008c78:	06c3      	lsls	r3, r0, #27
 8008c7a:	f53f aefe 	bmi.w	8008a7a <__ssvfiscanf_r+0x4e>
 8008c7e:	9b00      	ldr	r3, [sp, #0]
 8008c80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c82:	1d19      	adds	r1, r3, #4
 8008c84:	9100      	str	r1, [sp, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f010 0f01 	tst.w	r0, #1
 8008c8c:	bf14      	ite	ne
 8008c8e:	801a      	strhne	r2, [r3, #0]
 8008c90:	601a      	streq	r2, [r3, #0]
 8008c92:	e6f2      	b.n	8008a7a <__ssvfiscanf_r+0x4e>
 8008c94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c96:	4621      	mov	r1, r4
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4798      	blx	r3
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d0b6      	beq.n	8008c0e <__ssvfiscanf_r+0x1e2>
 8008ca0:	e79c      	b.n	8008bdc <__ssvfiscanf_r+0x1b0>
 8008ca2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ca4:	3201      	adds	r2, #1
 8008ca6:	9245      	str	r2, [sp, #276]	; 0x114
 8008ca8:	6862      	ldr	r2, [r4, #4]
 8008caa:	3a01      	subs	r2, #1
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	6062      	str	r2, [r4, #4]
 8008cb0:	dd02      	ble.n	8008cb8 <__ssvfiscanf_r+0x28c>
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	e7ad      	b.n	8008c14 <__ssvfiscanf_r+0x1e8>
 8008cb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	4798      	blx	r3
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d0a7      	beq.n	8008c14 <__ssvfiscanf_r+0x1e8>
 8008cc4:	e78a      	b.n	8008bdc <__ssvfiscanf_r+0x1b0>
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	dc0e      	bgt.n	8008ce8 <__ssvfiscanf_r+0x2bc>
 8008cca:	466b      	mov	r3, sp
 8008ccc:	4622      	mov	r2, r4
 8008cce:	a941      	add	r1, sp, #260	; 0x104
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f000 f9d7 	bl	8009084 <_scanf_i>
 8008cd6:	e7ab      	b.n	8008c30 <__ssvfiscanf_r+0x204>
 8008cd8:	08008979 	.word	0x08008979
 8008cdc:	080089f3 	.word	0x080089f3
 8008ce0:	08009d7d 	.word	0x08009d7d
 8008ce4:	08009d14 	.word	0x08009d14
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <__ssvfiscanf_r+0x2ec>)
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f43f aec5 	beq.w	8008a7a <__ssvfiscanf_r+0x4e>
 8008cf0:	466b      	mov	r3, sp
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	a941      	add	r1, sp, #260	; 0x104
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f3af 8000 	nop.w
 8008cfc:	e798      	b.n	8008c30 <__ssvfiscanf_r+0x204>
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d04:	bf18      	it	ne
 8008d06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008d0a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d12:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d14:	e7f9      	b.n	8008d0a <__ssvfiscanf_r+0x2de>
 8008d16:	bf00      	nop
 8008d18:	00000000 	.word	0x00000000

08008d1c <__sfputc_r>:
 8008d1c:	6893      	ldr	r3, [r2, #8]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	b410      	push	{r4}
 8008d24:	6093      	str	r3, [r2, #8]
 8008d26:	da08      	bge.n	8008d3a <__sfputc_r+0x1e>
 8008d28:	6994      	ldr	r4, [r2, #24]
 8008d2a:	42a3      	cmp	r3, r4
 8008d2c:	db01      	blt.n	8008d32 <__sfputc_r+0x16>
 8008d2e:	290a      	cmp	r1, #10
 8008d30:	d103      	bne.n	8008d3a <__sfputc_r+0x1e>
 8008d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d36:	f7fe b809 	b.w	8006d4c <__swbuf_r>
 8008d3a:	6813      	ldr	r3, [r2, #0]
 8008d3c:	1c58      	adds	r0, r3, #1
 8008d3e:	6010      	str	r0, [r2, #0]
 8008d40:	7019      	strb	r1, [r3, #0]
 8008d42:	4608      	mov	r0, r1
 8008d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <__sfputs_r>:
 8008d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	460f      	mov	r7, r1
 8008d50:	4614      	mov	r4, r2
 8008d52:	18d5      	adds	r5, r2, r3
 8008d54:	42ac      	cmp	r4, r5
 8008d56:	d101      	bne.n	8008d5c <__sfputs_r+0x12>
 8008d58:	2000      	movs	r0, #0
 8008d5a:	e007      	b.n	8008d6c <__sfputs_r+0x22>
 8008d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d60:	463a      	mov	r2, r7
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff ffda 	bl	8008d1c <__sfputc_r>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d1f3      	bne.n	8008d54 <__sfputs_r+0xa>
 8008d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d70 <_vfiprintf_r>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	460d      	mov	r5, r1
 8008d76:	b09d      	sub	sp, #116	; 0x74
 8008d78:	4614      	mov	r4, r2
 8008d7a:	4698      	mov	r8, r3
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	b118      	cbz	r0, 8008d88 <_vfiprintf_r+0x18>
 8008d80:	6983      	ldr	r3, [r0, #24]
 8008d82:	b90b      	cbnz	r3, 8008d88 <_vfiprintf_r+0x18>
 8008d84:	f7ff f858 	bl	8007e38 <__sinit>
 8008d88:	4b89      	ldr	r3, [pc, #548]	; (8008fb0 <_vfiprintf_r+0x240>)
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	d11b      	bne.n	8008dc6 <_vfiprintf_r+0x56>
 8008d8e:	6875      	ldr	r5, [r6, #4]
 8008d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d92:	07d9      	lsls	r1, r3, #31
 8008d94:	d405      	bmi.n	8008da2 <_vfiprintf_r+0x32>
 8008d96:	89ab      	ldrh	r3, [r5, #12]
 8008d98:	059a      	lsls	r2, r3, #22
 8008d9a:	d402      	bmi.n	8008da2 <_vfiprintf_r+0x32>
 8008d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d9e:	f7ff f8ee 	bl	8007f7e <__retarget_lock_acquire_recursive>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	071b      	lsls	r3, r3, #28
 8008da6:	d501      	bpl.n	8008dac <_vfiprintf_r+0x3c>
 8008da8:	692b      	ldr	r3, [r5, #16]
 8008daa:	b9eb      	cbnz	r3, 8008de8 <_vfiprintf_r+0x78>
 8008dac:	4629      	mov	r1, r5
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7fe f830 	bl	8006e14 <__swsetup_r>
 8008db4:	b1c0      	cbz	r0, 8008de8 <_vfiprintf_r+0x78>
 8008db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db8:	07dc      	lsls	r4, r3, #31
 8008dba:	d50e      	bpl.n	8008dda <_vfiprintf_r+0x6a>
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dc0:	b01d      	add	sp, #116	; 0x74
 8008dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc6:	4b7b      	ldr	r3, [pc, #492]	; (8008fb4 <_vfiprintf_r+0x244>)
 8008dc8:	429d      	cmp	r5, r3
 8008dca:	d101      	bne.n	8008dd0 <_vfiprintf_r+0x60>
 8008dcc:	68b5      	ldr	r5, [r6, #8]
 8008dce:	e7df      	b.n	8008d90 <_vfiprintf_r+0x20>
 8008dd0:	4b79      	ldr	r3, [pc, #484]	; (8008fb8 <_vfiprintf_r+0x248>)
 8008dd2:	429d      	cmp	r5, r3
 8008dd4:	bf08      	it	eq
 8008dd6:	68f5      	ldreq	r5, [r6, #12]
 8008dd8:	e7da      	b.n	8008d90 <_vfiprintf_r+0x20>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	0598      	lsls	r0, r3, #22
 8008dde:	d4ed      	bmi.n	8008dbc <_vfiprintf_r+0x4c>
 8008de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008de2:	f7ff f8cd 	bl	8007f80 <__retarget_lock_release_recursive>
 8008de6:	e7e9      	b.n	8008dbc <_vfiprintf_r+0x4c>
 8008de8:	2300      	movs	r3, #0
 8008dea:	9309      	str	r3, [sp, #36]	; 0x24
 8008dec:	2320      	movs	r3, #32
 8008dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008df6:	2330      	movs	r3, #48	; 0x30
 8008df8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fbc <_vfiprintf_r+0x24c>
 8008dfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e00:	f04f 0901 	mov.w	r9, #1
 8008e04:	4623      	mov	r3, r4
 8008e06:	469a      	mov	sl, r3
 8008e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e0c:	b10a      	cbz	r2, 8008e12 <_vfiprintf_r+0xa2>
 8008e0e:	2a25      	cmp	r2, #37	; 0x25
 8008e10:	d1f9      	bne.n	8008e06 <_vfiprintf_r+0x96>
 8008e12:	ebba 0b04 	subs.w	fp, sl, r4
 8008e16:	d00b      	beq.n	8008e30 <_vfiprintf_r+0xc0>
 8008e18:	465b      	mov	r3, fp
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f7ff ff93 	bl	8008d4a <__sfputs_r>
 8008e24:	3001      	adds	r0, #1
 8008e26:	f000 80aa 	beq.w	8008f7e <_vfiprintf_r+0x20e>
 8008e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e2c:	445a      	add	r2, fp
 8008e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8008e30:	f89a 3000 	ldrb.w	r3, [sl]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80a2 	beq.w	8008f7e <_vfiprintf_r+0x20e>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e44:	f10a 0a01 	add.w	sl, sl, #1
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	9307      	str	r3, [sp, #28]
 8008e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e50:	931a      	str	r3, [sp, #104]	; 0x68
 8008e52:	4654      	mov	r4, sl
 8008e54:	2205      	movs	r2, #5
 8008e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5a:	4858      	ldr	r0, [pc, #352]	; (8008fbc <_vfiprintf_r+0x24c>)
 8008e5c:	f7f7 f9c8 	bl	80001f0 <memchr>
 8008e60:	9a04      	ldr	r2, [sp, #16]
 8008e62:	b9d8      	cbnz	r0, 8008e9c <_vfiprintf_r+0x12c>
 8008e64:	06d1      	lsls	r1, r2, #27
 8008e66:	bf44      	itt	mi
 8008e68:	2320      	movmi	r3, #32
 8008e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e6e:	0713      	lsls	r3, r2, #28
 8008e70:	bf44      	itt	mi
 8008e72:	232b      	movmi	r3, #43	; 0x2b
 8008e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e78:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e7e:	d015      	beq.n	8008eac <_vfiprintf_r+0x13c>
 8008e80:	9a07      	ldr	r2, [sp, #28]
 8008e82:	4654      	mov	r4, sl
 8008e84:	2000      	movs	r0, #0
 8008e86:	f04f 0c0a 	mov.w	ip, #10
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e90:	3b30      	subs	r3, #48	; 0x30
 8008e92:	2b09      	cmp	r3, #9
 8008e94:	d94e      	bls.n	8008f34 <_vfiprintf_r+0x1c4>
 8008e96:	b1b0      	cbz	r0, 8008ec6 <_vfiprintf_r+0x156>
 8008e98:	9207      	str	r2, [sp, #28]
 8008e9a:	e014      	b.n	8008ec6 <_vfiprintf_r+0x156>
 8008e9c:	eba0 0308 	sub.w	r3, r0, r8
 8008ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	9304      	str	r3, [sp, #16]
 8008ea8:	46a2      	mov	sl, r4
 8008eaa:	e7d2      	b.n	8008e52 <_vfiprintf_r+0xe2>
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	1d19      	adds	r1, r3, #4
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	9103      	str	r1, [sp, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bfbb      	ittet	lt
 8008eb8:	425b      	neglt	r3, r3
 8008eba:	f042 0202 	orrlt.w	r2, r2, #2
 8008ebe:	9307      	strge	r3, [sp, #28]
 8008ec0:	9307      	strlt	r3, [sp, #28]
 8008ec2:	bfb8      	it	lt
 8008ec4:	9204      	strlt	r2, [sp, #16]
 8008ec6:	7823      	ldrb	r3, [r4, #0]
 8008ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8008eca:	d10c      	bne.n	8008ee6 <_vfiprintf_r+0x176>
 8008ecc:	7863      	ldrb	r3, [r4, #1]
 8008ece:	2b2a      	cmp	r3, #42	; 0x2a
 8008ed0:	d135      	bne.n	8008f3e <_vfiprintf_r+0x1ce>
 8008ed2:	9b03      	ldr	r3, [sp, #12]
 8008ed4:	1d1a      	adds	r2, r3, #4
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	9203      	str	r2, [sp, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	bfb8      	it	lt
 8008ede:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ee2:	3402      	adds	r4, #2
 8008ee4:	9305      	str	r3, [sp, #20]
 8008ee6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fcc <_vfiprintf_r+0x25c>
 8008eea:	7821      	ldrb	r1, [r4, #0]
 8008eec:	2203      	movs	r2, #3
 8008eee:	4650      	mov	r0, sl
 8008ef0:	f7f7 f97e 	bl	80001f0 <memchr>
 8008ef4:	b140      	cbz	r0, 8008f08 <_vfiprintf_r+0x198>
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	eba0 000a 	sub.w	r0, r0, sl
 8008efc:	fa03 f000 	lsl.w	r0, r3, r0
 8008f00:	9b04      	ldr	r3, [sp, #16]
 8008f02:	4303      	orrs	r3, r0
 8008f04:	3401      	adds	r4, #1
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0c:	482c      	ldr	r0, [pc, #176]	; (8008fc0 <_vfiprintf_r+0x250>)
 8008f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f12:	2206      	movs	r2, #6
 8008f14:	f7f7 f96c 	bl	80001f0 <memchr>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d03f      	beq.n	8008f9c <_vfiprintf_r+0x22c>
 8008f1c:	4b29      	ldr	r3, [pc, #164]	; (8008fc4 <_vfiprintf_r+0x254>)
 8008f1e:	bb1b      	cbnz	r3, 8008f68 <_vfiprintf_r+0x1f8>
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	3307      	adds	r3, #7
 8008f24:	f023 0307 	bic.w	r3, r3, #7
 8008f28:	3308      	adds	r3, #8
 8008f2a:	9303      	str	r3, [sp, #12]
 8008f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2e:	443b      	add	r3, r7
 8008f30:	9309      	str	r3, [sp, #36]	; 0x24
 8008f32:	e767      	b.n	8008e04 <_vfiprintf_r+0x94>
 8008f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f38:	460c      	mov	r4, r1
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	e7a5      	b.n	8008e8a <_vfiprintf_r+0x11a>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	3401      	adds	r4, #1
 8008f42:	9305      	str	r3, [sp, #20]
 8008f44:	4619      	mov	r1, r3
 8008f46:	f04f 0c0a 	mov.w	ip, #10
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f50:	3a30      	subs	r2, #48	; 0x30
 8008f52:	2a09      	cmp	r2, #9
 8008f54:	d903      	bls.n	8008f5e <_vfiprintf_r+0x1ee>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0c5      	beq.n	8008ee6 <_vfiprintf_r+0x176>
 8008f5a:	9105      	str	r1, [sp, #20]
 8008f5c:	e7c3      	b.n	8008ee6 <_vfiprintf_r+0x176>
 8008f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f62:	4604      	mov	r4, r0
 8008f64:	2301      	movs	r3, #1
 8008f66:	e7f0      	b.n	8008f4a <_vfiprintf_r+0x1da>
 8008f68:	ab03      	add	r3, sp, #12
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	4b16      	ldr	r3, [pc, #88]	; (8008fc8 <_vfiprintf_r+0x258>)
 8008f70:	a904      	add	r1, sp, #16
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7fd fa20 	bl	80063b8 <_printf_float>
 8008f78:	4607      	mov	r7, r0
 8008f7a:	1c78      	adds	r0, r7, #1
 8008f7c:	d1d6      	bne.n	8008f2c <_vfiprintf_r+0x1bc>
 8008f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f80:	07d9      	lsls	r1, r3, #31
 8008f82:	d405      	bmi.n	8008f90 <_vfiprintf_r+0x220>
 8008f84:	89ab      	ldrh	r3, [r5, #12]
 8008f86:	059a      	lsls	r2, r3, #22
 8008f88:	d402      	bmi.n	8008f90 <_vfiprintf_r+0x220>
 8008f8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f8c:	f7fe fff8 	bl	8007f80 <__retarget_lock_release_recursive>
 8008f90:	89ab      	ldrh	r3, [r5, #12]
 8008f92:	065b      	lsls	r3, r3, #25
 8008f94:	f53f af12 	bmi.w	8008dbc <_vfiprintf_r+0x4c>
 8008f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f9a:	e711      	b.n	8008dc0 <_vfiprintf_r+0x50>
 8008f9c:	ab03      	add	r3, sp, #12
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	462a      	mov	r2, r5
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <_vfiprintf_r+0x258>)
 8008fa4:	a904      	add	r1, sp, #16
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7fd fcaa 	bl	8006900 <_printf_i>
 8008fac:	e7e4      	b.n	8008f78 <_vfiprintf_r+0x208>
 8008fae:	bf00      	nop
 8008fb0:	08009b7c 	.word	0x08009b7c
 8008fb4:	08009b9c 	.word	0x08009b9c
 8008fb8:	08009b5c 	.word	0x08009b5c
 8008fbc:	08009d18 	.word	0x08009d18
 8008fc0:	08009d1e 	.word	0x08009d1e
 8008fc4:	080063b9 	.word	0x080063b9
 8008fc8:	08008d4b 	.word	0x08008d4b
 8008fcc:	08009d14 	.word	0x08009d14

08008fd0 <_scanf_chars>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	688a      	ldr	r2, [r1, #8]
 8008fd8:	4680      	mov	r8, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b932      	cbnz	r2, 8008fec <_scanf_chars+0x1c>
 8008fde:	698a      	ldr	r2, [r1, #24]
 8008fe0:	2a00      	cmp	r2, #0
 8008fe2:	bf0c      	ite	eq
 8008fe4:	2201      	moveq	r2, #1
 8008fe6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008fea:	608a      	str	r2, [r1, #8]
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009080 <_scanf_chars+0xb0>
 8008ff2:	06d1      	lsls	r1, r2, #27
 8008ff4:	bf5f      	itttt	pl
 8008ff6:	681a      	ldrpl	r2, [r3, #0]
 8008ff8:	1d11      	addpl	r1, r2, #4
 8008ffa:	6019      	strpl	r1, [r3, #0]
 8008ffc:	6816      	ldrpl	r6, [r2, #0]
 8008ffe:	2700      	movs	r7, #0
 8009000:	69a0      	ldr	r0, [r4, #24]
 8009002:	b188      	cbz	r0, 8009028 <_scanf_chars+0x58>
 8009004:	2801      	cmp	r0, #1
 8009006:	d107      	bne.n	8009018 <_scanf_chars+0x48>
 8009008:	682a      	ldr	r2, [r5, #0]
 800900a:	7811      	ldrb	r1, [r2, #0]
 800900c:	6962      	ldr	r2, [r4, #20]
 800900e:	5c52      	ldrb	r2, [r2, r1]
 8009010:	b952      	cbnz	r2, 8009028 <_scanf_chars+0x58>
 8009012:	2f00      	cmp	r7, #0
 8009014:	d031      	beq.n	800907a <_scanf_chars+0xaa>
 8009016:	e022      	b.n	800905e <_scanf_chars+0x8e>
 8009018:	2802      	cmp	r0, #2
 800901a:	d120      	bne.n	800905e <_scanf_chars+0x8e>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009024:	071b      	lsls	r3, r3, #28
 8009026:	d41a      	bmi.n	800905e <_scanf_chars+0x8e>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	06da      	lsls	r2, r3, #27
 800902c:	bf5e      	ittt	pl
 800902e:	682b      	ldrpl	r3, [r5, #0]
 8009030:	781b      	ldrbpl	r3, [r3, #0]
 8009032:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009036:	682a      	ldr	r2, [r5, #0]
 8009038:	686b      	ldr	r3, [r5, #4]
 800903a:	3201      	adds	r2, #1
 800903c:	602a      	str	r2, [r5, #0]
 800903e:	68a2      	ldr	r2, [r4, #8]
 8009040:	3b01      	subs	r3, #1
 8009042:	3a01      	subs	r2, #1
 8009044:	606b      	str	r3, [r5, #4]
 8009046:	3701      	adds	r7, #1
 8009048:	60a2      	str	r2, [r4, #8]
 800904a:	b142      	cbz	r2, 800905e <_scanf_chars+0x8e>
 800904c:	2b00      	cmp	r3, #0
 800904e:	dcd7      	bgt.n	8009000 <_scanf_chars+0x30>
 8009050:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009054:	4629      	mov	r1, r5
 8009056:	4640      	mov	r0, r8
 8009058:	4798      	blx	r3
 800905a:	2800      	cmp	r0, #0
 800905c:	d0d0      	beq.n	8009000 <_scanf_chars+0x30>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	f013 0310 	ands.w	r3, r3, #16
 8009064:	d105      	bne.n	8009072 <_scanf_chars+0xa2>
 8009066:	68e2      	ldr	r2, [r4, #12]
 8009068:	3201      	adds	r2, #1
 800906a:	60e2      	str	r2, [r4, #12]
 800906c:	69a2      	ldr	r2, [r4, #24]
 800906e:	b102      	cbz	r2, 8009072 <_scanf_chars+0xa2>
 8009070:	7033      	strb	r3, [r6, #0]
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	443b      	add	r3, r7
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	2000      	movs	r0, #0
 800907a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800907e:	bf00      	nop
 8009080:	08009d7d 	.word	0x08009d7d

08009084 <_scanf_i>:
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	4698      	mov	r8, r3
 800908a:	4b76      	ldr	r3, [pc, #472]	; (8009264 <_scanf_i+0x1e0>)
 800908c:	460c      	mov	r4, r1
 800908e:	4682      	mov	sl, r0
 8009090:	4616      	mov	r6, r2
 8009092:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009096:	b087      	sub	sp, #28
 8009098:	ab03      	add	r3, sp, #12
 800909a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800909e:	4b72      	ldr	r3, [pc, #456]	; (8009268 <_scanf_i+0x1e4>)
 80090a0:	69a1      	ldr	r1, [r4, #24]
 80090a2:	4a72      	ldr	r2, [pc, #456]	; (800926c <_scanf_i+0x1e8>)
 80090a4:	2903      	cmp	r1, #3
 80090a6:	bf18      	it	ne
 80090a8:	461a      	movne	r2, r3
 80090aa:	68a3      	ldr	r3, [r4, #8]
 80090ac:	9201      	str	r2, [sp, #4]
 80090ae:	1e5a      	subs	r2, r3, #1
 80090b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80090b4:	bf88      	it	hi
 80090b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80090ba:	4627      	mov	r7, r4
 80090bc:	bf82      	ittt	hi
 80090be:	eb03 0905 	addhi.w	r9, r3, r5
 80090c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090c6:	60a3      	strhi	r3, [r4, #8]
 80090c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80090cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80090d0:	bf98      	it	ls
 80090d2:	f04f 0900 	movls.w	r9, #0
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	463d      	mov	r5, r7
 80090da:	f04f 0b00 	mov.w	fp, #0
 80090de:	6831      	ldr	r1, [r6, #0]
 80090e0:	ab03      	add	r3, sp, #12
 80090e2:	7809      	ldrb	r1, [r1, #0]
 80090e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80090e8:	2202      	movs	r2, #2
 80090ea:	f7f7 f881 	bl	80001f0 <memchr>
 80090ee:	b328      	cbz	r0, 800913c <_scanf_i+0xb8>
 80090f0:	f1bb 0f01 	cmp.w	fp, #1
 80090f4:	d159      	bne.n	80091aa <_scanf_i+0x126>
 80090f6:	6862      	ldr	r2, [r4, #4]
 80090f8:	b92a      	cbnz	r2, 8009106 <_scanf_i+0x82>
 80090fa:	6822      	ldr	r2, [r4, #0]
 80090fc:	2308      	movs	r3, #8
 80090fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	6022      	str	r2, [r4, #0]
 8009106:	6822      	ldr	r2, [r4, #0]
 8009108:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800910c:	6022      	str	r2, [r4, #0]
 800910e:	68a2      	ldr	r2, [r4, #8]
 8009110:	1e51      	subs	r1, r2, #1
 8009112:	60a1      	str	r1, [r4, #8]
 8009114:	b192      	cbz	r2, 800913c <_scanf_i+0xb8>
 8009116:	6832      	ldr	r2, [r6, #0]
 8009118:	1c51      	adds	r1, r2, #1
 800911a:	6031      	str	r1, [r6, #0]
 800911c:	7812      	ldrb	r2, [r2, #0]
 800911e:	f805 2b01 	strb.w	r2, [r5], #1
 8009122:	6872      	ldr	r2, [r6, #4]
 8009124:	3a01      	subs	r2, #1
 8009126:	2a00      	cmp	r2, #0
 8009128:	6072      	str	r2, [r6, #4]
 800912a:	dc07      	bgt.n	800913c <_scanf_i+0xb8>
 800912c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009130:	4631      	mov	r1, r6
 8009132:	4650      	mov	r0, sl
 8009134:	4790      	blx	r2
 8009136:	2800      	cmp	r0, #0
 8009138:	f040 8085 	bne.w	8009246 <_scanf_i+0x1c2>
 800913c:	f10b 0b01 	add.w	fp, fp, #1
 8009140:	f1bb 0f03 	cmp.w	fp, #3
 8009144:	d1cb      	bne.n	80090de <_scanf_i+0x5a>
 8009146:	6863      	ldr	r3, [r4, #4]
 8009148:	b90b      	cbnz	r3, 800914e <_scanf_i+0xca>
 800914a:	230a      	movs	r3, #10
 800914c:	6063      	str	r3, [r4, #4]
 800914e:	6863      	ldr	r3, [r4, #4]
 8009150:	4947      	ldr	r1, [pc, #284]	; (8009270 <_scanf_i+0x1ec>)
 8009152:	6960      	ldr	r0, [r4, #20]
 8009154:	1ac9      	subs	r1, r1, r3
 8009156:	f000 f8af 	bl	80092b8 <__sccl>
 800915a:	f04f 0b00 	mov.w	fp, #0
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	6822      	ldr	r2, [r4, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d03d      	beq.n	80091e2 <_scanf_i+0x15e>
 8009166:	6831      	ldr	r1, [r6, #0]
 8009168:	6960      	ldr	r0, [r4, #20]
 800916a:	f891 c000 	ldrb.w	ip, [r1]
 800916e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009172:	2800      	cmp	r0, #0
 8009174:	d035      	beq.n	80091e2 <_scanf_i+0x15e>
 8009176:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800917a:	d124      	bne.n	80091c6 <_scanf_i+0x142>
 800917c:	0510      	lsls	r0, r2, #20
 800917e:	d522      	bpl.n	80091c6 <_scanf_i+0x142>
 8009180:	f10b 0b01 	add.w	fp, fp, #1
 8009184:	f1b9 0f00 	cmp.w	r9, #0
 8009188:	d003      	beq.n	8009192 <_scanf_i+0x10e>
 800918a:	3301      	adds	r3, #1
 800918c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009190:	60a3      	str	r3, [r4, #8]
 8009192:	6873      	ldr	r3, [r6, #4]
 8009194:	3b01      	subs	r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	6073      	str	r3, [r6, #4]
 800919a:	dd1b      	ble.n	80091d4 <_scanf_i+0x150>
 800919c:	6833      	ldr	r3, [r6, #0]
 800919e:	3301      	adds	r3, #1
 80091a0:	6033      	str	r3, [r6, #0]
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	60a3      	str	r3, [r4, #8]
 80091a8:	e7d9      	b.n	800915e <_scanf_i+0xda>
 80091aa:	f1bb 0f02 	cmp.w	fp, #2
 80091ae:	d1ae      	bne.n	800910e <_scanf_i+0x8a>
 80091b0:	6822      	ldr	r2, [r4, #0]
 80091b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80091b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80091ba:	d1bf      	bne.n	800913c <_scanf_i+0xb8>
 80091bc:	2310      	movs	r3, #16
 80091be:	6063      	str	r3, [r4, #4]
 80091c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091c4:	e7a2      	b.n	800910c <_scanf_i+0x88>
 80091c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80091ca:	6022      	str	r2, [r4, #0]
 80091cc:	780b      	ldrb	r3, [r1, #0]
 80091ce:	f805 3b01 	strb.w	r3, [r5], #1
 80091d2:	e7de      	b.n	8009192 <_scanf_i+0x10e>
 80091d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091d8:	4631      	mov	r1, r6
 80091da:	4650      	mov	r0, sl
 80091dc:	4798      	blx	r3
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0df      	beq.n	80091a2 <_scanf_i+0x11e>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	05db      	lsls	r3, r3, #23
 80091e6:	d50d      	bpl.n	8009204 <_scanf_i+0x180>
 80091e8:	42bd      	cmp	r5, r7
 80091ea:	d909      	bls.n	8009200 <_scanf_i+0x17c>
 80091ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80091f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091f4:	4632      	mov	r2, r6
 80091f6:	4650      	mov	r0, sl
 80091f8:	4798      	blx	r3
 80091fa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80091fe:	464d      	mov	r5, r9
 8009200:	42bd      	cmp	r5, r7
 8009202:	d02d      	beq.n	8009260 <_scanf_i+0x1dc>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	f012 0210 	ands.w	r2, r2, #16
 800920a:	d113      	bne.n	8009234 <_scanf_i+0x1b0>
 800920c:	702a      	strb	r2, [r5, #0]
 800920e:	6863      	ldr	r3, [r4, #4]
 8009210:	9e01      	ldr	r6, [sp, #4]
 8009212:	4639      	mov	r1, r7
 8009214:	4650      	mov	r0, sl
 8009216:	47b0      	blx	r6
 8009218:	6821      	ldr	r1, [r4, #0]
 800921a:	f8d8 3000 	ldr.w	r3, [r8]
 800921e:	f011 0f20 	tst.w	r1, #32
 8009222:	d013      	beq.n	800924c <_scanf_i+0x1c8>
 8009224:	1d1a      	adds	r2, r3, #4
 8009226:	f8c8 2000 	str.w	r2, [r8]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6018      	str	r0, [r3, #0]
 800922e:	68e3      	ldr	r3, [r4, #12]
 8009230:	3301      	adds	r3, #1
 8009232:	60e3      	str	r3, [r4, #12]
 8009234:	1bed      	subs	r5, r5, r7
 8009236:	44ab      	add	fp, r5
 8009238:	6925      	ldr	r5, [r4, #16]
 800923a:	445d      	add	r5, fp
 800923c:	6125      	str	r5, [r4, #16]
 800923e:	2000      	movs	r0, #0
 8009240:	b007      	add	sp, #28
 8009242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009246:	f04f 0b00 	mov.w	fp, #0
 800924a:	e7ca      	b.n	80091e2 <_scanf_i+0x15e>
 800924c:	1d1a      	adds	r2, r3, #4
 800924e:	f8c8 2000 	str.w	r2, [r8]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f011 0f01 	tst.w	r1, #1
 8009258:	bf14      	ite	ne
 800925a:	8018      	strhne	r0, [r3, #0]
 800925c:	6018      	streq	r0, [r3, #0]
 800925e:	e7e6      	b.n	800922e <_scanf_i+0x1aa>
 8009260:	2001      	movs	r0, #1
 8009262:	e7ed      	b.n	8009240 <_scanf_i+0x1bc>
 8009264:	08009a68 	.word	0x08009a68
 8009268:	08009515 	.word	0x08009515
 800926c:	0800942d 	.word	0x0800942d
 8009270:	08009d3e 	.word	0x08009d3e

08009274 <_read_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	; (8009294 <_read_r+0x20>)
 8009278:	4604      	mov	r4, r0
 800927a:	4608      	mov	r0, r1
 800927c:	4611      	mov	r1, r2
 800927e:	2200      	movs	r2, #0
 8009280:	602a      	str	r2, [r5, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	f7f9 f922 	bl	80024cc <_read>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_read_r+0x1e>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_read_r+0x1e>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	20000508 	.word	0x20000508

08009298 <_sbrk_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_sbrk_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f9 f964 	bl	8002570 <_sbrk>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_sbrk_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_sbrk_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20000508 	.word	0x20000508

080092b8 <__sccl>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	780b      	ldrb	r3, [r1, #0]
 80092bc:	4604      	mov	r4, r0
 80092be:	2b5e      	cmp	r3, #94	; 0x5e
 80092c0:	bf0b      	itete	eq
 80092c2:	784b      	ldrbeq	r3, [r1, #1]
 80092c4:	1c48      	addne	r0, r1, #1
 80092c6:	1c88      	addeq	r0, r1, #2
 80092c8:	2200      	movne	r2, #0
 80092ca:	bf08      	it	eq
 80092cc:	2201      	moveq	r2, #1
 80092ce:	1e61      	subs	r1, r4, #1
 80092d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80092d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80092d8:	42a9      	cmp	r1, r5
 80092da:	d1fb      	bne.n	80092d4 <__sccl+0x1c>
 80092dc:	b90b      	cbnz	r3, 80092e2 <__sccl+0x2a>
 80092de:	3801      	subs	r0, #1
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
 80092e2:	f082 0201 	eor.w	r2, r2, #1
 80092e6:	54e2      	strb	r2, [r4, r3]
 80092e8:	4605      	mov	r5, r0
 80092ea:	4628      	mov	r0, r5
 80092ec:	f810 1b01 	ldrb.w	r1, [r0], #1
 80092f0:	292d      	cmp	r1, #45	; 0x2d
 80092f2:	d006      	beq.n	8009302 <__sccl+0x4a>
 80092f4:	295d      	cmp	r1, #93	; 0x5d
 80092f6:	d0f3      	beq.n	80092e0 <__sccl+0x28>
 80092f8:	b909      	cbnz	r1, 80092fe <__sccl+0x46>
 80092fa:	4628      	mov	r0, r5
 80092fc:	e7f0      	b.n	80092e0 <__sccl+0x28>
 80092fe:	460b      	mov	r3, r1
 8009300:	e7f1      	b.n	80092e6 <__sccl+0x2e>
 8009302:	786e      	ldrb	r6, [r5, #1]
 8009304:	2e5d      	cmp	r6, #93	; 0x5d
 8009306:	d0fa      	beq.n	80092fe <__sccl+0x46>
 8009308:	42b3      	cmp	r3, r6
 800930a:	dcf8      	bgt.n	80092fe <__sccl+0x46>
 800930c:	3502      	adds	r5, #2
 800930e:	4619      	mov	r1, r3
 8009310:	3101      	adds	r1, #1
 8009312:	428e      	cmp	r6, r1
 8009314:	5462      	strb	r2, [r4, r1]
 8009316:	dcfb      	bgt.n	8009310 <__sccl+0x58>
 8009318:	1af1      	subs	r1, r6, r3
 800931a:	3901      	subs	r1, #1
 800931c:	1c58      	adds	r0, r3, #1
 800931e:	42b3      	cmp	r3, r6
 8009320:	bfa8      	it	ge
 8009322:	2100      	movge	r1, #0
 8009324:	1843      	adds	r3, r0, r1
 8009326:	e7e0      	b.n	80092ea <__sccl+0x32>

08009328 <_strtol_l.constprop.0>:
 8009328:	2b01      	cmp	r3, #1
 800932a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932e:	d001      	beq.n	8009334 <_strtol_l.constprop.0+0xc>
 8009330:	2b24      	cmp	r3, #36	; 0x24
 8009332:	d906      	bls.n	8009342 <_strtol_l.constprop.0+0x1a>
 8009334:	f7fc ff60 	bl	80061f8 <__errno>
 8009338:	2316      	movs	r3, #22
 800933a:	6003      	str	r3, [r0, #0]
 800933c:	2000      	movs	r0, #0
 800933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009342:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009428 <_strtol_l.constprop.0+0x100>
 8009346:	460d      	mov	r5, r1
 8009348:	462e      	mov	r6, r5
 800934a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800934e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009352:	f017 0708 	ands.w	r7, r7, #8
 8009356:	d1f7      	bne.n	8009348 <_strtol_l.constprop.0+0x20>
 8009358:	2c2d      	cmp	r4, #45	; 0x2d
 800935a:	d132      	bne.n	80093c2 <_strtol_l.constprop.0+0x9a>
 800935c:	782c      	ldrb	r4, [r5, #0]
 800935e:	2701      	movs	r7, #1
 8009360:	1cb5      	adds	r5, r6, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d05b      	beq.n	800941e <_strtol_l.constprop.0+0xf6>
 8009366:	2b10      	cmp	r3, #16
 8009368:	d109      	bne.n	800937e <_strtol_l.constprop.0+0x56>
 800936a:	2c30      	cmp	r4, #48	; 0x30
 800936c:	d107      	bne.n	800937e <_strtol_l.constprop.0+0x56>
 800936e:	782c      	ldrb	r4, [r5, #0]
 8009370:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009374:	2c58      	cmp	r4, #88	; 0x58
 8009376:	d14d      	bne.n	8009414 <_strtol_l.constprop.0+0xec>
 8009378:	786c      	ldrb	r4, [r5, #1]
 800937a:	2310      	movs	r3, #16
 800937c:	3502      	adds	r5, #2
 800937e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009382:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009386:	f04f 0c00 	mov.w	ip, #0
 800938a:	fbb8 f9f3 	udiv	r9, r8, r3
 800938e:	4666      	mov	r6, ip
 8009390:	fb03 8a19 	mls	sl, r3, r9, r8
 8009394:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009398:	f1be 0f09 	cmp.w	lr, #9
 800939c:	d816      	bhi.n	80093cc <_strtol_l.constprop.0+0xa4>
 800939e:	4674      	mov	r4, lr
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	dd24      	ble.n	80093ee <_strtol_l.constprop.0+0xc6>
 80093a4:	f1bc 0f00 	cmp.w	ip, #0
 80093a8:	db1e      	blt.n	80093e8 <_strtol_l.constprop.0+0xc0>
 80093aa:	45b1      	cmp	r9, r6
 80093ac:	d31c      	bcc.n	80093e8 <_strtol_l.constprop.0+0xc0>
 80093ae:	d101      	bne.n	80093b4 <_strtol_l.constprop.0+0x8c>
 80093b0:	45a2      	cmp	sl, r4
 80093b2:	db19      	blt.n	80093e8 <_strtol_l.constprop.0+0xc0>
 80093b4:	fb06 4603 	mla	r6, r6, r3, r4
 80093b8:	f04f 0c01 	mov.w	ip, #1
 80093bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093c0:	e7e8      	b.n	8009394 <_strtol_l.constprop.0+0x6c>
 80093c2:	2c2b      	cmp	r4, #43	; 0x2b
 80093c4:	bf04      	itt	eq
 80093c6:	782c      	ldrbeq	r4, [r5, #0]
 80093c8:	1cb5      	addeq	r5, r6, #2
 80093ca:	e7ca      	b.n	8009362 <_strtol_l.constprop.0+0x3a>
 80093cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80093d0:	f1be 0f19 	cmp.w	lr, #25
 80093d4:	d801      	bhi.n	80093da <_strtol_l.constprop.0+0xb2>
 80093d6:	3c37      	subs	r4, #55	; 0x37
 80093d8:	e7e2      	b.n	80093a0 <_strtol_l.constprop.0+0x78>
 80093da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80093de:	f1be 0f19 	cmp.w	lr, #25
 80093e2:	d804      	bhi.n	80093ee <_strtol_l.constprop.0+0xc6>
 80093e4:	3c57      	subs	r4, #87	; 0x57
 80093e6:	e7db      	b.n	80093a0 <_strtol_l.constprop.0+0x78>
 80093e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80093ec:	e7e6      	b.n	80093bc <_strtol_l.constprop.0+0x94>
 80093ee:	f1bc 0f00 	cmp.w	ip, #0
 80093f2:	da05      	bge.n	8009400 <_strtol_l.constprop.0+0xd8>
 80093f4:	2322      	movs	r3, #34	; 0x22
 80093f6:	6003      	str	r3, [r0, #0]
 80093f8:	4646      	mov	r6, r8
 80093fa:	b942      	cbnz	r2, 800940e <_strtol_l.constprop.0+0xe6>
 80093fc:	4630      	mov	r0, r6
 80093fe:	e79e      	b.n	800933e <_strtol_l.constprop.0+0x16>
 8009400:	b107      	cbz	r7, 8009404 <_strtol_l.constprop.0+0xdc>
 8009402:	4276      	negs	r6, r6
 8009404:	2a00      	cmp	r2, #0
 8009406:	d0f9      	beq.n	80093fc <_strtol_l.constprop.0+0xd4>
 8009408:	f1bc 0f00 	cmp.w	ip, #0
 800940c:	d000      	beq.n	8009410 <_strtol_l.constprop.0+0xe8>
 800940e:	1e69      	subs	r1, r5, #1
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	e7f3      	b.n	80093fc <_strtol_l.constprop.0+0xd4>
 8009414:	2430      	movs	r4, #48	; 0x30
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1b1      	bne.n	800937e <_strtol_l.constprop.0+0x56>
 800941a:	2308      	movs	r3, #8
 800941c:	e7af      	b.n	800937e <_strtol_l.constprop.0+0x56>
 800941e:	2c30      	cmp	r4, #48	; 0x30
 8009420:	d0a5      	beq.n	800936e <_strtol_l.constprop.0+0x46>
 8009422:	230a      	movs	r3, #10
 8009424:	e7ab      	b.n	800937e <_strtol_l.constprop.0+0x56>
 8009426:	bf00      	nop
 8009428:	08009d7d 	.word	0x08009d7d

0800942c <_strtol_r>:
 800942c:	f7ff bf7c 	b.w	8009328 <_strtol_l.constprop.0>

08009430 <_strtoul_l.constprop.0>:
 8009430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009434:	4f36      	ldr	r7, [pc, #216]	; (8009510 <_strtoul_l.constprop.0+0xe0>)
 8009436:	4686      	mov	lr, r0
 8009438:	460d      	mov	r5, r1
 800943a:	4628      	mov	r0, r5
 800943c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009440:	5de6      	ldrb	r6, [r4, r7]
 8009442:	f016 0608 	ands.w	r6, r6, #8
 8009446:	d1f8      	bne.n	800943a <_strtoul_l.constprop.0+0xa>
 8009448:	2c2d      	cmp	r4, #45	; 0x2d
 800944a:	d12f      	bne.n	80094ac <_strtoul_l.constprop.0+0x7c>
 800944c:	782c      	ldrb	r4, [r5, #0]
 800944e:	2601      	movs	r6, #1
 8009450:	1c85      	adds	r5, r0, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d057      	beq.n	8009506 <_strtoul_l.constprop.0+0xd6>
 8009456:	2b10      	cmp	r3, #16
 8009458:	d109      	bne.n	800946e <_strtoul_l.constprop.0+0x3e>
 800945a:	2c30      	cmp	r4, #48	; 0x30
 800945c:	d107      	bne.n	800946e <_strtoul_l.constprop.0+0x3e>
 800945e:	7828      	ldrb	r0, [r5, #0]
 8009460:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009464:	2858      	cmp	r0, #88	; 0x58
 8009466:	d149      	bne.n	80094fc <_strtoul_l.constprop.0+0xcc>
 8009468:	786c      	ldrb	r4, [r5, #1]
 800946a:	2310      	movs	r3, #16
 800946c:	3502      	adds	r5, #2
 800946e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009472:	2700      	movs	r7, #0
 8009474:	fbb8 f8f3 	udiv	r8, r8, r3
 8009478:	fb03 f908 	mul.w	r9, r3, r8
 800947c:	ea6f 0909 	mvn.w	r9, r9
 8009480:	4638      	mov	r0, r7
 8009482:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009486:	f1bc 0f09 	cmp.w	ip, #9
 800948a:	d814      	bhi.n	80094b6 <_strtoul_l.constprop.0+0x86>
 800948c:	4664      	mov	r4, ip
 800948e:	42a3      	cmp	r3, r4
 8009490:	dd22      	ble.n	80094d8 <_strtoul_l.constprop.0+0xa8>
 8009492:	2f00      	cmp	r7, #0
 8009494:	db1d      	blt.n	80094d2 <_strtoul_l.constprop.0+0xa2>
 8009496:	4580      	cmp	r8, r0
 8009498:	d31b      	bcc.n	80094d2 <_strtoul_l.constprop.0+0xa2>
 800949a:	d101      	bne.n	80094a0 <_strtoul_l.constprop.0+0x70>
 800949c:	45a1      	cmp	r9, r4
 800949e:	db18      	blt.n	80094d2 <_strtoul_l.constprop.0+0xa2>
 80094a0:	fb00 4003 	mla	r0, r0, r3, r4
 80094a4:	2701      	movs	r7, #1
 80094a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094aa:	e7ea      	b.n	8009482 <_strtoul_l.constprop.0+0x52>
 80094ac:	2c2b      	cmp	r4, #43	; 0x2b
 80094ae:	bf04      	itt	eq
 80094b0:	782c      	ldrbeq	r4, [r5, #0]
 80094b2:	1c85      	addeq	r5, r0, #2
 80094b4:	e7cd      	b.n	8009452 <_strtoul_l.constprop.0+0x22>
 80094b6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80094ba:	f1bc 0f19 	cmp.w	ip, #25
 80094be:	d801      	bhi.n	80094c4 <_strtoul_l.constprop.0+0x94>
 80094c0:	3c37      	subs	r4, #55	; 0x37
 80094c2:	e7e4      	b.n	800948e <_strtoul_l.constprop.0+0x5e>
 80094c4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80094c8:	f1bc 0f19 	cmp.w	ip, #25
 80094cc:	d804      	bhi.n	80094d8 <_strtoul_l.constprop.0+0xa8>
 80094ce:	3c57      	subs	r4, #87	; 0x57
 80094d0:	e7dd      	b.n	800948e <_strtoul_l.constprop.0+0x5e>
 80094d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094d6:	e7e6      	b.n	80094a6 <_strtoul_l.constprop.0+0x76>
 80094d8:	2f00      	cmp	r7, #0
 80094da:	da07      	bge.n	80094ec <_strtoul_l.constprop.0+0xbc>
 80094dc:	2322      	movs	r3, #34	; 0x22
 80094de:	f8ce 3000 	str.w	r3, [lr]
 80094e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094e6:	b932      	cbnz	r2, 80094f6 <_strtoul_l.constprop.0+0xc6>
 80094e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ec:	b106      	cbz	r6, 80094f0 <_strtoul_l.constprop.0+0xc0>
 80094ee:	4240      	negs	r0, r0
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	d0f9      	beq.n	80094e8 <_strtoul_l.constprop.0+0xb8>
 80094f4:	b107      	cbz	r7, 80094f8 <_strtoul_l.constprop.0+0xc8>
 80094f6:	1e69      	subs	r1, r5, #1
 80094f8:	6011      	str	r1, [r2, #0]
 80094fa:	e7f5      	b.n	80094e8 <_strtoul_l.constprop.0+0xb8>
 80094fc:	2430      	movs	r4, #48	; 0x30
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1b5      	bne.n	800946e <_strtoul_l.constprop.0+0x3e>
 8009502:	2308      	movs	r3, #8
 8009504:	e7b3      	b.n	800946e <_strtoul_l.constprop.0+0x3e>
 8009506:	2c30      	cmp	r4, #48	; 0x30
 8009508:	d0a9      	beq.n	800945e <_strtoul_l.constprop.0+0x2e>
 800950a:	230a      	movs	r3, #10
 800950c:	e7af      	b.n	800946e <_strtoul_l.constprop.0+0x3e>
 800950e:	bf00      	nop
 8009510:	08009d7d 	.word	0x08009d7d

08009514 <_strtoul_r>:
 8009514:	f7ff bf8c 	b.w	8009430 <_strtoul_l.constprop.0>

08009518 <__submore>:
 8009518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009524:	4299      	cmp	r1, r3
 8009526:	d11d      	bne.n	8009564 <__submore+0x4c>
 8009528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800952c:	f7ff f9b0 	bl	8008890 <_malloc_r>
 8009530:	b918      	cbnz	r0, 800953a <__submore+0x22>
 8009532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800953e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009540:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009544:	6360      	str	r0, [r4, #52]	; 0x34
 8009546:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800954a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800954e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009552:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009556:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800955a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800955e:	6020      	str	r0, [r4, #0]
 8009560:	2000      	movs	r0, #0
 8009562:	e7e8      	b.n	8009536 <__submore+0x1e>
 8009564:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009566:	0077      	lsls	r7, r6, #1
 8009568:	463a      	mov	r2, r7
 800956a:	f000 f87f 	bl	800966c <_realloc_r>
 800956e:	4605      	mov	r5, r0
 8009570:	2800      	cmp	r0, #0
 8009572:	d0de      	beq.n	8009532 <__submore+0x1a>
 8009574:	eb00 0806 	add.w	r8, r0, r6
 8009578:	4601      	mov	r1, r0
 800957a:	4632      	mov	r2, r6
 800957c:	4640      	mov	r0, r8
 800957e:	f7fc fe65 	bl	800624c <memcpy>
 8009582:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009586:	f8c4 8000 	str.w	r8, [r4]
 800958a:	e7e9      	b.n	8009560 <__submore+0x48>

0800958c <__assert_func>:
 800958c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800958e:	4614      	mov	r4, r2
 8009590:	461a      	mov	r2, r3
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <__assert_func+0x2c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4605      	mov	r5, r0
 8009598:	68d8      	ldr	r0, [r3, #12]
 800959a:	b14c      	cbz	r4, 80095b0 <__assert_func+0x24>
 800959c:	4b07      	ldr	r3, [pc, #28]	; (80095bc <__assert_func+0x30>)
 800959e:	9100      	str	r1, [sp, #0]
 80095a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095a4:	4906      	ldr	r1, [pc, #24]	; (80095c0 <__assert_func+0x34>)
 80095a6:	462b      	mov	r3, r5
 80095a8:	f000 f80e 	bl	80095c8 <fiprintf>
 80095ac:	f000 f89a 	bl	80096e4 <abort>
 80095b0:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <__assert_func+0x38>)
 80095b2:	461c      	mov	r4, r3
 80095b4:	e7f3      	b.n	800959e <__assert_func+0x12>
 80095b6:	bf00      	nop
 80095b8:	2000000c 	.word	0x2000000c
 80095bc:	08009d40 	.word	0x08009d40
 80095c0:	08009d4d 	.word	0x08009d4d
 80095c4:	08009d7b 	.word	0x08009d7b

080095c8 <fiprintf>:
 80095c8:	b40e      	push	{r1, r2, r3}
 80095ca:	b503      	push	{r0, r1, lr}
 80095cc:	4601      	mov	r1, r0
 80095ce:	ab03      	add	r3, sp, #12
 80095d0:	4805      	ldr	r0, [pc, #20]	; (80095e8 <fiprintf+0x20>)
 80095d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d6:	6800      	ldr	r0, [r0, #0]
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	f7ff fbc9 	bl	8008d70 <_vfiprintf_r>
 80095de:	b002      	add	sp, #8
 80095e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095e4:	b003      	add	sp, #12
 80095e6:	4770      	bx	lr
 80095e8:	2000000c 	.word	0x2000000c

080095ec <_fstat_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d07      	ldr	r5, [pc, #28]	; (800960c <_fstat_r+0x20>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	4611      	mov	r1, r2
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	f7f8 ff90 	bl	800251e <_fstat>
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	d102      	bne.n	8009608 <_fstat_r+0x1c>
 8009602:	682b      	ldr	r3, [r5, #0]
 8009604:	b103      	cbz	r3, 8009608 <_fstat_r+0x1c>
 8009606:	6023      	str	r3, [r4, #0]
 8009608:	bd38      	pop	{r3, r4, r5, pc}
 800960a:	bf00      	nop
 800960c:	20000508 	.word	0x20000508

08009610 <_isatty_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d06      	ldr	r5, [pc, #24]	; (800962c <_isatty_r+0x1c>)
 8009614:	2300      	movs	r3, #0
 8009616:	4604      	mov	r4, r0
 8009618:	4608      	mov	r0, r1
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	f7f8 ff8f 	bl	800253e <_isatty>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d102      	bne.n	800962a <_isatty_r+0x1a>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	b103      	cbz	r3, 800962a <_isatty_r+0x1a>
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	bd38      	pop	{r3, r4, r5, pc}
 800962c:	20000508 	.word	0x20000508

08009630 <__ascii_mbtowc>:
 8009630:	b082      	sub	sp, #8
 8009632:	b901      	cbnz	r1, 8009636 <__ascii_mbtowc+0x6>
 8009634:	a901      	add	r1, sp, #4
 8009636:	b142      	cbz	r2, 800964a <__ascii_mbtowc+0x1a>
 8009638:	b14b      	cbz	r3, 800964e <__ascii_mbtowc+0x1e>
 800963a:	7813      	ldrb	r3, [r2, #0]
 800963c:	600b      	str	r3, [r1, #0]
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	1e10      	subs	r0, r2, #0
 8009642:	bf18      	it	ne
 8009644:	2001      	movne	r0, #1
 8009646:	b002      	add	sp, #8
 8009648:	4770      	bx	lr
 800964a:	4610      	mov	r0, r2
 800964c:	e7fb      	b.n	8009646 <__ascii_mbtowc+0x16>
 800964e:	f06f 0001 	mvn.w	r0, #1
 8009652:	e7f8      	b.n	8009646 <__ascii_mbtowc+0x16>

08009654 <__malloc_lock>:
 8009654:	4801      	ldr	r0, [pc, #4]	; (800965c <__malloc_lock+0x8>)
 8009656:	f7fe bc92 	b.w	8007f7e <__retarget_lock_acquire_recursive>
 800965a:	bf00      	nop
 800965c:	200004fc 	.word	0x200004fc

08009660 <__malloc_unlock>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__malloc_unlock+0x8>)
 8009662:	f7fe bc8d 	b.w	8007f80 <__retarget_lock_release_recursive>
 8009666:	bf00      	nop
 8009668:	200004fc 	.word	0x200004fc

0800966c <_realloc_r>:
 800966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009670:	4680      	mov	r8, r0
 8009672:	4614      	mov	r4, r2
 8009674:	460e      	mov	r6, r1
 8009676:	b921      	cbnz	r1, 8009682 <_realloc_r+0x16>
 8009678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967c:	4611      	mov	r1, r2
 800967e:	f7ff b907 	b.w	8008890 <_malloc_r>
 8009682:	b92a      	cbnz	r2, 8009690 <_realloc_r+0x24>
 8009684:	f7ff f898 	bl	80087b8 <_free_r>
 8009688:	4625      	mov	r5, r4
 800968a:	4628      	mov	r0, r5
 800968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009690:	f000 f82f 	bl	80096f2 <_malloc_usable_size_r>
 8009694:	4284      	cmp	r4, r0
 8009696:	4607      	mov	r7, r0
 8009698:	d802      	bhi.n	80096a0 <_realloc_r+0x34>
 800969a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800969e:	d812      	bhi.n	80096c6 <_realloc_r+0x5a>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4640      	mov	r0, r8
 80096a4:	f7ff f8f4 	bl	8008890 <_malloc_r>
 80096a8:	4605      	mov	r5, r0
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d0ed      	beq.n	800968a <_realloc_r+0x1e>
 80096ae:	42bc      	cmp	r4, r7
 80096b0:	4622      	mov	r2, r4
 80096b2:	4631      	mov	r1, r6
 80096b4:	bf28      	it	cs
 80096b6:	463a      	movcs	r2, r7
 80096b8:	f7fc fdc8 	bl	800624c <memcpy>
 80096bc:	4631      	mov	r1, r6
 80096be:	4640      	mov	r0, r8
 80096c0:	f7ff f87a 	bl	80087b8 <_free_r>
 80096c4:	e7e1      	b.n	800968a <_realloc_r+0x1e>
 80096c6:	4635      	mov	r5, r6
 80096c8:	e7df      	b.n	800968a <_realloc_r+0x1e>

080096ca <__ascii_wctomb>:
 80096ca:	b149      	cbz	r1, 80096e0 <__ascii_wctomb+0x16>
 80096cc:	2aff      	cmp	r2, #255	; 0xff
 80096ce:	bf85      	ittet	hi
 80096d0:	238a      	movhi	r3, #138	; 0x8a
 80096d2:	6003      	strhi	r3, [r0, #0]
 80096d4:	700a      	strbls	r2, [r1, #0]
 80096d6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80096da:	bf98      	it	ls
 80096dc:	2001      	movls	r0, #1
 80096de:	4770      	bx	lr
 80096e0:	4608      	mov	r0, r1
 80096e2:	4770      	bx	lr

080096e4 <abort>:
 80096e4:	b508      	push	{r3, lr}
 80096e6:	2006      	movs	r0, #6
 80096e8:	f000 f834 	bl	8009754 <raise>
 80096ec:	2001      	movs	r0, #1
 80096ee:	f7f8 fee3 	bl	80024b8 <_exit>

080096f2 <_malloc_usable_size_r>:
 80096f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096f6:	1f18      	subs	r0, r3, #4
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bfbc      	itt	lt
 80096fc:	580b      	ldrlt	r3, [r1, r0]
 80096fe:	18c0      	addlt	r0, r0, r3
 8009700:	4770      	bx	lr

08009702 <_raise_r>:
 8009702:	291f      	cmp	r1, #31
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4604      	mov	r4, r0
 8009708:	460d      	mov	r5, r1
 800970a:	d904      	bls.n	8009716 <_raise_r+0x14>
 800970c:	2316      	movs	r3, #22
 800970e:	6003      	str	r3, [r0, #0]
 8009710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009714:	bd38      	pop	{r3, r4, r5, pc}
 8009716:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009718:	b112      	cbz	r2, 8009720 <_raise_r+0x1e>
 800971a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800971e:	b94b      	cbnz	r3, 8009734 <_raise_r+0x32>
 8009720:	4620      	mov	r0, r4
 8009722:	f000 f831 	bl	8009788 <_getpid_r>
 8009726:	462a      	mov	r2, r5
 8009728:	4601      	mov	r1, r0
 800972a:	4620      	mov	r0, r4
 800972c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009730:	f000 b818 	b.w	8009764 <_kill_r>
 8009734:	2b01      	cmp	r3, #1
 8009736:	d00a      	beq.n	800974e <_raise_r+0x4c>
 8009738:	1c59      	adds	r1, r3, #1
 800973a:	d103      	bne.n	8009744 <_raise_r+0x42>
 800973c:	2316      	movs	r3, #22
 800973e:	6003      	str	r3, [r0, #0]
 8009740:	2001      	movs	r0, #1
 8009742:	e7e7      	b.n	8009714 <_raise_r+0x12>
 8009744:	2400      	movs	r4, #0
 8009746:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800974a:	4628      	mov	r0, r5
 800974c:	4798      	blx	r3
 800974e:	2000      	movs	r0, #0
 8009750:	e7e0      	b.n	8009714 <_raise_r+0x12>
	...

08009754 <raise>:
 8009754:	4b02      	ldr	r3, [pc, #8]	; (8009760 <raise+0xc>)
 8009756:	4601      	mov	r1, r0
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	f7ff bfd2 	b.w	8009702 <_raise_r>
 800975e:	bf00      	nop
 8009760:	2000000c 	.word	0x2000000c

08009764 <_kill_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d07      	ldr	r5, [pc, #28]	; (8009784 <_kill_r+0x20>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	f7f8 fe91 	bl	8002498 <_kill>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d102      	bne.n	8009780 <_kill_r+0x1c>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	b103      	cbz	r3, 8009780 <_kill_r+0x1c>
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	bd38      	pop	{r3, r4, r5, pc}
 8009782:	bf00      	nop
 8009784:	20000508 	.word	0x20000508

08009788 <_getpid_r>:
 8009788:	f7f8 be7e 	b.w	8002488 <_getpid>

0800978c <sqrt>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	ed2d 8b02 	vpush	{d8}
 8009792:	ec55 4b10 	vmov	r4, r5, d0
 8009796:	f000 f825 	bl	80097e4 <__ieee754_sqrt>
 800979a:	4622      	mov	r2, r4
 800979c:	462b      	mov	r3, r5
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	eeb0 8a40 	vmov.f32	s16, s0
 80097a6:	eef0 8a60 	vmov.f32	s17, s1
 80097aa:	f7f7 f9c7 	bl	8000b3c <__aeabi_dcmpun>
 80097ae:	b990      	cbnz	r0, 80097d6 <sqrt+0x4a>
 80097b0:	2200      	movs	r2, #0
 80097b2:	2300      	movs	r3, #0
 80097b4:	4620      	mov	r0, r4
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f7 f998 	bl	8000aec <__aeabi_dcmplt>
 80097bc:	b158      	cbz	r0, 80097d6 <sqrt+0x4a>
 80097be:	f7fc fd1b 	bl	80061f8 <__errno>
 80097c2:	2321      	movs	r3, #33	; 0x21
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	2200      	movs	r2, #0
 80097c8:	2300      	movs	r3, #0
 80097ca:	4610      	mov	r0, r2
 80097cc:	4619      	mov	r1, r3
 80097ce:	f7f7 f845 	bl	800085c <__aeabi_ddiv>
 80097d2:	ec41 0b18 	vmov	d8, r0, r1
 80097d6:	eeb0 0a48 	vmov.f32	s0, s16
 80097da:	eef0 0a68 	vmov.f32	s1, s17
 80097de:	ecbd 8b02 	vpop	{d8}
 80097e2:	bd38      	pop	{r3, r4, r5, pc}

080097e4 <__ieee754_sqrt>:
 80097e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e8:	ec55 4b10 	vmov	r4, r5, d0
 80097ec:	4e55      	ldr	r6, [pc, #340]	; (8009944 <__ieee754_sqrt+0x160>)
 80097ee:	43ae      	bics	r6, r5
 80097f0:	ee10 0a10 	vmov	r0, s0
 80097f4:	ee10 3a10 	vmov	r3, s0
 80097f8:	462a      	mov	r2, r5
 80097fa:	4629      	mov	r1, r5
 80097fc:	d110      	bne.n	8009820 <__ieee754_sqrt+0x3c>
 80097fe:	ee10 2a10 	vmov	r2, s0
 8009802:	462b      	mov	r3, r5
 8009804:	f7f6 ff00 	bl	8000608 <__aeabi_dmul>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4620      	mov	r0, r4
 800980e:	4629      	mov	r1, r5
 8009810:	f7f6 fd44 	bl	800029c <__adddf3>
 8009814:	4604      	mov	r4, r0
 8009816:	460d      	mov	r5, r1
 8009818:	ec45 4b10 	vmov	d0, r4, r5
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009820:	2d00      	cmp	r5, #0
 8009822:	dc10      	bgt.n	8009846 <__ieee754_sqrt+0x62>
 8009824:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009828:	4330      	orrs	r0, r6
 800982a:	d0f5      	beq.n	8009818 <__ieee754_sqrt+0x34>
 800982c:	b15d      	cbz	r5, 8009846 <__ieee754_sqrt+0x62>
 800982e:	ee10 2a10 	vmov	r2, s0
 8009832:	462b      	mov	r3, r5
 8009834:	ee10 0a10 	vmov	r0, s0
 8009838:	f7f6 fd2e 	bl	8000298 <__aeabi_dsub>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	f7f7 f80c 	bl	800085c <__aeabi_ddiv>
 8009844:	e7e6      	b.n	8009814 <__ieee754_sqrt+0x30>
 8009846:	1512      	asrs	r2, r2, #20
 8009848:	d074      	beq.n	8009934 <__ieee754_sqrt+0x150>
 800984a:	07d4      	lsls	r4, r2, #31
 800984c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009850:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009858:	bf5e      	ittt	pl
 800985a:	0fda      	lsrpl	r2, r3, #31
 800985c:	005b      	lslpl	r3, r3, #1
 800985e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009862:	2400      	movs	r4, #0
 8009864:	0fda      	lsrs	r2, r3, #31
 8009866:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800986a:	107f      	asrs	r7, r7, #1
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	2516      	movs	r5, #22
 8009870:	4620      	mov	r0, r4
 8009872:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009876:	1886      	adds	r6, r0, r2
 8009878:	428e      	cmp	r6, r1
 800987a:	bfde      	ittt	le
 800987c:	1b89      	suble	r1, r1, r6
 800987e:	18b0      	addle	r0, r6, r2
 8009880:	18a4      	addle	r4, r4, r2
 8009882:	0049      	lsls	r1, r1, #1
 8009884:	3d01      	subs	r5, #1
 8009886:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800988a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800988e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009892:	d1f0      	bne.n	8009876 <__ieee754_sqrt+0x92>
 8009894:	462a      	mov	r2, r5
 8009896:	f04f 0e20 	mov.w	lr, #32
 800989a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800989e:	4281      	cmp	r1, r0
 80098a0:	eb06 0c05 	add.w	ip, r6, r5
 80098a4:	dc02      	bgt.n	80098ac <__ieee754_sqrt+0xc8>
 80098a6:	d113      	bne.n	80098d0 <__ieee754_sqrt+0xec>
 80098a8:	459c      	cmp	ip, r3
 80098aa:	d811      	bhi.n	80098d0 <__ieee754_sqrt+0xec>
 80098ac:	f1bc 0f00 	cmp.w	ip, #0
 80098b0:	eb0c 0506 	add.w	r5, ip, r6
 80098b4:	da43      	bge.n	800993e <__ieee754_sqrt+0x15a>
 80098b6:	2d00      	cmp	r5, #0
 80098b8:	db41      	blt.n	800993e <__ieee754_sqrt+0x15a>
 80098ba:	f100 0801 	add.w	r8, r0, #1
 80098be:	1a09      	subs	r1, r1, r0
 80098c0:	459c      	cmp	ip, r3
 80098c2:	bf88      	it	hi
 80098c4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80098c8:	eba3 030c 	sub.w	r3, r3, ip
 80098cc:	4432      	add	r2, r6
 80098ce:	4640      	mov	r0, r8
 80098d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80098d4:	f1be 0e01 	subs.w	lr, lr, #1
 80098d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80098dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80098e4:	d1db      	bne.n	800989e <__ieee754_sqrt+0xba>
 80098e6:	430b      	orrs	r3, r1
 80098e8:	d006      	beq.n	80098f8 <__ieee754_sqrt+0x114>
 80098ea:	1c50      	adds	r0, r2, #1
 80098ec:	bf13      	iteet	ne
 80098ee:	3201      	addne	r2, #1
 80098f0:	3401      	addeq	r4, #1
 80098f2:	4672      	moveq	r2, lr
 80098f4:	f022 0201 	bicne.w	r2, r2, #1
 80098f8:	1063      	asrs	r3, r4, #1
 80098fa:	0852      	lsrs	r2, r2, #1
 80098fc:	07e1      	lsls	r1, r4, #31
 80098fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009902:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009906:	bf48      	it	mi
 8009908:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800990c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009910:	4614      	mov	r4, r2
 8009912:	e781      	b.n	8009818 <__ieee754_sqrt+0x34>
 8009914:	0ad9      	lsrs	r1, r3, #11
 8009916:	3815      	subs	r0, #21
 8009918:	055b      	lsls	r3, r3, #21
 800991a:	2900      	cmp	r1, #0
 800991c:	d0fa      	beq.n	8009914 <__ieee754_sqrt+0x130>
 800991e:	02cd      	lsls	r5, r1, #11
 8009920:	d50a      	bpl.n	8009938 <__ieee754_sqrt+0x154>
 8009922:	f1c2 0420 	rsb	r4, r2, #32
 8009926:	fa23 f404 	lsr.w	r4, r3, r4
 800992a:	1e55      	subs	r5, r2, #1
 800992c:	4093      	lsls	r3, r2
 800992e:	4321      	orrs	r1, r4
 8009930:	1b42      	subs	r2, r0, r5
 8009932:	e78a      	b.n	800984a <__ieee754_sqrt+0x66>
 8009934:	4610      	mov	r0, r2
 8009936:	e7f0      	b.n	800991a <__ieee754_sqrt+0x136>
 8009938:	0049      	lsls	r1, r1, #1
 800993a:	3201      	adds	r2, #1
 800993c:	e7ef      	b.n	800991e <__ieee754_sqrt+0x13a>
 800993e:	4680      	mov	r8, r0
 8009940:	e7bd      	b.n	80098be <__ieee754_sqrt+0xda>
 8009942:	bf00      	nop
 8009944:	7ff00000 	.word	0x7ff00000

08009948 <_init>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	bf00      	nop
 800994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994e:	bc08      	pop	{r3}
 8009950:	469e      	mov	lr, r3
 8009952:	4770      	bx	lr

08009954 <_fini>:
 8009954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009956:	bf00      	nop
 8009958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995a:	bc08      	pop	{r3}
 800995c:	469e      	mov	lr, r3
 800995e:	4770      	bx	lr
