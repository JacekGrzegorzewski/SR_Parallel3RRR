
SR_Parallel3RRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007454  08007454  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007454  08007454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800745c  0800745c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000070  080074d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080074d4  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e505  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e33  00000000  00000000  0002e5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000303d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00031100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017202  00000000  00000000  00031d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e585  00000000  00000000  00048f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f505  00000000  00000000  000574f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e69fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  000e6a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007228 	.word	0x08007228

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007228 	.word	0x08007228

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_write>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

int _write( int file,unsigned char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <_write+0x28>)
 8000ec4:	f003 fa2d 	bl	8004322 <HAL_UART_Transmit>
	return len;
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000224 	.word	0x20000224

08000ed8 <init_movement>:
//jak naprawic bog jeden wie

//

void init_movement(motorInfo *motor, long total_steps, unsigned accel, unsigned decel, unsigned max)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]


		max = max <= MIN_VEL? MIN_VEL:max;
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	f240 6222 	movw	r2, #1570	; 0x622
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d90a      	bls.n	8000f06 <init_movement+0x2e>
 8000ef0:	6a38      	ldr	r0, [r7, #32]
 8000ef2:	f7ff fb0f 	bl	8000514 <__aeabi_ui2d>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff fe33 	bl	8000b68 <__aeabi_d2uiz>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e001      	b.n	8000f0a <init_movement+0x32>
 8000f06:	f240 6322 	movw	r3, #1570	; 0x622
 8000f0a:	623b      	str	r3, [r7, #32]
		motor->max_speed = (max >= MAX_VEL) ? MAX_VEL : max;
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	f646 3260 	movw	r2, #27488	; 0x6b60
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d80a      	bhi.n	8000f2c <init_movement+0x54>
 8000f16:	6a38      	ldr	r0, [r7, #32]
 8000f18:	f7ff fafc 	bl	8000514 <__aeabi_ui2d>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fe20 	bl	8000b68 <__aeabi_d2uiz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	e001      	b.n	8000f30 <init_movement+0x58>
 8000f2c:	f646 3360 	movw	r3, #27488	; 0x6b60
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	6013      	str	r3, [r2, #0]
		motor->dir = total_steps>0 ? 1 : -1;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	dd01      	ble.n	8000f3e <init_movement+0x66>
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	e001      	b.n	8000f42 <init_movement+0x6a>
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	609a      	str	r2, [r3, #8]

		HAL_GPIO_WritePin(motor->GPIOX, motor->GPIO_Label, motor->dir > 0);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6958      	ldr	r0, [r3, #20]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8b19      	ldrh	r1, [r3, #24]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bfcc      	ite	gt
 8000f56:	2301      	movgt	r3, #1
 8000f58:	2300      	movle	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f001 fead 	bl	8002cbc <HAL_GPIO_WritePin>


		motor->total_steps=total_steps>0?total_steps:-total_steps;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bfb8      	it	lt
 8000f68:	425b      	neglt	r3, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	63da      	str	r2, [r3, #60]	; 0x3c
		motor->rest=0;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
		motor->state=ACCEL;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		motor->auto_reload=CLK_FRQ*sqrt(2000*ALPHA/accel);// length of current pulse in timer ticks
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fac8 	bl	8000514 <__aeabi_ui2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	a15c      	add	r1, pc, #368	; (adr r1, 80010fc <init_movement+0x224>)
 8000f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f8e:	f7ff fc65 	bl	800085c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	ec43 2b17 	vmov	d7, r2, r3
 8000f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9e:	eef0 0a67 	vmov.f32	s1, s15
 8000fa2:	f006 f863 	bl	800706c <sqrt>
 8000fa6:	ec51 0b10 	vmov	r0, r1, d0
 8000faa:	a356      	add	r3, pc, #344	; (adr r3, 8001104 <init_movement+0x22c>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fb2a 	bl	8000608 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fdd4 	bl	8000b68 <__aeabi_d2uiz>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	60da      	str	r2, [r3, #12]
		motor->max_speed_ARR = CLK_FRQ*ALPHA*1000/motor->max_speed;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff faa2 	bl	8000514 <__aeabi_ui2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	a14d      	add	r1, pc, #308	; (adr r1, 800110c <init_movement+0x234>)
 8000fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fda:	f7ff fc3f 	bl	800085c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fdbf 	bl	8000b68 <__aeabi_d2uiz>
 8000fea:	4602      	mov	r2, r0
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	605a      	str	r2, [r3, #4]

		motor->accel_stop = motor->max_speed*motor->max_speed/(2*ALPHA*accel*1000);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa89 	bl	8000514 <__aeabi_ui2d>
 8001002:	4604      	mov	r4, r0
 8001004:	460d      	mov	r5, r1
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fa84 	bl	8000514 <__aeabi_ui2d>
 800100c:	a341      	add	r3, pc, #260	; (adr r3, 8001114 <init_movement+0x23c>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff faf9 	bl	8000608 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <init_movement+0x220>)
 8001024:	f7ff faf0 	bl	8000608 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff fc14 	bl	800085c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd94 	bl	8000b68 <__aeabi_d2uiz>
 8001040:	4602      	mov	r2, r0
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	621a      	str	r2, [r3, #32]

		if(!motor->accel_stop)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <init_movement+0x17c>
			motor->accel_stop =1 ;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	621a      	str	r2, [r3, #32]


		motor->peak_velocity=(motor->total_steps*decel)/(accel+decel);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	fb03 f202 	mul.w	r2, r3, r2
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	440b      	add	r3, r1
 8001064:	fbb2 f2f3 	udiv	r2, r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	61da      	str	r2, [r3, #28]

		if(!motor->peak_velocity)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <init_movement+0x1a2>
			motor->peak_velocity =1;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2201      	movs	r2, #1
 8001078:	61da      	str	r2, [r3, #28]

		if(motor->accel_stop <= motor->peak_velocity)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	429a      	cmp	r2, r3
 8001084:	d807      	bhi.n	8001096 <init_movement+0x1be>
			motor->decel_start= motor->total_steps-motor->accel_stop;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
 8001094:	e003      	b.n	800109e <init_movement+0x1c6>
		else
			motor->decel_start = motor->peak_velocity;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	69da      	ldr	r2, [r3, #28]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	625a      	str	r2, [r3, #36]	; 0x24



		motor->movement_done=0;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		motor->acceleration=accel;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
		motor->deceleration=decel;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
		motor->steps=0;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38


		motor->timer->Instance->ARR=motor->auto_reload;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	68d2      	ldr	r2, [r2, #12]
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
		//generujemy update resetując rejestry
		//bez tego nie działa, 4 godziny życia za mną :(
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	615a      	str	r2, [r3, #20]



		HAL_TIM_OC_Start(motor->timer,TIM_CHANNEL_1);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fb7e 	bl	80037e0 <HAL_TIM_OC_Start>
	    HAL_TIM_Base_Start_IT(motor->timer);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fa99 	bl	8003620 <HAL_TIM_Base_Start_IT>




}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	408f4000 	.word	0x408f4000
 80010fc:	6c226809 	.word	0x6c226809
 8001100:	3fff6a78 	.word	0x3fff6a78
 8001104:	00000000 	.word	0x00000000
 8001108:	419406f4 	.word	0x419406f4
 800110c:	c5ffffff 	.word	0xc5ffffff
 8001110:	4193a95e 	.word	0x4193a95e
 8001114:	ae261898 	.word	0xae261898
 8001118:	3f6015be 	.word	0x3f6015be

0800111c <reset_motor>:
void reset_motor(motorInfo *motor,TIM_HandleTypeDef *timer,GPIO_TypeDef *GPIOX,uint16_t GPIO_Label)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	807b      	strh	r3, [r7, #2]
	motor->timer = timer;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	611a      	str	r2, [r3, #16]
	motor->GPIOX = GPIOX;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	615a      	str	r2, [r3, #20]
	motor->GPIO_Label=GPIO_Label;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	887a      	ldrh	r2, [r7, #2]
 800113a:	831a      	strh	r2, [r3, #24]
	test.movement_done=1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <reset_motor+0x60>)
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	motor->step_position=0;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(motor->GPIOX, motor->GPIO_Label, motor->dir>0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6958      	ldr	r0, [r3, #20]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8b19      	ldrh	r1, [r3, #24]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	bfcc      	ite	gt
 800115a:	2301      	movgt	r3, #1
 800115c:	2300      	movle	r3, #0
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f001 fdab 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_TIM_OC_Stop(motor->timer,TIM_CHANNEL_1);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fbe7 	bl	8003940 <HAL_TIM_OC_Stop>


}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002c8 	.word	0x200002c8

08001180 <calculate_auto_reload>:




unsigned long calculate_auto_reload(motorInfo *motor)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

	if(motor->steps < motor->total_steps)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <calculate_auto_reload+0x24>
	{
		motor->step_position+=motor->dir;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	441a      	add	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
 80011a2:	e003      	b.n	80011ac <calculate_auto_reload+0x2c>
	}
	else
		motor->state=STOP;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	motor->steps++;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38
	unsigned long  tmp=0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]

	switch (motor->state)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	f200 809d 	bhi.w	8001302 <calculate_auto_reload+0x182>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <calculate_auto_reload+0x50>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	0800120b 	.word	0x0800120b
 80011d8:	080012a1 	.word	0x080012a1
 80011dc:	0800128b 	.word	0x0800128b
	{
	case STOP:

		motor->movement_done=1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		flag_htim2_done=1;
 80011e8:	4b49      	ldr	r3, [pc, #292]	; (8001310 <calculate_auto_reload+0x190>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(motor->timer,TIM_CHANNEL_1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 fba3 	bl	8003940 <HAL_TIM_OC_Stop>
		HAL_TIM_Base_Stop_IT(motor->timer);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fa70 	bl	80036e4 <HAL_TIM_Base_Stop_IT>

		return motor->auto_reload;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	e07d      	b.n	8001306 <calculate_auto_reload+0x186>
		break;
	case ACCEL:

		tmp=motor->rest;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	60fb      	str	r3, [r7, #12]
		motor->rest =(2*motor->auto_reload + tmp)%(4*motor->steps + 1);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	005a      	lsls	r2, r3, #1
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4413      	add	r3, r2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	3201      	adds	r2, #1
 8001222:	fbb3 f1f2 	udiv	r1, r3, r2
 8001226:	fb01 f202 	mul.w	r2, r1, r2
 800122a:	1a9a      	subs	r2, r3, r2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
		motor->auto_reload -= (2*motor->auto_reload + tmp)/(4*motor->steps + 1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	005a      	lsls	r2, r3, #1
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	441a      	add	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	3301      	adds	r3, #1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68d2      	ldr	r2, [r2, #12]
 800124a:	1ad2      	subs	r2, r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	60da      	str	r2, [r3, #12]

		if(motor->steps>=motor->decel_start)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	429a      	cmp	r2, r3
 800125a:	d304      	bcc.n	8001266 <calculate_auto_reload+0xe6>
		{
			motor->state=DECEL;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2202      	movs	r2, #2
 8001260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		{
			motor->state = RUN;
			motor->rest = 0;
			motor->auto_reload = motor->max_speed_ARR;
		}
		break;
 8001264:	e04a      	b.n	80012fc <calculate_auto_reload+0x17c>
		else if(motor->steps >= motor->accel_stop)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	429a      	cmp	r2, r3
 8001270:	d344      	bcc.n	80012fc <calculate_auto_reload+0x17c>
			motor->state = RUN;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			motor->rest = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
			motor->auto_reload = motor->max_speed_ARR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	60da      	str	r2, [r3, #12]
		break;
 8001288:	e038      	b.n	80012fc <calculate_auto_reload+0x17c>
	case RUN:
		if(motor->steps >= motor->decel_start)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	429a      	cmp	r2, r3
 8001294:	d334      	bcc.n	8001300 <calculate_auto_reload+0x180>
				motor->state=DECEL;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2202      	movs	r2, #2
 800129a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 800129e:	e02f      	b.n	8001300 <calculate_auto_reload+0x180>
	case DECEL:
		tmp=motor->rest;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	60fb      	str	r3, [r7, #12]
		motor->rest =(long)((2*motor->auto_reload + motor->rest))%(4*((long)(motor->steps-motor->total_steps)) + 1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	005a      	lsls	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4413      	add	r3, r2
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012bc:	1acb      	subs	r3, r1, r3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	3301      	adds	r3, #1
 80012c2:	fb92 f1f3 	sdiv	r1, r2, r3
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
		motor->auto_reload -= (long)((2*motor->auto_reload + tmp))/(4*((long)(motor->steps-motor->total_steps)) + 1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	005a      	lsls	r2, r3, #1
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	3301      	adds	r3, #1
 80012ec:	fb91 f2f3 	sdiv	r2, r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	1a9a      	subs	r2, r3, r2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60da      	str	r2, [r3, #12]
		break;
 80012fa:	e002      	b.n	8001302 <calculate_auto_reload+0x182>
		break;
 80012fc:	bf00      	nop
 80012fe:	e000      	b.n	8001302 <calculate_auto_reload+0x182>
		break;
 8001300:	bf00      	nop

	}



	return (motor->auto_reload);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]


}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000310 	.word	0x20000310

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f000 fdc5 	bl	8001ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f899 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fa59 	bl	80017d8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001326:	f000 f959 	bl	80015dc <MX_TIM3_Init>
  MX_TIM4_Init();
 800132a:	f000 f9b1 	bl	8001690 <MX_TIM4_Init>
  MX_TIM2_Init();
 800132e:	f000 f8fd 	bl	800152c <MX_TIM2_Init>
  MX_DMA_Init();
 8001332:	f000 fa31 	bl	8001798 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001336:	f000 fa05 	bl	8001744 <MX_USART2_UART_Init>





	  reset_motor(&test,&htim2,STEPPER_DIR_1_GPIO_Port, STEPPER_DIR_1_Pin);
 800133a:	2340      	movs	r3, #64	; 0x40
 800133c:	4a36      	ldr	r2, [pc, #216]	; (8001418 <main+0x104>)
 800133e:	4937      	ldr	r1, [pc, #220]	; (800141c <main+0x108>)
 8001340:	4837      	ldr	r0, [pc, #220]	; (8001420 <main+0x10c>)
 8001342:	f7ff feeb 	bl	800111c <reset_motor>


	  HAL_TIM_Base_Start_IT(&htim3);
 8001346:	4837      	ldr	r0, [pc, #220]	; (8001424 <main+0x110>)
 8001348:	f002 f96a 	bl	8003620 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim4);
 800134c:	4836      	ldr	r0, [pc, #216]	; (8001428 <main+0x114>)
 800134e:	f002 f967 	bl	8003620 <HAL_TIM_Base_Start_IT>




  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001352:	2240      	movs	r2, #64	; 0x40
 8001354:	4935      	ldr	r1, [pc, #212]	; (800142c <main+0x118>)
 8001356:	4836      	ldr	r0, [pc, #216]	; (8001430 <main+0x11c>)
 8001358:	f003 f875 	bl	8004446 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <main+0x120>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <main+0x120>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0208 	bic.w	r2, r2, #8
 800136a:	601a      	str	r2, [r3, #0]


flag_htim2_done=flag_command_recieved=0;
 800136c:	2300      	movs	r3, #0
 800136e:	4a32      	ldr	r2, [pc, #200]	; (8001438 <main+0x124>)
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4a32      	ldr	r2, [pc, #200]	; (800143c <main+0x128>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_htim2_done)
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <main+0x128>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00e      	beq.n	800139c <main+0x88>
	  {
		  timer_val = __HAL_TIM_GET_COUNTER(&htim3)-timer_val;
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <main+0x110>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
		  printf("Done, MotorPos: %d\r\n",test.step_position);
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <main+0x10c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4619      	mov	r1, r3
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <main+0x12c>)
 8001392:	f004 f9e9 	bl	8005768 <iprintf>
		  flag_htim2_done=0;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <main+0x128>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

	  }

	  if(flag_command_recieved)
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <main+0x124>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0e8      	beq.n	8001376 <main+0x62>
	  {
		  memcpy(MainBuf,RxBuf,size_recieved);
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <main+0x130>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4920      	ldr	r1, [pc, #128]	; (800142c <main+0x118>)
 80013ac:	4826      	ldr	r0, [pc, #152]	; (8001448 <main+0x134>)
 80013ae:	f004 f9c5 	bl	800573c <memcpy>
		  		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	491d      	ldr	r1, [pc, #116]	; (800142c <main+0x118>)
 80013b6:	481e      	ldr	r0, [pc, #120]	; (8001430 <main+0x11c>)
 80013b8:	f003 f845 	bl	8004446 <HAL_UARTEx_ReceiveToIdle_DMA>
		  		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <main+0x120>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <main+0x120>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0208 	bic.w	r2, r2, #8
 80013ca:	601a      	str	r2, [r3, #0]

		  		printf("Recieved: %s \r\n",MainBuf);
 80013cc:	491e      	ldr	r1, [pc, #120]	; (8001448 <main+0x134>)
 80013ce:	481f      	ldr	r0, [pc, #124]	; (800144c <main+0x138>)
 80013d0:	f004 f9ca 	bl	8005768 <iprintf>

		  		sscanf(MainBuf,"%d %u %u %u",&steps, &accel, &decel, &max_speed);
 80013d4:	f107 0110 	add.w	r1, r7, #16
 80013d8:	f107 0208 	add.w	r2, r7, #8
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	460b      	mov	r3, r1
 80013e8:	4919      	ldr	r1, [pc, #100]	; (8001450 <main+0x13c>)
 80013ea:	4817      	ldr	r0, [pc, #92]	; (8001448 <main+0x134>)
 80013ec:	f004 f9d4 	bl	8005798 <siscanf>
		  		//accel, decel in 1m rad/s^2
		  		//max_speed in 1m rad/s
		  		init_movement(&test,steps,accel,decel,max_speed);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	460b      	mov	r3, r1
 80013fe:	4601      	mov	r1, r0
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <main+0x10c>)
 8001402:	f7ff fd69 	bl	8000ed8 <init_movement>


		  		timer_val = __HAL_TIM_GET_COUNTER(&htim3);
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <main+0x110>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	617b      	str	r3, [r7, #20]
		  		flag_command_recieved=0;
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <main+0x124>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	  if(flag_htim2_done)
 8001414:	e7af      	b.n	8001376 <main+0x62>
 8001416:	bf00      	nop
 8001418:	40020800 	.word	0x40020800
 800141c:	2000014c 	.word	0x2000014c
 8001420:	200002c8 	.word	0x200002c8
 8001424:	20000194 	.word	0x20000194
 8001428:	200001dc 	.word	0x200001dc
 800142c:	2000008c 	.word	0x2000008c
 8001430:	20000224 	.word	0x20000224
 8001434:	20000268 	.word	0x20000268
 8001438:	20000314 	.word	0x20000314
 800143c:	20000310 	.word	0x20000310
 8001440:	08007240 	.word	0x08007240
 8001444:	20000318 	.word	0x20000318
 8001448:	200000cc 	.word	0x200000cc
 800144c:	08007258 	.word	0x08007258
 8001450:	08007268 	.word	0x08007268

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	; 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	2230      	movs	r2, #48	; 0x30
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f004 f978 	bl	8005758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <SystemClock_Config+0xd0>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a28      	ldr	r2, [pc, #160]	; (8001524 <SystemClock_Config+0xd0>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <SystemClock_Config+0xd0>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <SystemClock_Config+0xd4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <SystemClock_Config+0xd4>)
 80014a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <SystemClock_Config+0xd4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	2302      	movs	r3, #2
 80014c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c8:	2310      	movs	r3, #16
 80014ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014d6:	2307      	movs	r3, #7
 80014d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fc06 	bl	8002cf0 <HAL_RCC_OscConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ea:	f000 fa25 	bl	8001938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ee:	230f      	movs	r3, #15
 80014f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2302      	movs	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2102      	movs	r1, #2
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fe68 	bl	80031e0 <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001516:	f000 fa0f 	bl	8001938 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3750      	adds	r7, #80	; 0x50
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000

0800152c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MX_TIM2_Init+0xac>)
 8001550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001554:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <MX_TIM2_Init+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <MX_TIM2_Init+0xac>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84-1;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_TIM2_Init+0xac>)
 8001564:	2253      	movs	r2, #83	; 0x53
 8001566:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MX_TIM2_Init+0xac>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_TIM2_Init+0xac>)
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM2_Init+0xac>)
 8001576:	f002 f8e4 	bl	8003742 <HAL_TIM_OC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 f9da 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001584:	2320      	movs	r3, #32
 8001586:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4619      	mov	r1, r3
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_TIM2_Init+0xac>)
 8001594:	f002 fdf6 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800159e:	f000 f9cb 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80015a2:	2330      	movs	r3, #48	; 0x30
 80015a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM2_Init+0xac>)
 80015ba:	f002 fb2d 	bl	8003c18 <HAL_TIM_OC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80015c4:	f000 f9b8 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM2_Init+0xac>)
 80015ca:	f000 fa45 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000014c 	.word	0x2000014c

080015dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_TIM3_Init+0xac>)
 8001600:	4a22      	ldr	r2, [pc, #136]	; (800168c <MX_TIM3_Init+0xb0>)
 8001602:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_TIM3_Init+0xac>)
 8001606:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800160a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_TIM3_Init+0xac>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM3_Init+0xac>)
 8001614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001618:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <MX_TIM3_Init+0xac>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_TIM3_Init+0xac>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001626:	4818      	ldr	r0, [pc, #96]	; (8001688 <MX_TIM3_Init+0xac>)
 8001628:	f002 f88b 	bl	8003742 <HAL_TIM_OC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001632:	f000 f981 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163e:	f107 0320 	add.w	r3, r7, #32
 8001642:	4619      	mov	r1, r3
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <MX_TIM3_Init+0xac>)
 8001646:	f002 fd9d 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001650:	f000 f972 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <MX_TIM3_Init+0xac>)
 800166c:	f002 fad4 	bl	8003c18 <HAL_TIM_OC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001676:	f000 f95f 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_TIM3_Init+0xac>)
 800167c:	f000 f9ec 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000194 	.word	0x20000194
 800168c:	40000400 	.word	0x40000400

08001690 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <MX_TIM4_Init+0xac>)
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <MX_TIM4_Init+0xb0>)
 80016b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <MX_TIM4_Init+0xac>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <MX_TIM4_Init+0xac>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_TIM4_Init+0xac>)
 80016c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM4_Init+0xac>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM4_Init+0xac>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80016d8:	4818      	ldr	r0, [pc, #96]	; (800173c <MX_TIM4_Init+0xac>)
 80016da:	f002 f832 	bl	8003742 <HAL_TIM_OC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80016e4:	f000 f928 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4619      	mov	r1, r3
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <MX_TIM4_Init+0xac>)
 80016f8:	f002 fd44 	bl	8004184 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001702:	f000 f919 	bl	8001938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <MX_TIM4_Init+0xac>)
 800171e:	f002 fa7b 	bl	8003c18 <HAL_TIM_OC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001728:	f000 f906 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <MX_TIM4_Init+0xac>)
 800172e:	f000 f993 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200001dc 	.word	0x200001dc
 8001740:	40000800 	.word	0x40000800

08001744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_USART2_UART_Init+0x50>)
 800174c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_USART2_UART_Init+0x4c>)
 800177c:	f002 fd84 	bl	8004288 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001786:	f000 f8d7 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000224 	.word	0x20000224
 8001794:	40004400 	.word	0x40004400

08001798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_DMA_Init+0x3c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <MX_DMA_Init+0x3c>)
 80017a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_DMA_Init+0x3c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2010      	movs	r0, #16
 80017c0:	f000 fcbf 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017c4:	2010      	movs	r0, #16
 80017c6:	f000 fcd8 	bl	800217a <HAL_NVIC_EnableIRQ>

}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <MX_GPIO_Init+0xe0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <MX_GPIO_Init+0xe0>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <MX_GPIO_Init+0xe0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <MX_GPIO_Init+0xe0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <MX_GPIO_Init+0xe0>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <MX_GPIO_Init+0xe0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <MX_GPIO_Init+0xe0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <MX_GPIO_Init+0xe0>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_GPIO_Init+0xe0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_GPIO_Init+0xe0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <MX_GPIO_Init+0xe0>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_GPIO_Init+0xe0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001864:	4815      	ldr	r0, [pc, #84]	; (80018bc <MX_GPIO_Init+0xe4>)
 8001866:	f001 fa29 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_DIR_1_GPIO_Port, STEPPER_DIR_1_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2140      	movs	r1, #64	; 0x40
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <MX_GPIO_Init+0xe8>)
 8001870:	f001 fa24 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEPPER_DIR_3_Pin STEPPER_DIR_2_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin;
 8001874:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <MX_GPIO_Init+0xe4>)
 800188e:	f001 f891 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEPPER_DIR_1_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_1_Pin;
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEPPER_DIR_1_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_GPIO_Init+0xe8>)
 80018aa:	f001 f883 	bl	80029b4 <HAL_GPIO_Init>

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020800 	.word	0x40020800

080018c4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_UARTEx_RxEventCallback+0x30>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d105      	bne.n	80018e6 <HAL_UARTEx_RxEventCallback+0x22>
	{
		flag_command_recieved=1;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_UARTEx_RxEventCallback+0x34>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
		size_recieved=Size;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_UARTEx_RxEventCallback+0x38>)
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	8013      	strh	r3, [r2, #0]
	}

}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40004400 	.word	0x40004400
 80018f8:	20000314 	.word	0x20000314
 80018fc:	20000318 	.word	0x20000318

08001900 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	if(htim == test.timer)
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d10c      	bne.n	800192c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(!test.movement_done)
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_TIM_PeriodElapsedCallback+0x2c>
			TIM2->ARR=calculate_auto_reload(&test);
 800191e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001922:	4804      	ldr	r0, [pc, #16]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001924:	f7ff fc2c 	bl	8001180 <calculate_auto_reload>
 8001928:	4603      	mov	r3, r0
 800192a:	62e3      	str	r3, [r4, #44]	; 0x2c


	}
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	200002c8 	.word	0x200002c8

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001940:	e7fe      	b.n	8001940 <Error_Handler+0x8>
	...

08001944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <HAL_MspInit+0x4c>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_MspInit+0x4c>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_MspInit+0x4c>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001982:	2007      	movs	r0, #7
 8001984:	f000 fbd2 	bl	800212c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d116      	bne.n	80019d4 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	201c      	movs	r0, #28
 80019c8:	f000 fbbb 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019cc:	201c      	movs	r0, #28
 80019ce:	f000 fbd4 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019d2:	e036      	b.n	8001a42 <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_TIM_OC_MspInit+0xbc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d116      	bne.n	8001a0c <HAL_TIM_OC_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	201d      	movs	r0, #29
 8001a00:	f000 fb9f 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a04:	201d      	movs	r0, #29
 8001a06:	f000 fbb8 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001a0a:	e01a      	b.n	8001a42 <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM4)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_TIM_OC_MspInit+0xc0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d115      	bne.n	8001a42 <HAL_TIM_OC_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_TIM_OC_MspInit+0xb8>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	201e      	movs	r0, #30
 8001a38:	f000 fb83 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a3c:	201e      	movs	r0, #30
 8001a3e:	f000 fb9c 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40000800 	.word	0x40000800

08001a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a78:	d11e      	bne.n	8001ab8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a33      	ldr	r2, [pc, #204]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEPPER_PULSE_1_Pin;
 8001a96:	2320      	movs	r3, #32
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_1_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4828      	ldr	r0, [pc, #160]	; (8001b54 <HAL_TIM_MspPostInit+0xfc>)
 8001ab2:	f000 ff7f 	bl	80029b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ab6:	e046      	b.n	8001b46 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a26      	ldr	r2, [pc, #152]	; (8001b58 <HAL_TIM_MspPostInit+0x100>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d11e      	bne.n	8001b00 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEPPER_PULSE_2_Pin;
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aee:	2302      	movs	r3, #2
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_2_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4816      	ldr	r0, [pc, #88]	; (8001b54 <HAL_TIM_MspPostInit+0xfc>)
 8001afa:	f000 ff5b 	bl	80029b4 <HAL_GPIO_Init>
}
 8001afe:	e022      	b.n	8001b46 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <HAL_TIM_MspPostInit+0x104>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d11d      	bne.n	8001b46 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_TIM_MspPostInit+0xf8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_PULSE_3_Pin;
 8001b26:	2340      	movs	r3, #64	; 0x40
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b36:	2302      	movs	r3, #2
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_3_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <HAL_TIM_MspPostInit+0x108>)
 8001b42:	f000 ff37 	bl	80029b4 <HAL_GPIO_Init>
}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40000800 	.word	0x40000800
 8001b60:	40020400 	.word	0x40020400

08001b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <HAL_UART_MspInit+0xf0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d161      	bne.n	8001c4a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_UART_MspInit+0xf4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bce:	2307      	movs	r3, #7
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4820      	ldr	r0, [pc, #128]	; (8001c5c <HAL_UART_MspInit+0xf8>)
 8001bda:	f000 feeb 	bl	80029b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001be0:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_UART_MspInit+0x100>)
 8001be2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c1e:	4810      	ldr	r0, [pc, #64]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c20:	f000 fac6 	bl	80021b0 <HAL_DMA_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001c2a:	f7ff fe85 	bl	8001938 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_UART_MspInit+0xfc>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2026      	movs	r0, #38	; 0x26
 8001c40:	f000 fa7f 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c44:	2026      	movs	r0, #38	; 0x26
 8001c46:	f000 fa98 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40004400 	.word	0x40004400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	20000268 	.word	0x20000268
 8001c64:	40026088 	.word	0x40026088

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <NMI_Handler+0x4>

08001c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <BusFault_Handler+0x4>

08001c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <UsageFault_Handler+0x4>

08001c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb4:	f000 f94a 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <DMA1_Stream5_IRQHandler+0x10>)
 8001cc2:	f000 fc0d 	bl	80024e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000268 	.word	0x20000268

08001cd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <TIM2_IRQHandler+0x10>)
 8001cd6:	f001 fe97 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000014c 	.word	0x2000014c

08001ce4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <TIM3_IRQHandler+0x10>)
 8001cea:	f001 fe8d 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000194 	.word	0x20000194

08001cf8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM4_IRQHandler+0x10>)
 8001cfe:	f001 fe83 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200001dc 	.word	0x200001dc

08001d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART2_IRQHandler+0x10>)
 8001d12:	f002 fbfd 	bl	8004510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000224 	.word	0x20000224

08001d20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e00a      	b.n	8001d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d32:	f3af 8000 	nop.w
 8001d36:	4601      	mov	r1, r0
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	b2ca      	uxtb	r2, r1
 8001d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbf0      	blt.n	8001d32 <_read+0x12>
	}

return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	return -1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d82:	605a      	str	r2, [r3, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_isatty>:

int _isatty(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	return 0;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f003 fc78 	bl	80056e8 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20018000 	.word	0x20018000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	2000031c 	.word	0x2000031c
 8001e2c:	20000338 	.word	0x20000338

08001e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <SystemInit+0x20>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <SystemInit+0x20>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e7e:	f7ff ffd7 	bl	8001e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f003 fc37 	bl	80056f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7ff fa45 	bl	8001314 <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e98:	08007464 	.word	0x08007464
  ldr r2, =_sbss
 8001e9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ea0:	20000334 	.word	0x20000334

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <HAL_Init+0x40>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_Init+0x40>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_Init+0x40>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 f92b 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 f808 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f7ff fd32 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x54>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_InitTick+0x58>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f943 	bl	8002196 <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f28:	f000 f90b 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <HAL_InitTick+0x5c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000320 	.word	0x20000320

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000320 	.word	0x20000320

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff29 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff3e 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff8e 	bl	8002080 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5d 	bl	800202c <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff31 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff feda 	bl	8001f74 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e099      	b.n	8002300 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ec:	e00f      	b.n	800220e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ee:	f7ff fec1 	bl	8001f74 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d908      	bls.n	800220e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2203      	movs	r2, #3
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e078      	b.n	8002300 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e8      	bne.n	80021ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_DMA_Init+0x158>)
 8002228:	4013      	ands	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800223a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2b04      	cmp	r3, #4
 8002266:	d107      	bne.n	8002278 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	4313      	orrs	r3, r2
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f023 0307 	bic.w	r3, r3, #7
 800228e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d117      	bne.n	80022d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00e      	beq.n	80022d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fb01 	bl	80028bc <DMA_CheckFifoParam>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ce:	2301      	movs	r3, #1
 80022d0:	e016      	b.n	8002300 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fab8 	bl	8002850 <DMA_CalcBaseAndBitshift>
 80022e0:	4603      	mov	r3, r0
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	223f      	movs	r2, #63	; 0x3f
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	f010803f 	.word	0xf010803f

0800230c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_DMA_Start_IT+0x26>
 800232e:	2302      	movs	r3, #2
 8002330:	e040      	b.n	80023b4 <HAL_DMA_Start_IT+0xa8>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d12f      	bne.n	80023a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2202      	movs	r2, #2
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fa4a 	bl	80027f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	223f      	movs	r2, #63	; 0x3f
 8002366:	409a      	lsls	r2, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0216 	orr.w	r2, r2, #22
 800237a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0208 	orr.w	r2, r2, #8
 8002392:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e005      	b.n	80023b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
 80023b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ca:	f7ff fdd3 	bl	8001f74 <HAL_GetTick>
 80023ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d008      	beq.n	80023ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e052      	b.n	8002494 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0216 	bic.w	r2, r2, #22
 80023fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800240c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <HAL_DMA_Abort+0x62>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0208 	bic.w	r2, r2, #8
 800242c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243e:	e013      	b.n	8002468 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002440:	f7ff fd98 	bl	8001f74 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b05      	cmp	r3, #5
 800244c:	d90c      	bls.n	8002468 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2203      	movs	r2, #3
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e015      	b.n	8002494 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1e4      	bne.n	8002440 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	223f      	movs	r2, #63	; 0x3f
 800247c:	409a      	lsls	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d004      	beq.n	80024ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00c      	b.n	80024d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2205      	movs	r2, #5
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_DMA_IRQHandler+0x248>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a8e      	ldr	r2, [pc, #568]	; (800272c <HAL_DMA_IRQHandler+0x24c>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	2208      	movs	r2, #8
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01a      	beq.n	800254c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0204 	bic.w	r2, r2, #4
 8002532:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	2208      	movs	r2, #8
 800253a:	409a      	lsls	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2201      	movs	r2, #1
 8002570:	409a      	lsls	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2204      	movs	r2, #4
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	2204      	movs	r2, #4
 80025a6:	409a      	lsls	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2210      	movs	r2, #16
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d043      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03c      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	2210      	movs	r2, #16
 80025dc:	409a      	lsls	r2, r3
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d024      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
 800260e:	e01f      	b.n	8002650 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
 8002620:	e016      	b.n	8002650 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2220      	movs	r2, #32
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 808f 	beq.w	8002780 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8087 	beq.w	8002780 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	2220      	movs	r2, #32
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b05      	cmp	r3, #5
 8002688:	d136      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0216 	bic.w	r2, r2, #22
 8002698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_DMA_IRQHandler+0x1da>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0208 	bic.w	r2, r2, #8
 80026c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	223f      	movs	r2, #63	; 0x3f
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d07e      	beq.n	80027ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
        }
        return;
 80026f6:	e079      	b.n	80027ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01d      	beq.n	8002742 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10d      	bne.n	8002730 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	2b00      	cmp	r3, #0
 800271a:	d031      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
 8002724:	e02c      	b.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000
 800272c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
 8002740:	e01e      	b.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0210 	bic.w	r2, r2, #16
 800275e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	2b00      	cmp	r3, #0
 8002786:	d032      	beq.n	80027ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2205      	movs	r2, #5
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	3301      	adds	r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d307      	bcc.n	80027c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f2      	bne.n	80027ac <HAL_DMA_IRQHandler+0x2cc>
 80027c6:	e000      	b.n	80027ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
 80027ea:	e000      	b.n	80027ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80027ec:	bf00      	nop
    }
  }
}
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002810:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d108      	bne.n	8002834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002832:	e007      	b.n	8002844 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	3b10      	subs	r3, #16
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <DMA_CalcBaseAndBitshift+0x68>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d909      	bls.n	8002892 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	1d1a      	adds	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58
 8002890:	e007      	b.n	80028a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	aaaaaaab 	.word	0xaaaaaaab
 80028b8:	08007298 	.word	0x08007298

080028bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11f      	bne.n	8002916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d856      	bhi.n	800298a <DMA_CheckFifoParam+0xce>
 80028dc:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <DMA_CheckFifoParam+0x28>)
 80028de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e2:	bf00      	nop
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	08002907 	.word	0x08002907
 80028ec:	080028f5 	.word	0x080028f5
 80028f0:	0800298b 	.word	0x0800298b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d046      	beq.n	800298e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e043      	b.n	800298e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800290e:	d140      	bne.n	8002992 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002914:	e03d      	b.n	8002992 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	d121      	bne.n	8002964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d837      	bhi.n	8002996 <DMA_CheckFifoParam+0xda>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <DMA_CheckFifoParam+0x70>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	0800293d 	.word	0x0800293d
 8002930:	08002943 	.word	0x08002943
 8002934:	0800293d 	.word	0x0800293d
 8002938:	08002955 	.word	0x08002955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e030      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d025      	beq.n	800299a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002952:	e022      	b.n	800299a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800295c:	d11f      	bne.n	800299e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002962:	e01c      	b.n	800299e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d903      	bls.n	8002972 <DMA_CheckFifoParam+0xb6>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d003      	beq.n	8002978 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002970:	e018      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      break;
 8002976:	e015      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      break;
 8002988:	e00b      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;
 800298a:	bf00      	nop
 800298c:	e00a      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e008      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e006      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e004      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 80029a2:	bf00      	nop
    }
  } 
  
  return status; 
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e159      	b.n	8002c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 8148 	bne.w	8002c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d005      	beq.n	8002a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d130      	bne.n	8002a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 0201 	and.w	r2, r3, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d017      	beq.n	8002aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d123      	bne.n	8002af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a2 	beq.w	8002c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b57      	ldr	r3, [pc, #348]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a56      	ldr	r2, [pc, #344]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <HAL_GPIO_Init+0x2e8>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b56:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a49      	ldr	r2, [pc, #292]	; (8002ca4 <HAL_GPIO_Init+0x2f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x202>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a48      	ldr	r2, [pc, #288]	; (8002ca8 <HAL_GPIO_Init+0x2f4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x1fe>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a47      	ldr	r2, [pc, #284]	; (8002cac <HAL_GPIO_Init+0x2f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x1fa>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <HAL_GPIO_Init+0x2fc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x1f6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a45      	ldr	r2, [pc, #276]	; (8002cb4 <HAL_GPIO_Init+0x300>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x1f2>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x204>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x2ec>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfa:	4a2f      	ldr	r2, [pc, #188]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c78:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f aea2 	bls.w	80029d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e267      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d157      	bne.n	8002df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e242      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x74>
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6f      	ldr	r2, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6c      	ldr	r2, [pc, #432]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d88:	4b69      	ldr	r3, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b66      	ldr	r3, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff f8e4 	bl	8001f74 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff f8e0 	bl	8001f74 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e207      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xc0>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f8d0 	bl	8001f74 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff f8cc 	bl	8001f74 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1f3      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe8>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c7      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7ff f885 	bl	8001f74 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff f881 	bl	8001f74 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a8      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7ff f864 	bl	8001f74 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff f860 	bl	8001f74 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e187      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d036      	beq.n	8002f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7ff f844 	bl	8001f74 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f840 	bl	8001f74 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e167      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x200>
 8002f0e:	e01b      	b.n	8002f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7ff f82d 	bl	8001f74 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	e00e      	b.n	8002f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7ff f829 	bl	8001f74 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d907      	bls.n	8002f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e150      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470000 	.word	0x42470000
 8002f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ea      	bne.n	8002f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8097 	beq.w	8003084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a7c      	ldr	r2, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b74      	ldr	r3, [pc, #464]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a73      	ldr	r2, [pc, #460]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe ffe9 	bl	8001f74 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe ffe5 	bl	8001f74 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e10c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x2ea>
 8002fcc:	4b64      	ldr	r3, [pc, #400]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e01c      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x30c>
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002ffc:	4b58      	ldr	r3, [pc, #352]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a57      	ldr	r2, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	4b55      	ldr	r3, [pc, #340]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a54      	ldr	r2, [pc, #336]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe ffaa 	bl	8001f74 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe ffa6 	bl	8001f74 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0cb      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCC_OscConfig+0x334>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fe ff94 	bl	8001f74 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe ff90 	bl	8001f74 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0b5      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a38      	ldr	r2, [pc, #224]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a1 	beq.w	80031d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b08      	cmp	r3, #8
 8003098:	d05c      	beq.n	8003154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d141      	bne.n	8003126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe ff64 	bl	8001f74 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe ff60 	bl	8001f74 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e087      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	3b01      	subs	r3, #1
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	491b      	ldr	r1, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe ff39 	bl	8001f74 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe ff35 	bl	8001f74 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e05c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x416>
 8003124:	e054      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe ff22 	bl	8001f74 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe ff1e 	bl	8001f74 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e045      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x444>
 8003152:	e03d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e038      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000
 8003168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d028      	beq.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d121      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11a      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	3b01      	subs	r3, #1
 80031b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fe fe50 	bl	8001f74 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe fe4c 	bl	8001f74 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fdb0 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	08007280 	.word	0x08007280
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b094      	sub	sp, #80	; 0x50
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	2300      	movs	r3, #0
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033bc:	2300      	movs	r3, #0
 80033be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b79      	ldr	r3, [pc, #484]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80e1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e0db      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033e4:	e0db      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ea:	e0d8      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f6:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
 800340c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
 8003416:	2300      	movs	r3, #0
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
 800341a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800341e:	4622      	mov	r2, r4
 8003420:	462b      	mov	r3, r5
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003430:	0150      	lsls	r0, r2, #5
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4621      	mov	r1, r4
 8003438:	1a51      	subs	r1, r2, r1
 800343a:	6139      	str	r1, [r7, #16]
 800343c:	4629      	mov	r1, r5
 800343e:	eb63 0301 	sbc.w	r3, r3, r1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003450:	4659      	mov	r1, fp
 8003452:	018b      	lsls	r3, r1, #6
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345a:	4651      	mov	r1, sl
 800345c:	018a      	lsls	r2, r1, #6
 800345e:	4651      	mov	r1, sl
 8003460:	ebb2 0801 	subs.w	r8, r2, r1
 8003464:	4659      	mov	r1, fp
 8003466:	eb63 0901 	sbc.w	r9, r3, r1
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347e:	4690      	mov	r8, r2
 8003480:	4699      	mov	r9, r3
 8003482:	4623      	mov	r3, r4
 8003484:	eb18 0303 	adds.w	r3, r8, r3
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	462b      	mov	r3, r5
 800348c:	eb49 0303 	adc.w	r3, r9, r3
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349e:	4629      	mov	r1, r5
 80034a0:	024b      	lsls	r3, r1, #9
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a8:	4621      	mov	r1, r4
 80034aa:	024a      	lsls	r2, r1, #9
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	2200      	movs	r2, #0
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034bc:	f7fd fb74 	bl	8000ba8 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	e058      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	2200      	movs	r2, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	4611      	mov	r1, r2
 80034d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	f04f 0000 	mov.w	r0, #0
 80034ec:	f04f 0100 	mov.w	r1, #0
 80034f0:	0159      	lsls	r1, r3, #5
 80034f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f6:	0150      	lsls	r0, r2, #5
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4641      	mov	r1, r8
 80034fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003502:	4649      	mov	r1, r9
 8003504:	eb63 0b01 	sbc.w	fp, r3, r1
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800351c:	ebb2 040a 	subs.w	r4, r2, sl
 8003520:	eb63 050b 	sbc.w	r5, r3, fp
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	00eb      	lsls	r3, r5, #3
 800352e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003532:	00e2      	lsls	r2, r4, #3
 8003534:	4614      	mov	r4, r2
 8003536:	461d      	mov	r5, r3
 8003538:	4643      	mov	r3, r8
 800353a:	18e3      	adds	r3, r4, r3
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	464b      	mov	r3, r9
 8003540:	eb45 0303 	adc.w	r3, r5, r3
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	2200      	movs	r2, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	61fa      	str	r2, [r7, #28]
 800356c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003570:	f7fd fb1a 	bl	8000ba8 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800358c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3750      	adds	r7, #80	; 0x50
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08007290 	.word	0x08007290

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	08007290 	.word	0x08007290

08003620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d001      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e044      	b.n	80036c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003662:	d013      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a17      	ldr	r2, [pc, #92]	; (80036dc <HAL_TIM_Base_Start_IT+0xbc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d111      	bne.n	80036b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b06      	cmp	r3, #6
 800369c:	d010      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ae:	e007      	b.n	80036c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40014000 	.word	0x40014000

080036e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	f241 1311 	movw	r3, #4369	; 0x1111
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <HAL_TIM_Base_Stop_IT+0x48>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	f240 4344 	movw	r3, #1092	; 0x444
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d107      	bne.n	800372c <HAL_TIM_Base_Stop_IT+0x48>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e041      	b.n	80037d8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fe f913 	bl	8001994 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f000 facd 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_TIM_OC_Start+0x24>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e022      	b.n	800384a <HAL_TIM_OC_Start+0x6a>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b04      	cmp	r3, #4
 8003808:	d109      	bne.n	800381e <HAL_TIM_OC_Start+0x3e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	bf14      	ite	ne
 8003816:	2301      	movne	r3, #1
 8003818:	2300      	moveq	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e015      	b.n	800384a <HAL_TIM_OC_Start+0x6a>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d109      	bne.n	8003838 <HAL_TIM_OC_Start+0x58>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e008      	b.n	800384a <HAL_TIM_OC_Start+0x6a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e068      	b.n	8003924 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_TIM_OC_Start+0x82>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003860:	e013      	b.n	800388a <HAL_TIM_OC_Start+0xaa>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d104      	bne.n	8003872 <HAL_TIM_OC_Start+0x92>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	e00b      	b.n	800388a <HAL_TIM_OC_Start+0xaa>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d104      	bne.n	8003882 <HAL_TIM_OC_Start+0xa2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	e003      	b.n	800388a <HAL_TIM_OC_Start+0xaa>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2201      	movs	r2, #1
 8003890:	6839      	ldr	r1, [r7, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fc50 	bl	8004138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a23      	ldr	r2, [pc, #140]	; (800392c <HAL_TIM_OC_Start+0x14c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d107      	bne.n	80038b2 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1d      	ldr	r2, [pc, #116]	; (800392c <HAL_TIM_OC_Start+0x14c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d018      	beq.n	80038ee <HAL_TIM_OC_Start+0x10e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d013      	beq.n	80038ee <HAL_TIM_OC_Start+0x10e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a19      	ldr	r2, [pc, #100]	; (8003930 <HAL_TIM_OC_Start+0x150>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_TIM_OC_Start+0x10e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_TIM_OC_Start+0x154>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_TIM_OC_Start+0x10e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a16      	ldr	r2, [pc, #88]	; (8003938 <HAL_TIM_OC_Start+0x158>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_TIM_OC_Start+0x10e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <HAL_TIM_OC_Start+0x15c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d111      	bne.n	8003912 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d010      	beq.n	8003922 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003910:	e007      	b.n	8003922 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40010000 	.word	0x40010000
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800
 8003938:	40000c00 	.word	0x40000c00
 800393c:	40014000 	.word	0x40014000

08003940 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	6839      	ldr	r1, [r7, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fbf0 	bl	8004138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <HAL_TIM_OC_Stop+0xc4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d117      	bne.n	8003992 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a1a      	ldr	r2, [r3, #32]
 8003968:	f241 1311 	movw	r3, #4369	; 0x1111
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_TIM_OC_Stop+0x52>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	f240 4344 	movw	r3, #1092	; 0x444
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d107      	bne.n	8003992 <HAL_TIM_OC_Stop+0x52>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a1a      	ldr	r2, [r3, #32]
 8003998:	f241 1311 	movw	r3, #4369	; 0x1111
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_TIM_OC_Stop+0x82>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	f240 4344 	movw	r3, #1092	; 0x444
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d107      	bne.n	80039c2 <HAL_TIM_OC_Stop+0x82>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0201 	bic.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_OC_Stop+0x92>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d0:	e013      	b.n	80039fa <HAL_TIM_OC_Stop+0xba>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_OC_Stop+0xa2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e0:	e00b      	b.n	80039fa <HAL_TIM_OC_Stop+0xba>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_OC_Stop+0xb2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f0:	e003      	b.n	80039fa <HAL_TIM_OC_Stop+0xba>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40010000 	.word	0x40010000

08003a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0202 	mvn.w	r2, #2
 8003a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f94a 	bl	8003ce4 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f93c 	bl	8003cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f94d 	bl	8003cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0204 	mvn.w	r2, #4
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f920 	bl	8003ce4 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f912 	bl	8003cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f923 	bl	8003cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0208 	mvn.w	r2, #8
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8f6 	bl	8003ce4 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8e8 	bl	8003cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f8f9 	bl	8003cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0210 	mvn.w	r2, #16
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2208      	movs	r2, #8
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8cc 	bl	8003ce4 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8be 	bl	8003cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8cf 	bl	8003cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0201 	mvn.w	r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd feba 	bl	8001900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d10e      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d107      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fb5e 	bl	8004274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f894 	bl	8003d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0220 	mvn.w	r2, #32
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fb28 	bl	8004260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e048      	b.n	8003cc8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	d839      	bhi.n	8003cb8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08003cb9 	.word	0x08003cb9
 8003c54:	08003cb9 	.word	0x08003cb9
 8003c58:	08003cb9 	.word	0x08003cb9
 8003c5c:	08003c8f 	.word	0x08003c8f
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003cb9 	.word	0x08003cb9
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003cb9 	.word	0x08003cb9
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cb9 	.word	0x08003cb9
 8003c7c:	08003cab 	.word	0x08003cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f8ca 	bl	8003e20 <TIM_OC1_SetConfig>
      break;
 8003c8c:	e017      	b.n	8003cbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f929 	bl	8003eec <TIM_OC2_SetConfig>
      break;
 8003c9a:	e010      	b.n	8003cbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f98e 	bl	8003fc4 <TIM_OC3_SetConfig>
      break;
 8003ca8:	e009      	b.n	8003cbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f9f1 	bl	8004098 <TIM_OC4_SetConfig>
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a34      	ldr	r2, [pc, #208]	; (8003e04 <TIM_Base_SetConfig+0xe4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00f      	beq.n	8003d58 <TIM_Base_SetConfig+0x38>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d00b      	beq.n	8003d58 <TIM_Base_SetConfig+0x38>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a31      	ldr	r2, [pc, #196]	; (8003e08 <TIM_Base_SetConfig+0xe8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <TIM_Base_SetConfig+0x38>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a30      	ldr	r2, [pc, #192]	; (8003e0c <TIM_Base_SetConfig+0xec>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_Base_SetConfig+0x38>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a2f      	ldr	r2, [pc, #188]	; (8003e10 <TIM_Base_SetConfig+0xf0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d108      	bne.n	8003d6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <TIM_Base_SetConfig+0xe4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01b      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d017      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <TIM_Base_SetConfig+0xe8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <TIM_Base_SetConfig+0xec>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00f      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <TIM_Base_SetConfig+0xf0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <TIM_Base_SetConfig+0xf4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1e      	ldr	r2, [pc, #120]	; (8003e18 <TIM_Base_SetConfig+0xf8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <TIM_Base_SetConfig+0xfc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <TIM_Base_SetConfig+0xe4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	615a      	str	r2, [r3, #20]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800

08003e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f023 0201 	bic.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 0302 	bic.w	r3, r3, #2
 8003e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <TIM_OC1_SetConfig+0xc8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10c      	bne.n	8003e96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0308 	bic.w	r3, r3, #8
 8003e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <TIM_OC1_SetConfig+0xc8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d111      	bne.n	8003ec2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40010000 	.word	0x40010000

08003eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0210 	bic.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0320 	bic.w	r3, r3, #32
 8003f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <TIM_OC2_SetConfig+0xd4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10d      	bne.n	8003f68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <TIM_OC2_SetConfig+0xd4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d113      	bne.n	8003f98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010000 	.word	0x40010000

08003fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800400c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <TIM_OC3_SetConfig+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10d      	bne.n	800403e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <TIM_OC3_SetConfig+0xd0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d113      	bne.n	800406e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800404c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	621a      	str	r2, [r3, #32]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40010000 	.word	0x40010000

08004098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	031b      	lsls	r3, r3, #12
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a10      	ldr	r2, [pc, #64]	; (8004134 <TIM_OC4_SetConfig+0x9c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d109      	bne.n	800410c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010000 	.word	0x40010000

08004138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2201      	movs	r2, #1
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1a      	ldr	r2, [r3, #32]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1a      	ldr	r2, [r3, #32]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	431a      	orrs	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004198:	2302      	movs	r3, #2
 800419a:	e050      	b.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1c      	ldr	r2, [pc, #112]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d013      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10c      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4313      	orrs	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40014000 	.word	0x40014000

08004260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e03f      	b.n	800431a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fc58 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 ff97 	bl	8005200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b08a      	sub	sp, #40	; 0x28
 8004326:	af02      	add	r7, sp, #8
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b20      	cmp	r3, #32
 8004340:	d17c      	bne.n	800443c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_Transmit+0x2c>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e075      	b.n	800443e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_UART_Transmit+0x3e>
 800435c:	2302      	movs	r3, #2
 800435e:	e06e      	b.n	800443e <HAL_UART_Transmit+0x11c>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2221      	movs	r2, #33	; 0x21
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004376:	f7fd fdfd 	bl	8001f74 <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	d108      	bne.n	80043a4 <HAL_UART_Transmit+0x82>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d104      	bne.n	80043a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e003      	b.n	80043ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043b4:	e02a      	b.n	800440c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fc53 	bl	8004c6c <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e036      	b.n	800443e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	3302      	adds	r3, #2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e007      	b.n	80043fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1cf      	bne.n	80043b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2200      	movs	r2, #0
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fc23 	bl	8004c6c <UART_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e006      	b.n	800443e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e000      	b.n	800443e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800443c:	2302      	movs	r3, #2
  }
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08c      	sub	sp, #48	; 0x30
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	4613      	mov	r3, r2
 8004452:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b20      	cmp	r3, #32
 800445e:	d152      	bne.n	8004506 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e04b      	b.n	8004508 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800447a:	2302      	movs	r3, #2
 800447c:	e044      	b.n	8004508 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	461a      	mov	r2, r3
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fc58 	bl	8004d48 <UART_Start_Receive_DMA>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800449e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d12c      	bne.n	8004500 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d125      	bne.n	80044fa <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	617b      	str	r3, [r7, #20]
   return(result);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f043 0310 	orr.w	r3, r3, #16
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044e4:	627a      	str	r2, [r7, #36]	; 0x24
 80044e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6a39      	ldr	r1, [r7, #32]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80044f8:	e002      	b.n	8004500 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004504:	e000      	b.n	8004508 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3730      	adds	r7, #48	; 0x30
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b0ba      	sub	sp, #232	; 0xe8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800454e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_UART_IRQHandler+0x66>
 8004562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fd8b 	bl	800508a <UART_Receive_IT>
      return;
 8004574:	e256      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80de 	beq.w	800473c <HAL_UART_IRQHandler+0x22c>
 8004580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004590:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80d1 	beq.w	800473c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_UART_IRQHandler+0xae>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0xd2>
 80045ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_UART_IRQHandler+0xf6>
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d011      	beq.n	8004636 <HAL_UART_IRQHandler+0x126>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800461e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0208 	orr.w	r2, r3, #8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 81ed 	beq.w	8004a1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_UART_IRQHandler+0x14e>
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fd16 	bl	800508a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <HAL_UART_IRQHandler+0x17a>
 8004682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d04f      	beq.n	800472a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fc1e 	bl	8004ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d141      	bne.n	8004722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1d9      	bne.n	800469e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d013      	beq.n	800471a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	4a7d      	ldr	r2, [pc, #500]	; (80048ec <HAL_UART_IRQHandler+0x3dc>)
 80046f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd fecc 	bl	800249c <HAL_DMA_Abort_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00e      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f9a4 	bl	8004a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e00a      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f9a0 	bl	8004a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e006      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f99c 	bl	8004a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004736:	e170      	b.n	8004a1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	bf00      	nop
    return;
 800473a:	e16e      	b.n	8004a1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 814a 	bne.w	80049da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8143 	beq.w	80049da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 813c 	beq.w	80049da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	f040 80b4 	bne.w	80048f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8140 	beq.w	8004a1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047a6:	429a      	cmp	r2, r3
 80047a8:	f080 8139 	bcs.w	8004a1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	f000 8088 	beq.w	80048d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d9      	bne.n	80047c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800481e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004832:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004836:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800483a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e1      	bne.n	800480e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800485a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800485c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800486e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800487c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e3      	bne.n	800484a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a2:	f023 0310 	bic.w	r3, r3, #16
 80048a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80048b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e3      	bne.n	8004890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fd fd75 	bl	80023bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048da:	b29b      	uxth	r3, r3
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc ffee 	bl	80018c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048e8:	e099      	b.n	8004a1e <HAL_UART_IRQHandler+0x50e>
 80048ea:	bf00      	nop
 80048ec:	08004f93 	.word	0x08004f93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 808b 	beq.w	8004a22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800490c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8086 	beq.w	8004a22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800492c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800493a:	647a      	str	r2, [r7, #68]	; 0x44
 800493c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e3      	bne.n	8004916 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	623b      	str	r3, [r7, #32]
   return(result);
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3314      	adds	r3, #20
 800496e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004972:	633a      	str	r2, [r7, #48]	; 0x30
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e3      	bne.n	800494e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0310 	bic.w	r3, r3, #16
 80049aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049b8:	61fa      	str	r2, [r7, #28]
 80049ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	617b      	str	r3, [r7, #20]
   return(result);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e3      	bne.n	8004994 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fc ff76 	bl	80018c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049d8:	e023      	b.n	8004a22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_UART_IRQHandler+0x4ea>
 80049e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fae1 	bl	8004fba <UART_Transmit_IT>
    return;
 80049f8:	e014      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00e      	beq.n	8004a24 <HAL_UART_IRQHandler+0x514>
 8004a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fb21 	bl	800505a <UART_EndTransmit_IT>
    return;
 8004a18:	e004      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
    return;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
      return;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
      return;
 8004a22:	bf00      	nop
  }
}
 8004a24:	37e8      	adds	r7, #232	; 0xe8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop

08004a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b09c      	sub	sp, #112	; 0x70
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d172      	bne.n	8004b7e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004abe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ac0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e5      	bne.n	8004a9e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	667b      	str	r3, [r7, #100]	; 0x64
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004af2:	647a      	str	r2, [r7, #68]	; 0x44
 8004af4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e5      	bne.n	8004ad2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	623b      	str	r3, [r7, #32]
   return(result);
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b26:	633a      	str	r2, [r7, #48]	; 0x30
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e5      	bne.n	8004b06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d119      	bne.n	8004b7e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f023 0310 	bic.w	r3, r3, #16
 8004b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b6a:	61fa      	str	r2, [r7, #28]
 8004b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	69b9      	ldr	r1, [r7, #24]
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	617b      	str	r3, [r7, #20]
   return(result);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d106      	bne.n	8004b94 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b8e:	f7fc fe99 	bl	80018c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b92:	e002      	b.n	8004b9a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004b96:	f7ff ff53 	bl	8004a40 <HAL_UART_RxCpltCallback>
}
 8004b9a:	bf00      	nop
 8004b9c:	3770      	adds	r7, #112	; 0x70
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d108      	bne.n	8004bca <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7fc fe7e 	bl	80018c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bc8:	e002      	b.n	8004bd0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff ff42 	bl	8004a54 <HAL_UART_RxHalfCpltCallback>
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b21      	cmp	r3, #33	; 0x21
 8004c0a:	d108      	bne.n	8004c1e <UART_DMAError+0x46>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2200      	movs	r2, #0
 8004c16:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c18:	68b8      	ldr	r0, [r7, #8]
 8004c1a:	f000 f92f 	bl	8004e7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b22      	cmp	r3, #34	; 0x22
 8004c3e:	d108      	bne.n	8004c52 <UART_DMAError+0x7a>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c4c:	68b8      	ldr	r0, [r7, #8]
 8004c4e:	f000 f93d 	bl	8004ecc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f043 0210 	orr.w	r2, r3, #16
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c5e:	68b8      	ldr	r0, [r7, #8]
 8004c60:	f7ff ff02 	bl	8004a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b090      	sub	sp, #64	; 0x40
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7c:	e050      	b.n	8004d20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c84:	d04c      	beq.n	8004d20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c8c:	f7fd f972 	bl	8001f74 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d241      	bcs.n	8004d20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	330c      	adds	r3, #12
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cbc:	637a      	str	r2, [r7, #52]	; 0x34
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e5      	bne.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3314      	adds	r3, #20
 8004cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3314      	adds	r3, #20
 8004cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cf0:	623a      	str	r2, [r7, #32]
 8004cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	69f9      	ldr	r1, [r7, #28]
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e5      	bne.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e00f      	b.n	8004d40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d09f      	beq.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3740      	adds	r7, #64	; 0x40
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b098      	sub	sp, #96	; 0x60
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2222      	movs	r2, #34	; 0x22
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	4a3e      	ldr	r2, [pc, #248]	; (8004e70 <UART_Start_Receive_DMA+0x128>)
 8004d76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	4a3d      	ldr	r2, [pc, #244]	; (8004e74 <UART_Start_Receive_DMA+0x12c>)
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	4a3c      	ldr	r2, [pc, #240]	; (8004e78 <UART_Start_Receive_DMA+0x130>)
 8004d86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d90:	f107 0308 	add.w	r3, r7, #8
 8004d94:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	f7fd fab0 	bl	800230c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dea:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004dec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3314      	adds	r3, #20
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	657b      	str	r3, [r7, #84]	; 0x54
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e1e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	617b      	str	r3, [r7, #20]
   return(result);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e48:	653b      	str	r3, [r7, #80]	; 0x50
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3314      	adds	r3, #20
 8004e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e52:	627a      	str	r2, [r7, #36]	; 0x24
 8004e54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6a39      	ldr	r1, [r7, #32]
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e5      	bne.n	8004e32 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3760      	adds	r7, #96	; 0x60
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	08004a7d 	.word	0x08004a7d
 8004e74:	08004ba3 	.word	0x08004ba3
 8004e78:	08004bd9 	.word	0x08004bd9

08004e7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	61ba      	str	r2, [r7, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6979      	ldr	r1, [r7, #20]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e5      	bne.n	8004e84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004ec0:	bf00      	nop
 8004ec2:	3724      	adds	r7, #36	; 0x24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b095      	sub	sp, #84	; 0x54
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ef4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e5      	bne.n	8004ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d119      	bne.n	8004f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f023 0310 	bic.w	r3, r3, #16
 8004f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f64:	61ba      	str	r2, [r7, #24]
 8004f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	613b      	str	r3, [r7, #16]
   return(result);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e5      	bne.n	8004f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f86:	bf00      	nop
 8004f88:	3754      	adds	r7, #84	; 0x54
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff fd5b 	bl	8004a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b21      	cmp	r3, #33	; 0x21
 8004fcc:	d13e      	bne.n	800504c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	d114      	bne.n	8005002 <UART_Transmit_IT+0x48>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d110      	bne.n	8005002 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	1c9a      	adds	r2, r3, #2
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	621a      	str	r2, [r3, #32]
 8005000:	e008      	b.n	8005014 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6211      	str	r1, [r2, #32]
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29b      	uxth	r3, r3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4619      	mov	r1, r3
 8005022:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10f      	bne.n	8005048 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005036:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005046:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fcd6 	bl	8004a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b08c      	sub	sp, #48	; 0x30
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b22      	cmp	r3, #34	; 0x22
 800509c:	f040 80ab 	bne.w	80051f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a8:	d117      	bne.n	80050da <UART_Receive_IT+0x50>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d113      	bne.n	80050da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	629a      	str	r2, [r3, #40]	; 0x28
 80050d8:	e026      	b.n	8005128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ec:	d007      	beq.n	80050fe <UART_Receive_IT+0x74>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <UART_Receive_IT+0x82>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e008      	b.n	800511e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005118:	b2da      	uxtb	r2, r3
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29b      	uxth	r3, r3
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	4619      	mov	r1, r3
 8005136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005138:	2b00      	cmp	r3, #0
 800513a:	d15a      	bne.n	80051f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0220 	bic.w	r2, r2, #32
 800514a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800515a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	2b01      	cmp	r3, #1
 800517a:	d135      	bne.n	80051e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	613b      	str	r3, [r7, #16]
   return(result);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f023 0310 	bic.w	r3, r3, #16
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a2:	623a      	str	r2, [r7, #32]
 80051a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	69f9      	ldr	r1, [r7, #28]
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d10a      	bne.n	80051da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7fc fb6f 	bl	80018c4 <HAL_UARTEx_RxEventCallback>
 80051e6:	e002      	b.n	80051ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fc29 	bl	8004a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e002      	b.n	80051f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e000      	b.n	80051f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3730      	adds	r7, #48	; 0x30
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005204:	b0c0      	sub	sp, #256	; 0x100
 8005206:	af00      	add	r7, sp, #0
 8005208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	68d9      	ldr	r1, [r3, #12]
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	ea40 0301 	orr.w	r3, r0, r1
 8005228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	431a      	orrs	r2, r3
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	431a      	orrs	r2, r3
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005258:	f021 010c 	bic.w	r1, r1, #12
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005266:	430b      	orrs	r3, r1
 8005268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527a:	6999      	ldr	r1, [r3, #24]
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	ea40 0301 	orr.w	r3, r0, r1
 8005286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b8f      	ldr	r3, [pc, #572]	; (80054cc <UART_SetConfig+0x2cc>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d005      	beq.n	80052a0 <UART_SetConfig+0xa0>
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b8d      	ldr	r3, [pc, #564]	; (80054d0 <UART_SetConfig+0x2d0>)
 800529c:	429a      	cmp	r2, r3
 800529e:	d104      	bne.n	80052aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7fe f9aa 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 80052a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052a8:	e003      	b.n	80052b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052aa:	f7fe f991 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80052ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052bc:	f040 810c 	bne.w	80054d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	1891      	adds	r1, r2, r2
 80052d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80052da:	415b      	adcs	r3, r3
 80052dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052e2:	4621      	mov	r1, r4
 80052e4:	eb12 0801 	adds.w	r8, r2, r1
 80052e8:	4629      	mov	r1, r5
 80052ea:	eb43 0901 	adc.w	r9, r3, r1
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005302:	4690      	mov	r8, r2
 8005304:	4699      	mov	r9, r3
 8005306:	4623      	mov	r3, r4
 8005308:	eb18 0303 	adds.w	r3, r8, r3
 800530c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005310:	462b      	mov	r3, r5
 8005312:	eb49 0303 	adc.w	r3, r9, r3
 8005316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800532a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800532e:	460b      	mov	r3, r1
 8005330:	18db      	adds	r3, r3, r3
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
 8005334:	4613      	mov	r3, r2
 8005336:	eb42 0303 	adc.w	r3, r2, r3
 800533a:	657b      	str	r3, [r7, #84]	; 0x54
 800533c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005344:	f7fb fc30 	bl	8000ba8 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4b61      	ldr	r3, [pc, #388]	; (80054d4 <UART_SetConfig+0x2d4>)
 800534e:	fba3 2302 	umull	r2, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	011c      	lsls	r4, r3, #4
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	2200      	movs	r2, #0
 800535c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	1891      	adds	r1, r2, r2
 800536e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005370:	415b      	adcs	r3, r3
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005378:	4641      	mov	r1, r8
 800537a:	eb12 0a01 	adds.w	sl, r2, r1
 800537e:	4649      	mov	r1, r9
 8005380:	eb43 0b01 	adc.w	fp, r3, r1
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005398:	4692      	mov	sl, r2
 800539a:	469b      	mov	fp, r3
 800539c:	4643      	mov	r3, r8
 800539e:	eb1a 0303 	adds.w	r3, sl, r3
 80053a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053a6:	464b      	mov	r3, r9
 80053a8:	eb4b 0303 	adc.w	r3, fp, r3
 80053ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053c4:	460b      	mov	r3, r1
 80053c6:	18db      	adds	r3, r3, r3
 80053c8:	643b      	str	r3, [r7, #64]	; 0x40
 80053ca:	4613      	mov	r3, r2
 80053cc:	eb42 0303 	adc.w	r3, r2, r3
 80053d0:	647b      	str	r3, [r7, #68]	; 0x44
 80053d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053da:	f7fb fbe5 	bl	8000ba8 <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <UART_SetConfig+0x2d4>)
 80053e6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2264      	movs	r2, #100	; 0x64
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	1acb      	subs	r3, r1, r3
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <UART_SetConfig+0x2d4>)
 80053fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005408:	441c      	add	r4, r3
 800540a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540e:	2200      	movs	r2, #0
 8005410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	1891      	adds	r1, r2, r2
 8005422:	63b9      	str	r1, [r7, #56]	; 0x38
 8005424:	415b      	adcs	r3, r3
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800542c:	4641      	mov	r1, r8
 800542e:	1851      	adds	r1, r2, r1
 8005430:	6339      	str	r1, [r7, #48]	; 0x30
 8005432:	4649      	mov	r1, r9
 8005434:	414b      	adcs	r3, r1
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005444:	4659      	mov	r1, fp
 8005446:	00cb      	lsls	r3, r1, #3
 8005448:	4651      	mov	r1, sl
 800544a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544e:	4651      	mov	r1, sl
 8005450:	00ca      	lsls	r2, r1, #3
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	4603      	mov	r3, r0
 8005458:	4642      	mov	r2, r8
 800545a:	189b      	adds	r3, r3, r2
 800545c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005460:	464b      	mov	r3, r9
 8005462:	460a      	mov	r2, r1
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800547c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005480:	460b      	mov	r3, r1
 8005482:	18db      	adds	r3, r3, r3
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
 8005486:	4613      	mov	r3, r2
 8005488:	eb42 0303 	adc.w	r3, r2, r3
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005496:	f7fb fb87 	bl	8000ba8 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <UART_SetConfig+0x2d4>)
 80054a0:	fba3 1302 	umull	r1, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	2164      	movs	r1, #100	; 0x64
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	3332      	adds	r3, #50	; 0x32
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <UART_SetConfig+0x2d4>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f003 0207 	and.w	r2, r3, #7
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4422      	add	r2, r4
 80054c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054c8:	e105      	b.n	80056d6 <UART_SetConfig+0x4d6>
 80054ca:	bf00      	nop
 80054cc:	40011000 	.word	0x40011000
 80054d0:	40011400 	.word	0x40011400
 80054d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054ea:	4642      	mov	r2, r8
 80054ec:	464b      	mov	r3, r9
 80054ee:	1891      	adds	r1, r2, r2
 80054f0:	6239      	str	r1, [r7, #32]
 80054f2:	415b      	adcs	r3, r3
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
 80054f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054fa:	4641      	mov	r1, r8
 80054fc:	1854      	adds	r4, r2, r1
 80054fe:	4649      	mov	r1, r9
 8005500:	eb43 0501 	adc.w	r5, r3, r1
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	00eb      	lsls	r3, r5, #3
 800550e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005512:	00e2      	lsls	r2, r4, #3
 8005514:	4614      	mov	r4, r2
 8005516:	461d      	mov	r5, r3
 8005518:	4643      	mov	r3, r8
 800551a:	18e3      	adds	r3, r4, r3
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005520:	464b      	mov	r3, r9
 8005522:	eb45 0303 	adc.w	r3, r5, r3
 8005526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005546:	4629      	mov	r1, r5
 8005548:	008b      	lsls	r3, r1, #2
 800554a:	4621      	mov	r1, r4
 800554c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005550:	4621      	mov	r1, r4
 8005552:	008a      	lsls	r2, r1, #2
 8005554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005558:	f7fb fb26 	bl	8000ba8 <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4b60      	ldr	r3, [pc, #384]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005562:	fba3 2302 	umull	r2, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	011c      	lsls	r4, r3, #4
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556e:	2200      	movs	r2, #0
 8005570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800557c:	4642      	mov	r2, r8
 800557e:	464b      	mov	r3, r9
 8005580:	1891      	adds	r1, r2, r2
 8005582:	61b9      	str	r1, [r7, #24]
 8005584:	415b      	adcs	r3, r3
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800558c:	4641      	mov	r1, r8
 800558e:	1851      	adds	r1, r2, r1
 8005590:	6139      	str	r1, [r7, #16]
 8005592:	4649      	mov	r1, r9
 8005594:	414b      	adcs	r3, r1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a4:	4659      	mov	r1, fp
 80055a6:	00cb      	lsls	r3, r1, #3
 80055a8:	4651      	mov	r1, sl
 80055aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ae:	4651      	mov	r1, sl
 80055b0:	00ca      	lsls	r2, r1, #3
 80055b2:	4610      	mov	r0, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	4642      	mov	r2, r8
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055c0:	464b      	mov	r3, r9
 80055c2:	460a      	mov	r2, r1
 80055c4:	eb42 0303 	adc.w	r3, r2, r3
 80055c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055e4:	4649      	mov	r1, r9
 80055e6:	008b      	lsls	r3, r1, #2
 80055e8:	4641      	mov	r1, r8
 80055ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ee:	4641      	mov	r1, r8
 80055f0:	008a      	lsls	r2, r1, #2
 80055f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055f6:	f7fb fad7 	bl	8000ba8 <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a34      	ldr	r2, [pc, #208]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561e:	441c      	add	r4, r3
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005624:	2200      	movs	r2, #0
 8005626:	673b      	str	r3, [r7, #112]	; 0x70
 8005628:	677a      	str	r2, [r7, #116]	; 0x74
 800562a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	1891      	adds	r1, r2, r2
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	415b      	adcs	r3, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563e:	4641      	mov	r1, r8
 8005640:	1851      	adds	r1, r2, r1
 8005642:	6039      	str	r1, [r7, #0]
 8005644:	4649      	mov	r1, r9
 8005646:	414b      	adcs	r3, r1
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005656:	4659      	mov	r1, fp
 8005658:	00cb      	lsls	r3, r1, #3
 800565a:	4651      	mov	r1, sl
 800565c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005660:	4651      	mov	r1, sl
 8005662:	00ca      	lsls	r2, r1, #3
 8005664:	4610      	mov	r0, r2
 8005666:	4619      	mov	r1, r3
 8005668:	4603      	mov	r3, r0
 800566a:	4642      	mov	r2, r8
 800566c:	189b      	adds	r3, r3, r2
 800566e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005670:	464b      	mov	r3, r9
 8005672:	460a      	mov	r2, r1
 8005674:	eb42 0303 	adc.w	r3, r2, r3
 8005678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	663b      	str	r3, [r7, #96]	; 0x60
 8005684:	667a      	str	r2, [r7, #100]	; 0x64
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005692:	4649      	mov	r1, r9
 8005694:	008b      	lsls	r3, r1, #2
 8005696:	4641      	mov	r1, r8
 8005698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569c:	4641      	mov	r1, r8
 800569e:	008a      	lsls	r2, r1, #2
 80056a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056a4:	f7fb fa80 	bl	8000ba8 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <UART_SetConfig+0x4e4>)
 80056ae:	fba3 1302 	umull	r1, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2164      	movs	r1, #100	; 0x64
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	3332      	adds	r3, #50	; 0x32
 80056c0:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <UART_SetConfig+0x4e4>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	f003 020f 	and.w	r2, r3, #15
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4422      	add	r2, r4
 80056d4:	609a      	str	r2, [r3, #8]
}
 80056d6:	bf00      	nop
 80056d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056dc:	46bd      	mov	sp, r7
 80056de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e2:	bf00      	nop
 80056e4:	51eb851f 	.word	0x51eb851f

080056e8 <__errno>:
 80056e8:	4b01      	ldr	r3, [pc, #4]	; (80056f0 <__errno+0x8>)
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	2000000c 	.word	0x2000000c

080056f4 <__libc_init_array>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	4d0d      	ldr	r5, [pc, #52]	; (800572c <__libc_init_array+0x38>)
 80056f8:	4c0d      	ldr	r4, [pc, #52]	; (8005730 <__libc_init_array+0x3c>)
 80056fa:	1b64      	subs	r4, r4, r5
 80056fc:	10a4      	asrs	r4, r4, #2
 80056fe:	2600      	movs	r6, #0
 8005700:	42a6      	cmp	r6, r4
 8005702:	d109      	bne.n	8005718 <__libc_init_array+0x24>
 8005704:	4d0b      	ldr	r5, [pc, #44]	; (8005734 <__libc_init_array+0x40>)
 8005706:	4c0c      	ldr	r4, [pc, #48]	; (8005738 <__libc_init_array+0x44>)
 8005708:	f001 fd8e 	bl	8007228 <_init>
 800570c:	1b64      	subs	r4, r4, r5
 800570e:	10a4      	asrs	r4, r4, #2
 8005710:	2600      	movs	r6, #0
 8005712:	42a6      	cmp	r6, r4
 8005714:	d105      	bne.n	8005722 <__libc_init_array+0x2e>
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	f855 3b04 	ldr.w	r3, [r5], #4
 800571c:	4798      	blx	r3
 800571e:	3601      	adds	r6, #1
 8005720:	e7ee      	b.n	8005700 <__libc_init_array+0xc>
 8005722:	f855 3b04 	ldr.w	r3, [r5], #4
 8005726:	4798      	blx	r3
 8005728:	3601      	adds	r6, #1
 800572a:	e7f2      	b.n	8005712 <__libc_init_array+0x1e>
 800572c:	0800745c 	.word	0x0800745c
 8005730:	0800745c 	.word	0x0800745c
 8005734:	0800745c 	.word	0x0800745c
 8005738:	08007460 	.word	0x08007460

0800573c <memcpy>:
 800573c:	440a      	add	r2, r1
 800573e:	4291      	cmp	r1, r2
 8005740:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005744:	d100      	bne.n	8005748 <memcpy+0xc>
 8005746:	4770      	bx	lr
 8005748:	b510      	push	{r4, lr}
 800574a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800574e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005752:	4291      	cmp	r1, r2
 8005754:	d1f9      	bne.n	800574a <memcpy+0xe>
 8005756:	bd10      	pop	{r4, pc}

08005758 <memset>:
 8005758:	4402      	add	r2, r0
 800575a:	4603      	mov	r3, r0
 800575c:	4293      	cmp	r3, r2
 800575e:	d100      	bne.n	8005762 <memset+0xa>
 8005760:	4770      	bx	lr
 8005762:	f803 1b01 	strb.w	r1, [r3], #1
 8005766:	e7f9      	b.n	800575c <memset+0x4>

08005768 <iprintf>:
 8005768:	b40f      	push	{r0, r1, r2, r3}
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <iprintf+0x2c>)
 800576c:	b513      	push	{r0, r1, r4, lr}
 800576e:	681c      	ldr	r4, [r3, #0]
 8005770:	b124      	cbz	r4, 800577c <iprintf+0x14>
 8005772:	69a3      	ldr	r3, [r4, #24]
 8005774:	b913      	cbnz	r3, 800577c <iprintf+0x14>
 8005776:	4620      	mov	r0, r4
 8005778:	f000 f8fa 	bl	8005970 <__sinit>
 800577c:	ab05      	add	r3, sp, #20
 800577e:	9a04      	ldr	r2, [sp, #16]
 8005780:	68a1      	ldr	r1, [r4, #8]
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	4620      	mov	r0, r4
 8005786:	f000 fc35 	bl	8005ff4 <_vfiprintf_r>
 800578a:	b002      	add	sp, #8
 800578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005790:	b004      	add	sp, #16
 8005792:	4770      	bx	lr
 8005794:	2000000c 	.word	0x2000000c

08005798 <siscanf>:
 8005798:	b40e      	push	{r1, r2, r3}
 800579a:	b510      	push	{r4, lr}
 800579c:	b09f      	sub	sp, #124	; 0x7c
 800579e:	ac21      	add	r4, sp, #132	; 0x84
 80057a0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80057a4:	f854 2b04 	ldr.w	r2, [r4], #4
 80057a8:	9201      	str	r2, [sp, #4]
 80057aa:	f8ad 101c 	strh.w	r1, [sp, #28]
 80057ae:	9004      	str	r0, [sp, #16]
 80057b0:	9008      	str	r0, [sp, #32]
 80057b2:	f7fa fd15 	bl	80001e0 <strlen>
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <siscanf+0x50>)
 80057b8:	9005      	str	r0, [sp, #20]
 80057ba:	9009      	str	r0, [sp, #36]	; 0x24
 80057bc:	930d      	str	r3, [sp, #52]	; 0x34
 80057be:	480b      	ldr	r0, [pc, #44]	; (80057ec <siscanf+0x54>)
 80057c0:	9a01      	ldr	r2, [sp, #4]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	9403      	str	r4, [sp, #12]
 80057c6:	2300      	movs	r3, #0
 80057c8:	9311      	str	r3, [sp, #68]	; 0x44
 80057ca:	9316      	str	r3, [sp, #88]	; 0x58
 80057cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80057d4:	a904      	add	r1, sp, #16
 80057d6:	4623      	mov	r3, r4
 80057d8:	f000 fa6a 	bl	8005cb0 <__ssvfiscanf_r>
 80057dc:	b01f      	add	sp, #124	; 0x7c
 80057de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057e2:	b003      	add	sp, #12
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	08005813 	.word	0x08005813
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <__sread>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	460c      	mov	r4, r1
 80057f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f8:	f001 f812 	bl	8006820 <_read_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	bfab      	itete	ge
 8005800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005802:	89a3      	ldrhlt	r3, [r4, #12]
 8005804:	181b      	addge	r3, r3, r0
 8005806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800580a:	bfac      	ite	ge
 800580c:	6563      	strge	r3, [r4, #84]	; 0x54
 800580e:	81a3      	strhlt	r3, [r4, #12]
 8005810:	bd10      	pop	{r4, pc}

08005812 <__seofread>:
 8005812:	2000      	movs	r0, #0
 8005814:	4770      	bx	lr

08005816 <__swrite>:
 8005816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581a:	461f      	mov	r7, r3
 800581c:	898b      	ldrh	r3, [r1, #12]
 800581e:	05db      	lsls	r3, r3, #23
 8005820:	4605      	mov	r5, r0
 8005822:	460c      	mov	r4, r1
 8005824:	4616      	mov	r6, r2
 8005826:	d505      	bpl.n	8005834 <__swrite+0x1e>
 8005828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582c:	2302      	movs	r3, #2
 800582e:	2200      	movs	r2, #0
 8005830:	f000 f93e 	bl	8005ab0 <_lseek_r>
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800583a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583e:	81a3      	strh	r3, [r4, #12]
 8005840:	4632      	mov	r2, r6
 8005842:	463b      	mov	r3, r7
 8005844:	4628      	mov	r0, r5
 8005846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800584a:	f000 b817 	b.w	800587c <_write_r>

0800584e <__sseek>:
 800584e:	b510      	push	{r4, lr}
 8005850:	460c      	mov	r4, r1
 8005852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005856:	f000 f92b 	bl	8005ab0 <_lseek_r>
 800585a:	1c43      	adds	r3, r0, #1
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	bf15      	itete	ne
 8005860:	6560      	strne	r0, [r4, #84]	; 0x54
 8005862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800586a:	81a3      	strheq	r3, [r4, #12]
 800586c:	bf18      	it	ne
 800586e:	81a3      	strhne	r3, [r4, #12]
 8005870:	bd10      	pop	{r4, pc}

08005872 <__sclose>:
 8005872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005876:	f000 b813 	b.w	80058a0 <_close_r>
	...

0800587c <_write_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d07      	ldr	r5, [pc, #28]	; (800589c <_write_r+0x20>)
 8005880:	4604      	mov	r4, r0
 8005882:	4608      	mov	r0, r1
 8005884:	4611      	mov	r1, r2
 8005886:	2200      	movs	r2, #0
 8005888:	602a      	str	r2, [r5, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	f7fb fb0e 	bl	8000eac <_write>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_write_r+0x1e>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_write_r+0x1e>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	20000330 	.word	0x20000330

080058a0 <_close_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d06      	ldr	r5, [pc, #24]	; (80058bc <_close_r+0x1c>)
 80058a4:	2300      	movs	r3, #0
 80058a6:	4604      	mov	r4, r0
 80058a8:	4608      	mov	r0, r1
 80058aa:	602b      	str	r3, [r5, #0]
 80058ac:	f7fc fa55 	bl	8001d5a <_close>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_close_r+0x1a>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_close_r+0x1a>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	20000330 	.word	0x20000330

080058c0 <std>:
 80058c0:	2300      	movs	r3, #0
 80058c2:	b510      	push	{r4, lr}
 80058c4:	4604      	mov	r4, r0
 80058c6:	e9c0 3300 	strd	r3, r3, [r0]
 80058ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058ce:	6083      	str	r3, [r0, #8]
 80058d0:	8181      	strh	r1, [r0, #12]
 80058d2:	6643      	str	r3, [r0, #100]	; 0x64
 80058d4:	81c2      	strh	r2, [r0, #14]
 80058d6:	6183      	str	r3, [r0, #24]
 80058d8:	4619      	mov	r1, r3
 80058da:	2208      	movs	r2, #8
 80058dc:	305c      	adds	r0, #92	; 0x5c
 80058de:	f7ff ff3b 	bl	8005758 <memset>
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <std+0x38>)
 80058e4:	6263      	str	r3, [r4, #36]	; 0x24
 80058e6:	4b05      	ldr	r3, [pc, #20]	; (80058fc <std+0x3c>)
 80058e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80058ea:	4b05      	ldr	r3, [pc, #20]	; (8005900 <std+0x40>)
 80058ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <std+0x44>)
 80058f0:	6224      	str	r4, [r4, #32]
 80058f2:	6323      	str	r3, [r4, #48]	; 0x30
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	bf00      	nop
 80058f8:	080057f1 	.word	0x080057f1
 80058fc:	08005817 	.word	0x08005817
 8005900:	0800584f 	.word	0x0800584f
 8005904:	08005873 	.word	0x08005873

08005908 <_cleanup_r>:
 8005908:	4901      	ldr	r1, [pc, #4]	; (8005910 <_cleanup_r+0x8>)
 800590a:	f000 b8af 	b.w	8005a6c <_fwalk_reent>
 800590e:	bf00      	nop
 8005910:	08006dc5 	.word	0x08006dc5

08005914 <__sfmoreglue>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	2268      	movs	r2, #104	; 0x68
 8005918:	1e4d      	subs	r5, r1, #1
 800591a:	4355      	muls	r5, r2
 800591c:	460e      	mov	r6, r1
 800591e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005922:	f000 f8f7 	bl	8005b14 <_malloc_r>
 8005926:	4604      	mov	r4, r0
 8005928:	b140      	cbz	r0, 800593c <__sfmoreglue+0x28>
 800592a:	2100      	movs	r1, #0
 800592c:	e9c0 1600 	strd	r1, r6, [r0]
 8005930:	300c      	adds	r0, #12
 8005932:	60a0      	str	r0, [r4, #8]
 8005934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005938:	f7ff ff0e 	bl	8005758 <memset>
 800593c:	4620      	mov	r0, r4
 800593e:	bd70      	pop	{r4, r5, r6, pc}

08005940 <__sfp_lock_acquire>:
 8005940:	4801      	ldr	r0, [pc, #4]	; (8005948 <__sfp_lock_acquire+0x8>)
 8005942:	f000 b8b3 	b.w	8005aac <__retarget_lock_acquire_recursive>
 8005946:	bf00      	nop
 8005948:	20000325 	.word	0x20000325

0800594c <__sfp_lock_release>:
 800594c:	4801      	ldr	r0, [pc, #4]	; (8005954 <__sfp_lock_release+0x8>)
 800594e:	f000 b8ae 	b.w	8005aae <__retarget_lock_release_recursive>
 8005952:	bf00      	nop
 8005954:	20000325 	.word	0x20000325

08005958 <__sinit_lock_acquire>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__sinit_lock_acquire+0x8>)
 800595a:	f000 b8a7 	b.w	8005aac <__retarget_lock_acquire_recursive>
 800595e:	bf00      	nop
 8005960:	20000326 	.word	0x20000326

08005964 <__sinit_lock_release>:
 8005964:	4801      	ldr	r0, [pc, #4]	; (800596c <__sinit_lock_release+0x8>)
 8005966:	f000 b8a2 	b.w	8005aae <__retarget_lock_release_recursive>
 800596a:	bf00      	nop
 800596c:	20000326 	.word	0x20000326

08005970 <__sinit>:
 8005970:	b510      	push	{r4, lr}
 8005972:	4604      	mov	r4, r0
 8005974:	f7ff fff0 	bl	8005958 <__sinit_lock_acquire>
 8005978:	69a3      	ldr	r3, [r4, #24]
 800597a:	b11b      	cbz	r3, 8005984 <__sinit+0x14>
 800597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005980:	f7ff bff0 	b.w	8005964 <__sinit_lock_release>
 8005984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005988:	6523      	str	r3, [r4, #80]	; 0x50
 800598a:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <__sinit+0x68>)
 800598c:	4a13      	ldr	r2, [pc, #76]	; (80059dc <__sinit+0x6c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	62a2      	str	r2, [r4, #40]	; 0x28
 8005992:	42a3      	cmp	r3, r4
 8005994:	bf04      	itt	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	61a3      	streq	r3, [r4, #24]
 800599a:	4620      	mov	r0, r4
 800599c:	f000 f820 	bl	80059e0 <__sfp>
 80059a0:	6060      	str	r0, [r4, #4]
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 f81c 	bl	80059e0 <__sfp>
 80059a8:	60a0      	str	r0, [r4, #8]
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 f818 	bl	80059e0 <__sfp>
 80059b0:	2200      	movs	r2, #0
 80059b2:	60e0      	str	r0, [r4, #12]
 80059b4:	2104      	movs	r1, #4
 80059b6:	6860      	ldr	r0, [r4, #4]
 80059b8:	f7ff ff82 	bl	80058c0 <std>
 80059bc:	68a0      	ldr	r0, [r4, #8]
 80059be:	2201      	movs	r2, #1
 80059c0:	2109      	movs	r1, #9
 80059c2:	f7ff ff7d 	bl	80058c0 <std>
 80059c6:	68e0      	ldr	r0, [r4, #12]
 80059c8:	2202      	movs	r2, #2
 80059ca:	2112      	movs	r1, #18
 80059cc:	f7ff ff78 	bl	80058c0 <std>
 80059d0:	2301      	movs	r3, #1
 80059d2:	61a3      	str	r3, [r4, #24]
 80059d4:	e7d2      	b.n	800597c <__sinit+0xc>
 80059d6:	bf00      	nop
 80059d8:	080072a0 	.word	0x080072a0
 80059dc:	08005909 	.word	0x08005909

080059e0 <__sfp>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	4607      	mov	r7, r0
 80059e4:	f7ff ffac 	bl	8005940 <__sfp_lock_acquire>
 80059e8:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <__sfp+0x84>)
 80059ea:	681e      	ldr	r6, [r3, #0]
 80059ec:	69b3      	ldr	r3, [r6, #24]
 80059ee:	b913      	cbnz	r3, 80059f6 <__sfp+0x16>
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7ff ffbd 	bl	8005970 <__sinit>
 80059f6:	3648      	adds	r6, #72	; 0x48
 80059f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	d503      	bpl.n	8005a08 <__sfp+0x28>
 8005a00:	6833      	ldr	r3, [r6, #0]
 8005a02:	b30b      	cbz	r3, 8005a48 <__sfp+0x68>
 8005a04:	6836      	ldr	r6, [r6, #0]
 8005a06:	e7f7      	b.n	80059f8 <__sfp+0x18>
 8005a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a0c:	b9d5      	cbnz	r5, 8005a44 <__sfp+0x64>
 8005a0e:	4b16      	ldr	r3, [pc, #88]	; (8005a68 <__sfp+0x88>)
 8005a10:	60e3      	str	r3, [r4, #12]
 8005a12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a16:	6665      	str	r5, [r4, #100]	; 0x64
 8005a18:	f000 f847 	bl	8005aaa <__retarget_lock_init_recursive>
 8005a1c:	f7ff ff96 	bl	800594c <__sfp_lock_release>
 8005a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a28:	6025      	str	r5, [r4, #0]
 8005a2a:	61a5      	str	r5, [r4, #24]
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a34:	f7ff fe90 	bl	8005758 <memset>
 8005a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a40:	4620      	mov	r0, r4
 8005a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a44:	3468      	adds	r4, #104	; 0x68
 8005a46:	e7d9      	b.n	80059fc <__sfp+0x1c>
 8005a48:	2104      	movs	r1, #4
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	f7ff ff62 	bl	8005914 <__sfmoreglue>
 8005a50:	4604      	mov	r4, r0
 8005a52:	6030      	str	r0, [r6, #0]
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d1d5      	bne.n	8005a04 <__sfp+0x24>
 8005a58:	f7ff ff78 	bl	800594c <__sfp_lock_release>
 8005a5c:	230c      	movs	r3, #12
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	e7ee      	b.n	8005a40 <__sfp+0x60>
 8005a62:	bf00      	nop
 8005a64:	080072a0 	.word	0x080072a0
 8005a68:	ffff0001 	.word	0xffff0001

08005a6c <_fwalk_reent>:
 8005a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a70:	4606      	mov	r6, r0
 8005a72:	4688      	mov	r8, r1
 8005a74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a78:	2700      	movs	r7, #0
 8005a7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a7e:	f1b9 0901 	subs.w	r9, r9, #1
 8005a82:	d505      	bpl.n	8005a90 <_fwalk_reent+0x24>
 8005a84:	6824      	ldr	r4, [r4, #0]
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	d1f7      	bne.n	8005a7a <_fwalk_reent+0xe>
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a90:	89ab      	ldrh	r3, [r5, #12]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d907      	bls.n	8005aa6 <_fwalk_reent+0x3a>
 8005a96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	d003      	beq.n	8005aa6 <_fwalk_reent+0x3a>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	47c0      	blx	r8
 8005aa4:	4307      	orrs	r7, r0
 8005aa6:	3568      	adds	r5, #104	; 0x68
 8005aa8:	e7e9      	b.n	8005a7e <_fwalk_reent+0x12>

08005aaa <__retarget_lock_init_recursive>:
 8005aaa:	4770      	bx	lr

08005aac <__retarget_lock_acquire_recursive>:
 8005aac:	4770      	bx	lr

08005aae <__retarget_lock_release_recursive>:
 8005aae:	4770      	bx	lr

08005ab0 <_lseek_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d07      	ldr	r5, [pc, #28]	; (8005ad0 <_lseek_r+0x20>)
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	4611      	mov	r1, r2
 8005aba:	2200      	movs	r2, #0
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f7fc f972 	bl	8001da8 <_lseek>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_lseek_r+0x1e>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_lseek_r+0x1e>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20000330 	.word	0x20000330

08005ad4 <sbrk_aligned>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4e0e      	ldr	r6, [pc, #56]	; (8005b10 <sbrk_aligned+0x3c>)
 8005ad8:	460c      	mov	r4, r1
 8005ada:	6831      	ldr	r1, [r6, #0]
 8005adc:	4605      	mov	r5, r0
 8005ade:	b911      	cbnz	r1, 8005ae6 <sbrk_aligned+0x12>
 8005ae0:	f000 feb0 	bl	8006844 <_sbrk_r>
 8005ae4:	6030      	str	r0, [r6, #0]
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 feab 	bl	8006844 <_sbrk_r>
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	d00a      	beq.n	8005b08 <sbrk_aligned+0x34>
 8005af2:	1cc4      	adds	r4, r0, #3
 8005af4:	f024 0403 	bic.w	r4, r4, #3
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d007      	beq.n	8005b0c <sbrk_aligned+0x38>
 8005afc:	1a21      	subs	r1, r4, r0
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fea0 	bl	8006844 <_sbrk_r>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d101      	bne.n	8005b0c <sbrk_aligned+0x38>
 8005b08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	2000032c 	.word	0x2000032c

08005b14 <_malloc_r>:
 8005b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b18:	1ccd      	adds	r5, r1, #3
 8005b1a:	f025 0503 	bic.w	r5, r5, #3
 8005b1e:	3508      	adds	r5, #8
 8005b20:	2d0c      	cmp	r5, #12
 8005b22:	bf38      	it	cc
 8005b24:	250c      	movcc	r5, #12
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	4607      	mov	r7, r0
 8005b2a:	db01      	blt.n	8005b30 <_malloc_r+0x1c>
 8005b2c:	42a9      	cmp	r1, r5
 8005b2e:	d905      	bls.n	8005b3c <_malloc_r+0x28>
 8005b30:	230c      	movs	r3, #12
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	2600      	movs	r6, #0
 8005b36:	4630      	mov	r0, r6
 8005b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b3c:	4e2e      	ldr	r6, [pc, #184]	; (8005bf8 <_malloc_r+0xe4>)
 8005b3e:	f001 f9e3 	bl	8006f08 <__malloc_lock>
 8005b42:	6833      	ldr	r3, [r6, #0]
 8005b44:	461c      	mov	r4, r3
 8005b46:	bb34      	cbnz	r4, 8005b96 <_malloc_r+0x82>
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f7ff ffc2 	bl	8005ad4 <sbrk_aligned>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	4604      	mov	r4, r0
 8005b54:	d14d      	bne.n	8005bf2 <_malloc_r+0xde>
 8005b56:	6834      	ldr	r4, [r6, #0]
 8005b58:	4626      	mov	r6, r4
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	d140      	bne.n	8005be0 <_malloc_r+0xcc>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	4631      	mov	r1, r6
 8005b62:	4638      	mov	r0, r7
 8005b64:	eb04 0803 	add.w	r8, r4, r3
 8005b68:	f000 fe6c 	bl	8006844 <_sbrk_r>
 8005b6c:	4580      	cmp	r8, r0
 8005b6e:	d13a      	bne.n	8005be6 <_malloc_r+0xd2>
 8005b70:	6821      	ldr	r1, [r4, #0]
 8005b72:	3503      	adds	r5, #3
 8005b74:	1a6d      	subs	r5, r5, r1
 8005b76:	f025 0503 	bic.w	r5, r5, #3
 8005b7a:	3508      	adds	r5, #8
 8005b7c:	2d0c      	cmp	r5, #12
 8005b7e:	bf38      	it	cc
 8005b80:	250c      	movcc	r5, #12
 8005b82:	4629      	mov	r1, r5
 8005b84:	4638      	mov	r0, r7
 8005b86:	f7ff ffa5 	bl	8005ad4 <sbrk_aligned>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d02b      	beq.n	8005be6 <_malloc_r+0xd2>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	442b      	add	r3, r5
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	e00e      	b.n	8005bb4 <_malloc_r+0xa0>
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	1b52      	subs	r2, r2, r5
 8005b9a:	d41e      	bmi.n	8005bda <_malloc_r+0xc6>
 8005b9c:	2a0b      	cmp	r2, #11
 8005b9e:	d916      	bls.n	8005bce <_malloc_r+0xba>
 8005ba0:	1961      	adds	r1, r4, r5
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	6025      	str	r5, [r4, #0]
 8005ba6:	bf18      	it	ne
 8005ba8:	6059      	strne	r1, [r3, #4]
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	bf08      	it	eq
 8005bae:	6031      	streq	r1, [r6, #0]
 8005bb0:	5162      	str	r2, [r4, r5]
 8005bb2:	604b      	str	r3, [r1, #4]
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f104 060b 	add.w	r6, r4, #11
 8005bba:	f001 f9ab 	bl	8006f14 <__malloc_unlock>
 8005bbe:	f026 0607 	bic.w	r6, r6, #7
 8005bc2:	1d23      	adds	r3, r4, #4
 8005bc4:	1af2      	subs	r2, r6, r3
 8005bc6:	d0b6      	beq.n	8005b36 <_malloc_r+0x22>
 8005bc8:	1b9b      	subs	r3, r3, r6
 8005bca:	50a3      	str	r3, [r4, r2]
 8005bcc:	e7b3      	b.n	8005b36 <_malloc_r+0x22>
 8005bce:	6862      	ldr	r2, [r4, #4]
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	bf0c      	ite	eq
 8005bd4:	6032      	streq	r2, [r6, #0]
 8005bd6:	605a      	strne	r2, [r3, #4]
 8005bd8:	e7ec      	b.n	8005bb4 <_malloc_r+0xa0>
 8005bda:	4623      	mov	r3, r4
 8005bdc:	6864      	ldr	r4, [r4, #4]
 8005bde:	e7b2      	b.n	8005b46 <_malloc_r+0x32>
 8005be0:	4634      	mov	r4, r6
 8005be2:	6876      	ldr	r6, [r6, #4]
 8005be4:	e7b9      	b.n	8005b5a <_malloc_r+0x46>
 8005be6:	230c      	movs	r3, #12
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4638      	mov	r0, r7
 8005bec:	f001 f992 	bl	8006f14 <__malloc_unlock>
 8005bf0:	e7a1      	b.n	8005b36 <_malloc_r+0x22>
 8005bf2:	6025      	str	r5, [r4, #0]
 8005bf4:	e7de      	b.n	8005bb4 <_malloc_r+0xa0>
 8005bf6:	bf00      	nop
 8005bf8:	20000328 	.word	0x20000328

08005bfc <_sungetc_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	1c4b      	adds	r3, r1, #1
 8005c00:	4614      	mov	r4, r2
 8005c02:	d103      	bne.n	8005c0c <_sungetc_r+0x10>
 8005c04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005c08:	4628      	mov	r0, r5
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	8993      	ldrh	r3, [r2, #12]
 8005c0e:	f023 0320 	bic.w	r3, r3, #32
 8005c12:	8193      	strh	r3, [r2, #12]
 8005c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c16:	6852      	ldr	r2, [r2, #4]
 8005c18:	b2cd      	uxtb	r5, r1
 8005c1a:	b18b      	cbz	r3, 8005c40 <_sungetc_r+0x44>
 8005c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	dd08      	ble.n	8005c34 <_sungetc_r+0x38>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	e7e9      	b.n	8005c08 <_sungetc_r+0xc>
 8005c34:	4621      	mov	r1, r4
 8005c36:	f000 ff45 	bl	8006ac4 <__submore>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d0f1      	beq.n	8005c22 <_sungetc_r+0x26>
 8005c3e:	e7e1      	b.n	8005c04 <_sungetc_r+0x8>
 8005c40:	6921      	ldr	r1, [r4, #16]
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	b151      	cbz	r1, 8005c5c <_sungetc_r+0x60>
 8005c46:	4299      	cmp	r1, r3
 8005c48:	d208      	bcs.n	8005c5c <_sungetc_r+0x60>
 8005c4a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005c4e:	42a9      	cmp	r1, r5
 8005c50:	d104      	bne.n	8005c5c <_sungetc_r+0x60>
 8005c52:	3b01      	subs	r3, #1
 8005c54:	3201      	adds	r2, #1
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	6062      	str	r2, [r4, #4]
 8005c5a:	e7d5      	b.n	8005c08 <_sungetc_r+0xc>
 8005c5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c64:	6363      	str	r3, [r4, #52]	; 0x34
 8005c66:	2303      	movs	r3, #3
 8005c68:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2301      	movs	r3, #1
 8005c74:	e7dc      	b.n	8005c30 <_sungetc_r+0x34>

08005c76 <__ssrefill_r>:
 8005c76:	b510      	push	{r4, lr}
 8005c78:	460c      	mov	r4, r1
 8005c7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005c7c:	b169      	cbz	r1, 8005c9a <__ssrefill_r+0x24>
 8005c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c82:	4299      	cmp	r1, r3
 8005c84:	d001      	beq.n	8005c8a <__ssrefill_r+0x14>
 8005c86:	f001 f94b 	bl	8006f20 <_free_r>
 8005c8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c8c:	6063      	str	r3, [r4, #4]
 8005c8e:	2000      	movs	r0, #0
 8005c90:	6360      	str	r0, [r4, #52]	; 0x34
 8005c92:	b113      	cbz	r3, 8005c9a <__ssrefill_r+0x24>
 8005c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6063      	str	r3, [r4, #4]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f043 0320 	orr.w	r3, r3, #32
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cae:	e7f3      	b.n	8005c98 <__ssrefill_r+0x22>

08005cb0 <__ssvfiscanf_r>:
 8005cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005cba:	2100      	movs	r1, #0
 8005cbc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005cc0:	49a6      	ldr	r1, [pc, #664]	; (8005f5c <__ssvfiscanf_r+0x2ac>)
 8005cc2:	91a0      	str	r1, [sp, #640]	; 0x280
 8005cc4:	f10d 0804 	add.w	r8, sp, #4
 8005cc8:	49a5      	ldr	r1, [pc, #660]	; (8005f60 <__ssvfiscanf_r+0x2b0>)
 8005cca:	4fa6      	ldr	r7, [pc, #664]	; (8005f64 <__ssvfiscanf_r+0x2b4>)
 8005ccc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005f68 <__ssvfiscanf_r+0x2b8>
 8005cd0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	91a1      	str	r1, [sp, #644]	; 0x284
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	7813      	ldrb	r3, [r2, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 815a 	beq.w	8005f96 <__ssvfiscanf_r+0x2e6>
 8005ce2:	5dd9      	ldrb	r1, [r3, r7]
 8005ce4:	f011 0108 	ands.w	r1, r1, #8
 8005ce8:	f102 0501 	add.w	r5, r2, #1
 8005cec:	d019      	beq.n	8005d22 <__ssvfiscanf_r+0x72>
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dd0f      	ble.n	8005d14 <__ssvfiscanf_r+0x64>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	781a      	ldrb	r2, [r3, #0]
 8005cf8:	5cba      	ldrb	r2, [r7, r2]
 8005cfa:	0712      	lsls	r2, r2, #28
 8005cfc:	d401      	bmi.n	8005d02 <__ssvfiscanf_r+0x52>
 8005cfe:	462a      	mov	r2, r5
 8005d00:	e7eb      	b.n	8005cda <__ssvfiscanf_r+0x2a>
 8005d02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d04:	3201      	adds	r2, #1
 8005d06:	9245      	str	r2, [sp, #276]	; 0x114
 8005d08:	6862      	ldr	r2, [r4, #4]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	6062      	str	r2, [r4, #4]
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	e7ec      	b.n	8005cee <__ssvfiscanf_r+0x3e>
 8005d14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d16:	4621      	mov	r1, r4
 8005d18:	4630      	mov	r0, r6
 8005d1a:	4798      	blx	r3
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d0e9      	beq.n	8005cf4 <__ssvfiscanf_r+0x44>
 8005d20:	e7ed      	b.n	8005cfe <__ssvfiscanf_r+0x4e>
 8005d22:	2b25      	cmp	r3, #37	; 0x25
 8005d24:	d012      	beq.n	8005d4c <__ssvfiscanf_r+0x9c>
 8005d26:	469a      	mov	sl, r3
 8005d28:	6863      	ldr	r3, [r4, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f340 8091 	ble.w	8005e52 <__ssvfiscanf_r+0x1a2>
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	7813      	ldrb	r3, [r2, #0]
 8005d34:	4553      	cmp	r3, sl
 8005d36:	f040 812e 	bne.w	8005f96 <__ssvfiscanf_r+0x2e6>
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	6063      	str	r3, [r4, #4]
 8005d40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005d42:	3201      	adds	r2, #1
 8005d44:	3301      	adds	r3, #1
 8005d46:	6022      	str	r2, [r4, #0]
 8005d48:	9345      	str	r3, [sp, #276]	; 0x114
 8005d4a:	e7d8      	b.n	8005cfe <__ssvfiscanf_r+0x4e>
 8005d4c:	9141      	str	r1, [sp, #260]	; 0x104
 8005d4e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005d50:	7853      	ldrb	r3, [r2, #1]
 8005d52:	2b2a      	cmp	r3, #42	; 0x2a
 8005d54:	bf02      	ittt	eq
 8005d56:	2310      	moveq	r3, #16
 8005d58:	1c95      	addeq	r5, r2, #2
 8005d5a:	9341      	streq	r3, [sp, #260]	; 0x104
 8005d5c:	220a      	movs	r2, #10
 8005d5e:	46aa      	mov	sl, r5
 8005d60:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005d64:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005d68:	2b09      	cmp	r3, #9
 8005d6a:	d91d      	bls.n	8005da8 <__ssvfiscanf_r+0xf8>
 8005d6c:	487e      	ldr	r0, [pc, #504]	; (8005f68 <__ssvfiscanf_r+0x2b8>)
 8005d6e:	2203      	movs	r2, #3
 8005d70:	f7fa fa3e 	bl	80001f0 <memchr>
 8005d74:	b140      	cbz	r0, 8005d88 <__ssvfiscanf_r+0xd8>
 8005d76:	2301      	movs	r3, #1
 8005d78:	eba0 0009 	sub.w	r0, r0, r9
 8005d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d82:	4318      	orrs	r0, r3
 8005d84:	9041      	str	r0, [sp, #260]	; 0x104
 8005d86:	4655      	mov	r5, sl
 8005d88:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d8c:	2b78      	cmp	r3, #120	; 0x78
 8005d8e:	d806      	bhi.n	8005d9e <__ssvfiscanf_r+0xee>
 8005d90:	2b57      	cmp	r3, #87	; 0x57
 8005d92:	d810      	bhi.n	8005db6 <__ssvfiscanf_r+0x106>
 8005d94:	2b25      	cmp	r3, #37	; 0x25
 8005d96:	d0c6      	beq.n	8005d26 <__ssvfiscanf_r+0x76>
 8005d98:	d856      	bhi.n	8005e48 <__ssvfiscanf_r+0x198>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d064      	beq.n	8005e68 <__ssvfiscanf_r+0x1b8>
 8005d9e:	2303      	movs	r3, #3
 8005da0:	9347      	str	r3, [sp, #284]	; 0x11c
 8005da2:	230a      	movs	r3, #10
 8005da4:	9342      	str	r3, [sp, #264]	; 0x108
 8005da6:	e071      	b.n	8005e8c <__ssvfiscanf_r+0x1dc>
 8005da8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005daa:	fb02 1103 	mla	r1, r2, r3, r1
 8005dae:	3930      	subs	r1, #48	; 0x30
 8005db0:	9143      	str	r1, [sp, #268]	; 0x10c
 8005db2:	4655      	mov	r5, sl
 8005db4:	e7d3      	b.n	8005d5e <__ssvfiscanf_r+0xae>
 8005db6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005dba:	2a20      	cmp	r2, #32
 8005dbc:	d8ef      	bhi.n	8005d9e <__ssvfiscanf_r+0xee>
 8005dbe:	a101      	add	r1, pc, #4	; (adr r1, 8005dc4 <__ssvfiscanf_r+0x114>)
 8005dc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005dc4:	08005e77 	.word	0x08005e77
 8005dc8:	08005d9f 	.word	0x08005d9f
 8005dcc:	08005d9f 	.word	0x08005d9f
 8005dd0:	08005ed5 	.word	0x08005ed5
 8005dd4:	08005d9f 	.word	0x08005d9f
 8005dd8:	08005d9f 	.word	0x08005d9f
 8005ddc:	08005d9f 	.word	0x08005d9f
 8005de0:	08005d9f 	.word	0x08005d9f
 8005de4:	08005d9f 	.word	0x08005d9f
 8005de8:	08005d9f 	.word	0x08005d9f
 8005dec:	08005d9f 	.word	0x08005d9f
 8005df0:	08005eeb 	.word	0x08005eeb
 8005df4:	08005ec1 	.word	0x08005ec1
 8005df8:	08005e4f 	.word	0x08005e4f
 8005dfc:	08005e4f 	.word	0x08005e4f
 8005e00:	08005e4f 	.word	0x08005e4f
 8005e04:	08005d9f 	.word	0x08005d9f
 8005e08:	08005ec5 	.word	0x08005ec5
 8005e0c:	08005d9f 	.word	0x08005d9f
 8005e10:	08005d9f 	.word	0x08005d9f
 8005e14:	08005d9f 	.word	0x08005d9f
 8005e18:	08005d9f 	.word	0x08005d9f
 8005e1c:	08005efb 	.word	0x08005efb
 8005e20:	08005ecd 	.word	0x08005ecd
 8005e24:	08005e6f 	.word	0x08005e6f
 8005e28:	08005d9f 	.word	0x08005d9f
 8005e2c:	08005d9f 	.word	0x08005d9f
 8005e30:	08005ef7 	.word	0x08005ef7
 8005e34:	08005d9f 	.word	0x08005d9f
 8005e38:	08005ec1 	.word	0x08005ec1
 8005e3c:	08005d9f 	.word	0x08005d9f
 8005e40:	08005d9f 	.word	0x08005d9f
 8005e44:	08005e77 	.word	0x08005e77
 8005e48:	3b45      	subs	r3, #69	; 0x45
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d8a7      	bhi.n	8005d9e <__ssvfiscanf_r+0xee>
 8005e4e:	2305      	movs	r3, #5
 8005e50:	e01b      	b.n	8005e8a <__ssvfiscanf_r+0x1da>
 8005e52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005e54:	4621      	mov	r1, r4
 8005e56:	4630      	mov	r0, r6
 8005e58:	4798      	blx	r3
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f43f af68 	beq.w	8005d30 <__ssvfiscanf_r+0x80>
 8005e60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005e62:	2800      	cmp	r0, #0
 8005e64:	f040 808d 	bne.w	8005f82 <__ssvfiscanf_r+0x2d2>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e6c:	e08f      	b.n	8005f8e <__ssvfiscanf_r+0x2de>
 8005e6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005e70:	f042 0220 	orr.w	r2, r2, #32
 8005e74:	9241      	str	r2, [sp, #260]	; 0x104
 8005e76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7c:	9241      	str	r2, [sp, #260]	; 0x104
 8005e7e:	2210      	movs	r2, #16
 8005e80:	2b6f      	cmp	r3, #111	; 0x6f
 8005e82:	9242      	str	r2, [sp, #264]	; 0x108
 8005e84:	bf34      	ite	cc
 8005e86:	2303      	movcc	r3, #3
 8005e88:	2304      	movcs	r3, #4
 8005e8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dd42      	ble.n	8005f18 <__ssvfiscanf_r+0x268>
 8005e92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005e94:	0659      	lsls	r1, r3, #25
 8005e96:	d404      	bmi.n	8005ea2 <__ssvfiscanf_r+0x1f2>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	5cba      	ldrb	r2, [r7, r2]
 8005e9e:	0712      	lsls	r2, r2, #28
 8005ea0:	d441      	bmi.n	8005f26 <__ssvfiscanf_r+0x276>
 8005ea2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	dc50      	bgt.n	8005f4a <__ssvfiscanf_r+0x29a>
 8005ea8:	466b      	mov	r3, sp
 8005eaa:	4622      	mov	r2, r4
 8005eac:	a941      	add	r1, sp, #260	; 0x104
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f000 fb64 	bl	800657c <_scanf_chars>
 8005eb4:	2801      	cmp	r0, #1
 8005eb6:	d06e      	beq.n	8005f96 <__ssvfiscanf_r+0x2e6>
 8005eb8:	2802      	cmp	r0, #2
 8005eba:	f47f af20 	bne.w	8005cfe <__ssvfiscanf_r+0x4e>
 8005ebe:	e7cf      	b.n	8005e60 <__ssvfiscanf_r+0x1b0>
 8005ec0:	220a      	movs	r2, #10
 8005ec2:	e7dd      	b.n	8005e80 <__ssvfiscanf_r+0x1d0>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9342      	str	r3, [sp, #264]	; 0x108
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e7de      	b.n	8005e8a <__ssvfiscanf_r+0x1da>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	9342      	str	r3, [sp, #264]	; 0x108
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	e7da      	b.n	8005e8a <__ssvfiscanf_r+0x1da>
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	f000 fcc4 	bl	8006864 <__sccl>
 8005edc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee2:	9341      	str	r3, [sp, #260]	; 0x104
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e7cf      	b.n	8005e8a <__ssvfiscanf_r+0x1da>
 8005eea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef0:	9341      	str	r3, [sp, #260]	; 0x104
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e7c9      	b.n	8005e8a <__ssvfiscanf_r+0x1da>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e7c7      	b.n	8005e8a <__ssvfiscanf_r+0x1da>
 8005efa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005efc:	06c3      	lsls	r3, r0, #27
 8005efe:	f53f aefe 	bmi.w	8005cfe <__ssvfiscanf_r+0x4e>
 8005f02:	9b00      	ldr	r3, [sp, #0]
 8005f04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005f06:	1d19      	adds	r1, r3, #4
 8005f08:	9100      	str	r1, [sp, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f010 0f01 	tst.w	r0, #1
 8005f10:	bf14      	ite	ne
 8005f12:	801a      	strhne	r2, [r3, #0]
 8005f14:	601a      	streq	r2, [r3, #0]
 8005f16:	e6f2      	b.n	8005cfe <__ssvfiscanf_r+0x4e>
 8005f18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	4798      	blx	r3
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d0b6      	beq.n	8005e92 <__ssvfiscanf_r+0x1e2>
 8005f24:	e79c      	b.n	8005e60 <__ssvfiscanf_r+0x1b0>
 8005f26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005f28:	3201      	adds	r2, #1
 8005f2a:	9245      	str	r2, [sp, #276]	; 0x114
 8005f2c:	6862      	ldr	r2, [r4, #4]
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	6062      	str	r2, [r4, #4]
 8005f34:	dd02      	ble.n	8005f3c <__ssvfiscanf_r+0x28c>
 8005f36:	3301      	adds	r3, #1
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	e7ad      	b.n	8005e98 <__ssvfiscanf_r+0x1e8>
 8005f3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005f3e:	4621      	mov	r1, r4
 8005f40:	4630      	mov	r0, r6
 8005f42:	4798      	blx	r3
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d0a7      	beq.n	8005e98 <__ssvfiscanf_r+0x1e8>
 8005f48:	e78a      	b.n	8005e60 <__ssvfiscanf_r+0x1b0>
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	dc0e      	bgt.n	8005f6c <__ssvfiscanf_r+0x2bc>
 8005f4e:	466b      	mov	r3, sp
 8005f50:	4622      	mov	r2, r4
 8005f52:	a941      	add	r1, sp, #260	; 0x104
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 fb6b 	bl	8006630 <_scanf_i>
 8005f5a:	e7ab      	b.n	8005eb4 <__ssvfiscanf_r+0x204>
 8005f5c:	08005bfd 	.word	0x08005bfd
 8005f60:	08005c77 	.word	0x08005c77
 8005f64:	08007353 	.word	0x08007353
 8005f68:	08007304 	.word	0x08007304
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <__ssvfiscanf_r+0x2ec>)
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f43f aec5 	beq.w	8005cfe <__ssvfiscanf_r+0x4e>
 8005f74:	466b      	mov	r3, sp
 8005f76:	4622      	mov	r2, r4
 8005f78:	a941      	add	r1, sp, #260	; 0x104
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f3af 8000 	nop.w
 8005f80:	e798      	b.n	8005eb4 <__ssvfiscanf_r+0x204>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f88:	bf18      	it	ne
 8005f8a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005f8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f96:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005f98:	e7f9      	b.n	8005f8e <__ssvfiscanf_r+0x2de>
 8005f9a:	bf00      	nop
 8005f9c:	00000000 	.word	0x00000000

08005fa0 <__sfputc_r>:
 8005fa0:	6893      	ldr	r3, [r2, #8]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	b410      	push	{r4}
 8005fa8:	6093      	str	r3, [r2, #8]
 8005faa:	da08      	bge.n	8005fbe <__sfputc_r+0x1e>
 8005fac:	6994      	ldr	r4, [r2, #24]
 8005fae:	42a3      	cmp	r3, r4
 8005fb0:	db01      	blt.n	8005fb6 <__sfputc_r+0x16>
 8005fb2:	290a      	cmp	r1, #10
 8005fb4:	d103      	bne.n	8005fbe <__sfputc_r+0x1e>
 8005fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fba:	f000 bdbd 	b.w	8006b38 <__swbuf_r>
 8005fbe:	6813      	ldr	r3, [r2, #0]
 8005fc0:	1c58      	adds	r0, r3, #1
 8005fc2:	6010      	str	r0, [r2, #0]
 8005fc4:	7019      	strb	r1, [r3, #0]
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <__sfputs_r>:
 8005fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	460f      	mov	r7, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	18d5      	adds	r5, r2, r3
 8005fd8:	42ac      	cmp	r4, r5
 8005fda:	d101      	bne.n	8005fe0 <__sfputs_r+0x12>
 8005fdc:	2000      	movs	r0, #0
 8005fde:	e007      	b.n	8005ff0 <__sfputs_r+0x22>
 8005fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe4:	463a      	mov	r2, r7
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff ffda 	bl	8005fa0 <__sfputc_r>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d1f3      	bne.n	8005fd8 <__sfputs_r+0xa>
 8005ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ff4 <_vfiprintf_r>:
 8005ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	b09d      	sub	sp, #116	; 0x74
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	4698      	mov	r8, r3
 8006000:	4606      	mov	r6, r0
 8006002:	b118      	cbz	r0, 800600c <_vfiprintf_r+0x18>
 8006004:	6983      	ldr	r3, [r0, #24]
 8006006:	b90b      	cbnz	r3, 800600c <_vfiprintf_r+0x18>
 8006008:	f7ff fcb2 	bl	8005970 <__sinit>
 800600c:	4b89      	ldr	r3, [pc, #548]	; (8006234 <_vfiprintf_r+0x240>)
 800600e:	429d      	cmp	r5, r3
 8006010:	d11b      	bne.n	800604a <_vfiprintf_r+0x56>
 8006012:	6875      	ldr	r5, [r6, #4]
 8006014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006016:	07d9      	lsls	r1, r3, #31
 8006018:	d405      	bmi.n	8006026 <_vfiprintf_r+0x32>
 800601a:	89ab      	ldrh	r3, [r5, #12]
 800601c:	059a      	lsls	r2, r3, #22
 800601e:	d402      	bmi.n	8006026 <_vfiprintf_r+0x32>
 8006020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006022:	f7ff fd43 	bl	8005aac <__retarget_lock_acquire_recursive>
 8006026:	89ab      	ldrh	r3, [r5, #12]
 8006028:	071b      	lsls	r3, r3, #28
 800602a:	d501      	bpl.n	8006030 <_vfiprintf_r+0x3c>
 800602c:	692b      	ldr	r3, [r5, #16]
 800602e:	b9eb      	cbnz	r3, 800606c <_vfiprintf_r+0x78>
 8006030:	4629      	mov	r1, r5
 8006032:	4630      	mov	r0, r6
 8006034:	f000 fdd2 	bl	8006bdc <__swsetup_r>
 8006038:	b1c0      	cbz	r0, 800606c <_vfiprintf_r+0x78>
 800603a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800603c:	07dc      	lsls	r4, r3, #31
 800603e:	d50e      	bpl.n	800605e <_vfiprintf_r+0x6a>
 8006040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006044:	b01d      	add	sp, #116	; 0x74
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	4b7b      	ldr	r3, [pc, #492]	; (8006238 <_vfiprintf_r+0x244>)
 800604c:	429d      	cmp	r5, r3
 800604e:	d101      	bne.n	8006054 <_vfiprintf_r+0x60>
 8006050:	68b5      	ldr	r5, [r6, #8]
 8006052:	e7df      	b.n	8006014 <_vfiprintf_r+0x20>
 8006054:	4b79      	ldr	r3, [pc, #484]	; (800623c <_vfiprintf_r+0x248>)
 8006056:	429d      	cmp	r5, r3
 8006058:	bf08      	it	eq
 800605a:	68f5      	ldreq	r5, [r6, #12]
 800605c:	e7da      	b.n	8006014 <_vfiprintf_r+0x20>
 800605e:	89ab      	ldrh	r3, [r5, #12]
 8006060:	0598      	lsls	r0, r3, #22
 8006062:	d4ed      	bmi.n	8006040 <_vfiprintf_r+0x4c>
 8006064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006066:	f7ff fd22 	bl	8005aae <__retarget_lock_release_recursive>
 800606a:	e7e9      	b.n	8006040 <_vfiprintf_r+0x4c>
 800606c:	2300      	movs	r3, #0
 800606e:	9309      	str	r3, [sp, #36]	; 0x24
 8006070:	2320      	movs	r3, #32
 8006072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006076:	f8cd 800c 	str.w	r8, [sp, #12]
 800607a:	2330      	movs	r3, #48	; 0x30
 800607c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006240 <_vfiprintf_r+0x24c>
 8006080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006084:	f04f 0901 	mov.w	r9, #1
 8006088:	4623      	mov	r3, r4
 800608a:	469a      	mov	sl, r3
 800608c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006090:	b10a      	cbz	r2, 8006096 <_vfiprintf_r+0xa2>
 8006092:	2a25      	cmp	r2, #37	; 0x25
 8006094:	d1f9      	bne.n	800608a <_vfiprintf_r+0x96>
 8006096:	ebba 0b04 	subs.w	fp, sl, r4
 800609a:	d00b      	beq.n	80060b4 <_vfiprintf_r+0xc0>
 800609c:	465b      	mov	r3, fp
 800609e:	4622      	mov	r2, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7ff ff93 	bl	8005fce <__sfputs_r>
 80060a8:	3001      	adds	r0, #1
 80060aa:	f000 80aa 	beq.w	8006202 <_vfiprintf_r+0x20e>
 80060ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060b0:	445a      	add	r2, fp
 80060b2:	9209      	str	r2, [sp, #36]	; 0x24
 80060b4:	f89a 3000 	ldrb.w	r3, [sl]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 80a2 	beq.w	8006202 <_vfiprintf_r+0x20e>
 80060be:	2300      	movs	r3, #0
 80060c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060c8:	f10a 0a01 	add.w	sl, sl, #1
 80060cc:	9304      	str	r3, [sp, #16]
 80060ce:	9307      	str	r3, [sp, #28]
 80060d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060d4:	931a      	str	r3, [sp, #104]	; 0x68
 80060d6:	4654      	mov	r4, sl
 80060d8:	2205      	movs	r2, #5
 80060da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060de:	4858      	ldr	r0, [pc, #352]	; (8006240 <_vfiprintf_r+0x24c>)
 80060e0:	f7fa f886 	bl	80001f0 <memchr>
 80060e4:	9a04      	ldr	r2, [sp, #16]
 80060e6:	b9d8      	cbnz	r0, 8006120 <_vfiprintf_r+0x12c>
 80060e8:	06d1      	lsls	r1, r2, #27
 80060ea:	bf44      	itt	mi
 80060ec:	2320      	movmi	r3, #32
 80060ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060f2:	0713      	lsls	r3, r2, #28
 80060f4:	bf44      	itt	mi
 80060f6:	232b      	movmi	r3, #43	; 0x2b
 80060f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006100:	2b2a      	cmp	r3, #42	; 0x2a
 8006102:	d015      	beq.n	8006130 <_vfiprintf_r+0x13c>
 8006104:	9a07      	ldr	r2, [sp, #28]
 8006106:	4654      	mov	r4, sl
 8006108:	2000      	movs	r0, #0
 800610a:	f04f 0c0a 	mov.w	ip, #10
 800610e:	4621      	mov	r1, r4
 8006110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006114:	3b30      	subs	r3, #48	; 0x30
 8006116:	2b09      	cmp	r3, #9
 8006118:	d94e      	bls.n	80061b8 <_vfiprintf_r+0x1c4>
 800611a:	b1b0      	cbz	r0, 800614a <_vfiprintf_r+0x156>
 800611c:	9207      	str	r2, [sp, #28]
 800611e:	e014      	b.n	800614a <_vfiprintf_r+0x156>
 8006120:	eba0 0308 	sub.w	r3, r0, r8
 8006124:	fa09 f303 	lsl.w	r3, r9, r3
 8006128:	4313      	orrs	r3, r2
 800612a:	9304      	str	r3, [sp, #16]
 800612c:	46a2      	mov	sl, r4
 800612e:	e7d2      	b.n	80060d6 <_vfiprintf_r+0xe2>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	1d19      	adds	r1, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9103      	str	r1, [sp, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	bfbb      	ittet	lt
 800613c:	425b      	neglt	r3, r3
 800613e:	f042 0202 	orrlt.w	r2, r2, #2
 8006142:	9307      	strge	r3, [sp, #28]
 8006144:	9307      	strlt	r3, [sp, #28]
 8006146:	bfb8      	it	lt
 8006148:	9204      	strlt	r2, [sp, #16]
 800614a:	7823      	ldrb	r3, [r4, #0]
 800614c:	2b2e      	cmp	r3, #46	; 0x2e
 800614e:	d10c      	bne.n	800616a <_vfiprintf_r+0x176>
 8006150:	7863      	ldrb	r3, [r4, #1]
 8006152:	2b2a      	cmp	r3, #42	; 0x2a
 8006154:	d135      	bne.n	80061c2 <_vfiprintf_r+0x1ce>
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	1d1a      	adds	r2, r3, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	9203      	str	r2, [sp, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	bfb8      	it	lt
 8006162:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006166:	3402      	adds	r4, #2
 8006168:	9305      	str	r3, [sp, #20]
 800616a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006250 <_vfiprintf_r+0x25c>
 800616e:	7821      	ldrb	r1, [r4, #0]
 8006170:	2203      	movs	r2, #3
 8006172:	4650      	mov	r0, sl
 8006174:	f7fa f83c 	bl	80001f0 <memchr>
 8006178:	b140      	cbz	r0, 800618c <_vfiprintf_r+0x198>
 800617a:	2340      	movs	r3, #64	; 0x40
 800617c:	eba0 000a 	sub.w	r0, r0, sl
 8006180:	fa03 f000 	lsl.w	r0, r3, r0
 8006184:	9b04      	ldr	r3, [sp, #16]
 8006186:	4303      	orrs	r3, r0
 8006188:	3401      	adds	r4, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006190:	482c      	ldr	r0, [pc, #176]	; (8006244 <_vfiprintf_r+0x250>)
 8006192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006196:	2206      	movs	r2, #6
 8006198:	f7fa f82a 	bl	80001f0 <memchr>
 800619c:	2800      	cmp	r0, #0
 800619e:	d03f      	beq.n	8006220 <_vfiprintf_r+0x22c>
 80061a0:	4b29      	ldr	r3, [pc, #164]	; (8006248 <_vfiprintf_r+0x254>)
 80061a2:	bb1b      	cbnz	r3, 80061ec <_vfiprintf_r+0x1f8>
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	3307      	adds	r3, #7
 80061a8:	f023 0307 	bic.w	r3, r3, #7
 80061ac:	3308      	adds	r3, #8
 80061ae:	9303      	str	r3, [sp, #12]
 80061b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b2:	443b      	add	r3, r7
 80061b4:	9309      	str	r3, [sp, #36]	; 0x24
 80061b6:	e767      	b.n	8006088 <_vfiprintf_r+0x94>
 80061b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80061bc:	460c      	mov	r4, r1
 80061be:	2001      	movs	r0, #1
 80061c0:	e7a5      	b.n	800610e <_vfiprintf_r+0x11a>
 80061c2:	2300      	movs	r3, #0
 80061c4:	3401      	adds	r4, #1
 80061c6:	9305      	str	r3, [sp, #20]
 80061c8:	4619      	mov	r1, r3
 80061ca:	f04f 0c0a 	mov.w	ip, #10
 80061ce:	4620      	mov	r0, r4
 80061d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061d4:	3a30      	subs	r2, #48	; 0x30
 80061d6:	2a09      	cmp	r2, #9
 80061d8:	d903      	bls.n	80061e2 <_vfiprintf_r+0x1ee>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0c5      	beq.n	800616a <_vfiprintf_r+0x176>
 80061de:	9105      	str	r1, [sp, #20]
 80061e0:	e7c3      	b.n	800616a <_vfiprintf_r+0x176>
 80061e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80061e6:	4604      	mov	r4, r0
 80061e8:	2301      	movs	r3, #1
 80061ea:	e7f0      	b.n	80061ce <_vfiprintf_r+0x1da>
 80061ec:	ab03      	add	r3, sp, #12
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	462a      	mov	r2, r5
 80061f2:	4b16      	ldr	r3, [pc, #88]	; (800624c <_vfiprintf_r+0x258>)
 80061f4:	a904      	add	r1, sp, #16
 80061f6:	4630      	mov	r0, r6
 80061f8:	f3af 8000 	nop.w
 80061fc:	4607      	mov	r7, r0
 80061fe:	1c78      	adds	r0, r7, #1
 8006200:	d1d6      	bne.n	80061b0 <_vfiprintf_r+0x1bc>
 8006202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006204:	07d9      	lsls	r1, r3, #31
 8006206:	d405      	bmi.n	8006214 <_vfiprintf_r+0x220>
 8006208:	89ab      	ldrh	r3, [r5, #12]
 800620a:	059a      	lsls	r2, r3, #22
 800620c:	d402      	bmi.n	8006214 <_vfiprintf_r+0x220>
 800620e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006210:	f7ff fc4d 	bl	8005aae <__retarget_lock_release_recursive>
 8006214:	89ab      	ldrh	r3, [r5, #12]
 8006216:	065b      	lsls	r3, r3, #25
 8006218:	f53f af12 	bmi.w	8006040 <_vfiprintf_r+0x4c>
 800621c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800621e:	e711      	b.n	8006044 <_vfiprintf_r+0x50>
 8006220:	ab03      	add	r3, sp, #12
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	462a      	mov	r2, r5
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <_vfiprintf_r+0x258>)
 8006228:	a904      	add	r1, sp, #16
 800622a:	4630      	mov	r0, r6
 800622c:	f000 f880 	bl	8006330 <_printf_i>
 8006230:	e7e4      	b.n	80061fc <_vfiprintf_r+0x208>
 8006232:	bf00      	nop
 8006234:	080072c4 	.word	0x080072c4
 8006238:	080072e4 	.word	0x080072e4
 800623c:	080072a4 	.word	0x080072a4
 8006240:	08007308 	.word	0x08007308
 8006244:	0800730e 	.word	0x0800730e
 8006248:	00000000 	.word	0x00000000
 800624c:	08005fcf 	.word	0x08005fcf
 8006250:	08007304 	.word	0x08007304

08006254 <_printf_common>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	4616      	mov	r6, r2
 800625a:	4699      	mov	r9, r3
 800625c:	688a      	ldr	r2, [r1, #8]
 800625e:	690b      	ldr	r3, [r1, #16]
 8006260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006264:	4293      	cmp	r3, r2
 8006266:	bfb8      	it	lt
 8006268:	4613      	movlt	r3, r2
 800626a:	6033      	str	r3, [r6, #0]
 800626c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006270:	4607      	mov	r7, r0
 8006272:	460c      	mov	r4, r1
 8006274:	b10a      	cbz	r2, 800627a <_printf_common+0x26>
 8006276:	3301      	adds	r3, #1
 8006278:	6033      	str	r3, [r6, #0]
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	0699      	lsls	r1, r3, #26
 800627e:	bf42      	ittt	mi
 8006280:	6833      	ldrmi	r3, [r6, #0]
 8006282:	3302      	addmi	r3, #2
 8006284:	6033      	strmi	r3, [r6, #0]
 8006286:	6825      	ldr	r5, [r4, #0]
 8006288:	f015 0506 	ands.w	r5, r5, #6
 800628c:	d106      	bne.n	800629c <_printf_common+0x48>
 800628e:	f104 0a19 	add.w	sl, r4, #25
 8006292:	68e3      	ldr	r3, [r4, #12]
 8006294:	6832      	ldr	r2, [r6, #0]
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	42ab      	cmp	r3, r5
 800629a:	dc26      	bgt.n	80062ea <_printf_common+0x96>
 800629c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062a0:	1e13      	subs	r3, r2, #0
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	bf18      	it	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	0692      	lsls	r2, r2, #26
 80062aa:	d42b      	bmi.n	8006304 <_printf_common+0xb0>
 80062ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b0:	4649      	mov	r1, r9
 80062b2:	4638      	mov	r0, r7
 80062b4:	47c0      	blx	r8
 80062b6:	3001      	adds	r0, #1
 80062b8:	d01e      	beq.n	80062f8 <_printf_common+0xa4>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	68e5      	ldr	r5, [r4, #12]
 80062be:	6832      	ldr	r2, [r6, #0]
 80062c0:	f003 0306 	and.w	r3, r3, #6
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	bf08      	it	eq
 80062c8:	1aad      	subeq	r5, r5, r2
 80062ca:	68a3      	ldr	r3, [r4, #8]
 80062cc:	6922      	ldr	r2, [r4, #16]
 80062ce:	bf0c      	ite	eq
 80062d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d4:	2500      	movne	r5, #0
 80062d6:	4293      	cmp	r3, r2
 80062d8:	bfc4      	itt	gt
 80062da:	1a9b      	subgt	r3, r3, r2
 80062dc:	18ed      	addgt	r5, r5, r3
 80062de:	2600      	movs	r6, #0
 80062e0:	341a      	adds	r4, #26
 80062e2:	42b5      	cmp	r5, r6
 80062e4:	d11a      	bne.n	800631c <_printf_common+0xc8>
 80062e6:	2000      	movs	r0, #0
 80062e8:	e008      	b.n	80062fc <_printf_common+0xa8>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4652      	mov	r2, sl
 80062ee:	4649      	mov	r1, r9
 80062f0:	4638      	mov	r0, r7
 80062f2:	47c0      	blx	r8
 80062f4:	3001      	adds	r0, #1
 80062f6:	d103      	bne.n	8006300 <_printf_common+0xac>
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006300:	3501      	adds	r5, #1
 8006302:	e7c6      	b.n	8006292 <_printf_common+0x3e>
 8006304:	18e1      	adds	r1, r4, r3
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	2030      	movs	r0, #48	; 0x30
 800630a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800630e:	4422      	add	r2, r4
 8006310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006318:	3302      	adds	r3, #2
 800631a:	e7c7      	b.n	80062ac <_printf_common+0x58>
 800631c:	2301      	movs	r3, #1
 800631e:	4622      	mov	r2, r4
 8006320:	4649      	mov	r1, r9
 8006322:	4638      	mov	r0, r7
 8006324:	47c0      	blx	r8
 8006326:	3001      	adds	r0, #1
 8006328:	d0e6      	beq.n	80062f8 <_printf_common+0xa4>
 800632a:	3601      	adds	r6, #1
 800632c:	e7d9      	b.n	80062e2 <_printf_common+0x8e>
	...

08006330 <_printf_i>:
 8006330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006334:	7e0f      	ldrb	r7, [r1, #24]
 8006336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006338:	2f78      	cmp	r7, #120	; 0x78
 800633a:	4691      	mov	r9, r2
 800633c:	4680      	mov	r8, r0
 800633e:	460c      	mov	r4, r1
 8006340:	469a      	mov	sl, r3
 8006342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006346:	d807      	bhi.n	8006358 <_printf_i+0x28>
 8006348:	2f62      	cmp	r7, #98	; 0x62
 800634a:	d80a      	bhi.n	8006362 <_printf_i+0x32>
 800634c:	2f00      	cmp	r7, #0
 800634e:	f000 80d8 	beq.w	8006502 <_printf_i+0x1d2>
 8006352:	2f58      	cmp	r7, #88	; 0x58
 8006354:	f000 80a3 	beq.w	800649e <_printf_i+0x16e>
 8006358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800635c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006360:	e03a      	b.n	80063d8 <_printf_i+0xa8>
 8006362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006366:	2b15      	cmp	r3, #21
 8006368:	d8f6      	bhi.n	8006358 <_printf_i+0x28>
 800636a:	a101      	add	r1, pc, #4	; (adr r1, 8006370 <_printf_i+0x40>)
 800636c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006370:	080063c9 	.word	0x080063c9
 8006374:	080063dd 	.word	0x080063dd
 8006378:	08006359 	.word	0x08006359
 800637c:	08006359 	.word	0x08006359
 8006380:	08006359 	.word	0x08006359
 8006384:	08006359 	.word	0x08006359
 8006388:	080063dd 	.word	0x080063dd
 800638c:	08006359 	.word	0x08006359
 8006390:	08006359 	.word	0x08006359
 8006394:	08006359 	.word	0x08006359
 8006398:	08006359 	.word	0x08006359
 800639c:	080064e9 	.word	0x080064e9
 80063a0:	0800640d 	.word	0x0800640d
 80063a4:	080064cb 	.word	0x080064cb
 80063a8:	08006359 	.word	0x08006359
 80063ac:	08006359 	.word	0x08006359
 80063b0:	0800650b 	.word	0x0800650b
 80063b4:	08006359 	.word	0x08006359
 80063b8:	0800640d 	.word	0x0800640d
 80063bc:	08006359 	.word	0x08006359
 80063c0:	08006359 	.word	0x08006359
 80063c4:	080064d3 	.word	0x080064d3
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	602a      	str	r2, [r5, #0]
 80063d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063d8:	2301      	movs	r3, #1
 80063da:	e0a3      	b.n	8006524 <_printf_i+0x1f4>
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	6829      	ldr	r1, [r5, #0]
 80063e0:	0606      	lsls	r6, r0, #24
 80063e2:	f101 0304 	add.w	r3, r1, #4
 80063e6:	d50a      	bpl.n	80063fe <_printf_i+0xce>
 80063e8:	680e      	ldr	r6, [r1, #0]
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	2e00      	cmp	r6, #0
 80063ee:	da03      	bge.n	80063f8 <_printf_i+0xc8>
 80063f0:	232d      	movs	r3, #45	; 0x2d
 80063f2:	4276      	negs	r6, r6
 80063f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f8:	485e      	ldr	r0, [pc, #376]	; (8006574 <_printf_i+0x244>)
 80063fa:	230a      	movs	r3, #10
 80063fc:	e019      	b.n	8006432 <_printf_i+0x102>
 80063fe:	680e      	ldr	r6, [r1, #0]
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006406:	bf18      	it	ne
 8006408:	b236      	sxthne	r6, r6
 800640a:	e7ef      	b.n	80063ec <_printf_i+0xbc>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	6820      	ldr	r0, [r4, #0]
 8006410:	1d19      	adds	r1, r3, #4
 8006412:	6029      	str	r1, [r5, #0]
 8006414:	0601      	lsls	r1, r0, #24
 8006416:	d501      	bpl.n	800641c <_printf_i+0xec>
 8006418:	681e      	ldr	r6, [r3, #0]
 800641a:	e002      	b.n	8006422 <_printf_i+0xf2>
 800641c:	0646      	lsls	r6, r0, #25
 800641e:	d5fb      	bpl.n	8006418 <_printf_i+0xe8>
 8006420:	881e      	ldrh	r6, [r3, #0]
 8006422:	4854      	ldr	r0, [pc, #336]	; (8006574 <_printf_i+0x244>)
 8006424:	2f6f      	cmp	r7, #111	; 0x6f
 8006426:	bf0c      	ite	eq
 8006428:	2308      	moveq	r3, #8
 800642a:	230a      	movne	r3, #10
 800642c:	2100      	movs	r1, #0
 800642e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006432:	6865      	ldr	r5, [r4, #4]
 8006434:	60a5      	str	r5, [r4, #8]
 8006436:	2d00      	cmp	r5, #0
 8006438:	bfa2      	ittt	ge
 800643a:	6821      	ldrge	r1, [r4, #0]
 800643c:	f021 0104 	bicge.w	r1, r1, #4
 8006440:	6021      	strge	r1, [r4, #0]
 8006442:	b90e      	cbnz	r6, 8006448 <_printf_i+0x118>
 8006444:	2d00      	cmp	r5, #0
 8006446:	d04d      	beq.n	80064e4 <_printf_i+0x1b4>
 8006448:	4615      	mov	r5, r2
 800644a:	fbb6 f1f3 	udiv	r1, r6, r3
 800644e:	fb03 6711 	mls	r7, r3, r1, r6
 8006452:	5dc7      	ldrb	r7, [r0, r7]
 8006454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006458:	4637      	mov	r7, r6
 800645a:	42bb      	cmp	r3, r7
 800645c:	460e      	mov	r6, r1
 800645e:	d9f4      	bls.n	800644a <_printf_i+0x11a>
 8006460:	2b08      	cmp	r3, #8
 8006462:	d10b      	bne.n	800647c <_printf_i+0x14c>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07de      	lsls	r6, r3, #31
 8006468:	d508      	bpl.n	800647c <_printf_i+0x14c>
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6861      	ldr	r1, [r4, #4]
 800646e:	4299      	cmp	r1, r3
 8006470:	bfde      	ittt	le
 8006472:	2330      	movle	r3, #48	; 0x30
 8006474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006478:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800647c:	1b52      	subs	r2, r2, r5
 800647e:	6122      	str	r2, [r4, #16]
 8006480:	f8cd a000 	str.w	sl, [sp]
 8006484:	464b      	mov	r3, r9
 8006486:	aa03      	add	r2, sp, #12
 8006488:	4621      	mov	r1, r4
 800648a:	4640      	mov	r0, r8
 800648c:	f7ff fee2 	bl	8006254 <_printf_common>
 8006490:	3001      	adds	r0, #1
 8006492:	d14c      	bne.n	800652e <_printf_i+0x1fe>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006498:	b004      	add	sp, #16
 800649a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649e:	4835      	ldr	r0, [pc, #212]	; (8006574 <_printf_i+0x244>)
 80064a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064a4:	6829      	ldr	r1, [r5, #0]
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064ac:	6029      	str	r1, [r5, #0]
 80064ae:	061d      	lsls	r5, r3, #24
 80064b0:	d514      	bpl.n	80064dc <_printf_i+0x1ac>
 80064b2:	07df      	lsls	r7, r3, #31
 80064b4:	bf44      	itt	mi
 80064b6:	f043 0320 	orrmi.w	r3, r3, #32
 80064ba:	6023      	strmi	r3, [r4, #0]
 80064bc:	b91e      	cbnz	r6, 80064c6 <_printf_i+0x196>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	f023 0320 	bic.w	r3, r3, #32
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	2310      	movs	r3, #16
 80064c8:	e7b0      	b.n	800642c <_printf_i+0xfc>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	f043 0320 	orr.w	r3, r3, #32
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	2378      	movs	r3, #120	; 0x78
 80064d4:	4828      	ldr	r0, [pc, #160]	; (8006578 <_printf_i+0x248>)
 80064d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064da:	e7e3      	b.n	80064a4 <_printf_i+0x174>
 80064dc:	0659      	lsls	r1, r3, #25
 80064de:	bf48      	it	mi
 80064e0:	b2b6      	uxthmi	r6, r6
 80064e2:	e7e6      	b.n	80064b2 <_printf_i+0x182>
 80064e4:	4615      	mov	r5, r2
 80064e6:	e7bb      	b.n	8006460 <_printf_i+0x130>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	6826      	ldr	r6, [r4, #0]
 80064ec:	6961      	ldr	r1, [r4, #20]
 80064ee:	1d18      	adds	r0, r3, #4
 80064f0:	6028      	str	r0, [r5, #0]
 80064f2:	0635      	lsls	r5, r6, #24
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	d501      	bpl.n	80064fc <_printf_i+0x1cc>
 80064f8:	6019      	str	r1, [r3, #0]
 80064fa:	e002      	b.n	8006502 <_printf_i+0x1d2>
 80064fc:	0670      	lsls	r0, r6, #25
 80064fe:	d5fb      	bpl.n	80064f8 <_printf_i+0x1c8>
 8006500:	8019      	strh	r1, [r3, #0]
 8006502:	2300      	movs	r3, #0
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	4615      	mov	r5, r2
 8006508:	e7ba      	b.n	8006480 <_printf_i+0x150>
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	1d1a      	adds	r2, r3, #4
 800650e:	602a      	str	r2, [r5, #0]
 8006510:	681d      	ldr	r5, [r3, #0]
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	2100      	movs	r1, #0
 8006516:	4628      	mov	r0, r5
 8006518:	f7f9 fe6a 	bl	80001f0 <memchr>
 800651c:	b108      	cbz	r0, 8006522 <_printf_i+0x1f2>
 800651e:	1b40      	subs	r0, r0, r5
 8006520:	6060      	str	r0, [r4, #4]
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	2300      	movs	r3, #0
 8006528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652c:	e7a8      	b.n	8006480 <_printf_i+0x150>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	462a      	mov	r2, r5
 8006532:	4649      	mov	r1, r9
 8006534:	4640      	mov	r0, r8
 8006536:	47d0      	blx	sl
 8006538:	3001      	adds	r0, #1
 800653a:	d0ab      	beq.n	8006494 <_printf_i+0x164>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	079b      	lsls	r3, r3, #30
 8006540:	d413      	bmi.n	800656a <_printf_i+0x23a>
 8006542:	68e0      	ldr	r0, [r4, #12]
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	4298      	cmp	r0, r3
 8006548:	bfb8      	it	lt
 800654a:	4618      	movlt	r0, r3
 800654c:	e7a4      	b.n	8006498 <_printf_i+0x168>
 800654e:	2301      	movs	r3, #1
 8006550:	4632      	mov	r2, r6
 8006552:	4649      	mov	r1, r9
 8006554:	4640      	mov	r0, r8
 8006556:	47d0      	blx	sl
 8006558:	3001      	adds	r0, #1
 800655a:	d09b      	beq.n	8006494 <_printf_i+0x164>
 800655c:	3501      	adds	r5, #1
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	9903      	ldr	r1, [sp, #12]
 8006562:	1a5b      	subs	r3, r3, r1
 8006564:	42ab      	cmp	r3, r5
 8006566:	dcf2      	bgt.n	800654e <_printf_i+0x21e>
 8006568:	e7eb      	b.n	8006542 <_printf_i+0x212>
 800656a:	2500      	movs	r5, #0
 800656c:	f104 0619 	add.w	r6, r4, #25
 8006570:	e7f5      	b.n	800655e <_printf_i+0x22e>
 8006572:	bf00      	nop
 8006574:	08007315 	.word	0x08007315
 8006578:	08007326 	.word	0x08007326

0800657c <_scanf_chars>:
 800657c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006580:	4615      	mov	r5, r2
 8006582:	688a      	ldr	r2, [r1, #8]
 8006584:	4680      	mov	r8, r0
 8006586:	460c      	mov	r4, r1
 8006588:	b932      	cbnz	r2, 8006598 <_scanf_chars+0x1c>
 800658a:	698a      	ldr	r2, [r1, #24]
 800658c:	2a00      	cmp	r2, #0
 800658e:	bf0c      	ite	eq
 8006590:	2201      	moveq	r2, #1
 8006592:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8006596:	608a      	str	r2, [r1, #8]
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800662c <_scanf_chars+0xb0>
 800659e:	06d1      	lsls	r1, r2, #27
 80065a0:	bf5f      	itttt	pl
 80065a2:	681a      	ldrpl	r2, [r3, #0]
 80065a4:	1d11      	addpl	r1, r2, #4
 80065a6:	6019      	strpl	r1, [r3, #0]
 80065a8:	6816      	ldrpl	r6, [r2, #0]
 80065aa:	2700      	movs	r7, #0
 80065ac:	69a0      	ldr	r0, [r4, #24]
 80065ae:	b188      	cbz	r0, 80065d4 <_scanf_chars+0x58>
 80065b0:	2801      	cmp	r0, #1
 80065b2:	d107      	bne.n	80065c4 <_scanf_chars+0x48>
 80065b4:	682a      	ldr	r2, [r5, #0]
 80065b6:	7811      	ldrb	r1, [r2, #0]
 80065b8:	6962      	ldr	r2, [r4, #20]
 80065ba:	5c52      	ldrb	r2, [r2, r1]
 80065bc:	b952      	cbnz	r2, 80065d4 <_scanf_chars+0x58>
 80065be:	2f00      	cmp	r7, #0
 80065c0:	d031      	beq.n	8006626 <_scanf_chars+0xaa>
 80065c2:	e022      	b.n	800660a <_scanf_chars+0x8e>
 80065c4:	2802      	cmp	r0, #2
 80065c6:	d120      	bne.n	800660a <_scanf_chars+0x8e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80065d0:	071b      	lsls	r3, r3, #28
 80065d2:	d41a      	bmi.n	800660a <_scanf_chars+0x8e>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	06da      	lsls	r2, r3, #27
 80065d8:	bf5e      	ittt	pl
 80065da:	682b      	ldrpl	r3, [r5, #0]
 80065dc:	781b      	ldrbpl	r3, [r3, #0]
 80065de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80065e2:	682a      	ldr	r2, [r5, #0]
 80065e4:	686b      	ldr	r3, [r5, #4]
 80065e6:	3201      	adds	r2, #1
 80065e8:	602a      	str	r2, [r5, #0]
 80065ea:	68a2      	ldr	r2, [r4, #8]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	3a01      	subs	r2, #1
 80065f0:	606b      	str	r3, [r5, #4]
 80065f2:	3701      	adds	r7, #1
 80065f4:	60a2      	str	r2, [r4, #8]
 80065f6:	b142      	cbz	r2, 800660a <_scanf_chars+0x8e>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	dcd7      	bgt.n	80065ac <_scanf_chars+0x30>
 80065fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006600:	4629      	mov	r1, r5
 8006602:	4640      	mov	r0, r8
 8006604:	4798      	blx	r3
 8006606:	2800      	cmp	r0, #0
 8006608:	d0d0      	beq.n	80065ac <_scanf_chars+0x30>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	f013 0310 	ands.w	r3, r3, #16
 8006610:	d105      	bne.n	800661e <_scanf_chars+0xa2>
 8006612:	68e2      	ldr	r2, [r4, #12]
 8006614:	3201      	adds	r2, #1
 8006616:	60e2      	str	r2, [r4, #12]
 8006618:	69a2      	ldr	r2, [r4, #24]
 800661a:	b102      	cbz	r2, 800661e <_scanf_chars+0xa2>
 800661c:	7033      	strb	r3, [r6, #0]
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	443b      	add	r3, r7
 8006622:	6123      	str	r3, [r4, #16]
 8006624:	2000      	movs	r0, #0
 8006626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662a:	bf00      	nop
 800662c:	08007353 	.word	0x08007353

08006630 <_scanf_i>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	4698      	mov	r8, r3
 8006636:	4b76      	ldr	r3, [pc, #472]	; (8006810 <_scanf_i+0x1e0>)
 8006638:	460c      	mov	r4, r1
 800663a:	4682      	mov	sl, r0
 800663c:	4616      	mov	r6, r2
 800663e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006642:	b087      	sub	sp, #28
 8006644:	ab03      	add	r3, sp, #12
 8006646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800664a:	4b72      	ldr	r3, [pc, #456]	; (8006814 <_scanf_i+0x1e4>)
 800664c:	69a1      	ldr	r1, [r4, #24]
 800664e:	4a72      	ldr	r2, [pc, #456]	; (8006818 <_scanf_i+0x1e8>)
 8006650:	2903      	cmp	r1, #3
 8006652:	bf18      	it	ne
 8006654:	461a      	movne	r2, r3
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	9201      	str	r2, [sp, #4]
 800665a:	1e5a      	subs	r2, r3, #1
 800665c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006660:	bf88      	it	hi
 8006662:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006666:	4627      	mov	r7, r4
 8006668:	bf82      	ittt	hi
 800666a:	eb03 0905 	addhi.w	r9, r3, r5
 800666e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006672:	60a3      	strhi	r3, [r4, #8]
 8006674:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006678:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800667c:	bf98      	it	ls
 800667e:	f04f 0900 	movls.w	r9, #0
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	463d      	mov	r5, r7
 8006686:	f04f 0b00 	mov.w	fp, #0
 800668a:	6831      	ldr	r1, [r6, #0]
 800668c:	ab03      	add	r3, sp, #12
 800668e:	7809      	ldrb	r1, [r1, #0]
 8006690:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006694:	2202      	movs	r2, #2
 8006696:	f7f9 fdab 	bl	80001f0 <memchr>
 800669a:	b328      	cbz	r0, 80066e8 <_scanf_i+0xb8>
 800669c:	f1bb 0f01 	cmp.w	fp, #1
 80066a0:	d159      	bne.n	8006756 <_scanf_i+0x126>
 80066a2:	6862      	ldr	r2, [r4, #4]
 80066a4:	b92a      	cbnz	r2, 80066b2 <_scanf_i+0x82>
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	2308      	movs	r3, #8
 80066aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ae:	6063      	str	r3, [r4, #4]
 80066b0:	6022      	str	r2, [r4, #0]
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	68a2      	ldr	r2, [r4, #8]
 80066bc:	1e51      	subs	r1, r2, #1
 80066be:	60a1      	str	r1, [r4, #8]
 80066c0:	b192      	cbz	r2, 80066e8 <_scanf_i+0xb8>
 80066c2:	6832      	ldr	r2, [r6, #0]
 80066c4:	1c51      	adds	r1, r2, #1
 80066c6:	6031      	str	r1, [r6, #0]
 80066c8:	7812      	ldrb	r2, [r2, #0]
 80066ca:	f805 2b01 	strb.w	r2, [r5], #1
 80066ce:	6872      	ldr	r2, [r6, #4]
 80066d0:	3a01      	subs	r2, #1
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	6072      	str	r2, [r6, #4]
 80066d6:	dc07      	bgt.n	80066e8 <_scanf_i+0xb8>
 80066d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80066dc:	4631      	mov	r1, r6
 80066de:	4650      	mov	r0, sl
 80066e0:	4790      	blx	r2
 80066e2:	2800      	cmp	r0, #0
 80066e4:	f040 8085 	bne.w	80067f2 <_scanf_i+0x1c2>
 80066e8:	f10b 0b01 	add.w	fp, fp, #1
 80066ec:	f1bb 0f03 	cmp.w	fp, #3
 80066f0:	d1cb      	bne.n	800668a <_scanf_i+0x5a>
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	b90b      	cbnz	r3, 80066fa <_scanf_i+0xca>
 80066f6:	230a      	movs	r3, #10
 80066f8:	6063      	str	r3, [r4, #4]
 80066fa:	6863      	ldr	r3, [r4, #4]
 80066fc:	4947      	ldr	r1, [pc, #284]	; (800681c <_scanf_i+0x1ec>)
 80066fe:	6960      	ldr	r0, [r4, #20]
 8006700:	1ac9      	subs	r1, r1, r3
 8006702:	f000 f8af 	bl	8006864 <__sccl>
 8006706:	f04f 0b00 	mov.w	fp, #0
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d03d      	beq.n	800678e <_scanf_i+0x15e>
 8006712:	6831      	ldr	r1, [r6, #0]
 8006714:	6960      	ldr	r0, [r4, #20]
 8006716:	f891 c000 	ldrb.w	ip, [r1]
 800671a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800671e:	2800      	cmp	r0, #0
 8006720:	d035      	beq.n	800678e <_scanf_i+0x15e>
 8006722:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006726:	d124      	bne.n	8006772 <_scanf_i+0x142>
 8006728:	0510      	lsls	r0, r2, #20
 800672a:	d522      	bpl.n	8006772 <_scanf_i+0x142>
 800672c:	f10b 0b01 	add.w	fp, fp, #1
 8006730:	f1b9 0f00 	cmp.w	r9, #0
 8006734:	d003      	beq.n	800673e <_scanf_i+0x10e>
 8006736:	3301      	adds	r3, #1
 8006738:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800673c:	60a3      	str	r3, [r4, #8]
 800673e:	6873      	ldr	r3, [r6, #4]
 8006740:	3b01      	subs	r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	6073      	str	r3, [r6, #4]
 8006746:	dd1b      	ble.n	8006780 <_scanf_i+0x150>
 8006748:	6833      	ldr	r3, [r6, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	6033      	str	r3, [r6, #0]
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	3b01      	subs	r3, #1
 8006752:	60a3      	str	r3, [r4, #8]
 8006754:	e7d9      	b.n	800670a <_scanf_i+0xda>
 8006756:	f1bb 0f02 	cmp.w	fp, #2
 800675a:	d1ae      	bne.n	80066ba <_scanf_i+0x8a>
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006762:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006766:	d1bf      	bne.n	80066e8 <_scanf_i+0xb8>
 8006768:	2310      	movs	r3, #16
 800676a:	6063      	str	r3, [r4, #4]
 800676c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006770:	e7a2      	b.n	80066b8 <_scanf_i+0x88>
 8006772:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006776:	6022      	str	r2, [r4, #0]
 8006778:	780b      	ldrb	r3, [r1, #0]
 800677a:	f805 3b01 	strb.w	r3, [r5], #1
 800677e:	e7de      	b.n	800673e <_scanf_i+0x10e>
 8006780:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006784:	4631      	mov	r1, r6
 8006786:	4650      	mov	r0, sl
 8006788:	4798      	blx	r3
 800678a:	2800      	cmp	r0, #0
 800678c:	d0df      	beq.n	800674e <_scanf_i+0x11e>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	05db      	lsls	r3, r3, #23
 8006792:	d50d      	bpl.n	80067b0 <_scanf_i+0x180>
 8006794:	42bd      	cmp	r5, r7
 8006796:	d909      	bls.n	80067ac <_scanf_i+0x17c>
 8006798:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800679c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067a0:	4632      	mov	r2, r6
 80067a2:	4650      	mov	r0, sl
 80067a4:	4798      	blx	r3
 80067a6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80067aa:	464d      	mov	r5, r9
 80067ac:	42bd      	cmp	r5, r7
 80067ae:	d02d      	beq.n	800680c <_scanf_i+0x1dc>
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	f012 0210 	ands.w	r2, r2, #16
 80067b6:	d113      	bne.n	80067e0 <_scanf_i+0x1b0>
 80067b8:	702a      	strb	r2, [r5, #0]
 80067ba:	6863      	ldr	r3, [r4, #4]
 80067bc:	9e01      	ldr	r6, [sp, #4]
 80067be:	4639      	mov	r1, r7
 80067c0:	4650      	mov	r0, sl
 80067c2:	47b0      	blx	r6
 80067c4:	6821      	ldr	r1, [r4, #0]
 80067c6:	f8d8 3000 	ldr.w	r3, [r8]
 80067ca:	f011 0f20 	tst.w	r1, #32
 80067ce:	d013      	beq.n	80067f8 <_scanf_i+0x1c8>
 80067d0:	1d1a      	adds	r2, r3, #4
 80067d2:	f8c8 2000 	str.w	r2, [r8]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6018      	str	r0, [r3, #0]
 80067da:	68e3      	ldr	r3, [r4, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	60e3      	str	r3, [r4, #12]
 80067e0:	1bed      	subs	r5, r5, r7
 80067e2:	44ab      	add	fp, r5
 80067e4:	6925      	ldr	r5, [r4, #16]
 80067e6:	445d      	add	r5, fp
 80067e8:	6125      	str	r5, [r4, #16]
 80067ea:	2000      	movs	r0, #0
 80067ec:	b007      	add	sp, #28
 80067ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f2:	f04f 0b00 	mov.w	fp, #0
 80067f6:	e7ca      	b.n	800678e <_scanf_i+0x15e>
 80067f8:	1d1a      	adds	r2, r3, #4
 80067fa:	f8c8 2000 	str.w	r2, [r8]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f011 0f01 	tst.w	r1, #1
 8006804:	bf14      	ite	ne
 8006806:	8018      	strhne	r0, [r3, #0]
 8006808:	6018      	streq	r0, [r3, #0]
 800680a:	e7e6      	b.n	80067da <_scanf_i+0x1aa>
 800680c:	2001      	movs	r0, #1
 800680e:	e7ed      	b.n	80067ec <_scanf_i+0x1bc>
 8006810:	08007274 	.word	0x08007274
 8006814:	08006ac1 	.word	0x08006ac1
 8006818:	080069d9 	.word	0x080069d9
 800681c:	08007350 	.word	0x08007350

08006820 <_read_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d07      	ldr	r5, [pc, #28]	; (8006840 <_read_r+0x20>)
 8006824:	4604      	mov	r4, r0
 8006826:	4608      	mov	r0, r1
 8006828:	4611      	mov	r1, r2
 800682a:	2200      	movs	r2, #0
 800682c:	602a      	str	r2, [r5, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	f7fb fa76 	bl	8001d20 <_read>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_read_r+0x1e>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_read_r+0x1e>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20000330 	.word	0x20000330

08006844 <_sbrk_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d06      	ldr	r5, [pc, #24]	; (8006860 <_sbrk_r+0x1c>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	f7fb fab8 	bl	8001dc4 <_sbrk>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_sbrk_r+0x1a>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_sbrk_r+0x1a>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20000330 	.word	0x20000330

08006864 <__sccl>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	780b      	ldrb	r3, [r1, #0]
 8006868:	4604      	mov	r4, r0
 800686a:	2b5e      	cmp	r3, #94	; 0x5e
 800686c:	bf0b      	itete	eq
 800686e:	784b      	ldrbeq	r3, [r1, #1]
 8006870:	1c48      	addne	r0, r1, #1
 8006872:	1c88      	addeq	r0, r1, #2
 8006874:	2200      	movne	r2, #0
 8006876:	bf08      	it	eq
 8006878:	2201      	moveq	r2, #1
 800687a:	1e61      	subs	r1, r4, #1
 800687c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006880:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006884:	42a9      	cmp	r1, r5
 8006886:	d1fb      	bne.n	8006880 <__sccl+0x1c>
 8006888:	b90b      	cbnz	r3, 800688e <__sccl+0x2a>
 800688a:	3801      	subs	r0, #1
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	f082 0201 	eor.w	r2, r2, #1
 8006892:	54e2      	strb	r2, [r4, r3]
 8006894:	4605      	mov	r5, r0
 8006896:	4628      	mov	r0, r5
 8006898:	f810 1b01 	ldrb.w	r1, [r0], #1
 800689c:	292d      	cmp	r1, #45	; 0x2d
 800689e:	d006      	beq.n	80068ae <__sccl+0x4a>
 80068a0:	295d      	cmp	r1, #93	; 0x5d
 80068a2:	d0f3      	beq.n	800688c <__sccl+0x28>
 80068a4:	b909      	cbnz	r1, 80068aa <__sccl+0x46>
 80068a6:	4628      	mov	r0, r5
 80068a8:	e7f0      	b.n	800688c <__sccl+0x28>
 80068aa:	460b      	mov	r3, r1
 80068ac:	e7f1      	b.n	8006892 <__sccl+0x2e>
 80068ae:	786e      	ldrb	r6, [r5, #1]
 80068b0:	2e5d      	cmp	r6, #93	; 0x5d
 80068b2:	d0fa      	beq.n	80068aa <__sccl+0x46>
 80068b4:	42b3      	cmp	r3, r6
 80068b6:	dcf8      	bgt.n	80068aa <__sccl+0x46>
 80068b8:	3502      	adds	r5, #2
 80068ba:	4619      	mov	r1, r3
 80068bc:	3101      	adds	r1, #1
 80068be:	428e      	cmp	r6, r1
 80068c0:	5462      	strb	r2, [r4, r1]
 80068c2:	dcfb      	bgt.n	80068bc <__sccl+0x58>
 80068c4:	1af1      	subs	r1, r6, r3
 80068c6:	3901      	subs	r1, #1
 80068c8:	1c58      	adds	r0, r3, #1
 80068ca:	42b3      	cmp	r3, r6
 80068cc:	bfa8      	it	ge
 80068ce:	2100      	movge	r1, #0
 80068d0:	1843      	adds	r3, r0, r1
 80068d2:	e7e0      	b.n	8006896 <__sccl+0x32>

080068d4 <_strtol_l.constprop.0>:
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068da:	d001      	beq.n	80068e0 <_strtol_l.constprop.0+0xc>
 80068dc:	2b24      	cmp	r3, #36	; 0x24
 80068de:	d906      	bls.n	80068ee <_strtol_l.constprop.0+0x1a>
 80068e0:	f7fe ff02 	bl	80056e8 <__errno>
 80068e4:	2316      	movs	r3, #22
 80068e6:	6003      	str	r3, [r0, #0]
 80068e8:	2000      	movs	r0, #0
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80069d4 <_strtol_l.constprop.0+0x100>
 80068f2:	460d      	mov	r5, r1
 80068f4:	462e      	mov	r6, r5
 80068f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80068fe:	f017 0708 	ands.w	r7, r7, #8
 8006902:	d1f7      	bne.n	80068f4 <_strtol_l.constprop.0+0x20>
 8006904:	2c2d      	cmp	r4, #45	; 0x2d
 8006906:	d132      	bne.n	800696e <_strtol_l.constprop.0+0x9a>
 8006908:	782c      	ldrb	r4, [r5, #0]
 800690a:	2701      	movs	r7, #1
 800690c:	1cb5      	adds	r5, r6, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d05b      	beq.n	80069ca <_strtol_l.constprop.0+0xf6>
 8006912:	2b10      	cmp	r3, #16
 8006914:	d109      	bne.n	800692a <_strtol_l.constprop.0+0x56>
 8006916:	2c30      	cmp	r4, #48	; 0x30
 8006918:	d107      	bne.n	800692a <_strtol_l.constprop.0+0x56>
 800691a:	782c      	ldrb	r4, [r5, #0]
 800691c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006920:	2c58      	cmp	r4, #88	; 0x58
 8006922:	d14d      	bne.n	80069c0 <_strtol_l.constprop.0+0xec>
 8006924:	786c      	ldrb	r4, [r5, #1]
 8006926:	2310      	movs	r3, #16
 8006928:	3502      	adds	r5, #2
 800692a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800692e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006932:	f04f 0c00 	mov.w	ip, #0
 8006936:	fbb8 f9f3 	udiv	r9, r8, r3
 800693a:	4666      	mov	r6, ip
 800693c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006940:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006944:	f1be 0f09 	cmp.w	lr, #9
 8006948:	d816      	bhi.n	8006978 <_strtol_l.constprop.0+0xa4>
 800694a:	4674      	mov	r4, lr
 800694c:	42a3      	cmp	r3, r4
 800694e:	dd24      	ble.n	800699a <_strtol_l.constprop.0+0xc6>
 8006950:	f1bc 0f00 	cmp.w	ip, #0
 8006954:	db1e      	blt.n	8006994 <_strtol_l.constprop.0+0xc0>
 8006956:	45b1      	cmp	r9, r6
 8006958:	d31c      	bcc.n	8006994 <_strtol_l.constprop.0+0xc0>
 800695a:	d101      	bne.n	8006960 <_strtol_l.constprop.0+0x8c>
 800695c:	45a2      	cmp	sl, r4
 800695e:	db19      	blt.n	8006994 <_strtol_l.constprop.0+0xc0>
 8006960:	fb06 4603 	mla	r6, r6, r3, r4
 8006964:	f04f 0c01 	mov.w	ip, #1
 8006968:	f815 4b01 	ldrb.w	r4, [r5], #1
 800696c:	e7e8      	b.n	8006940 <_strtol_l.constprop.0+0x6c>
 800696e:	2c2b      	cmp	r4, #43	; 0x2b
 8006970:	bf04      	itt	eq
 8006972:	782c      	ldrbeq	r4, [r5, #0]
 8006974:	1cb5      	addeq	r5, r6, #2
 8006976:	e7ca      	b.n	800690e <_strtol_l.constprop.0+0x3a>
 8006978:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800697c:	f1be 0f19 	cmp.w	lr, #25
 8006980:	d801      	bhi.n	8006986 <_strtol_l.constprop.0+0xb2>
 8006982:	3c37      	subs	r4, #55	; 0x37
 8006984:	e7e2      	b.n	800694c <_strtol_l.constprop.0+0x78>
 8006986:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800698a:	f1be 0f19 	cmp.w	lr, #25
 800698e:	d804      	bhi.n	800699a <_strtol_l.constprop.0+0xc6>
 8006990:	3c57      	subs	r4, #87	; 0x57
 8006992:	e7db      	b.n	800694c <_strtol_l.constprop.0+0x78>
 8006994:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006998:	e7e6      	b.n	8006968 <_strtol_l.constprop.0+0x94>
 800699a:	f1bc 0f00 	cmp.w	ip, #0
 800699e:	da05      	bge.n	80069ac <_strtol_l.constprop.0+0xd8>
 80069a0:	2322      	movs	r3, #34	; 0x22
 80069a2:	6003      	str	r3, [r0, #0]
 80069a4:	4646      	mov	r6, r8
 80069a6:	b942      	cbnz	r2, 80069ba <_strtol_l.constprop.0+0xe6>
 80069a8:	4630      	mov	r0, r6
 80069aa:	e79e      	b.n	80068ea <_strtol_l.constprop.0+0x16>
 80069ac:	b107      	cbz	r7, 80069b0 <_strtol_l.constprop.0+0xdc>
 80069ae:	4276      	negs	r6, r6
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	d0f9      	beq.n	80069a8 <_strtol_l.constprop.0+0xd4>
 80069b4:	f1bc 0f00 	cmp.w	ip, #0
 80069b8:	d000      	beq.n	80069bc <_strtol_l.constprop.0+0xe8>
 80069ba:	1e69      	subs	r1, r5, #1
 80069bc:	6011      	str	r1, [r2, #0]
 80069be:	e7f3      	b.n	80069a8 <_strtol_l.constprop.0+0xd4>
 80069c0:	2430      	movs	r4, #48	; 0x30
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1b1      	bne.n	800692a <_strtol_l.constprop.0+0x56>
 80069c6:	2308      	movs	r3, #8
 80069c8:	e7af      	b.n	800692a <_strtol_l.constprop.0+0x56>
 80069ca:	2c30      	cmp	r4, #48	; 0x30
 80069cc:	d0a5      	beq.n	800691a <_strtol_l.constprop.0+0x46>
 80069ce:	230a      	movs	r3, #10
 80069d0:	e7ab      	b.n	800692a <_strtol_l.constprop.0+0x56>
 80069d2:	bf00      	nop
 80069d4:	08007353 	.word	0x08007353

080069d8 <_strtol_r>:
 80069d8:	f7ff bf7c 	b.w	80068d4 <_strtol_l.constprop.0>

080069dc <_strtoul_l.constprop.0>:
 80069dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069e0:	4f36      	ldr	r7, [pc, #216]	; (8006abc <_strtoul_l.constprop.0+0xe0>)
 80069e2:	4686      	mov	lr, r0
 80069e4:	460d      	mov	r5, r1
 80069e6:	4628      	mov	r0, r5
 80069e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069ec:	5de6      	ldrb	r6, [r4, r7]
 80069ee:	f016 0608 	ands.w	r6, r6, #8
 80069f2:	d1f8      	bne.n	80069e6 <_strtoul_l.constprop.0+0xa>
 80069f4:	2c2d      	cmp	r4, #45	; 0x2d
 80069f6:	d12f      	bne.n	8006a58 <_strtoul_l.constprop.0+0x7c>
 80069f8:	782c      	ldrb	r4, [r5, #0]
 80069fa:	2601      	movs	r6, #1
 80069fc:	1c85      	adds	r5, r0, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d057      	beq.n	8006ab2 <_strtoul_l.constprop.0+0xd6>
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d109      	bne.n	8006a1a <_strtoul_l.constprop.0+0x3e>
 8006a06:	2c30      	cmp	r4, #48	; 0x30
 8006a08:	d107      	bne.n	8006a1a <_strtoul_l.constprop.0+0x3e>
 8006a0a:	7828      	ldrb	r0, [r5, #0]
 8006a0c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006a10:	2858      	cmp	r0, #88	; 0x58
 8006a12:	d149      	bne.n	8006aa8 <_strtoul_l.constprop.0+0xcc>
 8006a14:	786c      	ldrb	r4, [r5, #1]
 8006a16:	2310      	movs	r3, #16
 8006a18:	3502      	adds	r5, #2
 8006a1a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006a1e:	2700      	movs	r7, #0
 8006a20:	fbb8 f8f3 	udiv	r8, r8, r3
 8006a24:	fb03 f908 	mul.w	r9, r3, r8
 8006a28:	ea6f 0909 	mvn.w	r9, r9
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006a32:	f1bc 0f09 	cmp.w	ip, #9
 8006a36:	d814      	bhi.n	8006a62 <_strtoul_l.constprop.0+0x86>
 8006a38:	4664      	mov	r4, ip
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	dd22      	ble.n	8006a84 <_strtoul_l.constprop.0+0xa8>
 8006a3e:	2f00      	cmp	r7, #0
 8006a40:	db1d      	blt.n	8006a7e <_strtoul_l.constprop.0+0xa2>
 8006a42:	4580      	cmp	r8, r0
 8006a44:	d31b      	bcc.n	8006a7e <_strtoul_l.constprop.0+0xa2>
 8006a46:	d101      	bne.n	8006a4c <_strtoul_l.constprop.0+0x70>
 8006a48:	45a1      	cmp	r9, r4
 8006a4a:	db18      	blt.n	8006a7e <_strtoul_l.constprop.0+0xa2>
 8006a4c:	fb00 4003 	mla	r0, r0, r3, r4
 8006a50:	2701      	movs	r7, #1
 8006a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a56:	e7ea      	b.n	8006a2e <_strtoul_l.constprop.0+0x52>
 8006a58:	2c2b      	cmp	r4, #43	; 0x2b
 8006a5a:	bf04      	itt	eq
 8006a5c:	782c      	ldrbeq	r4, [r5, #0]
 8006a5e:	1c85      	addeq	r5, r0, #2
 8006a60:	e7cd      	b.n	80069fe <_strtoul_l.constprop.0+0x22>
 8006a62:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a66:	f1bc 0f19 	cmp.w	ip, #25
 8006a6a:	d801      	bhi.n	8006a70 <_strtoul_l.constprop.0+0x94>
 8006a6c:	3c37      	subs	r4, #55	; 0x37
 8006a6e:	e7e4      	b.n	8006a3a <_strtoul_l.constprop.0+0x5e>
 8006a70:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a74:	f1bc 0f19 	cmp.w	ip, #25
 8006a78:	d804      	bhi.n	8006a84 <_strtoul_l.constprop.0+0xa8>
 8006a7a:	3c57      	subs	r4, #87	; 0x57
 8006a7c:	e7dd      	b.n	8006a3a <_strtoul_l.constprop.0+0x5e>
 8006a7e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a82:	e7e6      	b.n	8006a52 <_strtoul_l.constprop.0+0x76>
 8006a84:	2f00      	cmp	r7, #0
 8006a86:	da07      	bge.n	8006a98 <_strtoul_l.constprop.0+0xbc>
 8006a88:	2322      	movs	r3, #34	; 0x22
 8006a8a:	f8ce 3000 	str.w	r3, [lr]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a92:	b932      	cbnz	r2, 8006aa2 <_strtoul_l.constprop.0+0xc6>
 8006a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a98:	b106      	cbz	r6, 8006a9c <_strtoul_l.constprop.0+0xc0>
 8006a9a:	4240      	negs	r0, r0
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	d0f9      	beq.n	8006a94 <_strtoul_l.constprop.0+0xb8>
 8006aa0:	b107      	cbz	r7, 8006aa4 <_strtoul_l.constprop.0+0xc8>
 8006aa2:	1e69      	subs	r1, r5, #1
 8006aa4:	6011      	str	r1, [r2, #0]
 8006aa6:	e7f5      	b.n	8006a94 <_strtoul_l.constprop.0+0xb8>
 8006aa8:	2430      	movs	r4, #48	; 0x30
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1b5      	bne.n	8006a1a <_strtoul_l.constprop.0+0x3e>
 8006aae:	2308      	movs	r3, #8
 8006ab0:	e7b3      	b.n	8006a1a <_strtoul_l.constprop.0+0x3e>
 8006ab2:	2c30      	cmp	r4, #48	; 0x30
 8006ab4:	d0a9      	beq.n	8006a0a <_strtoul_l.constprop.0+0x2e>
 8006ab6:	230a      	movs	r3, #10
 8006ab8:	e7af      	b.n	8006a1a <_strtoul_l.constprop.0+0x3e>
 8006aba:	bf00      	nop
 8006abc:	08007353 	.word	0x08007353

08006ac0 <_strtoul_r>:
 8006ac0:	f7ff bf8c 	b.w	80069dc <_strtoul_l.constprop.0>

08006ac4 <__submore>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	460c      	mov	r4, r1
 8006aca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d11d      	bne.n	8006b10 <__submore+0x4c>
 8006ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ad8:	f7ff f81c 	bl	8005b14 <_malloc_r>
 8006adc:	b918      	cbnz	r0, 8006ae6 <__submore+0x22>
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aea:	63a3      	str	r3, [r4, #56]	; 0x38
 8006aec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006af0:	6360      	str	r0, [r4, #52]	; 0x34
 8006af2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006af6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006afa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006afe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006b02:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006b06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006b0a:	6020      	str	r0, [r4, #0]
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e7e8      	b.n	8006ae2 <__submore+0x1e>
 8006b10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006b12:	0077      	lsls	r7, r6, #1
 8006b14:	463a      	mov	r2, r7
 8006b16:	f000 fa4f 	bl	8006fb8 <_realloc_r>
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d0de      	beq.n	8006ade <__submore+0x1a>
 8006b20:	eb00 0806 	add.w	r8, r0, r6
 8006b24:	4601      	mov	r1, r0
 8006b26:	4632      	mov	r2, r6
 8006b28:	4640      	mov	r0, r8
 8006b2a:	f7fe fe07 	bl	800573c <memcpy>
 8006b2e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006b32:	f8c4 8000 	str.w	r8, [r4]
 8006b36:	e7e9      	b.n	8006b0c <__submore+0x48>

08006b38 <__swbuf_r>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	460e      	mov	r6, r1
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	4605      	mov	r5, r0
 8006b40:	b118      	cbz	r0, 8006b4a <__swbuf_r+0x12>
 8006b42:	6983      	ldr	r3, [r0, #24]
 8006b44:	b90b      	cbnz	r3, 8006b4a <__swbuf_r+0x12>
 8006b46:	f7fe ff13 	bl	8005970 <__sinit>
 8006b4a:	4b21      	ldr	r3, [pc, #132]	; (8006bd0 <__swbuf_r+0x98>)
 8006b4c:	429c      	cmp	r4, r3
 8006b4e:	d12b      	bne.n	8006ba8 <__swbuf_r+0x70>
 8006b50:	686c      	ldr	r4, [r5, #4]
 8006b52:	69a3      	ldr	r3, [r4, #24]
 8006b54:	60a3      	str	r3, [r4, #8]
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	071a      	lsls	r2, r3, #28
 8006b5a:	d52f      	bpl.n	8006bbc <__swbuf_r+0x84>
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	b36b      	cbz	r3, 8006bbc <__swbuf_r+0x84>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	1ac0      	subs	r0, r0, r3
 8006b66:	6963      	ldr	r3, [r4, #20]
 8006b68:	b2f6      	uxtb	r6, r6
 8006b6a:	4283      	cmp	r3, r0
 8006b6c:	4637      	mov	r7, r6
 8006b6e:	dc04      	bgt.n	8006b7a <__swbuf_r+0x42>
 8006b70:	4621      	mov	r1, r4
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 f926 	bl	8006dc4 <_fflush_r>
 8006b78:	bb30      	cbnz	r0, 8006bc8 <__swbuf_r+0x90>
 8006b7a:	68a3      	ldr	r3, [r4, #8]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	60a3      	str	r3, [r4, #8]
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	6022      	str	r2, [r4, #0]
 8006b86:	701e      	strb	r6, [r3, #0]
 8006b88:	6963      	ldr	r3, [r4, #20]
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	4283      	cmp	r3, r0
 8006b8e:	d004      	beq.n	8006b9a <__swbuf_r+0x62>
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	07db      	lsls	r3, r3, #31
 8006b94:	d506      	bpl.n	8006ba4 <__swbuf_r+0x6c>
 8006b96:	2e0a      	cmp	r6, #10
 8006b98:	d104      	bne.n	8006ba4 <__swbuf_r+0x6c>
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f000 f911 	bl	8006dc4 <_fflush_r>
 8006ba2:	b988      	cbnz	r0, 8006bc8 <__swbuf_r+0x90>
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <__swbuf_r+0x9c>)
 8006baa:	429c      	cmp	r4, r3
 8006bac:	d101      	bne.n	8006bb2 <__swbuf_r+0x7a>
 8006bae:	68ac      	ldr	r4, [r5, #8]
 8006bb0:	e7cf      	b.n	8006b52 <__swbuf_r+0x1a>
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <__swbuf_r+0xa0>)
 8006bb4:	429c      	cmp	r4, r3
 8006bb6:	bf08      	it	eq
 8006bb8:	68ec      	ldreq	r4, [r5, #12]
 8006bba:	e7ca      	b.n	8006b52 <__swbuf_r+0x1a>
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f000 f80c 	bl	8006bdc <__swsetup_r>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d0cb      	beq.n	8006b60 <__swbuf_r+0x28>
 8006bc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006bcc:	e7ea      	b.n	8006ba4 <__swbuf_r+0x6c>
 8006bce:	bf00      	nop
 8006bd0:	080072c4 	.word	0x080072c4
 8006bd4:	080072e4 	.word	0x080072e4
 8006bd8:	080072a4 	.word	0x080072a4

08006bdc <__swsetup_r>:
 8006bdc:	4b32      	ldr	r3, [pc, #200]	; (8006ca8 <__swsetup_r+0xcc>)
 8006bde:	b570      	push	{r4, r5, r6, lr}
 8006be0:	681d      	ldr	r5, [r3, #0]
 8006be2:	4606      	mov	r6, r0
 8006be4:	460c      	mov	r4, r1
 8006be6:	b125      	cbz	r5, 8006bf2 <__swsetup_r+0x16>
 8006be8:	69ab      	ldr	r3, [r5, #24]
 8006bea:	b913      	cbnz	r3, 8006bf2 <__swsetup_r+0x16>
 8006bec:	4628      	mov	r0, r5
 8006bee:	f7fe febf 	bl	8005970 <__sinit>
 8006bf2:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <__swsetup_r+0xd0>)
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	d10f      	bne.n	8006c18 <__swsetup_r+0x3c>
 8006bf8:	686c      	ldr	r4, [r5, #4]
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c00:	0719      	lsls	r1, r3, #28
 8006c02:	d42c      	bmi.n	8006c5e <__swsetup_r+0x82>
 8006c04:	06dd      	lsls	r5, r3, #27
 8006c06:	d411      	bmi.n	8006c2c <__swsetup_r+0x50>
 8006c08:	2309      	movs	r3, #9
 8006c0a:	6033      	str	r3, [r6, #0]
 8006c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c16:	e03e      	b.n	8006c96 <__swsetup_r+0xba>
 8006c18:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <__swsetup_r+0xd4>)
 8006c1a:	429c      	cmp	r4, r3
 8006c1c:	d101      	bne.n	8006c22 <__swsetup_r+0x46>
 8006c1e:	68ac      	ldr	r4, [r5, #8]
 8006c20:	e7eb      	b.n	8006bfa <__swsetup_r+0x1e>
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <__swsetup_r+0xd8>)
 8006c24:	429c      	cmp	r4, r3
 8006c26:	bf08      	it	eq
 8006c28:	68ec      	ldreq	r4, [r5, #12]
 8006c2a:	e7e6      	b.n	8006bfa <__swsetup_r+0x1e>
 8006c2c:	0758      	lsls	r0, r3, #29
 8006c2e:	d512      	bpl.n	8006c56 <__swsetup_r+0x7a>
 8006c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c32:	b141      	cbz	r1, 8006c46 <__swsetup_r+0x6a>
 8006c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	d002      	beq.n	8006c42 <__swsetup_r+0x66>
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f000 f96f 	bl	8006f20 <_free_r>
 8006c42:	2300      	movs	r3, #0
 8006c44:	6363      	str	r3, [r4, #52]	; 0x34
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4c:	81a3      	strh	r3, [r4, #12]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	6063      	str	r3, [r4, #4]
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f043 0308 	orr.w	r3, r3, #8
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	b94b      	cbnz	r3, 8006c76 <__swsetup_r+0x9a>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6c:	d003      	beq.n	8006c76 <__swsetup_r+0x9a>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4630      	mov	r0, r6
 8006c72:	f000 f909 	bl	8006e88 <__smakebuf_r>
 8006c76:	89a0      	ldrh	r0, [r4, #12]
 8006c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7c:	f010 0301 	ands.w	r3, r0, #1
 8006c80:	d00a      	beq.n	8006c98 <__swsetup_r+0xbc>
 8006c82:	2300      	movs	r3, #0
 8006c84:	60a3      	str	r3, [r4, #8]
 8006c86:	6963      	ldr	r3, [r4, #20]
 8006c88:	425b      	negs	r3, r3
 8006c8a:	61a3      	str	r3, [r4, #24]
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	b943      	cbnz	r3, 8006ca2 <__swsetup_r+0xc6>
 8006c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c94:	d1ba      	bne.n	8006c0c <__swsetup_r+0x30>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	0781      	lsls	r1, r0, #30
 8006c9a:	bf58      	it	pl
 8006c9c:	6963      	ldrpl	r3, [r4, #20]
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	e7f4      	b.n	8006c8c <__swsetup_r+0xb0>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e7f7      	b.n	8006c96 <__swsetup_r+0xba>
 8006ca6:	bf00      	nop
 8006ca8:	2000000c 	.word	0x2000000c
 8006cac:	080072c4 	.word	0x080072c4
 8006cb0:	080072e4 	.word	0x080072e4
 8006cb4:	080072a4 	.word	0x080072a4

08006cb8 <__sflush_r>:
 8006cb8:	898a      	ldrh	r2, [r1, #12]
 8006cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	0710      	lsls	r0, r2, #28
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	d458      	bmi.n	8006d78 <__sflush_r+0xc0>
 8006cc6:	684b      	ldr	r3, [r1, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dc05      	bgt.n	8006cd8 <__sflush_r+0x20>
 8006ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	dc02      	bgt.n	8006cd8 <__sflush_r+0x20>
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	d0f9      	beq.n	8006cd2 <__sflush_r+0x1a>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ce4:	682f      	ldr	r7, [r5, #0]
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	d032      	beq.n	8006d50 <__sflush_r+0x98>
 8006cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	075a      	lsls	r2, r3, #29
 8006cf0:	d505      	bpl.n	8006cfe <__sflush_r+0x46>
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	1ac0      	subs	r0, r0, r3
 8006cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf8:	b10b      	cbz	r3, 8006cfe <__sflush_r+0x46>
 8006cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cfc:	1ac0      	subs	r0, r0, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4602      	mov	r2, r0
 8006d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d04:	6a21      	ldr	r1, [r4, #32]
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b0      	blx	r6
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	d106      	bne.n	8006d1e <__sflush_r+0x66>
 8006d10:	6829      	ldr	r1, [r5, #0]
 8006d12:	291d      	cmp	r1, #29
 8006d14:	d82c      	bhi.n	8006d70 <__sflush_r+0xb8>
 8006d16:	4a2a      	ldr	r2, [pc, #168]	; (8006dc0 <__sflush_r+0x108>)
 8006d18:	40ca      	lsrs	r2, r1
 8006d1a:	07d6      	lsls	r6, r2, #31
 8006d1c:	d528      	bpl.n	8006d70 <__sflush_r+0xb8>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	6062      	str	r2, [r4, #4]
 8006d22:	04d9      	lsls	r1, r3, #19
 8006d24:	6922      	ldr	r2, [r4, #16]
 8006d26:	6022      	str	r2, [r4, #0]
 8006d28:	d504      	bpl.n	8006d34 <__sflush_r+0x7c>
 8006d2a:	1c42      	adds	r2, r0, #1
 8006d2c:	d101      	bne.n	8006d32 <__sflush_r+0x7a>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	b903      	cbnz	r3, 8006d34 <__sflush_r+0x7c>
 8006d32:	6560      	str	r0, [r4, #84]	; 0x54
 8006d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d36:	602f      	str	r7, [r5, #0]
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d0ca      	beq.n	8006cd2 <__sflush_r+0x1a>
 8006d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d40:	4299      	cmp	r1, r3
 8006d42:	d002      	beq.n	8006d4a <__sflush_r+0x92>
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 f8eb 	bl	8006f20 <_free_r>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d4e:	e7c1      	b.n	8006cd4 <__sflush_r+0x1c>
 8006d50:	6a21      	ldr	r1, [r4, #32]
 8006d52:	2301      	movs	r3, #1
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b0      	blx	r6
 8006d58:	1c41      	adds	r1, r0, #1
 8006d5a:	d1c7      	bne.n	8006cec <__sflush_r+0x34>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0c4      	beq.n	8006cec <__sflush_r+0x34>
 8006d62:	2b1d      	cmp	r3, #29
 8006d64:	d001      	beq.n	8006d6a <__sflush_r+0xb2>
 8006d66:	2b16      	cmp	r3, #22
 8006d68:	d101      	bne.n	8006d6e <__sflush_r+0xb6>
 8006d6a:	602f      	str	r7, [r5, #0]
 8006d6c:	e7b1      	b.n	8006cd2 <__sflush_r+0x1a>
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	e7ad      	b.n	8006cd4 <__sflush_r+0x1c>
 8006d78:	690f      	ldr	r7, [r1, #16]
 8006d7a:	2f00      	cmp	r7, #0
 8006d7c:	d0a9      	beq.n	8006cd2 <__sflush_r+0x1a>
 8006d7e:	0793      	lsls	r3, r2, #30
 8006d80:	680e      	ldr	r6, [r1, #0]
 8006d82:	bf08      	it	eq
 8006d84:	694b      	ldreq	r3, [r1, #20]
 8006d86:	600f      	str	r7, [r1, #0]
 8006d88:	bf18      	it	ne
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	eba6 0807 	sub.w	r8, r6, r7
 8006d90:	608b      	str	r3, [r1, #8]
 8006d92:	f1b8 0f00 	cmp.w	r8, #0
 8006d96:	dd9c      	ble.n	8006cd2 <__sflush_r+0x1a>
 8006d98:	6a21      	ldr	r1, [r4, #32]
 8006d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d9c:	4643      	mov	r3, r8
 8006d9e:	463a      	mov	r2, r7
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b0      	blx	r6
 8006da4:	2800      	cmp	r0, #0
 8006da6:	dc06      	bgt.n	8006db6 <__sflush_r+0xfe>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006db4:	e78e      	b.n	8006cd4 <__sflush_r+0x1c>
 8006db6:	4407      	add	r7, r0
 8006db8:	eba8 0800 	sub.w	r8, r8, r0
 8006dbc:	e7e9      	b.n	8006d92 <__sflush_r+0xda>
 8006dbe:	bf00      	nop
 8006dc0:	20400001 	.word	0x20400001

08006dc4 <_fflush_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	690b      	ldr	r3, [r1, #16]
 8006dc8:	4605      	mov	r5, r0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	b913      	cbnz	r3, 8006dd4 <_fflush_r+0x10>
 8006dce:	2500      	movs	r5, #0
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	b118      	cbz	r0, 8006dde <_fflush_r+0x1a>
 8006dd6:	6983      	ldr	r3, [r0, #24]
 8006dd8:	b90b      	cbnz	r3, 8006dde <_fflush_r+0x1a>
 8006dda:	f7fe fdc9 	bl	8005970 <__sinit>
 8006dde:	4b14      	ldr	r3, [pc, #80]	; (8006e30 <_fflush_r+0x6c>)
 8006de0:	429c      	cmp	r4, r3
 8006de2:	d11b      	bne.n	8006e1c <_fflush_r+0x58>
 8006de4:	686c      	ldr	r4, [r5, #4]
 8006de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0ef      	beq.n	8006dce <_fflush_r+0xa>
 8006dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006df0:	07d0      	lsls	r0, r2, #31
 8006df2:	d404      	bmi.n	8006dfe <_fflush_r+0x3a>
 8006df4:	0599      	lsls	r1, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_fflush_r+0x3a>
 8006df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfa:	f7fe fe57 	bl	8005aac <__retarget_lock_acquire_recursive>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	4621      	mov	r1, r4
 8006e02:	f7ff ff59 	bl	8006cb8 <__sflush_r>
 8006e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e08:	07da      	lsls	r2, r3, #31
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	d4e0      	bmi.n	8006dd0 <_fflush_r+0xc>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	059b      	lsls	r3, r3, #22
 8006e12:	d4dd      	bmi.n	8006dd0 <_fflush_r+0xc>
 8006e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e16:	f7fe fe4a 	bl	8005aae <__retarget_lock_release_recursive>
 8006e1a:	e7d9      	b.n	8006dd0 <_fflush_r+0xc>
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <_fflush_r+0x70>)
 8006e1e:	429c      	cmp	r4, r3
 8006e20:	d101      	bne.n	8006e26 <_fflush_r+0x62>
 8006e22:	68ac      	ldr	r4, [r5, #8]
 8006e24:	e7df      	b.n	8006de6 <_fflush_r+0x22>
 8006e26:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <_fflush_r+0x74>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	bf08      	it	eq
 8006e2c:	68ec      	ldreq	r4, [r5, #12]
 8006e2e:	e7da      	b.n	8006de6 <_fflush_r+0x22>
 8006e30:	080072c4 	.word	0x080072c4
 8006e34:	080072e4 	.word	0x080072e4
 8006e38:	080072a4 	.word	0x080072a4

08006e3c <__swhatbuf_r>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	460e      	mov	r6, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	b096      	sub	sp, #88	; 0x58
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	da08      	bge.n	8006e60 <__swhatbuf_r+0x24>
 8006e4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	061a      	lsls	r2, r3, #24
 8006e58:	d410      	bmi.n	8006e7c <__swhatbuf_r+0x40>
 8006e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5e:	e00e      	b.n	8006e7e <__swhatbuf_r+0x42>
 8006e60:	466a      	mov	r2, sp
 8006e62:	f000 f8d9 	bl	8007018 <_fstat_r>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	dbf1      	blt.n	8006e4e <__swhatbuf_r+0x12>
 8006e6a:	9a01      	ldr	r2, [sp, #4]
 8006e6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e74:	425a      	negs	r2, r3
 8006e76:	415a      	adcs	r2, r3
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	e7ee      	b.n	8006e5a <__swhatbuf_r+0x1e>
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	2000      	movs	r0, #0
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	b016      	add	sp, #88	; 0x58
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e88 <__smakebuf_r>:
 8006e88:	898b      	ldrh	r3, [r1, #12]
 8006e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e8c:	079d      	lsls	r5, r3, #30
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460c      	mov	r4, r1
 8006e92:	d507      	bpl.n	8006ea4 <__smakebuf_r+0x1c>
 8006e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	6163      	str	r3, [r4, #20]
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	ab01      	add	r3, sp, #4
 8006ea6:	466a      	mov	r2, sp
 8006ea8:	f7ff ffc8 	bl	8006e3c <__swhatbuf_r>
 8006eac:	9900      	ldr	r1, [sp, #0]
 8006eae:	4605      	mov	r5, r0
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f7fe fe2f 	bl	8005b14 <_malloc_r>
 8006eb6:	b948      	cbnz	r0, 8006ecc <__smakebuf_r+0x44>
 8006eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebc:	059a      	lsls	r2, r3, #22
 8006ebe:	d4ef      	bmi.n	8006ea0 <__smakebuf_r+0x18>
 8006ec0:	f023 0303 	bic.w	r3, r3, #3
 8006ec4:	f043 0302 	orr.w	r3, r3, #2
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	e7e3      	b.n	8006e94 <__smakebuf_r+0xc>
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <__smakebuf_r+0x7c>)
 8006ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	6020      	str	r0, [r4, #0]
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	9b00      	ldr	r3, [sp, #0]
 8006edc:	6163      	str	r3, [r4, #20]
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	6120      	str	r0, [r4, #16]
 8006ee2:	b15b      	cbz	r3, 8006efc <__smakebuf_r+0x74>
 8006ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 f8a7 	bl	800703c <_isatty_r>
 8006eee:	b128      	cbz	r0, 8006efc <__smakebuf_r+0x74>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	f043 0301 	orr.w	r3, r3, #1
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	89a0      	ldrh	r0, [r4, #12]
 8006efe:	4305      	orrs	r5, r0
 8006f00:	81a5      	strh	r5, [r4, #12]
 8006f02:	e7cd      	b.n	8006ea0 <__smakebuf_r+0x18>
 8006f04:	08005909 	.word	0x08005909

08006f08 <__malloc_lock>:
 8006f08:	4801      	ldr	r0, [pc, #4]	; (8006f10 <__malloc_lock+0x8>)
 8006f0a:	f7fe bdcf 	b.w	8005aac <__retarget_lock_acquire_recursive>
 8006f0e:	bf00      	nop
 8006f10:	20000324 	.word	0x20000324

08006f14 <__malloc_unlock>:
 8006f14:	4801      	ldr	r0, [pc, #4]	; (8006f1c <__malloc_unlock+0x8>)
 8006f16:	f7fe bdca 	b.w	8005aae <__retarget_lock_release_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	20000324 	.word	0x20000324

08006f20 <_free_r>:
 8006f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f22:	2900      	cmp	r1, #0
 8006f24:	d044      	beq.n	8006fb0 <_free_r+0x90>
 8006f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2a:	9001      	str	r0, [sp, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f32:	bfb8      	it	lt
 8006f34:	18e4      	addlt	r4, r4, r3
 8006f36:	f7ff ffe7 	bl	8006f08 <__malloc_lock>
 8006f3a:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <_free_r+0x94>)
 8006f3c:	9801      	ldr	r0, [sp, #4]
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	b933      	cbnz	r3, 8006f50 <_free_r+0x30>
 8006f42:	6063      	str	r3, [r4, #4]
 8006f44:	6014      	str	r4, [r2, #0]
 8006f46:	b003      	add	sp, #12
 8006f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f4c:	f7ff bfe2 	b.w	8006f14 <__malloc_unlock>
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	d908      	bls.n	8006f66 <_free_r+0x46>
 8006f54:	6825      	ldr	r5, [r4, #0]
 8006f56:	1961      	adds	r1, r4, r5
 8006f58:	428b      	cmp	r3, r1
 8006f5a:	bf01      	itttt	eq
 8006f5c:	6819      	ldreq	r1, [r3, #0]
 8006f5e:	685b      	ldreq	r3, [r3, #4]
 8006f60:	1949      	addeq	r1, r1, r5
 8006f62:	6021      	streq	r1, [r4, #0]
 8006f64:	e7ed      	b.n	8006f42 <_free_r+0x22>
 8006f66:	461a      	mov	r2, r3
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	b10b      	cbz	r3, 8006f70 <_free_r+0x50>
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	d9fa      	bls.n	8006f66 <_free_r+0x46>
 8006f70:	6811      	ldr	r1, [r2, #0]
 8006f72:	1855      	adds	r5, r2, r1
 8006f74:	42a5      	cmp	r5, r4
 8006f76:	d10b      	bne.n	8006f90 <_free_r+0x70>
 8006f78:	6824      	ldr	r4, [r4, #0]
 8006f7a:	4421      	add	r1, r4
 8006f7c:	1854      	adds	r4, r2, r1
 8006f7e:	42a3      	cmp	r3, r4
 8006f80:	6011      	str	r1, [r2, #0]
 8006f82:	d1e0      	bne.n	8006f46 <_free_r+0x26>
 8006f84:	681c      	ldr	r4, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	6053      	str	r3, [r2, #4]
 8006f8a:	4421      	add	r1, r4
 8006f8c:	6011      	str	r1, [r2, #0]
 8006f8e:	e7da      	b.n	8006f46 <_free_r+0x26>
 8006f90:	d902      	bls.n	8006f98 <_free_r+0x78>
 8006f92:	230c      	movs	r3, #12
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	e7d6      	b.n	8006f46 <_free_r+0x26>
 8006f98:	6825      	ldr	r5, [r4, #0]
 8006f9a:	1961      	adds	r1, r4, r5
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf04      	itt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	6063      	str	r3, [r4, #4]
 8006fa6:	bf04      	itt	eq
 8006fa8:	1949      	addeq	r1, r1, r5
 8006faa:	6021      	streq	r1, [r4, #0]
 8006fac:	6054      	str	r4, [r2, #4]
 8006fae:	e7ca      	b.n	8006f46 <_free_r+0x26>
 8006fb0:	b003      	add	sp, #12
 8006fb2:	bd30      	pop	{r4, r5, pc}
 8006fb4:	20000328 	.word	0x20000328

08006fb8 <_realloc_r>:
 8006fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	460e      	mov	r6, r1
 8006fc2:	b921      	cbnz	r1, 8006fce <_realloc_r+0x16>
 8006fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc8:	4611      	mov	r1, r2
 8006fca:	f7fe bda3 	b.w	8005b14 <_malloc_r>
 8006fce:	b92a      	cbnz	r2, 8006fdc <_realloc_r+0x24>
 8006fd0:	f7ff ffa6 	bl	8006f20 <_free_r>
 8006fd4:	4625      	mov	r5, r4
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fdc:	f000 f83e 	bl	800705c <_malloc_usable_size_r>
 8006fe0:	4284      	cmp	r4, r0
 8006fe2:	4607      	mov	r7, r0
 8006fe4:	d802      	bhi.n	8006fec <_realloc_r+0x34>
 8006fe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fea:	d812      	bhi.n	8007012 <_realloc_r+0x5a>
 8006fec:	4621      	mov	r1, r4
 8006fee:	4640      	mov	r0, r8
 8006ff0:	f7fe fd90 	bl	8005b14 <_malloc_r>
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d0ed      	beq.n	8006fd6 <_realloc_r+0x1e>
 8006ffa:	42bc      	cmp	r4, r7
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4631      	mov	r1, r6
 8007000:	bf28      	it	cs
 8007002:	463a      	movcs	r2, r7
 8007004:	f7fe fb9a 	bl	800573c <memcpy>
 8007008:	4631      	mov	r1, r6
 800700a:	4640      	mov	r0, r8
 800700c:	f7ff ff88 	bl	8006f20 <_free_r>
 8007010:	e7e1      	b.n	8006fd6 <_realloc_r+0x1e>
 8007012:	4635      	mov	r5, r6
 8007014:	e7df      	b.n	8006fd6 <_realloc_r+0x1e>
	...

08007018 <_fstat_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	; (8007038 <_fstat_r+0x20>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	f7fa fea4 	bl	8001d72 <_fstat>
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	d102      	bne.n	8007034 <_fstat_r+0x1c>
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	b103      	cbz	r3, 8007034 <_fstat_r+0x1c>
 8007032:	6023      	str	r3, [r4, #0]
 8007034:	bd38      	pop	{r3, r4, r5, pc}
 8007036:	bf00      	nop
 8007038:	20000330 	.word	0x20000330

0800703c <_isatty_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d06      	ldr	r5, [pc, #24]	; (8007058 <_isatty_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7fa fea3 	bl	8001d92 <_isatty>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_isatty_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_isatty_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000330 	.word	0x20000330

0800705c <_malloc_usable_size_r>:
 800705c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007060:	1f18      	subs	r0, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfbc      	itt	lt
 8007066:	580b      	ldrlt	r3, [r1, r0]
 8007068:	18c0      	addlt	r0, r0, r3
 800706a:	4770      	bx	lr

0800706c <sqrt>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	ed2d 8b02 	vpush	{d8}
 8007072:	ec55 4b10 	vmov	r4, r5, d0
 8007076:	f000 f825 	bl	80070c4 <__ieee754_sqrt>
 800707a:	4622      	mov	r2, r4
 800707c:	462b      	mov	r3, r5
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	eeb0 8a40 	vmov.f32	s16, s0
 8007086:	eef0 8a60 	vmov.f32	s17, s1
 800708a:	f7f9 fd57 	bl	8000b3c <__aeabi_dcmpun>
 800708e:	b990      	cbnz	r0, 80070b6 <sqrt+0x4a>
 8007090:	2200      	movs	r2, #0
 8007092:	2300      	movs	r3, #0
 8007094:	4620      	mov	r0, r4
 8007096:	4629      	mov	r1, r5
 8007098:	f7f9 fd28 	bl	8000aec <__aeabi_dcmplt>
 800709c:	b158      	cbz	r0, 80070b6 <sqrt+0x4a>
 800709e:	f7fe fb23 	bl	80056e8 <__errno>
 80070a2:	2321      	movs	r3, #33	; 0x21
 80070a4:	6003      	str	r3, [r0, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	2300      	movs	r3, #0
 80070aa:	4610      	mov	r0, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	f7f9 fbd5 	bl	800085c <__aeabi_ddiv>
 80070b2:	ec41 0b18 	vmov	d8, r0, r1
 80070b6:	eeb0 0a48 	vmov.f32	s0, s16
 80070ba:	eef0 0a68 	vmov.f32	s1, s17
 80070be:	ecbd 8b02 	vpop	{d8}
 80070c2:	bd38      	pop	{r3, r4, r5, pc}

080070c4 <__ieee754_sqrt>:
 80070c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c8:	ec55 4b10 	vmov	r4, r5, d0
 80070cc:	4e55      	ldr	r6, [pc, #340]	; (8007224 <__ieee754_sqrt+0x160>)
 80070ce:	43ae      	bics	r6, r5
 80070d0:	ee10 0a10 	vmov	r0, s0
 80070d4:	ee10 3a10 	vmov	r3, s0
 80070d8:	462a      	mov	r2, r5
 80070da:	4629      	mov	r1, r5
 80070dc:	d110      	bne.n	8007100 <__ieee754_sqrt+0x3c>
 80070de:	ee10 2a10 	vmov	r2, s0
 80070e2:	462b      	mov	r3, r5
 80070e4:	f7f9 fa90 	bl	8000608 <__aeabi_dmul>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7f9 f8d4 	bl	800029c <__adddf3>
 80070f4:	4604      	mov	r4, r0
 80070f6:	460d      	mov	r5, r1
 80070f8:	ec45 4b10 	vmov	d0, r4, r5
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	2d00      	cmp	r5, #0
 8007102:	dc10      	bgt.n	8007126 <__ieee754_sqrt+0x62>
 8007104:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007108:	4330      	orrs	r0, r6
 800710a:	d0f5      	beq.n	80070f8 <__ieee754_sqrt+0x34>
 800710c:	b15d      	cbz	r5, 8007126 <__ieee754_sqrt+0x62>
 800710e:	ee10 2a10 	vmov	r2, s0
 8007112:	462b      	mov	r3, r5
 8007114:	ee10 0a10 	vmov	r0, s0
 8007118:	f7f9 f8be 	bl	8000298 <__aeabi_dsub>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	f7f9 fb9c 	bl	800085c <__aeabi_ddiv>
 8007124:	e7e6      	b.n	80070f4 <__ieee754_sqrt+0x30>
 8007126:	1512      	asrs	r2, r2, #20
 8007128:	d074      	beq.n	8007214 <__ieee754_sqrt+0x150>
 800712a:	07d4      	lsls	r4, r2, #31
 800712c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007130:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007134:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007138:	bf5e      	ittt	pl
 800713a:	0fda      	lsrpl	r2, r3, #31
 800713c:	005b      	lslpl	r3, r3, #1
 800713e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007142:	2400      	movs	r4, #0
 8007144:	0fda      	lsrs	r2, r3, #31
 8007146:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800714a:	107f      	asrs	r7, r7, #1
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	2516      	movs	r5, #22
 8007150:	4620      	mov	r0, r4
 8007152:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007156:	1886      	adds	r6, r0, r2
 8007158:	428e      	cmp	r6, r1
 800715a:	bfde      	ittt	le
 800715c:	1b89      	suble	r1, r1, r6
 800715e:	18b0      	addle	r0, r6, r2
 8007160:	18a4      	addle	r4, r4, r2
 8007162:	0049      	lsls	r1, r1, #1
 8007164:	3d01      	subs	r5, #1
 8007166:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800716a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800716e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007172:	d1f0      	bne.n	8007156 <__ieee754_sqrt+0x92>
 8007174:	462a      	mov	r2, r5
 8007176:	f04f 0e20 	mov.w	lr, #32
 800717a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800717e:	4281      	cmp	r1, r0
 8007180:	eb06 0c05 	add.w	ip, r6, r5
 8007184:	dc02      	bgt.n	800718c <__ieee754_sqrt+0xc8>
 8007186:	d113      	bne.n	80071b0 <__ieee754_sqrt+0xec>
 8007188:	459c      	cmp	ip, r3
 800718a:	d811      	bhi.n	80071b0 <__ieee754_sqrt+0xec>
 800718c:	f1bc 0f00 	cmp.w	ip, #0
 8007190:	eb0c 0506 	add.w	r5, ip, r6
 8007194:	da43      	bge.n	800721e <__ieee754_sqrt+0x15a>
 8007196:	2d00      	cmp	r5, #0
 8007198:	db41      	blt.n	800721e <__ieee754_sqrt+0x15a>
 800719a:	f100 0801 	add.w	r8, r0, #1
 800719e:	1a09      	subs	r1, r1, r0
 80071a0:	459c      	cmp	ip, r3
 80071a2:	bf88      	it	hi
 80071a4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80071a8:	eba3 030c 	sub.w	r3, r3, ip
 80071ac:	4432      	add	r2, r6
 80071ae:	4640      	mov	r0, r8
 80071b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80071b4:	f1be 0e01 	subs.w	lr, lr, #1
 80071b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80071bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071c4:	d1db      	bne.n	800717e <__ieee754_sqrt+0xba>
 80071c6:	430b      	orrs	r3, r1
 80071c8:	d006      	beq.n	80071d8 <__ieee754_sqrt+0x114>
 80071ca:	1c50      	adds	r0, r2, #1
 80071cc:	bf13      	iteet	ne
 80071ce:	3201      	addne	r2, #1
 80071d0:	3401      	addeq	r4, #1
 80071d2:	4672      	moveq	r2, lr
 80071d4:	f022 0201 	bicne.w	r2, r2, #1
 80071d8:	1063      	asrs	r3, r4, #1
 80071da:	0852      	lsrs	r2, r2, #1
 80071dc:	07e1      	lsls	r1, r4, #31
 80071de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80071e6:	bf48      	it	mi
 80071e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80071ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80071f0:	4614      	mov	r4, r2
 80071f2:	e781      	b.n	80070f8 <__ieee754_sqrt+0x34>
 80071f4:	0ad9      	lsrs	r1, r3, #11
 80071f6:	3815      	subs	r0, #21
 80071f8:	055b      	lsls	r3, r3, #21
 80071fa:	2900      	cmp	r1, #0
 80071fc:	d0fa      	beq.n	80071f4 <__ieee754_sqrt+0x130>
 80071fe:	02cd      	lsls	r5, r1, #11
 8007200:	d50a      	bpl.n	8007218 <__ieee754_sqrt+0x154>
 8007202:	f1c2 0420 	rsb	r4, r2, #32
 8007206:	fa23 f404 	lsr.w	r4, r3, r4
 800720a:	1e55      	subs	r5, r2, #1
 800720c:	4093      	lsls	r3, r2
 800720e:	4321      	orrs	r1, r4
 8007210:	1b42      	subs	r2, r0, r5
 8007212:	e78a      	b.n	800712a <__ieee754_sqrt+0x66>
 8007214:	4610      	mov	r0, r2
 8007216:	e7f0      	b.n	80071fa <__ieee754_sqrt+0x136>
 8007218:	0049      	lsls	r1, r1, #1
 800721a:	3201      	adds	r2, #1
 800721c:	e7ef      	b.n	80071fe <__ieee754_sqrt+0x13a>
 800721e:	4680      	mov	r8, r0
 8007220:	e7bd      	b.n	800719e <__ieee754_sqrt+0xda>
 8007222:	bf00      	nop
 8007224:	7ff00000 	.word	0x7ff00000

08007228 <_init>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	bf00      	nop
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr

08007234 <_fini>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	bf00      	nop
 8007238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723a:	bc08      	pop	{r3}
 800723c:	469e      	mov	lr, r3
 800723e:	4770      	bx	lr
