
SR_Parallel3RRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800a770  0800a770  0001a770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad10  0800ad10  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad10  0800ad10  0001ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad18  0800ad18  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ad20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  200001e0  0800aefc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  0800aefc  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebef  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f15  00000000  00000000  0002edfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00030d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00031ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017202  00000000  00000000  00032798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb19  00000000  00000000  0004999a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6bf  00000000  00000000  000584b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7b72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f4  00000000  00000000  000e7bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a754 	.word	0x0800a754

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a754 	.word	0x0800a754

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_write>:
static void MX_USART2_UART_Init(void);
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */

int _write( int file,unsigned char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <_write+0x28>)
 8000fb4:	f003 ffd9 	bl	8004f6a <HAL_UART_Transmit>
	return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200003dc 	.word	0x200003dc

08000fc8 <estimate_ttc>:
	return pow(50,0.5)*((-0.1956)*pow(steps,-0.4198)+(0.1559*0.9885))/sqrt(accel);
}


float estimate_ttc(motorInfo *motor)
{
 8000fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	float tmp;
	if(motor->accel_stop <= motor->peak_velocity)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1a      	ldr	r2, [r3, #32]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	f200 8087 	bhi.w	80010ee <estimate_ttc+0x126>
		{
		motor->acc_time= motor->max_speed/(double)motor->acceleration;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa95 	bl	8000514 <__aeabi_ui2d>
 8000fea:	4604      	mov	r4, r0
 8000fec:	460d      	mov	r5, r1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fa8e 	bl	8000514 <__aeabi_ui2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	4629      	mov	r1, r5
 8001000:	f7ff fc2c 	bl	800085c <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		tmp = (motor->max_speed)*((double)1/motor->acceleration +(double)1/motor->deceleration);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa7e 	bl	8000514 <__aeabi_ui2d>
 8001018:	4604      	mov	r4, r0
 800101a:	460d      	mov	r5, r1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa77 	bl	8000514 <__aeabi_ui2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4996      	ldr	r1, [pc, #600]	; (8001288 <estimate_ttc+0x2c0>)
 8001030:	f7ff fc14 	bl	800085c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4690      	mov	r8, r2
 800103a:	4699      	mov	r9, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa67 	bl	8000514 <__aeabi_ui2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	498e      	ldr	r1, [pc, #568]	; (8001288 <estimate_ttc+0x2c0>)
 8001050:	f7ff fc04 	bl	800085c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4640      	mov	r0, r8
 800105a:	4649      	mov	r1, r9
 800105c:	f7ff f91e 	bl	800029c <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff face 	bl	8000608 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fdc0 	bl	8000bf8 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
		//tmp = (motor->max_speed)*((double)1/motor->acceleration +(double)1/motor->deceleration)-correction(motor->accel_stop,motor->acceleration) - correction(motor->total_steps-motor->decel_start,motor->deceleration);
		tmp += (motor->decel_start-motor->accel_stop)*(double)ALPHA*1000/motor->max_speed;
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff fa6b 	bl	8000558 <__aeabi_f2d>
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa3f 	bl	8000514 <__aeabi_ui2d>
 8001096:	a378      	add	r3, pc, #480	; (adr r3, 8001278 <estimate_ttc+0x2b0>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fab4 	bl	8000608 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b77      	ldr	r3, [pc, #476]	; (800128c <estimate_ttc+0x2c4>)
 80010ae:	f7ff faab 	bl	8000608 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4690      	mov	r8, r2
 80010b8:	4699      	mov	r9, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa28 	bl	8000514 <__aeabi_ui2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4640      	mov	r0, r8
 80010ca:	4649      	mov	r1, r9
 80010cc:	f7ff fbc6 	bl	800085c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f8e0 	bl	800029c <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd88 	bl	8000bf8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e0ba      	b.n	8001264 <estimate_ttc+0x29c>
	else
		{
			/*tmp = (double)sqrt(2000*ALPHA*motor->total_steps);
			tmp *=1.0/sqrt(motor->acceleration) + 1.0/sqrt(motor->deceleration);
			*/
			motor->acc_time=sqrt(2000*ALPHA*motor->peak_velocity/motor->acceleration);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa0e 	bl	8000514 <__aeabi_ui2d>
 80010f8:	a361      	add	r3, pc, #388	; (adr r3, 8001280 <estimate_ttc+0x2b8>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fa83 	bl	8000608 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4614      	mov	r4, r2
 8001108:	461d      	mov	r5, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa00 	bl	8000514 <__aeabi_ui2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff fb9e 	bl	800085c <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ec43 2b17 	vmov	d7, r2, r3
 8001128:	eeb0 0a47 	vmov.f32	s0, s14
 800112c:	eef0 0a67 	vmov.f32	s1, s15
 8001130:	f008 fc42 	bl	80099b8 <sqrt>
 8001134:	eeb0 7a40 	vmov.f32	s14, s0
 8001138:	eef0 7a60 	vmov.f32	s15, s1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
			//tmp=sqrt(2000*ALPHA*motor->peak_velocity/motor->acceleration)-correction(motor->peak_velocity,motor->acceleration);
			tmp=sqrt(2000*ALPHA*motor->peak_velocity/motor->acceleration);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9e4 	bl	8000514 <__aeabi_ui2d>
 800114c:	a34c      	add	r3, pc, #304	; (adr r3, 8001280 <estimate_ttc+0x2b8>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa59 	bl	8000608 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4614      	mov	r4, r2
 800115c:	461d      	mov	r5, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9d6 	bl	8000514 <__aeabi_ui2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff fb74 	bl	800085c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	ec43 2b17 	vmov	d7, r2, r3
 800117c:	eeb0 0a47 	vmov.f32	s0, s14
 8001180:	eef0 0a67 	vmov.f32	s1, s15
 8001184:	f008 fc18 	bl	80099b8 <sqrt>
 8001188:	ec53 2b10 	vmov	r2, r3, d0
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fd32 	bl	8000bf8 <__aeabi_d2f>
 8001194:	4603      	mov	r3, r0
 8001196:	60fb      	str	r3, [r7, #12]

		//	tmp+=sqrt(2000*ALPHA*(motor->total_steps-motor->peak_velocity)/motor->deceleration)-correction(motor->total_steps-motor->peak_velocity,motor->deceleration);
			tmp+=sqrt(2000*ALPHA*(motor->total_steps-motor->peak_velocity)/motor->deceleration);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9b6 	bl	8000514 <__aeabi_ui2d>
 80011a8:	a335      	add	r3, pc, #212	; (adr r3, 8001280 <estimate_ttc+0x2b8>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fa2b 	bl	8000608 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4614      	mov	r4, r2
 80011b8:	461d      	mov	r5, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9a8 	bl	8000514 <__aeabi_ui2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4620      	mov	r0, r4
 80011ca:	4629      	mov	r1, r5
 80011cc:	f7ff fb46 	bl	800085c <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	ec43 2b17 	vmov	d7, r2, r3
 80011d8:	eeb0 0a47 	vmov.f32	s0, s14
 80011dc:	eef0 0a67 	vmov.f32	s1, s15
 80011e0:	f008 fbea 	bl	80099b8 <sqrt>
 80011e4:	ec55 4b10 	vmov	r4, r5, d0
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff f9b5 	bl	8000558 <__aeabi_f2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4620      	mov	r0, r4
 80011f4:	4629      	mov	r1, r5
 80011f6:	f7ff f851 	bl	800029c <__adddf3>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcf9 	bl	8000bf8 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	60fb      	str	r3, [r7, #12]
			motor->dec_time=sqrt(2000*ALPHA*(motor->total_steps-motor->peak_velocity)/motor->deceleration);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f97d 	bl	8000514 <__aeabi_ui2d>
 800121a:	a319      	add	r3, pc, #100	; (adr r3, 8001280 <estimate_ttc+0x2b8>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f9f2 	bl	8000608 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f96f 	bl	8000514 <__aeabi_ui2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7ff fb0d 	bl	800085c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	ec43 2b17 	vmov	d7, r2, r3
 800124a:	eeb0 0a47 	vmov.f32	s0, s14
 800124e:	eef0 0a67 	vmov.f32	s1, s15
 8001252:	f008 fbb1 	bl	80099b8 <sqrt>
 8001256:	eeb0 7a40 	vmov.f32	s14, s0
 800125a:	eef0 7a60 	vmov.f32	s15, s1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

		}


	//motor->time_before_correction =tmp;
	return tmp;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	ee07 3a90 	vmov	s15, r3
}
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001276:	bf00      	nop
 8001278:	ae261898 	.word	0xae261898
 800127c:	3f5015be 	.word	0x3f5015be
 8001280:	6c226809 	.word	0x6c226809
 8001284:	3fff6a78 	.word	0x3fff6a78
 8001288:	3ff00000 	.word	0x3ff00000
 800128c:	408f4000 	.word	0x408f4000

08001290 <desired_acceleration>:
	return x_n1;

}

unsigned long desired_acceleration(unsigned long steps, unsigned long time)
{
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
		t_acc /=MAX_VEL;
		printf("timeacc: %f\r\n",t_acc);
		printf("FIN\r\n");
*/

		t_acc = 2000000*ALPHA*steps/MAX_VEL;
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff f93a 	bl	8000514 <__aeabi_ui2d>
 80012a0:	a351      	add	r3, pc, #324	; (adr r3, 80013e8 <desired_acceleration+0x158>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7ff f9af 	bl	8000608 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	a345      	add	r3, pc, #276	; (adr r3, 80013c8 <desired_acceleration+0x138>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff fad0 	bl	800085c <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fc78 	bl	8000bb8 <__aeabi_d2uiz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	613b      	str	r3, [r7, #16]
		unsigned long desired_acc;

		printf("t_acc: %lu\r\n",t_acc);
 80012cc:	6939      	ldr	r1, [r7, #16]
 80012ce:	4844      	ldr	r0, [pc, #272]	; (80013e0 <desired_acceleration+0x150>)
 80012d0:	f005 fcd8 	bl	8006c84 <iprintf>
		double tmp;

		if(time>=t_acc) //przypadek bez ruchu jednostajnego
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d330      	bcc.n	800133e <desired_acceleration+0xae>
			desired_acc=tmp;
			printf("calculated_acc: %f\r\n",tmp);
			printf("FIN\r\n");
*/

			tmp = 4*ALPHA*steps/pow(time,2);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f919 	bl	8000514 <__aeabi_ui2d>
 80012e2:	a333      	add	r3, pc, #204	; (adr r3, 80013b0 <desired_acceleration+0x120>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f98e 	bl	8000608 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	6838      	ldr	r0, [r7, #0]
 80012f6:	f7ff f90d 	bl	8000514 <__aeabi_ui2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 80013b8 <desired_acceleration+0x128>
 8001302:	ec43 2b10 	vmov	d0, r2, r3
 8001306:	f008 fae7 	bl	80098d8 <pow>
 800130a:	ec53 2b10 	vmov	r2, r3, d0
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7ff faa3 	bl	800085c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	e9c7 2302 	strd	r2, r3, [r7, #8]
			desired_acc = tmp*pow(1000,3);
 800131e:	a328      	add	r3, pc, #160	; (adr r3, 80013c0 <desired_acceleration+0x130>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc40 	bl	8000bb8 <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e02c      	b.n	8001398 <desired_acceleration+0x108>
		}
		else // przypadek z ruchem jednostajnym
		{

			//desired_acc= secant_acc(steps, time);
			tmp = MAX_VEL*time-pow(1000,2)*ALPHA*steps;
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7ff f8e8 	bl	8000514 <__aeabi_ui2d>
 8001344:	a320      	add	r3, pc, #128	; (adr r3, 80013c8 <desired_acceleration+0x138>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f95d 	bl	8000608 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4614      	mov	r4, r2
 8001354:	461d      	mov	r5, r3
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f8dc 	bl	8000514 <__aeabi_ui2d>
 800135c:	a31c      	add	r3, pc, #112	; (adr r3, 80013d0 <desired_acceleration+0x140>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f951 	bl	8000608 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7fe ff93 	bl	8000298 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	e9c7 2302 	strd	r2, r3, [r7, #8]
			desired_acc = 1000*pow(MAX_VEL,2)/tmp;
 800137a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800137e:	a116      	add	r1, pc, #88	; (adr r1, 80013d8 <desired_acceleration+0x148>)
 8001380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001384:	f7ff fa6a 	bl	800085c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fc12 	bl	8000bb8 <__aeabi_d2uiz>
 8001394:	4603      	mov	r3, r0
 8001396:	617b      	str	r3, [r7, #20]

		}


		if(desired_acc>8000000)//maksymalne możliwe przyspieszenie, wartość trochę mniejsza niż wyliczona by nie dopuścić do zbyt gwałtownych ruchów
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <desired_acceleration+0x154>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <desired_acceleration+0x114>
			desired_acc=8000000;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <desired_acceleration+0x154>)
 80013a2:	617b      	str	r3, [r7, #20]

			return desired_acc;
 80013a4:	697b      	ldr	r3, [r7, #20]

}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	ae261898 	.word	0xae261898
 80013b4:	3f7015be 	.word	0x3f7015be
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40000000 	.word	0x40000000
 80013c0:	00000000 	.word	0x00000000
 80013c4:	41cdcd65 	.word	0x41cdcd65
 80013c8:	66666665 	.word	0x66666665
 80013cc:	40dad83a 	.word	0x40dad83a
 80013d0:	99999999 	.word	0x99999999
 80013d4:	408eadf9 	.word	0x408eadf9
 80013d8:	835414fd 	.word	0x835414fd
 80013dc:	4265fdf5 	.word	0x4265fdf5
 80013e0:	0800a770 	.word	0x0800a770
 80013e4:	007a1200 	.word	0x007a1200
 80013e8:	99999999 	.word	0x99999999
 80013ec:	409eadf9 	.word	0x409eadf9

080013f0 <init_movement>:

void init_movement(motorInfo *motor, long total_steps, unsigned long accel, unsigned long decel, unsigned max)
{
 80013f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f4:	b088      	sub	sp, #32
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	61f8      	str	r0, [r7, #28]
 80013fa:	61b9      	str	r1, [r7, #24]
 80013fc:	617a      	str	r2, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]


		max = max <= MIN_VEL? MIN_VEL:max;
 8001400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001402:	f240 6222 	movw	r2, #1570	; 0x622
 8001406:	4293      	cmp	r3, r2
 8001408:	d90a      	bls.n	8001420 <init_movement+0x30>
 800140a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800140c:	f7ff f882 	bl	8000514 <__aeabi_ui2d>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbce 	bl	8000bb8 <__aeabi_d2uiz>
 800141c:	4603      	mov	r3, r0
 800141e:	e001      	b.n	8001424 <init_movement+0x34>
 8001420:	f240 6322 	movw	r3, #1570	; 0x622
 8001424:	643b      	str	r3, [r7, #64]	; 0x40
		motor->max_speed = (max >= MAX_VEL) ? MAX_VEL : max;
 8001426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001428:	f646 3260 	movw	r2, #27488	; 0x6b60
 800142c:	4293      	cmp	r3, r2
 800142e:	d80a      	bhi.n	8001446 <init_movement+0x56>
 8001430:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001432:	f7ff f86f 	bl	8000514 <__aeabi_ui2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbbb 	bl	8000bb8 <__aeabi_d2uiz>
 8001442:	4603      	mov	r3, r0
 8001444:	e001      	b.n	800144a <init_movement+0x5a>
 8001446:	f646 3360 	movw	r3, #27488	; 0x6b60
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	6013      	str	r3, [r2, #0]
		motor->dir = total_steps>0 ? 1 : -1;
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dd01      	ble.n	8001458 <init_movement+0x68>
 8001454:	2201      	movs	r2, #1
 8001456:	e001      	b.n	800145c <init_movement+0x6c>
 8001458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	609a      	str	r2, [r3, #8]

		HAL_GPIO_WritePin(motor->GPIOX, motor->GPIO_Label, motor->dir > 0);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	6958      	ldr	r0, [r3, #20]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	8b19      	ldrh	r1, [r3, #24]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	bfcc      	ite	gt
 8001470:	2301      	movgt	r3, #1
 8001472:	2300      	movle	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	f002 f892 	bl	80035a0 <HAL_GPIO_WritePin>


		motor->total_steps=total_steps>0?total_steps:-total_steps;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bfb8      	it	lt
 8001482:	425b      	neglt	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	63da      	str	r2, [r3, #60]	; 0x3c
		motor->rest=0;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	2200      	movs	r2, #0
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
		motor->state=ACCEL;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		motor->auto_reload=0.676*CLK_FRQ*sqrt(2000*ALPHA/accel)/(motor->timer->Instance->PSC+1);// length of current pulse in timer ticks
 8001498:	6978      	ldr	r0, [r7, #20]
 800149a:	f7ff f83b 	bl	8000514 <__aeabi_ui2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	a181      	add	r1, pc, #516	; (adr r1, 80016a8 <init_movement+0x2b8>)
 80014a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014a8:	f7ff f9d8 	bl	800085c <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	ec43 2b17 	vmov	d7, r2, r3
 80014b4:	eeb0 0a47 	vmov.f32	s0, s14
 80014b8:	eef0 0a67 	vmov.f32	s1, s15
 80014bc:	f008 fa7c 	bl	80099b8 <sqrt>
 80014c0:	ec51 0b10 	vmov	r0, r1, d0
 80014c4:	a37a      	add	r3, pc, #488	; (adr r3, 80016b0 <init_movement+0x2c0>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f89d 	bl	8000608 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4614      	mov	r4, r2
 80014d4:	461d      	mov	r5, r3
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	3301      	adds	r3, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f817 	bl	8000514 <__aeabi_ui2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7ff f9b5 	bl	800085c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fb5d 	bl	8000bb8 <__aeabi_d2uiz>
 80014fe:	4602      	mov	r2, r0
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	60da      	str	r2, [r3, #12]
		motor->max_speed_ARR = CLK_FRQ*ALPHA*1000/motor->max_speed/(motor->timer->Instance->PSC+1);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f803 	bl	8000514 <__aeabi_ui2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	a169      	add	r1, pc, #420	; (adr r1, 80016b8 <init_movement+0x2c8>)
 8001514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001518:	f7ff f9a0 	bl	800085c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4614      	mov	r4, r2
 8001522:	461d      	mov	r5, r3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	3301      	adds	r3, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fff0 	bl	8000514 <__aeabi_ui2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7ff f98e 	bl	800085c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fb36 	bl	8000bb8 <__aeabi_d2uiz>
 800154c:	4602      	mov	r2, r0
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	605a      	str	r2, [r3, #4]
		motor->accel_stop = motor->max_speed*motor->max_speed/(2000*ALPHA*accel);
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffd8 	bl	8000514 <__aeabi_ui2d>
 8001564:	4604      	mov	r4, r0
 8001566:	460d      	mov	r5, r1
 8001568:	6978      	ldr	r0, [r7, #20]
 800156a:	f7fe ffd3 	bl	8000514 <__aeabi_ui2d>
 800156e:	a34e      	add	r3, pc, #312	; (adr r3, 80016a8 <init_movement+0x2b8>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f848 	bl	8000608 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7ff f96c 	bl	800085c <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff fb14 	bl	8000bb8 <__aeabi_d2uiz>
 8001590:	4602      	mov	r2, r0
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	621a      	str	r2, [r3, #32]

		if(!motor->accel_stop)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <init_movement+0x1b4>
			motor->accel_stop =1 ;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2201      	movs	r2, #1
 80015a2:	621a      	str	r2, [r3, #32]


		motor->peak_velocity=(motor->total_steps*(unsigned long long)decel)/(accel+decel);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a8:	2200      	movs	r2, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	60fa      	str	r2, [r7, #12]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2200      	movs	r2, #0
 80015b2:	469a      	mov	sl, r3
 80015b4:	4693      	mov	fp, r2
 80015b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ba:	460b      	mov	r3, r1
 80015bc:	fb0a f203 	mul.w	r2, sl, r3
 80015c0:	4603      	mov	r3, r0
 80015c2:	fb03 f30b 	mul.w	r3, r3, fp
 80015c6:	4413      	add	r3, r2
 80015c8:	4602      	mov	r2, r0
 80015ca:	fba2 890a 	umull	r8, r9, r2, sl
 80015ce:	444b      	add	r3, r9
 80015d0:	4699      	mov	r9, r3
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4413      	add	r3, r2
 80015d8:	2200      	movs	r2, #0
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e2:	4640      	mov	r0, r8
 80015e4:	4649      	mov	r1, r9
 80015e6:	f7ff fb57 	bl	8000c98 <__aeabi_uldivmod>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	61da      	str	r2, [r3, #28]

		if(!motor->peak_velocity)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <init_movement+0x210>
			motor->peak_velocity =1;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2201      	movs	r2, #1
 80015fe:	61da      	str	r2, [r3, #28]

		if(motor->accel_stop <= motor->peak_velocity)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	6a1a      	ldr	r2, [r3, #32]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	429a      	cmp	r2, r3
 800160a:	d80d      	bhi.n	8001628 <init_movement+0x238>
			motor->decel_start= (motor->total_steps-(motor->accel_stop*accel)/decel);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	6979      	ldr	r1, [r7, #20]
 8001616:	fb03 f101 	mul.w	r1, r3, r1
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001620:	1ad2      	subs	r2, r2, r3
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
 8001626:	e003      	b.n	8001630 <init_movement+0x240>
		else
			motor->decel_start = motor->peak_velocity;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24


		motor->movement_done=0;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		motor->acceleration=accel;
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
		motor->deceleration=decel;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
		motor->steps=0;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	2200      	movs	r2, #0
 8001648:	639a      	str	r2, [r3, #56]	; 0x38

		motor->time_to_complete=estimate_ttc(motor);
 800164a:	69f8      	ldr	r0, [r7, #28]
 800164c:	f7ff fcbc 	bl	8000fc8 <estimate_ttc>
 8001650:	ee10 3a10 	vmov	r3, s0
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff7f 	bl	8000558 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	69f9      	ldr	r1, [r7, #28]
 8001660:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		motor->T1=motor->T2=motor->T3=0;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2200      	movs	r2, #0
 8001668:	64da      	str	r2, [r3, #76]	; 0x4c
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	649a      	str	r2, [r3, #72]	; 0x48
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	645a      	str	r2, [r3, #68]	; 0x44

		motor->timer->Instance->ARR=motor->auto_reload;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	68d2      	ldr	r2, [r2, #12]
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
		//generujemy update resetując rejestry
		//bez tego nie działa, 4 godziny życia za mną :(
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	615a      	str	r2, [r3, #20]
//printf("TUTAJ");


}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	6c226809 	.word	0x6c226809
 80016ac:	3fff6a78 	.word	0x3fff6a78
 80016b0:	00000001 	.word	0x00000001
 80016b4:	418b13a4 	.word	0x418b13a4
 80016b8:	c5ffffff 	.word	0xc5ffffff
 80016bc:	4193a95e 	.word	0x4193a95e

080016c0 <begin_movement>:

void begin_movement(motorInfo *motor)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	motor->T1 = __HAL_TIM_GET_COUNTER(&htim5);
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <begin_movement+0x3c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	645a      	str	r2, [r3, #68]	; 0x44
	motor->movement_start=__HAL_TIM_GET_COUNTER(&htim5);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <begin_movement+0x3c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	651a      	str	r2, [r3, #80]	; 0x50
	HAL_TIM_OC_Start(motor->timer,TIM_CHANNEL_1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fd3e 	bl	8004164 <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start_IT(motor->timer);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fc59 	bl	8003fa4 <HAL_TIM_Base_Start_IT>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000394 	.word	0x20000394

08001700 <init_movement_time>:

void init_movement_time(motorInfo *motor,long total_steps, unsigned long time)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]


	unsigned long accel = desired_acceleration(abs(total_steps), time);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	bfb8      	it	lt
 8001712:	425b      	neglt	r3, r3
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fdba 	bl	8001290 <desired_acceleration>
 800171c:	6178      	str	r0, [r7, #20]

	//printf("Calculated:  %d\r\n",accel);
	init_movement(motor, total_steps, accel, accel, MAX_VEL);
 800171e:	f646 3360 	movw	r3, #27488	; 0x6b60
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fe60 	bl	80013f0 <init_movement>

}
 8001730:	bf00      	nop
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <reset_motor>:

void reset_motor(motorInfo *motor,TIM_HandleTypeDef *timer,GPIO_TypeDef *GPIOX,uint16_t GPIO_Label)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	807b      	strh	r3, [r7, #2]
	motor->timer = timer;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	611a      	str	r2, [r3, #16]
	motor->GPIOX = GPIOX;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	615a      	str	r2, [r3, #20]
	motor->GPIO_Label=GPIO_Label;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	831a      	strh	r2, [r3, #24]
	test.movement_done=1;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <reset_motor+0x64>)
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	motor->step_position=0;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
	motor->total_steps=0;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(motor->GPIOX, motor->GPIO_Label, motor->dir>0);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6958      	ldr	r0, [r3, #20]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8b19      	ldrh	r1, [r3, #24]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	bfcc      	ite	gt
 800177c:	2301      	movgt	r3, #1
 800177e:	2300      	movle	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	f001 ff0c 	bl	80035a0 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Stop(motor->timer,TIM_CHANNEL_1);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fd98 	bl	80042c4 <HAL_TIM_OC_Stop>


}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000480 	.word	0x20000480

080017a0 <movement_done_display>:

}


void movement_done_display(motorInfo *motor)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

	printf("Motor done in:%f s\r\n",
					(__HAL_TIM_GET_COUNTER(&htim5) - motor->movement_start) / 1000000.0);
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <movement_done_display+0x58>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b2:	1ad3      	subs	r3, r2, r3
	printf("Motor done in:%f s\r\n",
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fead 	bl	8000514 <__aeabi_ui2d>
 80017ba:	a30d      	add	r3, pc, #52	; (adr r3, 80017f0 <movement_done_display+0x50>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7ff f84c 	bl	800085c <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <movement_done_display+0x5c>)
 80017ca:	f005 fa5b 	bl	8006c84 <iprintf>
			motor->movement_done=0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	printf("Acceleration used: %u, Current position: %d \r\n",motor->acceleration,motor->step_position);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	461a      	mov	r2, r3
 80017e0:	4807      	ldr	r0, [pc, #28]	; (8001800 <movement_done_display+0x60>)
 80017e2:	f005 fa4f 	bl	8006c84 <iprintf>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	00000000 	.word	0x00000000
 80017f4:	412e8480 	.word	0x412e8480
 80017f8:	20000394 	.word	0x20000394
 80017fc:	0800a820 	.word	0x0800a820
 8001800:	0800a838 	.word	0x0800a838

08001804 <calculate_auto_reload>:



unsigned long calculate_auto_reload(motorInfo *motor)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

	if(motor->steps < motor->total_steps)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <calculate_auto_reload+0x24>
	{
		motor->step_position+=motor->dir;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	441a      	add	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
 8001826:	e003      	b.n	8001830 <calculate_auto_reload+0x2c>
	}
	else
		motor->state=STOP;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	motor->steps++;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	639a      	str	r2, [r3, #56]	; 0x38
	unsigned long  tmp=0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]

	switch (motor->state)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b03      	cmp	r3, #3
 8001848:	f200 80c6 	bhi.w	80019d8 <calculate_auto_reload+0x1d4>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <calculate_auto_reload+0x50>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001865 	.word	0x08001865
 8001858:	08001899 	.word	0x08001899
 800185c:	08001977 	.word	0x08001977
 8001860:	08001947 	.word	0x08001947
	{
	case STOP:

		motor->movement_done=1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		//flag_htim2_done=1;
		HAL_TIM_OC_Stop(motor->timer,TIM_CHANNEL_1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fd26 	bl	80042c4 <HAL_TIM_OC_Stop>
		HAL_TIM_Base_Stop_IT(motor->timer);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fbf3 	bl	8004068 <HAL_TIM_Base_Stop_IT>


			motor->T3 = __HAL_TIM_GET_COUNTER(&htim5) - motor->T3;
 8001882:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <calculate_auto_reload+0x1e0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	1ad2      	subs	r2, r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	64da      	str	r2, [r3, #76]	; 0x4c

		return motor->auto_reload;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	e0a1      	b.n	80019dc <calculate_auto_reload+0x1d8>
		break;
	case ACCEL:

		tmp=motor->rest;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	60fb      	str	r3, [r7, #12]
		motor->rest =(2*motor->auto_reload + tmp)%(4*motor->steps + 1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	005a      	lsls	r2, r3, #1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	3201      	adds	r2, #1
 80018b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80018b4:	fb01 f202 	mul.w	r2, r1, r2
 80018b8:	1a9a      	subs	r2, r3, r2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
		motor->auto_reload -= (2*motor->auto_reload + tmp)/(4*motor->steps + 1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	005a      	lsls	r2, r3, #1
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	441a      	add	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	3301      	adds	r3, #1
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	68d2      	ldr	r2, [r2, #12]
 80018d8:	1ad2      	subs	r2, r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60da      	str	r2, [r3, #12]

		if(motor->steps>=motor->decel_start)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d311      	bcc.n	800190e <calculate_auto_reload+0x10a>
			{
	  		 motor->T1 = __HAL_TIM_GET_COUNTER(&htim5)-motor->T1;
 80018ea:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <calculate_auto_reload+0x1e0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	1ad2      	subs	r2, r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	645a      	str	r2, [r3, #68]	; 0x44

	  	//	 htim5.Instance->CNT=0;
	  		 motor->T3 =  __HAL_TIM_GET_COUNTER(&htim5);
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <calculate_auto_reload+0x1e0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	64da      	str	r2, [r3, #76]	; 0x4c

				motor->state=DECEL;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5);

			motor->state = RUN;
			motor->auto_reload = motor->max_speed_ARR;
		}
		break;
 800190c:	e061      	b.n	80019d2 <calculate_auto_reload+0x1ce>
		else if(motor->steps >= motor->accel_stop)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	429a      	cmp	r2, r3
 8001918:	d35b      	bcc.n	80019d2 <calculate_auto_reload+0x1ce>
			motor->T1 = __HAL_TIM_GET_COUNTER(&htim5)-motor->T1;
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <calculate_auto_reload+0x1e0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	1ad2      	subs	r2, r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5);
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <calculate_auto_reload+0x1e0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	649a      	str	r2, [r3, #72]	; 0x48
			motor->state = RUN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			motor->auto_reload = motor->max_speed_ARR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60da      	str	r2, [r3, #12]
		break;
 8001944:	e045      	b.n	80019d2 <calculate_auto_reload+0x1ce>
	case RUN:
		if(motor->steps >= motor->decel_start)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	429a      	cmp	r2, r3
 8001950:	d341      	bcc.n	80019d6 <calculate_auto_reload+0x1d2>
		{
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5)-motor->T2;
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <calculate_auto_reload+0x1e0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195c:	1ad2      	subs	r2, r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	649a      	str	r2, [r3, #72]	; 0x48
		//	htim5.Instance->CNT=0;
			motor->T3 =  __HAL_TIM_GET_COUNTER(&htim5);
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <calculate_auto_reload+0x1e0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	64da      	str	r2, [r3, #76]	; 0x4c
			motor->state=DECEL;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				//motor->rest=0;
		}
		break;
 8001974:	e02f      	b.n	80019d6 <calculate_auto_reload+0x1d2>
	case DECEL:
		tmp=motor->rest;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	60fb      	str	r3, [r7, #12]
		motor->rest =(long)((2*motor->auto_reload + motor->rest))%(4*((long)(motor->steps-motor->total_steps)) + 1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	005a      	lsls	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4413      	add	r3, r2
 8001988:	461a      	mov	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001992:	1acb      	subs	r3, r1, r3
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	3301      	adds	r3, #1
 8001998:	fb92 f1f3 	sdiv	r1, r2, r3
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
		motor->auto_reload -= (long)((2*motor->auto_reload + tmp))/(4*((long)(motor->steps-motor->total_steps)) + 1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	005a      	lsls	r2, r3, #1
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	3301      	adds	r3, #1
 80019c2:	fb91 f2f3 	sdiv	r2, r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	1a9a      	subs	r2, r3, r2
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]
		break;
 80019d0:	e002      	b.n	80019d8 <calculate_auto_reload+0x1d4>
		break;
 80019d2:	bf00      	nop
 80019d4:	e000      	b.n	80019d8 <calculate_auto_reload+0x1d4>
		break;
 80019d6:	bf00      	nop

	}



	return (motor->auto_reload);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]


}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000394 	.word	0x20000394

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ee:	f000 fecd 	bl	800278c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f2:	f000 f8e1 	bl	8001bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f6:	f000 faf1 	bl	8001fdc <MX_GPIO_Init>
  MX_TIM3_Init();
 80019fa:	f000 f9a3 	bl	8001d44 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019fe:	f000 f9fb 	bl	8001df8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001a02:	f000 f945 	bl	8001c90 <MX_TIM2_Init>
  MX_DMA_Init();
 8001a06:	f000 fac9 	bl	8001f9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a0a:	f000 fa9d 	bl	8001f48 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001a0e:	f000 fa4d 	bl	8001eac <MX_TIM5_Init>





	  reset_motor(&motor_1,&htim2,STEPPER_DIR_1_GPIO_Port, STEPPER_DIR_1_Pin);
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	4a53      	ldr	r2, [pc, #332]	; (8001b64 <main+0x17c>)
 8001a16:	4954      	ldr	r1, [pc, #336]	; (8001b68 <main+0x180>)
 8001a18:	4854      	ldr	r0, [pc, #336]	; (8001b6c <main+0x184>)
 8001a1a:	f7ff fe8d 	bl	8001738 <reset_motor>
	  reset_motor(&motor_2,&htim3,STEPPER_DIR_2_GPIO_Port, STEPPER_DIR_2_Pin);
 8001a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a22:	4a53      	ldr	r2, [pc, #332]	; (8001b70 <main+0x188>)
 8001a24:	4953      	ldr	r1, [pc, #332]	; (8001b74 <main+0x18c>)
 8001a26:	4854      	ldr	r0, [pc, #336]	; (8001b78 <main+0x190>)
 8001a28:	f7ff fe86 	bl	8001738 <reset_motor>
	  reset_motor(&motor_3,&htim4,STEPPER_DIR_3_GPIO_Port, STEPPER_DIR_3_Pin);
 8001a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <main+0x188>)
 8001a32:	4952      	ldr	r1, [pc, #328]	; (8001b7c <main+0x194>)
 8001a34:	4852      	ldr	r0, [pc, #328]	; (8001b80 <main+0x198>)
 8001a36:	f7ff fe7f 	bl	8001738 <reset_motor>


	//  HAL_TIM_Base_Start_IT(&htim3);
	 // HAL_TIM_Base_Start_IT(&htim4);
	  HAL_TIM_Base_Start_IT(&htim5);
 8001a3a:	4852      	ldr	r0, [pc, #328]	; (8001b84 <main+0x19c>)
 8001a3c:	f002 fab2 	bl	8003fa4 <HAL_TIM_Base_Start_IT>




  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	4951      	ldr	r1, [pc, #324]	; (8001b88 <main+0x1a0>)
 8001a44:	4851      	ldr	r0, [pc, #324]	; (8001b8c <main+0x1a4>)
 8001a46:	f003 fb22 	bl	800508e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8001a4a:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <main+0x1a8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <main+0x1a8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0208 	bic.w	r2, r2, #8
 8001a58:	601a      	str	r2, [r3, #0]

flag_command_recieved=0;
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <main+0x1ac>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

	unsigned long timer_val;
  long roll, pitch, yaw;
  long steps_1,steps_2,steps_3;
  unsigned time;
  printf("Start\r\n");
 8001a60:	484d      	ldr	r0, [pc, #308]	; (8001b98 <main+0x1b0>)
 8001a62:	f005 f995 	bl	8006d90 <puts>
		  printf("acc time estimate: %fs ,Delta %fs, error as percentage: %f",test.acc_time,(test.acc_time-tmp), test.acc_time*100.0/tmp-100.0);
		  printf("\r\n\r\n---------\r\n\r\n");
		  flag_htim2_done=0;

	  }*/
	if (motor_1.movement_done) {
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <main+0x184>)
 8001a68:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <main+0x96>
		printf("Motor 1 done\r\n");
 8001a72:	484a      	ldr	r0, [pc, #296]	; (8001b9c <main+0x1b4>)
 8001a74:	f005 f98c 	bl	8006d90 <puts>
		movement_done_display(&motor_1);
 8001a78:	483c      	ldr	r0, [pc, #240]	; (8001b6c <main+0x184>)
 8001a7a:	f7ff fe91 	bl	80017a0 <movement_done_display>
	}
	if (motor_2.movement_done) {
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <main+0x190>)
 8001a80:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <main+0xae>
		printf("Motor 2 done\r\n");
 8001a8a:	4845      	ldr	r0, [pc, #276]	; (8001ba0 <main+0x1b8>)
 8001a8c:	f005 f980 	bl	8006d90 <puts>
				movement_done_display(&motor_2);
 8001a90:	4839      	ldr	r0, [pc, #228]	; (8001b78 <main+0x190>)
 8001a92:	f7ff fe85 	bl	80017a0 <movement_done_display>

	}
	if (motor_3.movement_done) {
 8001a96:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <main+0x198>)
 8001a98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <main+0xc6>
		printf("Motor 3 done\r\n");
 8001aa2:	4840      	ldr	r0, [pc, #256]	; (8001ba4 <main+0x1bc>)
 8001aa4:	f005 f974 	bl	8006d90 <puts>
				movement_done_display(&motor_3);
 8001aa8:	4835      	ldr	r0, [pc, #212]	; (8001b80 <main+0x198>)
 8001aaa:	f7ff fe79 	bl	80017a0 <movement_done_display>

	}

	  if(flag_command_recieved)
 8001aae:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <main+0x1ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0d7      	beq.n	8001a66 <main+0x7e>
	  {
			memcpy(MainBuf, RxBuf, size_recieved);
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <main+0x1c0>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	4932      	ldr	r1, [pc, #200]	; (8001b88 <main+0x1a0>)
 8001abe:	483b      	ldr	r0, [pc, #236]	; (8001bac <main+0x1c4>)
 8001ac0:	f004 fc60 	bl	8006384 <memcpy>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	4930      	ldr	r1, [pc, #192]	; (8001b88 <main+0x1a0>)
 8001ac8:	4830      	ldr	r0, [pc, #192]	; (8001b8c <main+0x1a4>)
 8001aca:	f003 fae0 	bl	800508e <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001ace:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <main+0x1a8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <main+0x1a8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0208 	bic.w	r2, r2, #8
 8001adc:	601a      	str	r2, [r3, #0]

			printf("Recieved: %s \r\n", MainBuf);
 8001ade:	4933      	ldr	r1, [pc, #204]	; (8001bac <main+0x1c4>)
 8001ae0:	4833      	ldr	r0, [pc, #204]	; (8001bb0 <main+0x1c8>)
 8001ae2:	f005 f8cf 	bl	8006c84 <iprintf>

			sscanf(MainBuf, "%d %d %d %u", &steps_1,&steps_2,&steps_3,&time);
 8001ae6:	f107 010c 	add.w	r1, r7, #12
 8001aea:	f107 0210 	add.w	r2, r7, #16
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	460b      	mov	r3, r1
 8001afa:	492e      	ldr	r1, [pc, #184]	; (8001bb4 <main+0x1cc>)
 8001afc:	482b      	ldr	r0, [pc, #172]	; (8001bac <main+0x1c4>)
 8001afe:	f005 f94f 	bl	8006da0 <siscanf>
			//inverse_kinematics(roll, pitch, yaw, &steps_1, &steps_2, &steps_3);




			init_movement_time(&motor_1, steps_1-motor_1.step_position, time);
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <main+0x184>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4817      	ldr	r0, [pc, #92]	; (8001b6c <main+0x184>)
 8001b10:	f7ff fdf6 	bl	8001700 <init_movement_time>
			init_movement_time(&motor_2, steps_2-motor_2.step_position, time);
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <main+0x190>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4815      	ldr	r0, [pc, #84]	; (8001b78 <main+0x190>)
 8001b22:	f7ff fded 	bl	8001700 <init_movement_time>
			init_movement_time(&motor_3, steps_3-motor_3.step_position, time);
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <main+0x198>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4813      	ldr	r0, [pc, #76]	; (8001b80 <main+0x198>)
 8001b34:	f7ff fde4 	bl	8001700 <init_movement_time>


			htim5.Instance->CNT	=0;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <main+0x19c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24

			begin_movement(&motor_1);
 8001b40:	480a      	ldr	r0, [pc, #40]	; (8001b6c <main+0x184>)
 8001b42:	f7ff fdbd 	bl	80016c0 <begin_movement>
			begin_movement(&motor_2);
 8001b46:	480c      	ldr	r0, [pc, #48]	; (8001b78 <main+0x190>)
 8001b48:	f7ff fdba 	bl	80016c0 <begin_movement>
			begin_movement(&motor_3);
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <main+0x198>)
 8001b4e:	f7ff fdb7 	bl	80016c0 <begin_movement>
			timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <main+0x19c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	617b      	str	r3, [r7, #20]
			flag_command_recieved = 0;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <main+0x1ac>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
	if (motor_1.movement_done) {
 8001b60:	e781      	b.n	8001a66 <main+0x7e>
 8001b62:	bf00      	nop
 8001b64:	40020800 	.word	0x40020800
 8001b68:	200002bc 	.word	0x200002bc
 8001b6c:	20000500 	.word	0x20000500
 8001b70:	40020400 	.word	0x40020400
 8001b74:	20000304 	.word	0x20000304
 8001b78:	20000580 	.word	0x20000580
 8001b7c:	2000034c 	.word	0x2000034c
 8001b80:	20000600 	.word	0x20000600
 8001b84:	20000394 	.word	0x20000394
 8001b88:	200001fc 	.word	0x200001fc
 8001b8c:	200003dc 	.word	0x200003dc
 8001b90:	20000420 	.word	0x20000420
 8001b94:	20000680 	.word	0x20000680
 8001b98:	0800a868 	.word	0x0800a868
 8001b9c:	0800a870 	.word	0x0800a870
 8001ba0:	0800a880 	.word	0x0800a880
 8001ba4:	0800a890 	.word	0x0800a890
 8001ba8:	20000684 	.word	0x20000684
 8001bac:	2000023c 	.word	0x2000023c
 8001bb0:	0800a8a0 	.word	0x0800a8a0
 8001bb4:	0800a8b0 	.word	0x0800a8b0

08001bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b094      	sub	sp, #80	; 0x50
 8001bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 0320 	add.w	r3, r7, #32
 8001bc2:	2230      	movs	r2, #48	; 0x30
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 fbea 	bl	80063a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <SystemClock_Config+0xd0>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <SystemClock_Config+0xd0>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <SystemClock_Config+0xd0>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <SystemClock_Config+0xd4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <SystemClock_Config+0xd4>)
 8001c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <SystemClock_Config+0xd4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c20:	2310      	movs	r3, #16
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c24:	2302      	movs	r3, #2
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c36:	2304      	movs	r3, #4
 8001c38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3e:	f107 0320 	add.w	r3, r7, #32
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fcc6 	bl	80035d4 <HAL_RCC_OscConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c4e:	f000 faa1 	bl	8002194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c52:	230f      	movs	r3, #15
 8001c54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c56:	2302      	movs	r3, #2
 8001c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 ff28 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c7a:	f000 fa8b 	bl	8002194 <Error_Handler>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3750      	adds	r7, #80	; 0x50
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40007000 	.word	0x40007000

08001c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]
 8001cae:	615a      	str	r2, [r3, #20]
 8001cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cb2:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001cbc:	f240 128f 	movw	r2, #399	; 0x18f
 8001cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001cdc:	4818      	ldr	r0, [pc, #96]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001cde:	f002 f9f2 	bl	80040c6 <HAL_TIM_OC_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f000 fa54 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cec:	2320      	movs	r3, #32
 8001cee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001cfc:	f003 f866 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d06:	f000 fa45 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001d0a:	2330      	movs	r3, #48	; 0x30
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001d22:	f002 fc3b 	bl	800459c <HAL_TIM_OC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d2c:	f000 fa32 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <MX_TIM2_Init+0xb0>)
 8001d32:	f000 fae1 	bl	80022f8 <HAL_TIM_MspPostInit>

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002bc 	.word	0x200002bc

08001d44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	615a      	str	r2, [r3, #20]
 8001d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001d68:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <MX_TIM3_Init+0xb0>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 400-1;
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001d6e:	f240 128f 	movw	r2, #399	; 0x18f
 8001d72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001d8e:	4818      	ldr	r0, [pc, #96]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001d90:	f002 f999 	bl	80040c6 <HAL_TIM_OC_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001d9a:	f000 f9fb 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	4619      	mov	r1, r3
 8001dac:	4810      	ldr	r0, [pc, #64]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001dae:	f003 f80d 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001db8:	f000 f9ec 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001dbc:	2330      	movs	r3, #48	; 0x30
 8001dbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001dd4:	f002 fbe2 	bl	800459c <HAL_TIM_OC_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001dde:	f000 f9d9 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001de2:	4803      	ldr	r0, [pc, #12]	; (8001df0 <MX_TIM3_Init+0xac>)
 8001de4:	f000 fa88 	bl	80022f8 <HAL_TIM_MspPostInit>

}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000304 	.word	0x20000304
 8001df4:	40000400 	.word	0x40000400

08001df8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	615a      	str	r2, [r3, #20]
 8001e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e1c:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <MX_TIM4_Init+0xb0>)
 8001e1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 400-1;
 8001e20:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e22:	f240 128f 	movw	r2, #399	; 0x18f
 8001e26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001e42:	4818      	ldr	r0, [pc, #96]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e44:	f002 f93f 	bl	80040c6 <HAL_TIM_OC_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e4e:	f000 f9a1 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e52:	2320      	movs	r3, #32
 8001e54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e5a:	f107 0320 	add.w	r3, r7, #32
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4810      	ldr	r0, [pc, #64]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e62:	f002 ffb3 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e6c:	f000 f992 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001e70:	2330      	movs	r3, #48	; 0x30
 8001e72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e88:	f002 fb88 	bl	800459c <HAL_TIM_OC_ConfigChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001e92:	f000 f97f 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e98:	f000 fa2e 	bl	80022f8 <HAL_TIM_MspPostInit>

}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000034c 	.word	0x2000034c
 8001ea8:	40000800 	.word	0x40000800

08001eac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <MX_TIM5_Init+0x98>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001ed0:	2253      	movs	r2, #83	; 0x53
 8001ed2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001eee:	4814      	ldr	r0, [pc, #80]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001ef0:	f002 f808 	bl	8003f04 <HAL_TIM_Base_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001efa:	f000 f94b 	bl	8002194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480d      	ldr	r0, [pc, #52]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001f0c:	f002 fba2 	bl	8004654 <HAL_TIM_ConfigClockSource>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001f16:	f000 f93d 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	; (8001f40 <MX_TIM5_Init+0x94>)
 8001f28:	f002 ff50 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001f32:	f000 f92f 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000394 	.word	0x20000394
 8001f44:	40000c00 	.word	0x40000c00

08001f48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <MX_USART2_UART_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f80:	f002 ffa6 	bl	8004ed0 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f000 f903 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200003dc 	.word	0x200003dc
 8001f98:	40004400 	.word	0x40004400

08001f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_DMA_Init+0x3c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <MX_DMA_Init+0x3c>)
 8001fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_DMA_Init+0x3c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2010      	movs	r0, #16
 8001fc4:	f000 fd2f 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001fc8:	2010      	movs	r0, #16
 8001fca:	f000 fd48 	bl	8002a5e <HAL_NVIC_EnableIRQ>

}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <MX_GPIO_Init+0xe0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a30      	ldr	r2, [pc, #192]	; (80020bc <MX_GPIO_Init+0xe0>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <MX_GPIO_Init+0xe0>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <MX_GPIO_Init+0xe0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a29      	ldr	r2, [pc, #164]	; (80020bc <MX_GPIO_Init+0xe0>)
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b27      	ldr	r3, [pc, #156]	; (80020bc <MX_GPIO_Init+0xe0>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <MX_GPIO_Init+0xe0>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a22      	ldr	r2, [pc, #136]	; (80020bc <MX_GPIO_Init+0xe0>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MX_GPIO_Init+0xe0>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_GPIO_Init+0xe0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <MX_GPIO_Init+0xe0>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_GPIO_Init+0xe0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002068:	4815      	ldr	r0, [pc, #84]	; (80020c0 <MX_GPIO_Init+0xe4>)
 800206a:	f001 fa99 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_DIR_1_GPIO_Port, STEPPER_DIR_1_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	4814      	ldr	r0, [pc, #80]	; (80020c4 <MX_GPIO_Init+0xe8>)
 8002074:	f001 fa94 	bl	80035a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEPPER_DIR_3_Pin STEPPER_DIR_2_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin;
 8002078:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800207c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	480b      	ldr	r0, [pc, #44]	; (80020c0 <MX_GPIO_Init+0xe4>)
 8002092:	f001 f901 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEPPER_DIR_1_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_1_Pin;
 8002096:	2340      	movs	r3, #64	; 0x40
 8002098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEPPER_DIR_1_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_GPIO_Init+0xe8>)
 80020ae:	f001 f8f3 	bl	8003298 <HAL_GPIO_Init>

}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40020800 	.word	0x40020800

080020c8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <HAL_UARTEx_RxEventCallback+0x30>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d105      	bne.n	80020ea <HAL_UARTEx_RxEventCallback+0x22>
	{
		flag_command_recieved=1;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_UARTEx_RxEventCallback+0x34>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
		size_recieved=Size;
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <HAL_UARTEx_RxEventCallback+0x38>)
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	8013      	strh	r3, [r2, #0]
	}

}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40004400 	.word	0x40004400
 80020fc:	20000680 	.word	0x20000680
 8002100:	20000684 	.word	0x20000684

08002104 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	if(htim == motor_1.timer)
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d10d      	bne.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		if(!motor_1.movement_done)
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002118:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d12a      	bne.n	8002178 <HAL_TIM_PeriodElapsedCallback+0x74>
			TIM2->ARR=calculate_auto_reload(&motor_1);
 8002122:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002126:	4816      	ldr	r0, [pc, #88]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002128:	f7ff fb6c 	bl	8001804 <calculate_auto_reload>
 800212c:	4603      	mov	r3, r0
 800212e:	62e3      	str	r3, [r4, #44]	; 0x2c
		{
			if(!motor_3.movement_done)
				TIM4->ARR=calculate_auto_reload(&motor_3);

		}
}
 8002130:	e022      	b.n	8002178 <HAL_TIM_PeriodElapsedCallback+0x74>
	if(htim == motor_2.timer)
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	d10c      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x52>
			if(!motor_2.movement_done)
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800213e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d117      	bne.n	8002178 <HAL_TIM_PeriodElapsedCallback+0x74>
				TIM3->ARR=calculate_auto_reload(&motor_2);
 8002148:	4c0f      	ldr	r4, [pc, #60]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800214a:	480e      	ldr	r0, [pc, #56]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800214c:	f7ff fb5a 	bl	8001804 <calculate_auto_reload>
 8002150:	4603      	mov	r3, r0
 8002152:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002154:	e010      	b.n	8002178 <HAL_TIM_PeriodElapsedCallback+0x74>
	if(htim == motor_3.timer)
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	d10b      	bne.n	8002178 <HAL_TIM_PeriodElapsedCallback+0x74>
			if(!motor_3.movement_done)
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002162:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_TIM_PeriodElapsedCallback+0x74>
				TIM4->ARR=calculate_auto_reload(&motor_3);
 800216c:	4c08      	ldr	r4, [pc, #32]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800216e:	4807      	ldr	r0, [pc, #28]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002170:	f7ff fb48 	bl	8001804 <calculate_auto_reload>
 8002174:	4603      	mov	r3, r0
 8002176:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}
 8002180:	20000500 	.word	0x20000500
 8002184:	20000580 	.word	0x20000580
 8002188:	40000400 	.word	0x40000400
 800218c:	20000600 	.word	0x20000600
 8002190:	40000800 	.word	0x40000800

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219c:	e7fe      	b.n	800219c <Error_Handler+0x8>
	...

080021a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_MspInit+0x4c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_MspInit+0x4c>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	; 0x44
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_MspInit+0x4c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_MspInit+0x4c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a08      	ldr	r2, [pc, #32]	; (80021ec <HAL_MspInit+0x4c>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_MspInit+0x4c>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021de:	2007      	movs	r0, #7
 80021e0:	f000 fc16 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d116      	bne.n	8002230 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a27      	ldr	r2, [pc, #156]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	201c      	movs	r0, #28
 8002224:	f000 fbff 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002228:	201c      	movs	r0, #28
 800222a:	f000 fc18 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800222e:	e036      	b.n	800229e <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_TIM_OC_MspInit+0xbc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d116      	bne.n	8002268 <HAL_TIM_OC_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	201d      	movs	r0, #29
 800225c:	f000 fbe3 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002260:	201d      	movs	r0, #29
 8002262:	f000 fbfc 	bl	8002a5e <HAL_NVIC_EnableIRQ>
}
 8002266:	e01a      	b.n	800229e <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM4)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_TIM_OC_MspInit+0xc0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d115      	bne.n	800229e <HAL_TIM_OC_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_TIM_OC_MspInit+0xb8>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	201e      	movs	r0, #30
 8002294:	f000 fbc7 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002298:	201e      	movs	r0, #30
 800229a:	f000 fbe0 	bl	8002a5e <HAL_NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800

080022b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_TIM_Base_MspInit+0x3c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10d      	bne.n	80022e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_TIM_Base_MspInit+0x40>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_TIM_Base_MspInit+0x40>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <HAL_TIM_Base_MspInit+0x40>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d11e      	bne.n	8002358 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEPPER_PULSE_1_Pin;
 8002336:	2320      	movs	r3, #32
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002346:	2301      	movs	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_1_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	4828      	ldr	r0, [pc, #160]	; (80023f4 <HAL_TIM_MspPostInit+0xfc>)
 8002352:	f000 ffa1 	bl	8003298 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002356:	e046      	b.n	80023e6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <HAL_TIM_MspPostInit+0x100>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d11e      	bne.n	80023a0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEPPER_PULSE_2_Pin;
 800237e:	2340      	movs	r3, #64	; 0x40
 8002380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800238e:	2302      	movs	r3, #2
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_2_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4816      	ldr	r0, [pc, #88]	; (80023f4 <HAL_TIM_MspPostInit+0xfc>)
 800239a:	f000 ff7d 	bl	8003298 <HAL_GPIO_Init>
}
 800239e:	e022      	b.n	80023e6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <HAL_TIM_MspPostInit+0x104>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d11d      	bne.n	80023e6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_TIM_MspPostInit+0xf8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_PULSE_3_Pin;
 80023c6:	2340      	movs	r3, #64	; 0x40
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023d6:	2302      	movs	r3, #2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_3_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4807      	ldr	r0, [pc, #28]	; (8002400 <HAL_TIM_MspPostInit+0x108>)
 80023e2:	f000 ff59 	bl	8003298 <HAL_GPIO_Init>
}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40000800 	.word	0x40000800
 8002400:	40020400 	.word	0x40020400

08002404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a34      	ldr	r2, [pc, #208]	; (80024f4 <HAL_UART_MspInit+0xf0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d161      	bne.n	80024ea <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_UART_MspInit+0xf4>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <HAL_UART_MspInit+0xf4>)
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_UART_MspInit+0xf4>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <HAL_UART_MspInit+0xf4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_UART_MspInit+0xf4>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_UART_MspInit+0xf4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800245e:	230c      	movs	r3, #12
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800246e:	2307      	movs	r3, #7
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4820      	ldr	r0, [pc, #128]	; (80024fc <HAL_UART_MspInit+0xf8>)
 800247a:	f000 ff0d 	bl	8003298 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_UART_MspInit+0xfc>)
 8002480:	4a20      	ldr	r2, [pc, #128]	; (8002504 <HAL_UART_MspInit+0x100>)
 8002482:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <HAL_UART_MspInit+0xfc>)
 8002486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800248a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_UART_MspInit+0xfc>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_UART_MspInit+0xfc>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_UART_MspInit+0xfc>)
 800249a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800249e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024be:	4810      	ldr	r0, [pc, #64]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024c0:	f000 fae8 	bl	8002a94 <HAL_DMA_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80024ca:	f7ff fe63 	bl	8002194 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024d2:	639a      	str	r2, [r3, #56]	; 0x38
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_UART_MspInit+0xfc>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	2026      	movs	r0, #38	; 0x26
 80024e0:	f000 faa1 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024e4:	2026      	movs	r0, #38	; 0x26
 80024e6:	f000 faba 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024ea:	bf00      	nop
 80024ec:	3728      	adds	r7, #40	; 0x28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40004400 	.word	0x40004400
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000
 8002500:	20000420 	.word	0x20000420
 8002504:	40026088 	.word	0x40026088

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800250c:	e7fe      	b.n	800250c <NMI_Handler+0x4>

0800250e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <HardFault_Handler+0x4>

08002514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <MemManage_Handler+0x4>

0800251a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler+0x4>

08002526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f000 f96c 	bl	8002830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <DMA1_Stream5_IRQHandler+0x10>)
 8002562:	f000 fc2f 	bl	8002dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000420 	.word	0x20000420

08002570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM2_IRQHandler+0x10>)
 8002576:	f001 ff09 	bl	800438c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200002bc 	.word	0x200002bc

08002584 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <TIM3_IRQHandler+0x10>)
 800258a:	f001 feff 	bl	800438c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000304 	.word	0x20000304

08002598 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <TIM4_IRQHandler+0x10>)
 800259e:	f001 fef5 	bl	800438c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000034c 	.word	0x2000034c

080025ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <USART2_IRQHandler+0x10>)
 80025b2:	f002 fdd1 	bl	8005158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200003dc 	.word	0x200003dc

080025c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
	return 1;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_kill>:

int _kill(int pid, int sig)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025da:	f003 fea9 	bl	8006330 <__errno>
 80025de:	4603      	mov	r3, r0
 80025e0:	2216      	movs	r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
	return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_exit>:

void _exit (int status)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ffe7 	bl	80025d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002602:	e7fe      	b.n	8002602 <_exit+0x12>

08002604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e00a      	b.n	800262c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002616:	f3af 8000 	nop.w
 800261a:	4601      	mov	r1, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	60ba      	str	r2, [r7, #8]
 8002622:	b2ca      	uxtb	r2, r1
 8002624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	dbf0      	blt.n	8002616 <_read+0x12>
	}

return len;
 8002634:	687b      	ldr	r3, [r7, #4]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_close>:
	}
	return len;
}

int _close(int file)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
	return -1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002666:	605a      	str	r2, [r3, #4]
	return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_isatty>:

int _isatty(int file)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
	return 1;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
	return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <_sbrk+0x5c>)
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <_sbrk+0x60>)
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <_sbrk+0x64>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <_sbrk+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d207      	bcs.n	80026e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d8:	f003 fe2a 	bl	8006330 <__errno>
 80026dc:	4603      	mov	r3, r0
 80026de:	220c      	movs	r2, #12
 80026e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e6:	e009      	b.n	80026fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <_sbrk+0x64>)
 80026f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20018000 	.word	0x20018000
 8002708:	00000400 	.word	0x00000400
 800270c:	20000688 	.word	0x20000688
 8002710:	200006a0 	.word	0x200006a0

08002714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <SystemInit+0x20>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <SystemInit+0x20>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002770 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273e:	490e      	ldr	r1, [pc, #56]	; (8002778 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002740:	4a0e      	ldr	r2, [pc, #56]	; (800277c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002754:	4c0b      	ldr	r4, [pc, #44]	; (8002784 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002762:	f7ff ffd7 	bl	8002714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002766:	f003 fde9 	bl	800633c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276a:	f7ff f93d 	bl	80019e8 <main>
  bx  lr    
 800276e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002770:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800277c:	0800ad20 	.word	0x0800ad20
  ldr r2, =_sbss
 8002780:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002784:	200006a0 	.word	0x200006a0

08002788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC_IRQHandler>
	...

0800278c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_Init+0x40>)
 8002796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_Init+0x40>)
 80027a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_Init+0x40>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f000 f92b 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f000 f808 	bl	80027d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c0:	f7ff fcee 	bl	80021a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_InitTick+0x54>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_InitTick+0x58>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	4619      	mov	r1, r3
 80027e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f943 	bl	8002a7a <HAL_SYSTICK_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00e      	b.n	800281c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d80a      	bhi.n	800281a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002804:	2200      	movs	r2, #0
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800280c:	f000 f90b 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <HAL_InitTick+0x5c>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000000 	.word	0x20000000
 8002828:	20000008 	.word	0x20000008
 800282c:	20000004 	.word	0x20000004

08002830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x20>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x24>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_IncTick+0x24>)
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000008 	.word	0x20000008
 8002854:	2000068c 	.word	0x2000068c

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetTick+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000068c 	.word	0x2000068c

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff29 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff3e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff31 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff feda 	bl	8002858 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e099      	b.n	8002be4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad0:	e00f      	b.n	8002af2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad2:	f7ff fec1 	bl	8002858 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d908      	bls.n	8002af2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e078      	b.n	8002be4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e8      	bne.n	8002ad2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_DMA_Init+0x158>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	4313      	orrs	r3, r2
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f023 0307 	bic.w	r3, r3, #7
 8002b72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d117      	bne.n	8002bb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fb01 	bl	80031a0 <DMA_CheckFifoParam>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2240      	movs	r2, #64	; 0x40
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e016      	b.n	8002be4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fab8 	bl	8003134 <DMA_CalcBaseAndBitshift>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	223f      	movs	r2, #63	; 0x3f
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	f010803f 	.word	0xf010803f

08002bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_DMA_Start_IT+0x26>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e040      	b.n	8002c98 <HAL_DMA_Start_IT+0xa8>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d12f      	bne.n	8002c8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fa4a 	bl	80030d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	223f      	movs	r2, #63	; 0x3f
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0216 	orr.w	r2, r2, #22
 8002c5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e005      	b.n	8002c96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cae:	f7ff fdd3 	bl	8002858 <HAL_GetTick>
 8002cb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d008      	beq.n	8002cd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e052      	b.n	8002d78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0216 	bic.w	r2, r2, #22
 8002ce0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_DMA_Abort+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0208 	bic.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d22:	e013      	b.n	8002d4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d24:	f7ff fd98 	bl	8002858 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d90c      	bls.n	8002d4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e015      	b.n	8002d78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e4      	bne.n	8002d24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	223f      	movs	r2, #63	; 0x3f
 8002d60:	409a      	lsls	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d004      	beq.n	8002d9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00c      	b.n	8002db8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2205      	movs	r2, #5
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dd0:	4b8e      	ldr	r3, [pc, #568]	; (800300c <HAL_DMA_IRQHandler+0x248>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a8e      	ldr	r2, [pc, #568]	; (8003010 <HAL_DMA_IRQHandler+0x24c>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	2208      	movs	r2, #8
 8002df0:	409a      	lsls	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01a      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0204 	bic.w	r2, r2, #4
 8002e16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	2201      	movs	r2, #1
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	2201      	movs	r2, #1
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	f043 0202 	orr.w	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d012      	beq.n	8002e9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	2204      	movs	r2, #4
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	f043 0204 	orr.w	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d043      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d03c      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d018      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d024      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
 8002ef2:	e01f      	b.n	8002f34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01b      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
 8002f04:	e016      	b.n	8002f34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0208 	bic.w	r2, r2, #8
 8002f22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	2220      	movs	r2, #32
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 808f 	beq.w	8003064 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8087 	beq.w	8003064 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d136      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0216 	bic.w	r2, r2, #22
 8002f7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x1da>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0208 	bic.w	r2, r2, #8
 8002fac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	223f      	movs	r2, #63	; 0x3f
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d07e      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
        }
        return;
 8002fda:	e079      	b.n	80030d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01d      	beq.n	8003026 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d031      	beq.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e02c      	b.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000
 8003010:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d023      	beq.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
 8003024:	e01e      	b.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10f      	bne.n	8003054 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0210 	bic.w	r2, r2, #16
 8003042:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d032      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d022      	beq.n	80030be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2205      	movs	r2, #5
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3301      	adds	r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	d307      	bcc.n	80030ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f2      	bne.n	8003090 <HAL_DMA_IRQHandler+0x2cc>
 80030aa:	e000      	b.n	80030ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
 80030ce:	e000      	b.n	80030d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030d0:	bf00      	nop
    }
  }
}
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d108      	bne.n	8003118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003116:	e007      	b.n	8003128 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3b10      	subs	r3, #16
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <DMA_CalcBaseAndBitshift+0x64>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <DMA_CalcBaseAndBitshift+0x68>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d909      	bls.n	8003176 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800316a:	f023 0303 	bic.w	r3, r3, #3
 800316e:	1d1a      	adds	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	659a      	str	r2, [r3, #88]	; 0x58
 8003174:	e007      	b.n	8003186 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	aaaaaaab 	.word	0xaaaaaaab
 800319c:	0800a8e0 	.word	0x0800a8e0

080031a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11f      	bne.n	80031fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d856      	bhi.n	800326e <DMA_CheckFifoParam+0xce>
 80031c0:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <DMA_CheckFifoParam+0x28>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031d9 	.word	0x080031d9
 80031cc:	080031eb 	.word	0x080031eb
 80031d0:	080031d9 	.word	0x080031d9
 80031d4:	0800326f 	.word	0x0800326f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d046      	beq.n	8003272 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e8:	e043      	b.n	8003272 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031f2:	d140      	bne.n	8003276 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f8:	e03d      	b.n	8003276 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003202:	d121      	bne.n	8003248 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d837      	bhi.n	800327a <DMA_CheckFifoParam+0xda>
 800320a:	a201      	add	r2, pc, #4	; (adr r2, 8003210 <DMA_CheckFifoParam+0x70>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003221 	.word	0x08003221
 8003214:	08003227 	.word	0x08003227
 8003218:	08003221 	.word	0x08003221
 800321c:	08003239 	.word	0x08003239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e030      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d025      	beq.n	800327e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003236:	e022      	b.n	800327e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003240:	d11f      	bne.n	8003282 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003246:	e01c      	b.n	8003282 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d903      	bls.n	8003256 <DMA_CheckFifoParam+0xb6>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d003      	beq.n	800325c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003254:	e018      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
      break;
 800325a:	e015      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00e      	beq.n	8003286 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
      break;
 800326c:	e00b      	b.n	8003286 <DMA_CheckFifoParam+0xe6>
      break;
 800326e:	bf00      	nop
 8003270:	e00a      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 8003272:	bf00      	nop
 8003274:	e008      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 8003276:	bf00      	nop
 8003278:	e006      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e004      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 800327e:	bf00      	nop
 8003280:	e002      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;   
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
    }
  } 
  
  return status; 
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop

08003298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e159      	b.n	8003568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032b4:	2201      	movs	r2, #1
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	f040 8148 	bne.w	8003562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d005      	beq.n	80032ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d130      	bne.n	800334c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2203      	movs	r2, #3
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 0201 	and.w	r2, r3, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b03      	cmp	r3, #3
 8003356:	d017      	beq.n	8003388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d123      	bne.n	80033dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	220f      	movs	r2, #15
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	08da      	lsrs	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	69b9      	ldr	r1, [r7, #24]
 80033d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0203 	and.w	r2, r3, #3
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a2 	beq.w	8003562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_GPIO_Init+0x2e8>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4a56      	ldr	r2, [pc, #344]	; (8003580 <HAL_GPIO_Init+0x2e8>)
 8003428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_GPIO_Init+0x2e8>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800343a:	4a52      	ldr	r2, [pc, #328]	; (8003584 <HAL_GPIO_Init+0x2ec>)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	3302      	adds	r3, #2
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a49      	ldr	r2, [pc, #292]	; (8003588 <HAL_GPIO_Init+0x2f0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d019      	beq.n	800349a <HAL_GPIO_Init+0x202>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a48      	ldr	r2, [pc, #288]	; (800358c <HAL_GPIO_Init+0x2f4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_GPIO_Init+0x1fe>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a47      	ldr	r2, [pc, #284]	; (8003590 <HAL_GPIO_Init+0x2f8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00d      	beq.n	8003492 <HAL_GPIO_Init+0x1fa>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a46      	ldr	r2, [pc, #280]	; (8003594 <HAL_GPIO_Init+0x2fc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <HAL_GPIO_Init+0x1f6>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a45      	ldr	r2, [pc, #276]	; (8003598 <HAL_GPIO_Init+0x300>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_GPIO_Init+0x1f2>
 8003486:	2304      	movs	r3, #4
 8003488:	e008      	b.n	800349c <HAL_GPIO_Init+0x204>
 800348a:	2307      	movs	r3, #7
 800348c:	e006      	b.n	800349c <HAL_GPIO_Init+0x204>
 800348e:	2303      	movs	r3, #3
 8003490:	e004      	b.n	800349c <HAL_GPIO_Init+0x204>
 8003492:	2302      	movs	r3, #2
 8003494:	e002      	b.n	800349c <HAL_GPIO_Init+0x204>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_GPIO_Init+0x204>
 800349a:	2300      	movs	r3, #0
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	f002 0203 	and.w	r2, r2, #3
 80034a2:	0092      	lsls	r2, r2, #2
 80034a4:	4093      	lsls	r3, r2
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ac:	4935      	ldr	r1, [pc, #212]	; (8003584 <HAL_GPIO_Init+0x2ec>)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	3302      	adds	r3, #2
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ba:	4b38      	ldr	r3, [pc, #224]	; (800359c <HAL_GPIO_Init+0x304>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034de:	4a2f      	ldr	r2, [pc, #188]	; (800359c <HAL_GPIO_Init+0x304>)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034e4:	4b2d      	ldr	r3, [pc, #180]	; (800359c <HAL_GPIO_Init+0x304>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003508:	4a24      	ldr	r2, [pc, #144]	; (800359c <HAL_GPIO_Init+0x304>)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800350e:	4b23      	ldr	r3, [pc, #140]	; (800359c <HAL_GPIO_Init+0x304>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <HAL_GPIO_Init+0x304>)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003538:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_GPIO_Init+0x304>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800355c:	4a0f      	ldr	r2, [pc, #60]	; (800359c <HAL_GPIO_Init+0x304>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3301      	adds	r3, #1
 8003566:	61fb      	str	r3, [r7, #28]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b0f      	cmp	r3, #15
 800356c:	f67f aea2 	bls.w	80032b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	40013800 	.word	0x40013800
 8003588:	40020000 	.word	0x40020000
 800358c:	40020400 	.word	0x40020400
 8003590:	40020800 	.word	0x40020800
 8003594:	40020c00 	.word	0x40020c00
 8003598:	40021000 	.word	0x40021000
 800359c:	40013c00 	.word	0x40013c00

080035a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
 80035ac:	4613      	mov	r3, r2
 80035ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b0:	787b      	ldrb	r3, [r7, #1]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035bc:	e003      	b.n	80035c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	041a      	lsls	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	619a      	str	r2, [r3, #24]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e267      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d075      	beq.n	80036de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f2:	4b88      	ldr	r3, [pc, #544]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d00c      	beq.n	8003618 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fe:	4b85      	ldr	r3, [pc, #532]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003606:	2b08      	cmp	r3, #8
 8003608:	d112      	bne.n	8003630 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360a:	4b82      	ldr	r3, [pc, #520]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003616:	d10b      	bne.n	8003630 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	4b7e      	ldr	r3, [pc, #504]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d05b      	beq.n	80036dc <HAL_RCC_OscConfig+0x108>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d157      	bne.n	80036dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e242      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d106      	bne.n	8003648 <HAL_RCC_OscConfig+0x74>
 800363a:	4b76      	ldr	r3, [pc, #472]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a75      	ldr	r2, [pc, #468]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e01d      	b.n	8003684 <HAL_RCC_OscConfig+0xb0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x98>
 8003652:	4b70      	ldr	r3, [pc, #448]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a6f      	ldr	r2, [pc, #444]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b6d      	ldr	r3, [pc, #436]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6c      	ldr	r2, [pc, #432]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0xb0>
 800366c:	4b69      	ldr	r3, [pc, #420]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a68      	ldr	r2, [pc, #416]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b66      	ldr	r3, [pc, #408]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a65      	ldr	r2, [pc, #404]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 800367e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7ff f8e4 	bl	8002858 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003694:	f7ff f8e0 	bl	8002858 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e207      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b5b      	ldr	r3, [pc, #364]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0xc0>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7ff f8d0 	bl	8002858 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036bc:	f7ff f8cc 	bl	8002858 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e1f3      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	4b51      	ldr	r3, [pc, #324]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0xe8>
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d063      	beq.n	80037b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ea:	4b4a      	ldr	r3, [pc, #296]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d11c      	bne.n	800373c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003702:	4b44      	ldr	r3, [pc, #272]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d116      	bne.n	800373c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	4b41      	ldr	r3, [pc, #260]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_RCC_OscConfig+0x152>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e1c7      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4937      	ldr	r1, [pc, #220]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	e03a      	b.n	80037b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003744:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_RCC_OscConfig+0x244>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7ff f885 	bl	8002858 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003752:	f7ff f881 	bl	8002858 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1a8      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b28      	ldr	r3, [pc, #160]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4925      	ldr	r1, [pc, #148]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
 8003784:	e015      	b.n	80037b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <HAL_RCC_OscConfig+0x244>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7ff f864 	bl	8002858 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003794:	f7ff f860 	bl	8002858 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e187      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d036      	beq.n	800382c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_RCC_OscConfig+0x248>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7ff f844 	bl	8002858 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d4:	f7ff f840 	bl	8002858 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e167      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_OscConfig+0x240>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x200>
 80037f2:	e01b      	b.n	800382c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_RCC_OscConfig+0x248>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fa:	f7ff f82d 	bl	8002858 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	e00e      	b.n	8003820 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003802:	f7ff f829 	bl	8002858 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d907      	bls.n	8003820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e150      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
 8003814:	40023800 	.word	0x40023800
 8003818:	42470000 	.word	0x42470000
 800381c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ea      	bne.n	8003802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8097 	beq.w	8003968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b81      	ldr	r3, [pc, #516]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	4b7d      	ldr	r3, [pc, #500]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a7c      	ldr	r2, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b7a      	ldr	r3, [pc, #488]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b77      	ldr	r3, [pc, #476]	; (8003a48 <HAL_RCC_OscConfig+0x474>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d118      	bne.n	80038a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003876:	4b74      	ldr	r3, [pc, #464]	; (8003a48 <HAL_RCC_OscConfig+0x474>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a73      	ldr	r2, [pc, #460]	; (8003a48 <HAL_RCC_OscConfig+0x474>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7fe ffe9 	bl	8002858 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388a:	f7fe ffe5 	bl	8002858 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e10c      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	4b6a      	ldr	r3, [pc, #424]	; (8003a48 <HAL_RCC_OscConfig+0x474>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d106      	bne.n	80038be <HAL_RCC_OscConfig+0x2ea>
 80038b0:	4b64      	ldr	r3, [pc, #400]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	4a63      	ldr	r2, [pc, #396]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6713      	str	r3, [r2, #112]	; 0x70
 80038bc:	e01c      	b.n	80038f8 <HAL_RCC_OscConfig+0x324>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x30c>
 80038c6:	4b5f      	ldr	r3, [pc, #380]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a5e      	ldr	r2, [pc, #376]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
 80038d2:	4b5c      	ldr	r3, [pc, #368]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	4a5b      	ldr	r2, [pc, #364]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6713      	str	r3, [r2, #112]	; 0x70
 80038de:	e00b      	b.n	80038f8 <HAL_RCC_OscConfig+0x324>
 80038e0:	4b58      	ldr	r3, [pc, #352]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a57      	ldr	r2, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
 80038ec:	4b55      	ldr	r3, [pc, #340]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a54      	ldr	r2, [pc, #336]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80038f2:	f023 0304 	bic.w	r3, r3, #4
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fe ffaa 	bl	8002858 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	e00a      	b.n	800391e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fe ffa6 	bl	8002858 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0cb      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391e:	4b49      	ldr	r3, [pc, #292]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ee      	beq.n	8003908 <HAL_RCC_OscConfig+0x334>
 800392a:	e014      	b.n	8003956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392c:	f7fe ff94 	bl	8002858 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003932:	e00a      	b.n	800394a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	f7fe ff90 	bl	8002858 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e0b5      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394a:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ee      	bne.n	8003934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	4a38      	ldr	r2, [pc, #224]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003966:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a1 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003972:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b08      	cmp	r3, #8
 800397c:	d05c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d141      	bne.n	8003a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <HAL_RCC_OscConfig+0x478>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fe ff64 	bl	8002858 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003994:	f7fe ff60 	bl	8002858 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e087      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	019b      	lsls	r3, r3, #6
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	3b01      	subs	r3, #1
 80039cc:	041b      	lsls	r3, r3, #16
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	491b      	ldr	r1, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x478>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fe ff39 	bl	8002858 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe ff35 	bl	8002858 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e05c      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x416>
 8003a08:	e054      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_RCC_OscConfig+0x478>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe ff22 	bl	8002858 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe ff1e 	bl	8002858 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e045      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x444>
 8003a36:	e03d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e038      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_RCC_OscConfig+0x4ec>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d121      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d11a      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a80:	4013      	ands	r3, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d111      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800

08003ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0cc      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d90c      	bls.n	8003b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b63      	ldr	r3, [pc, #396]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0b8      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b18:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a58      	ldr	r2, [pc, #352]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b30:	4b53      	ldr	r3, [pc, #332]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3c:	4b50      	ldr	r3, [pc, #320]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	494d      	ldr	r1, [pc, #308]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d044      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	4b47      	ldr	r3, [pc, #284]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d119      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e07f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e067      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4934      	ldr	r1, [pc, #208]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb4:	f7fe fe50 	bl	8002858 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fe fe4c 	bl	8002858 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e04f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 020c 	and.w	r2, r3, #12
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1eb      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d20c      	bcs.n	8003c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e032      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4916      	ldr	r1, [pc, #88]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	490e      	ldr	r1, [pc, #56]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c4a:	f000 f821 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	490a      	ldr	r1, [pc, #40]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	5ccb      	ldrb	r3, [r1, r3]
 8003c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fdb0 	bl	80027d0 <HAL_InitTick>

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023c00 	.word	0x40023c00
 8003c80:	40023800 	.word	0x40023800
 8003c84:	0800a8c8 	.word	0x0800a8c8
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	20000004 	.word	0x20000004

08003c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c94:	b094      	sub	sp, #80	; 0x50
 8003c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca8:	4b79      	ldr	r3, [pc, #484]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	f200 80e1 	bhi.w	8003e7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x3a>
 8003cc2:	e0db      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4b73      	ldr	r3, [pc, #460]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cc8:	e0db      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cca:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cce:	e0d8      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd0:	4b6f      	ldr	r3, [pc, #444]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cda:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d063      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	2200      	movs	r2, #0
 8003cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d02:	4622      	mov	r2, r4
 8003d04:	462b      	mov	r3, r5
 8003d06:	f04f 0000 	mov.w	r0, #0
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	0159      	lsls	r1, r3, #5
 8003d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d14:	0150      	lsls	r0, r2, #5
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	1a51      	subs	r1, r2, r1
 8003d1e:	6139      	str	r1, [r7, #16]
 8003d20:	4629      	mov	r1, r5
 8003d22:	eb63 0301 	sbc.w	r3, r3, r1
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d34:	4659      	mov	r1, fp
 8003d36:	018b      	lsls	r3, r1, #6
 8003d38:	4651      	mov	r1, sl
 8003d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d3e:	4651      	mov	r1, sl
 8003d40:	018a      	lsls	r2, r1, #6
 8003d42:	4651      	mov	r1, sl
 8003d44:	ebb2 0801 	subs.w	r8, r2, r1
 8003d48:	4659      	mov	r1, fp
 8003d4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d62:	4690      	mov	r8, r2
 8003d64:	4699      	mov	r9, r3
 8003d66:	4623      	mov	r3, r4
 8003d68:	eb18 0303 	adds.w	r3, r8, r3
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	462b      	mov	r3, r5
 8003d70:	eb49 0303 	adc.w	r3, r9, r3
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d82:	4629      	mov	r1, r5
 8003d84:	024b      	lsls	r3, r1, #9
 8003d86:	4621      	mov	r1, r4
 8003d88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	024a      	lsls	r2, r1, #9
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d96:	2200      	movs	r2, #0
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003da0:	f7fc ff7a 	bl	8000c98 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4613      	mov	r3, r2
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dac:	e058      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dae:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	099b      	lsrs	r3, r3, #6
 8003db4:	2200      	movs	r2, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	4611      	mov	r1, r2
 8003dba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	f04f 0000 	mov.w	r0, #0
 8003dd0:	f04f 0100 	mov.w	r1, #0
 8003dd4:	0159      	lsls	r1, r3, #5
 8003dd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dda:	0150      	lsls	r0, r2, #5
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4641      	mov	r1, r8
 8003de2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003de6:	4649      	mov	r1, r9
 8003de8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003df8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e00:	ebb2 040a 	subs.w	r4, r2, sl
 8003e04:	eb63 050b 	sbc.w	r5, r3, fp
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	00eb      	lsls	r3, r5, #3
 8003e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e16:	00e2      	lsls	r2, r4, #3
 8003e18:	4614      	mov	r4, r2
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	4643      	mov	r3, r8
 8003e1e:	18e3      	adds	r3, r4, r3
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	464b      	mov	r3, r9
 8003e24:	eb45 0303 	adc.w	r3, r5, r3
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e36:	4629      	mov	r1, r5
 8003e38:	028b      	lsls	r3, r1, #10
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e40:	4621      	mov	r1, r4
 8003e42:	028a      	lsls	r2, r1, #10
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	61fa      	str	r2, [r7, #28]
 8003e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e54:	f7fc ff20 	bl	8000c98 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3750      	adds	r7, #80	; 0x50
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	007a1200 	.word	0x007a1200

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000000 	.word	0x20000000

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb8:	f7ff fff0 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a9b      	lsrs	r3, r3, #10
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	0800a8d8 	.word	0x0800a8d8

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee0:	f7ff ffdc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0b5b      	lsrs	r3, r3, #13
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	0800a8d8 	.word	0x0800a8d8

08003f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e041      	b.n	8003f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe f9c2 	bl	80022b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fc76 	bl	8004834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d001      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e044      	b.n	8004046 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_TIM_Base_Start_IT+0xb0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x6c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d013      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x6c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1a      	ldr	r2, [pc, #104]	; (8004058 <HAL_TIM_Base_Start_IT+0xb4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x6c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a19      	ldr	r2, [pc, #100]	; (800405c <HAL_TIM_Base_Start_IT+0xb8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x6c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a17      	ldr	r2, [pc, #92]	; (8004060 <HAL_TIM_Base_Start_IT+0xbc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x6c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_TIM_Base_Start_IT+0xc0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d111      	bne.n	8004034 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b06      	cmp	r3, #6
 8004020:	d010      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	e007      	b.n	8004044 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40014000 	.word	0x40014000

08004068 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	f241 1311 	movw	r3, #4369	; 0x1111
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10f      	bne.n	80040b0 <HAL_TIM_Base_Stop_IT+0x48>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	f240 4344 	movw	r3, #1092	; 0x444
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_Base_Stop_IT+0x48>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e041      	b.n	800415c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7fe f87f 	bl	80021f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fb95 	bl	8004834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <HAL_TIM_OC_Start+0x24>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e022      	b.n	80041ce <HAL_TIM_OC_Start+0x6a>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b04      	cmp	r3, #4
 800418c:	d109      	bne.n	80041a2 <HAL_TIM_OC_Start+0x3e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	e015      	b.n	80041ce <HAL_TIM_OC_Start+0x6a>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d109      	bne.n	80041bc <HAL_TIM_OC_Start+0x58>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e008      	b.n	80041ce <HAL_TIM_OC_Start+0x6a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e068      	b.n	80042a8 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_OC_Start+0x82>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e4:	e013      	b.n	800420e <HAL_TIM_OC_Start+0xaa>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_OC_Start+0x92>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f4:	e00b      	b.n	800420e <HAL_TIM_OC_Start+0xaa>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_OC_Start+0xa2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004204:	e003      	b.n	800420e <HAL_TIM_OC_Start+0xaa>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2201      	movs	r2, #1
 8004214:	6839      	ldr	r1, [r7, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fdb2 	bl	8004d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a23      	ldr	r2, [pc, #140]	; (80042b0 <HAL_TIM_OC_Start+0x14c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d107      	bne.n	8004236 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004234:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <HAL_TIM_OC_Start+0x14c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d018      	beq.n	8004272 <HAL_TIM_OC_Start+0x10e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d013      	beq.n	8004272 <HAL_TIM_OC_Start+0x10e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a19      	ldr	r2, [pc, #100]	; (80042b4 <HAL_TIM_OC_Start+0x150>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00e      	beq.n	8004272 <HAL_TIM_OC_Start+0x10e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <HAL_TIM_OC_Start+0x154>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_TIM_OC_Start+0x10e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_TIM_OC_Start+0x158>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_TIM_OC_Start+0x10e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <HAL_TIM_OC_Start+0x15c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d111      	bne.n	8004296 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b06      	cmp	r3, #6
 8004282:	d010      	beq.n	80042a6 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004294:	e007      	b.n	80042a6 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40014000 	.word	0x40014000

080042c4 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fd52 	bl	8004d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a29      	ldr	r2, [pc, #164]	; (8004388 <HAL_TIM_OC_Stop+0xc4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d117      	bne.n	8004316 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a1a      	ldr	r2, [r3, #32]
 80042ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_TIM_OC_Stop+0x52>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	f240 4344 	movw	r3, #1092	; 0x444
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d107      	bne.n	8004316 <HAL_TIM_OC_Stop+0x52>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <HAL_TIM_OC_Stop+0x82>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	f240 4344 	movw	r3, #1092	; 0x444
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d107      	bne.n	8004346 <HAL_TIM_OC_Stop+0x82>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <HAL_TIM_OC_Stop+0x92>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004354:	e013      	b.n	800437e <HAL_TIM_OC_Stop+0xba>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d104      	bne.n	8004366 <HAL_TIM_OC_Stop+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004364:	e00b      	b.n	800437e <HAL_TIM_OC_Stop+0xba>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d104      	bne.n	8004376 <HAL_TIM_OC_Stop+0xb2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004374:	e003      	b.n	800437e <HAL_TIM_OC_Stop+0xba>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40010000 	.word	0x40010000

0800438c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0202 	mvn.w	r2, #2
 80043b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa11 	bl	80047f6 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa03 	bl	80047e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fa14 	bl	800480a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b04      	cmp	r3, #4
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0204 	mvn.w	r2, #4
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9e7 	bl	80047f6 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9d9 	bl	80047e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f9ea 	bl	800480a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d122      	bne.n	8004490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b08      	cmp	r3, #8
 8004456:	d11b      	bne.n	8004490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0208 	mvn.w	r2, #8
 8004460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2204      	movs	r2, #4
 8004466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9bd 	bl	80047f6 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9af 	bl	80047e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f9c0 	bl	800480a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b10      	cmp	r3, #16
 800449c:	d122      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d11b      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0210 	mvn.w	r2, #16
 80044b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2208      	movs	r2, #8
 80044ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f993 	bl	80047f6 <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f985 	bl	80047e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f996 	bl	800480a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10e      	bne.n	8004510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0201 	mvn.w	r2, #1
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd fdfa 	bl	8002104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d10e      	bne.n	800453c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d107      	bne.n	800453c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fcc0 	bl	8004ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	d10e      	bne.n	8004568 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d107      	bne.n	8004568 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f95b 	bl	800481e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d10e      	bne.n	8004594 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b20      	cmp	r3, #32
 8004582:	d107      	bne.n	8004594 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0220 	mvn.w	r2, #32
 800458c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fc8a 	bl	8004ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e048      	b.n	800464c <HAL_TIM_OC_ConfigChannel+0xb0>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b0c      	cmp	r3, #12
 80045c6:	d839      	bhi.n	800463c <HAL_TIM_OC_ConfigChannel+0xa0>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	08004605 	.word	0x08004605
 80045d4:	0800463d 	.word	0x0800463d
 80045d8:	0800463d 	.word	0x0800463d
 80045dc:	0800463d 	.word	0x0800463d
 80045e0:	08004613 	.word	0x08004613
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	0800463d 	.word	0x0800463d
 80045ec:	0800463d 	.word	0x0800463d
 80045f0:	08004621 	.word	0x08004621
 80045f4:	0800463d 	.word	0x0800463d
 80045f8:	0800463d 	.word	0x0800463d
 80045fc:	0800463d 	.word	0x0800463d
 8004600:	0800462f 	.word	0x0800462f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f992 	bl	8004934 <TIM_OC1_SetConfig>
      break;
 8004610:	e017      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f9f1 	bl	8004a00 <TIM_OC2_SetConfig>
      break;
 800461e:	e010      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fa56 	bl	8004ad8 <TIM_OC3_SetConfig>
      break;
 800462c:	e009      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fab9 	bl	8004bac <TIM_OC4_SetConfig>
      break;
 800463a:	e002      	b.n	8004642 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
      break;
 8004640:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_TIM_ConfigClockSource+0x1c>
 800466c:	2302      	movs	r3, #2
 800466e:	e0b4      	b.n	80047da <HAL_TIM_ConfigClockSource+0x186>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800468e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a8:	d03e      	beq.n	8004728 <HAL_TIM_ConfigClockSource+0xd4>
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	f200 8087 	bhi.w	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b6:	f000 8086 	beq.w	80047c6 <HAL_TIM_ConfigClockSource+0x172>
 80046ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046be:	d87f      	bhi.n	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b70      	cmp	r3, #112	; 0x70
 80046c2:	d01a      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0xa6>
 80046c4:	2b70      	cmp	r3, #112	; 0x70
 80046c6:	d87b      	bhi.n	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b60      	cmp	r3, #96	; 0x60
 80046ca:	d050      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x11a>
 80046cc:	2b60      	cmp	r3, #96	; 0x60
 80046ce:	d877      	bhi.n	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b50      	cmp	r3, #80	; 0x50
 80046d2:	d03c      	beq.n	800474e <HAL_TIM_ConfigClockSource+0xfa>
 80046d4:	2b50      	cmp	r3, #80	; 0x50
 80046d6:	d873      	bhi.n	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d058      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x13a>
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d86f      	bhi.n	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b30      	cmp	r3, #48	; 0x30
 80046e2:	d064      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x15a>
 80046e4:	2b30      	cmp	r3, #48	; 0x30
 80046e6:	d86b      	bhi.n	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d060      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x15a>
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d867      	bhi.n	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d05c      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x15a>
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	d05a      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x15a>
 80046f8:	e062      	b.n	80047c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6899      	ldr	r1, [r3, #8]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f000 fb19 	bl	8004d40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800471c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	609a      	str	r2, [r3, #8]
      break;
 8004726:	e04f      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6899      	ldr	r1, [r3, #8]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f000 fb02 	bl	8004d40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474a:	609a      	str	r2, [r3, #8]
      break;
 800474c:	e03c      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	461a      	mov	r2, r3
 800475c:	f000 fa76 	bl	8004c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2150      	movs	r1, #80	; 0x50
 8004766:	4618      	mov	r0, r3
 8004768:	f000 facf 	bl	8004d0a <TIM_ITRx_SetConfig>
      break;
 800476c:	e02c      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	461a      	mov	r2, r3
 800477c:	f000 fa95 	bl	8004caa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2160      	movs	r1, #96	; 0x60
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fabf 	bl	8004d0a <TIM_ITRx_SetConfig>
      break;
 800478c:	e01c      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	461a      	mov	r2, r3
 800479c:	f000 fa56 	bl	8004c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2140      	movs	r1, #64	; 0x40
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 faaf 	bl	8004d0a <TIM_ITRx_SetConfig>
      break;
 80047ac:	e00c      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f000 faa6 	bl	8004d0a <TIM_ITRx_SetConfig>
      break;
 80047be:	e003      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	e000      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a34      	ldr	r2, [pc, #208]	; (8004918 <TIM_Base_SetConfig+0xe4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00f      	beq.n	800486c <TIM_Base_SetConfig+0x38>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004852:	d00b      	beq.n	800486c <TIM_Base_SetConfig+0x38>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a31      	ldr	r2, [pc, #196]	; (800491c <TIM_Base_SetConfig+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_Base_SetConfig+0x38>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a30      	ldr	r2, [pc, #192]	; (8004920 <TIM_Base_SetConfig+0xec>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0x38>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a2f      	ldr	r2, [pc, #188]	; (8004924 <TIM_Base_SetConfig+0xf0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d108      	bne.n	800487e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a25      	ldr	r2, [pc, #148]	; (8004918 <TIM_Base_SetConfig+0xe4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01b      	beq.n	80048be <TIM_Base_SetConfig+0x8a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488c:	d017      	beq.n	80048be <TIM_Base_SetConfig+0x8a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a22      	ldr	r2, [pc, #136]	; (800491c <TIM_Base_SetConfig+0xe8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <TIM_Base_SetConfig+0x8a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a21      	ldr	r2, [pc, #132]	; (8004920 <TIM_Base_SetConfig+0xec>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00f      	beq.n	80048be <TIM_Base_SetConfig+0x8a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a20      	ldr	r2, [pc, #128]	; (8004924 <TIM_Base_SetConfig+0xf0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00b      	beq.n	80048be <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <TIM_Base_SetConfig+0xf4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1e      	ldr	r2, [pc, #120]	; (800492c <TIM_Base_SetConfig+0xf8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <TIM_Base_SetConfig+0xfc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d108      	bne.n	80048d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <TIM_Base_SetConfig+0xe4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d103      	bne.n	8004904 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	615a      	str	r2, [r3, #20]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800

08004934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f023 0201 	bic.w	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f023 0302 	bic.w	r3, r3, #2
 800497c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a1c      	ldr	r2, [pc, #112]	; (80049fc <TIM_OC1_SetConfig+0xc8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10c      	bne.n	80049aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0308 	bic.w	r3, r3, #8
 8004996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <TIM_OC1_SetConfig+0xc8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d111      	bne.n	80049d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	621a      	str	r2, [r3, #32]
}
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40010000 	.word	0x40010000

08004a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f023 0210 	bic.w	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f023 0320 	bic.w	r3, r3, #32
 8004a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <TIM_OC2_SetConfig+0xd4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10d      	bne.n	8004a7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <TIM_OC2_SetConfig+0xd4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d113      	bne.n	8004aac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000

08004ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <TIM_OC3_SetConfig+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10d      	bne.n	8004b52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <TIM_OC3_SetConfig+0xd0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d113      	bne.n	8004b82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	621a      	str	r2, [r3, #32]
}
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40010000 	.word	0x40010000

08004bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	031b      	lsls	r3, r3, #12
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <TIM_OC4_SetConfig+0x9c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d109      	bne.n	8004c20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	019b      	lsls	r3, r3, #6
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40010000 	.word	0x40010000

08004c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f023 0201 	bic.w	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 030a 	bic.w	r3, r3, #10
 8004c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b087      	sub	sp, #28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f023 0210 	bic.w	r2, r3, #16
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f043 0307 	orr.w	r3, r3, #7
 8004d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	021a      	lsls	r2, r3, #8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	609a      	str	r2, [r3, #8]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	2201      	movs	r2, #1
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1a      	ldr	r2, [r3, #32]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	401a      	ands	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	fa01 f303 	lsl.w	r3, r1, r3
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e050      	b.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d013      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10c      	bne.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40000c00 	.word	0x40000c00
 8004ea4:	40014000 	.word	0x40014000

08004ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e03f      	b.n	8004f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fd fa84 	bl	8002404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	; 0x24
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 ff97 	bl	8005e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b08a      	sub	sp, #40	; 0x28
 8004f6e:	af02      	add	r7, sp, #8
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d17c      	bne.n	8005084 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_UART_Transmit+0x2c>
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e075      	b.n	8005086 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_UART_Transmit+0x3e>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e06e      	b.n	8005086 <HAL_UART_Transmit+0x11c>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2221      	movs	r2, #33	; 0x21
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fbe:	f7fd fc4b 	bl	8002858 <HAL_GetTick>
 8004fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	88fa      	ldrh	r2, [r7, #6]
 8004fc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd8:	d108      	bne.n	8004fec <HAL_UART_Transmit+0x82>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	e003      	b.n	8004ff4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ffc:	e02a      	b.n	8005054 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2200      	movs	r2, #0
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fc53 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e036      	b.n	8005086 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	3302      	adds	r3, #2
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	e007      	b.n	8005046 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	781a      	ldrb	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	3301      	adds	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1cf      	bne.n	8004ffe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	2140      	movs	r1, #64	; 0x40
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fc23 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e006      	b.n	8005086 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b08c      	sub	sp, #48	; 0x30
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	4613      	mov	r3, r2
 800509a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d152      	bne.n	800514e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e04b      	b.n	8005150 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e044      	b.n	8005150 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	461a      	mov	r2, r3
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fc58 	bl	8005990 <UART_Start_Receive_DMA>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80050e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d12c      	bne.n	8005148 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d125      	bne.n	8005142 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	617b      	str	r3, [r7, #20]
   return(result);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f043 0310 	orr.w	r3, r3, #16
 8005122:	62bb      	str	r3, [r7, #40]	; 0x28
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	330c      	adds	r3, #12
 800512a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800512c:	627a      	str	r2, [r7, #36]	; 0x24
 800512e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6a39      	ldr	r1, [r7, #32]
 8005132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	61fb      	str	r3, [r7, #28]
   return(result);
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e5      	bne.n	800510c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005140:	e002      	b.n	8005148 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800514c:	e000      	b.n	8005150 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
  }
}
 8005150:	4618      	mov	r0, r3
 8005152:	3730      	adds	r7, #48	; 0x30
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b0ba      	sub	sp, #232	; 0xe8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800517e:	2300      	movs	r3, #0
 8005180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800518a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_UART_IRQHandler+0x66>
 80051aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fd8b 	bl	8005cd2 <UART_Receive_IT>
      return;
 80051bc:	e256      	b.n	800566c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80de 	beq.w	8005384 <HAL_UART_IRQHandler+0x22c>
 80051c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d106      	bne.n	80051e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80d1 	beq.w	8005384 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <HAL_UART_IRQHandler+0xae>
 80051ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f043 0201 	orr.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_UART_IRQHandler+0xd2>
 8005212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f043 0202 	orr.w	r2, r3, #2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <HAL_UART_IRQHandler+0xf6>
 8005236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f043 0204 	orr.w	r2, r3, #4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800524e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d011      	beq.n	800527e <HAL_UART_IRQHandler+0x126>
 800525a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f043 0208 	orr.w	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 81ed 	beq.w	8005662 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_UART_IRQHandler+0x14e>
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fd16 	bl	8005cd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <HAL_UART_IRQHandler+0x17a>
 80052ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d04f      	beq.n	8005372 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fc1e 	bl	8005b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d141      	bne.n	800536a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3314      	adds	r3, #20
 80052ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3314      	adds	r3, #20
 800530e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800531e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800532a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1d9      	bne.n	80052e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d013      	beq.n	8005362 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	4a7d      	ldr	r2, [pc, #500]	; (8005534 <HAL_UART_IRQHandler+0x3dc>)
 8005340:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	4618      	mov	r0, r3
 8005348:	f7fd fd1a 	bl	8002d80 <HAL_DMA_Abort_IT>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d016      	beq.n	8005380 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800535c:	4610      	mov	r0, r2
 800535e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	e00e      	b.n	8005380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f9a4 	bl	80056b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	e00a      	b.n	8005380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f9a0 	bl	80056b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005370:	e006      	b.n	8005380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f99c 	bl	80056b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800537e:	e170      	b.n	8005662 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	bf00      	nop
    return;
 8005382:	e16e      	b.n	8005662 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	2b01      	cmp	r3, #1
 800538a:	f040 814a 	bne.w	8005622 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8143 	beq.w	8005622 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 813c 	beq.w	8005622 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	f040 80b4 	bne.w	8005538 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8140 	beq.w	8005666 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053ee:	429a      	cmp	r2, r3
 80053f0:	f080 8139 	bcs.w	8005666 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005406:	f000 8088 	beq.w	800551a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800543a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005442:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800544e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1d9      	bne.n	800540a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3314      	adds	r3, #20
 800545c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3314      	adds	r3, #20
 8005476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800547a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800547e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005482:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800548c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e1      	bne.n	8005456 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e3      	bne.n	8005492 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80054fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800550a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e3      	bne.n	80054d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	4618      	mov	r0, r3
 8005516:	f7fd fbc3 	bl	8002ca0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005522:	b29b      	uxth	r3, r3
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	b29b      	uxth	r3, r3
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc fdcc 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005530:	e099      	b.n	8005666 <HAL_UART_IRQHandler+0x50e>
 8005532:	bf00      	nop
 8005534:	08005bdb 	.word	0x08005bdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005540:	b29b      	uxth	r3, r3
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 808b 	beq.w	800566a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8086 	beq.w	800566a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005582:	647a      	str	r2, [r7, #68]	; 0x44
 8005584:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e3      	bne.n	800555e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	623b      	str	r3, [r7, #32]
   return(result);
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3314      	adds	r3, #20
 80055b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055ba:	633a      	str	r2, [r7, #48]	; 0x30
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e3      	bne.n	8005596 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0310 	bic.w	r3, r3, #16
 80055f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005600:	61fa      	str	r2, [r7, #28]
 8005602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	69b9      	ldr	r1, [r7, #24]
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	617b      	str	r3, [r7, #20]
   return(result);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e3      	bne.n	80055dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fc fd54 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005620:	e023      	b.n	800566a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <HAL_UART_IRQHandler+0x4ea>
 800562e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fae1 	bl	8005c02 <UART_Transmit_IT>
    return;
 8005640:	e014      	b.n	800566c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00e      	beq.n	800566c <HAL_UART_IRQHandler+0x514>
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fb21 	bl	8005ca2 <UART_EndTransmit_IT>
    return;
 8005660:	e004      	b.n	800566c <HAL_UART_IRQHandler+0x514>
    return;
 8005662:	bf00      	nop
 8005664:	e002      	b.n	800566c <HAL_UART_IRQHandler+0x514>
      return;
 8005666:	bf00      	nop
 8005668:	e000      	b.n	800566c <HAL_UART_IRQHandler+0x514>
      return;
 800566a:	bf00      	nop
  }
}
 800566c:	37e8      	adds	r7, #232	; 0xe8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop

08005674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b09c      	sub	sp, #112	; 0x70
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d172      	bne.n	80057c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80056e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e2:	2200      	movs	r2, #0
 80056e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80056fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005706:	65ba      	str	r2, [r7, #88]	; 0x58
 8005708:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800570c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3314      	adds	r3, #20
 8005720:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	667b      	str	r3, [r7, #100]	; 0x64
 8005732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3314      	adds	r3, #20
 8005738:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800573a:	647a      	str	r2, [r7, #68]	; 0x44
 800573c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3314      	adds	r3, #20
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	623b      	str	r3, [r7, #32]
   return(result);
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005764:	663b      	str	r3, [r7, #96]	; 0x60
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3314      	adds	r3, #20
 800576c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800576e:	633a      	str	r2, [r7, #48]	; 0x30
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e5      	bne.n	800574e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	2b01      	cmp	r3, #1
 8005790:	d119      	bne.n	80057c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057b2:	61fa      	str	r2, [r7, #28]
 80057b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	69b9      	ldr	r1, [r7, #24]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	617b      	str	r3, [r7, #20]
   return(result);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d106      	bne.n	80057dc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d2:	4619      	mov	r1, r3
 80057d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057d6:	f7fc fc77 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057da:	e002      	b.n	80057e2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80057dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057de:	f7ff ff53 	bl	8005688 <HAL_UART_RxCpltCallback>
}
 80057e2:	bf00      	nop
 80057e4:	3770      	adds	r7, #112	; 0x70
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d108      	bne.n	8005812 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	b29b      	uxth	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7fc fc5c 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005810:	e002      	b.n	8005818 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff ff42 	bl	800569c <HAL_UART_RxHalfCpltCallback>
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	2b80      	cmp	r3, #128	; 0x80
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b21      	cmp	r3, #33	; 0x21
 8005852:	d108      	bne.n	8005866 <UART_DMAError+0x46>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005860:	68b8      	ldr	r0, [r7, #8]
 8005862:	f000 f92f 	bl	8005ac4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b22      	cmp	r3, #34	; 0x22
 8005886:	d108      	bne.n	800589a <UART_DMAError+0x7a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2200      	movs	r2, #0
 8005892:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005894:	68b8      	ldr	r0, [r7, #8]
 8005896:	f000 f93d 	bl	8005b14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f043 0210 	orr.w	r2, r3, #16
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058a6:	68b8      	ldr	r0, [r7, #8]
 80058a8:	f7ff ff02 	bl	80056b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b090      	sub	sp, #64	; 0x40
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	e050      	b.n	8005968 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058cc:	d04c      	beq.n	8005968 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d007      	beq.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058d4:	f7fc ffc0 	bl	8002858 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d241      	bcs.n	8005968 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005904:	637a      	str	r2, [r7, #52]	; 0x34
 8005906:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800590a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e5      	bne.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	613b      	str	r3, [r7, #16]
   return(result);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005938:	623a      	str	r2, [r7, #32]
 800593a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	69f9      	ldr	r1, [r7, #28]
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	61bb      	str	r3, [r7, #24]
   return(result);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e00f      	b.n	8005988 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4013      	ands	r3, r2
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	429a      	cmp	r2, r3
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	429a      	cmp	r2, r3
 8005984:	d09f      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3740      	adds	r7, #64	; 0x40
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b098      	sub	sp, #96	; 0x60
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2222      	movs	r2, #34	; 0x22
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	4a3e      	ldr	r2, [pc, #248]	; (8005ab8 <UART_Start_Receive_DMA+0x128>)
 80059be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	4a3d      	ldr	r2, [pc, #244]	; (8005abc <UART_Start_Receive_DMA+0x12c>)
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	4a3c      	ldr	r2, [pc, #240]	; (8005ac0 <UART_Start_Receive_DMA+0x130>)
 80059ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	2200      	movs	r2, #0
 80059d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059d8:	f107 0308 	add.w	r3, r7, #8
 80059dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	f7fd f8fe 	bl	8002bf0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	330c      	adds	r3, #12
 8005a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a32:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a66:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a90:	653b      	str	r3, [r7, #80]	; 0x50
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3314      	adds	r3, #20
 8005a98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a9a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6a39      	ldr	r1, [r7, #32]
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3760      	adds	r7, #96	; 0x60
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	080056c5 	.word	0x080056c5
 8005abc:	080057eb 	.word	0x080057eb
 8005ac0:	08005821 	.word	0x08005821

08005ac4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	; 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	61ba      	str	r2, [r7, #24]
 8005aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	613b      	str	r3, [r7, #16]
   return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b08:	bf00      	nop
 8005b0a:	3724      	adds	r7, #36	; 0x24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b095      	sub	sp, #84	; 0x54
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b3c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3314      	adds	r3, #20
 8005b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e5      	bne.n	8005b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d119      	bne.n	8005bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f023 0310 	bic.w	r3, r3, #16
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bac:	61ba      	str	r2, [r7, #24]
 8005bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6979      	ldr	r1, [r7, #20]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bce:	bf00      	nop
 8005bd0:	3754      	adds	r7, #84	; 0x54
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff fd5b 	bl	80056b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b21      	cmp	r3, #33	; 0x21
 8005c14:	d13e      	bne.n	8005c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1e:	d114      	bne.n	8005c4a <UART_Transmit_IT+0x48>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d110      	bne.n	8005c4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	1c9a      	adds	r2, r3, #2
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]
 8005c48:	e008      	b.n	8005c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6211      	str	r1, [r2, #32]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10f      	bne.n	8005c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fcd6 	bl	8005674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b08c      	sub	sp, #48	; 0x30
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b22      	cmp	r3, #34	; 0x22
 8005ce4:	f040 80ab 	bne.w	8005e3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf0:	d117      	bne.n	8005d22 <UART_Receive_IT+0x50>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d113      	bne.n	8005d22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	1c9a      	adds	r2, r3, #2
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d20:	e026      	b.n	8005d70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d34:	d007      	beq.n	8005d46 <UART_Receive_IT+0x74>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <UART_Receive_IT+0x82>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e008      	b.n	8005d66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d15a      	bne.n	8005e3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0220 	bic.w	r2, r2, #32
 8005d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005da2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d135      	bne.n	8005e30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f023 0310 	bic.w	r3, r3, #16
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	623a      	str	r2, [r7, #32]
 8005dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	69f9      	ldr	r1, [r7, #28]
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e5      	bne.n	8005dca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d10a      	bne.n	8005e22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7fc f94d 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
 8005e2e:	e002      	b.n	8005e36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fc29 	bl	8005688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e002      	b.n	8005e40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e000      	b.n	8005e40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3730      	adds	r7, #48	; 0x30
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e4c:	b0c0      	sub	sp, #256	; 0x100
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	68d9      	ldr	r1, [r3, #12]
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	ea40 0301 	orr.w	r3, r0, r1
 8005e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ea0:	f021 010c 	bic.w	r1, r1, #12
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	6999      	ldr	r1, [r3, #24]
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	ea40 0301 	orr.w	r3, r0, r1
 8005ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b8f      	ldr	r3, [pc, #572]	; (8006114 <UART_SetConfig+0x2cc>)
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d005      	beq.n	8005ee8 <UART_SetConfig+0xa0>
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b8d      	ldr	r3, [pc, #564]	; (8006118 <UART_SetConfig+0x2d0>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d104      	bne.n	8005ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fd fff8 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8005eec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ef0:	e003      	b.n	8005efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ef2:	f7fd ffdf 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8005ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f04:	f040 810c 	bne.w	8006120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	1891      	adds	r1, r2, r2
 8005f20:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f22:	415b      	adcs	r3, r3
 8005f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	eb12 0801 	adds.w	r8, r2, r1
 8005f30:	4629      	mov	r1, r5
 8005f32:	eb43 0901 	adc.w	r9, r3, r1
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f4a:	4690      	mov	r8, r2
 8005f4c:	4699      	mov	r9, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	eb18 0303 	adds.w	r3, r8, r3
 8005f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f58:	462b      	mov	r3, r5
 8005f5a:	eb49 0303 	adc.w	r3, r9, r3
 8005f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f76:	460b      	mov	r3, r1
 8005f78:	18db      	adds	r3, r3, r3
 8005f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	eb42 0303 	adc.w	r3, r2, r3
 8005f82:	657b      	str	r3, [r7, #84]	; 0x54
 8005f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f8c:	f7fa fe84 	bl	8000c98 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4b61      	ldr	r3, [pc, #388]	; (800611c <UART_SetConfig+0x2d4>)
 8005f96:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	011c      	lsls	r4, r3, #4
 8005f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	1891      	adds	r1, r2, r2
 8005fb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fb8:	415b      	adcs	r3, r3
 8005fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe0:	4692      	mov	sl, r2
 8005fe2:	469b      	mov	fp, r3
 8005fe4:	4643      	mov	r3, r8
 8005fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fee:	464b      	mov	r3, r9
 8005ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006004:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800600c:	460b      	mov	r3, r1
 800600e:	18db      	adds	r3, r3, r3
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
 8006012:	4613      	mov	r3, r2
 8006014:	eb42 0303 	adc.w	r3, r2, r3
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
 800601a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800601e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006022:	f7fa fe39 	bl	8000c98 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4611      	mov	r1, r2
 800602c:	4b3b      	ldr	r3, [pc, #236]	; (800611c <UART_SetConfig+0x2d4>)
 800602e:	fba3 2301 	umull	r2, r3, r3, r1
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	2264      	movs	r2, #100	; 0x64
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	1acb      	subs	r3, r1, r3
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006042:	4b36      	ldr	r3, [pc, #216]	; (800611c <UART_SetConfig+0x2d4>)
 8006044:	fba3 2302 	umull	r2, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006050:	441c      	add	r4, r3
 8006052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800605c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006064:	4642      	mov	r2, r8
 8006066:	464b      	mov	r3, r9
 8006068:	1891      	adds	r1, r2, r2
 800606a:	63b9      	str	r1, [r7, #56]	; 0x38
 800606c:	415b      	adcs	r3, r3
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006074:	4641      	mov	r1, r8
 8006076:	1851      	adds	r1, r2, r1
 8006078:	6339      	str	r1, [r7, #48]	; 0x30
 800607a:	4649      	mov	r1, r9
 800607c:	414b      	adcs	r3, r1
 800607e:	637b      	str	r3, [r7, #52]	; 0x34
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800608c:	4659      	mov	r1, fp
 800608e:	00cb      	lsls	r3, r1, #3
 8006090:	4651      	mov	r1, sl
 8006092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006096:	4651      	mov	r1, sl
 8006098:	00ca      	lsls	r2, r1, #3
 800609a:	4610      	mov	r0, r2
 800609c:	4619      	mov	r1, r3
 800609e:	4603      	mov	r3, r0
 80060a0:	4642      	mov	r2, r8
 80060a2:	189b      	adds	r3, r3, r2
 80060a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060a8:	464b      	mov	r3, r9
 80060aa:	460a      	mov	r2, r1
 80060ac:	eb42 0303 	adc.w	r3, r2, r3
 80060b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060c8:	460b      	mov	r3, r1
 80060ca:	18db      	adds	r3, r3, r3
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ce:	4613      	mov	r3, r2
 80060d0:	eb42 0303 	adc.w	r3, r2, r3
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060de:	f7fa fddb 	bl	8000c98 <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <UART_SetConfig+0x2d4>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	3332      	adds	r3, #50	; 0x32
 80060fa:	4a08      	ldr	r2, [pc, #32]	; (800611c <UART_SetConfig+0x2d4>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	f003 0207 	and.w	r2, r3, #7
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4422      	add	r2, r4
 800610e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006110:	e105      	b.n	800631e <UART_SetConfig+0x4d6>
 8006112:	bf00      	nop
 8006114:	40011000 	.word	0x40011000
 8006118:	40011400 	.word	0x40011400
 800611c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800612a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800612e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006132:	4642      	mov	r2, r8
 8006134:	464b      	mov	r3, r9
 8006136:	1891      	adds	r1, r2, r2
 8006138:	6239      	str	r1, [r7, #32]
 800613a:	415b      	adcs	r3, r3
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006142:	4641      	mov	r1, r8
 8006144:	1854      	adds	r4, r2, r1
 8006146:	4649      	mov	r1, r9
 8006148:	eb43 0501 	adc.w	r5, r3, r1
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	00eb      	lsls	r3, r5, #3
 8006156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615a:	00e2      	lsls	r2, r4, #3
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	4643      	mov	r3, r8
 8006162:	18e3      	adds	r3, r4, r3
 8006164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006168:	464b      	mov	r3, r9
 800616a:	eb45 0303 	adc.w	r3, r5, r3
 800616e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800617e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800618e:	4629      	mov	r1, r5
 8006190:	008b      	lsls	r3, r1, #2
 8006192:	4621      	mov	r1, r4
 8006194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006198:	4621      	mov	r1, r4
 800619a:	008a      	lsls	r2, r1, #2
 800619c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061a0:	f7fa fd7a 	bl	8000c98 <__aeabi_uldivmod>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4b60      	ldr	r3, [pc, #384]	; (800632c <UART_SetConfig+0x4e4>)
 80061aa:	fba3 2302 	umull	r2, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	011c      	lsls	r4, r3, #4
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	61b9      	str	r1, [r7, #24]
 80061cc:	415b      	adcs	r3, r3
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6139      	str	r1, [r7, #16]
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	67bb      	str	r3, [r7, #120]	; 0x78
 800621e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800622c:	4649      	mov	r1, r9
 800622e:	008b      	lsls	r3, r1, #2
 8006230:	4641      	mov	r1, r8
 8006232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006236:	4641      	mov	r1, r8
 8006238:	008a      	lsls	r2, r1, #2
 800623a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800623e:	f7fa fd2b 	bl	8000c98 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4b39      	ldr	r3, [pc, #228]	; (800632c <UART_SetConfig+0x4e4>)
 8006248:	fba3 1302 	umull	r1, r3, r3, r2
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	2164      	movs	r1, #100	; 0x64
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	3332      	adds	r3, #50	; 0x32
 800625a:	4a34      	ldr	r2, [pc, #208]	; (800632c <UART_SetConfig+0x4e4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006266:	441c      	add	r4, r3
 8006268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626c:	2200      	movs	r2, #0
 800626e:	673b      	str	r3, [r7, #112]	; 0x70
 8006270:	677a      	str	r2, [r7, #116]	; 0x74
 8006272:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006276:	4642      	mov	r2, r8
 8006278:	464b      	mov	r3, r9
 800627a:	1891      	adds	r1, r2, r2
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	415b      	adcs	r3, r3
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006286:	4641      	mov	r1, r8
 8006288:	1851      	adds	r1, r2, r1
 800628a:	6039      	str	r1, [r7, #0]
 800628c:	4649      	mov	r1, r9
 800628e:	414b      	adcs	r3, r1
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800629e:	4659      	mov	r1, fp
 80062a0:	00cb      	lsls	r3, r1, #3
 80062a2:	4651      	mov	r1, sl
 80062a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a8:	4651      	mov	r1, sl
 80062aa:	00ca      	lsls	r2, r1, #3
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	4642      	mov	r2, r8
 80062b4:	189b      	adds	r3, r3, r2
 80062b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062b8:	464b      	mov	r3, r9
 80062ba:	460a      	mov	r2, r1
 80062bc:	eb42 0303 	adc.w	r3, r2, r3
 80062c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	663b      	str	r3, [r7, #96]	; 0x60
 80062cc:	667a      	str	r2, [r7, #100]	; 0x64
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062da:	4649      	mov	r1, r9
 80062dc:	008b      	lsls	r3, r1, #2
 80062de:	4641      	mov	r1, r8
 80062e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e4:	4641      	mov	r1, r8
 80062e6:	008a      	lsls	r2, r1, #2
 80062e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062ec:	f7fa fcd4 	bl	8000c98 <__aeabi_uldivmod>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4b0d      	ldr	r3, [pc, #52]	; (800632c <UART_SetConfig+0x4e4>)
 80062f6:	fba3 1302 	umull	r1, r3, r3, r2
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2164      	movs	r1, #100	; 0x64
 80062fe:	fb01 f303 	mul.w	r3, r1, r3
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	3332      	adds	r3, #50	; 0x32
 8006308:	4a08      	ldr	r2, [pc, #32]	; (800632c <UART_SetConfig+0x4e4>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4422      	add	r2, r4
 800631c:	609a      	str	r2, [r3, #8]
}
 800631e:	bf00      	nop
 8006320:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006324:	46bd      	mov	sp, r7
 8006326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632a:	bf00      	nop
 800632c:	51eb851f 	.word	0x51eb851f

08006330 <__errno>:
 8006330:	4b01      	ldr	r3, [pc, #4]	; (8006338 <__errno+0x8>)
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	2000000c 	.word	0x2000000c

0800633c <__libc_init_array>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4d0d      	ldr	r5, [pc, #52]	; (8006374 <__libc_init_array+0x38>)
 8006340:	4c0d      	ldr	r4, [pc, #52]	; (8006378 <__libc_init_array+0x3c>)
 8006342:	1b64      	subs	r4, r4, r5
 8006344:	10a4      	asrs	r4, r4, #2
 8006346:	2600      	movs	r6, #0
 8006348:	42a6      	cmp	r6, r4
 800634a:	d109      	bne.n	8006360 <__libc_init_array+0x24>
 800634c:	4d0b      	ldr	r5, [pc, #44]	; (800637c <__libc_init_array+0x40>)
 800634e:	4c0c      	ldr	r4, [pc, #48]	; (8006380 <__libc_init_array+0x44>)
 8006350:	f004 fa00 	bl	800a754 <_init>
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	2600      	movs	r6, #0
 800635a:	42a6      	cmp	r6, r4
 800635c:	d105      	bne.n	800636a <__libc_init_array+0x2e>
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	f855 3b04 	ldr.w	r3, [r5], #4
 8006364:	4798      	blx	r3
 8006366:	3601      	adds	r6, #1
 8006368:	e7ee      	b.n	8006348 <__libc_init_array+0xc>
 800636a:	f855 3b04 	ldr.w	r3, [r5], #4
 800636e:	4798      	blx	r3
 8006370:	3601      	adds	r6, #1
 8006372:	e7f2      	b.n	800635a <__libc_init_array+0x1e>
 8006374:	0800ad18 	.word	0x0800ad18
 8006378:	0800ad18 	.word	0x0800ad18
 800637c:	0800ad18 	.word	0x0800ad18
 8006380:	0800ad1c 	.word	0x0800ad1c

08006384 <memcpy>:
 8006384:	440a      	add	r2, r1
 8006386:	4291      	cmp	r1, r2
 8006388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800638c:	d100      	bne.n	8006390 <memcpy+0xc>
 800638e:	4770      	bx	lr
 8006390:	b510      	push	{r4, lr}
 8006392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800639a:	4291      	cmp	r1, r2
 800639c:	d1f9      	bne.n	8006392 <memcpy+0xe>
 800639e:	bd10      	pop	{r4, pc}

080063a0 <memset>:
 80063a0:	4402      	add	r2, r0
 80063a2:	4603      	mov	r3, r0
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d100      	bne.n	80063aa <memset+0xa>
 80063a8:	4770      	bx	lr
 80063aa:	f803 1b01 	strb.w	r1, [r3], #1
 80063ae:	e7f9      	b.n	80063a4 <memset+0x4>

080063b0 <__cvt>:
 80063b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	ec55 4b10 	vmov	r4, r5, d0
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	460e      	mov	r6, r1
 80063bc:	4619      	mov	r1, r3
 80063be:	462b      	mov	r3, r5
 80063c0:	bfbb      	ittet	lt
 80063c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063c6:	461d      	movlt	r5, r3
 80063c8:	2300      	movge	r3, #0
 80063ca:	232d      	movlt	r3, #45	; 0x2d
 80063cc:	700b      	strb	r3, [r1, #0]
 80063ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063d4:	4691      	mov	r9, r2
 80063d6:	f023 0820 	bic.w	r8, r3, #32
 80063da:	bfbc      	itt	lt
 80063dc:	4622      	movlt	r2, r4
 80063de:	4614      	movlt	r4, r2
 80063e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063e4:	d005      	beq.n	80063f2 <__cvt+0x42>
 80063e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063ea:	d100      	bne.n	80063ee <__cvt+0x3e>
 80063ec:	3601      	adds	r6, #1
 80063ee:	2102      	movs	r1, #2
 80063f0:	e000      	b.n	80063f4 <__cvt+0x44>
 80063f2:	2103      	movs	r1, #3
 80063f4:	ab03      	add	r3, sp, #12
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	ab02      	add	r3, sp, #8
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	ec45 4b10 	vmov	d0, r4, r5
 8006400:	4653      	mov	r3, sl
 8006402:	4632      	mov	r2, r6
 8006404:	f000 feac 	bl	8007160 <_dtoa_r>
 8006408:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800640c:	4607      	mov	r7, r0
 800640e:	d102      	bne.n	8006416 <__cvt+0x66>
 8006410:	f019 0f01 	tst.w	r9, #1
 8006414:	d022      	beq.n	800645c <__cvt+0xac>
 8006416:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800641a:	eb07 0906 	add.w	r9, r7, r6
 800641e:	d110      	bne.n	8006442 <__cvt+0x92>
 8006420:	783b      	ldrb	r3, [r7, #0]
 8006422:	2b30      	cmp	r3, #48	; 0x30
 8006424:	d10a      	bne.n	800643c <__cvt+0x8c>
 8006426:	2200      	movs	r2, #0
 8006428:	2300      	movs	r3, #0
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	f7fa fb53 	bl	8000ad8 <__aeabi_dcmpeq>
 8006432:	b918      	cbnz	r0, 800643c <__cvt+0x8c>
 8006434:	f1c6 0601 	rsb	r6, r6, #1
 8006438:	f8ca 6000 	str.w	r6, [sl]
 800643c:	f8da 3000 	ldr.w	r3, [sl]
 8006440:	4499      	add	r9, r3
 8006442:	2200      	movs	r2, #0
 8006444:	2300      	movs	r3, #0
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7fa fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 800644e:	b108      	cbz	r0, 8006454 <__cvt+0xa4>
 8006450:	f8cd 900c 	str.w	r9, [sp, #12]
 8006454:	2230      	movs	r2, #48	; 0x30
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	454b      	cmp	r3, r9
 800645a:	d307      	bcc.n	800646c <__cvt+0xbc>
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006460:	1bdb      	subs	r3, r3, r7
 8006462:	4638      	mov	r0, r7
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	b004      	add	sp, #16
 8006468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	9103      	str	r1, [sp, #12]
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	e7f0      	b.n	8006456 <__cvt+0xa6>

08006474 <__exponent>:
 8006474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006476:	4603      	mov	r3, r0
 8006478:	2900      	cmp	r1, #0
 800647a:	bfb8      	it	lt
 800647c:	4249      	neglt	r1, r1
 800647e:	f803 2b02 	strb.w	r2, [r3], #2
 8006482:	bfb4      	ite	lt
 8006484:	222d      	movlt	r2, #45	; 0x2d
 8006486:	222b      	movge	r2, #43	; 0x2b
 8006488:	2909      	cmp	r1, #9
 800648a:	7042      	strb	r2, [r0, #1]
 800648c:	dd2a      	ble.n	80064e4 <__exponent+0x70>
 800648e:	f10d 0407 	add.w	r4, sp, #7
 8006492:	46a4      	mov	ip, r4
 8006494:	270a      	movs	r7, #10
 8006496:	46a6      	mov	lr, r4
 8006498:	460a      	mov	r2, r1
 800649a:	fb91 f6f7 	sdiv	r6, r1, r7
 800649e:	fb07 1516 	mls	r5, r7, r6, r1
 80064a2:	3530      	adds	r5, #48	; 0x30
 80064a4:	2a63      	cmp	r2, #99	; 0x63
 80064a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80064aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064ae:	4631      	mov	r1, r6
 80064b0:	dcf1      	bgt.n	8006496 <__exponent+0x22>
 80064b2:	3130      	adds	r1, #48	; 0x30
 80064b4:	f1ae 0502 	sub.w	r5, lr, #2
 80064b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064bc:	1c44      	adds	r4, r0, #1
 80064be:	4629      	mov	r1, r5
 80064c0:	4561      	cmp	r1, ip
 80064c2:	d30a      	bcc.n	80064da <__exponent+0x66>
 80064c4:	f10d 0209 	add.w	r2, sp, #9
 80064c8:	eba2 020e 	sub.w	r2, r2, lr
 80064cc:	4565      	cmp	r5, ip
 80064ce:	bf88      	it	hi
 80064d0:	2200      	movhi	r2, #0
 80064d2:	4413      	add	r3, r2
 80064d4:	1a18      	subs	r0, r3, r0
 80064d6:	b003      	add	sp, #12
 80064d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064e2:	e7ed      	b.n	80064c0 <__exponent+0x4c>
 80064e4:	2330      	movs	r3, #48	; 0x30
 80064e6:	3130      	adds	r1, #48	; 0x30
 80064e8:	7083      	strb	r3, [r0, #2]
 80064ea:	70c1      	strb	r1, [r0, #3]
 80064ec:	1d03      	adds	r3, r0, #4
 80064ee:	e7f1      	b.n	80064d4 <__exponent+0x60>

080064f0 <_printf_float>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	ed2d 8b02 	vpush	{d8}
 80064f8:	b08d      	sub	sp, #52	; 0x34
 80064fa:	460c      	mov	r4, r1
 80064fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006500:	4616      	mov	r6, r2
 8006502:	461f      	mov	r7, r3
 8006504:	4605      	mov	r5, r0
 8006506:	f001 fdd1 	bl	80080ac <_localeconv_r>
 800650a:	f8d0 a000 	ldr.w	sl, [r0]
 800650e:	4650      	mov	r0, sl
 8006510:	f7f9 fe66 	bl	80001e0 <strlen>
 8006514:	2300      	movs	r3, #0
 8006516:	930a      	str	r3, [sp, #40]	; 0x28
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	9305      	str	r3, [sp, #20]
 800651c:	f8d8 3000 	ldr.w	r3, [r8]
 8006520:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006524:	3307      	adds	r3, #7
 8006526:	f023 0307 	bic.w	r3, r3, #7
 800652a:	f103 0208 	add.w	r2, r3, #8
 800652e:	f8c8 2000 	str.w	r2, [r8]
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800653a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800653e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006542:	9307      	str	r3, [sp, #28]
 8006544:	f8cd 8018 	str.w	r8, [sp, #24]
 8006548:	ee08 0a10 	vmov	s16, r0
 800654c:	4b9f      	ldr	r3, [pc, #636]	; (80067cc <_printf_float+0x2dc>)
 800654e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006556:	f7fa faf1 	bl	8000b3c <__aeabi_dcmpun>
 800655a:	bb88      	cbnz	r0, 80065c0 <_printf_float+0xd0>
 800655c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006560:	4b9a      	ldr	r3, [pc, #616]	; (80067cc <_printf_float+0x2dc>)
 8006562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006566:	f7fa facb 	bl	8000b00 <__aeabi_dcmple>
 800656a:	bb48      	cbnz	r0, 80065c0 <_printf_float+0xd0>
 800656c:	2200      	movs	r2, #0
 800656e:	2300      	movs	r3, #0
 8006570:	4640      	mov	r0, r8
 8006572:	4649      	mov	r1, r9
 8006574:	f7fa faba 	bl	8000aec <__aeabi_dcmplt>
 8006578:	b110      	cbz	r0, 8006580 <_printf_float+0x90>
 800657a:	232d      	movs	r3, #45	; 0x2d
 800657c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006580:	4b93      	ldr	r3, [pc, #588]	; (80067d0 <_printf_float+0x2e0>)
 8006582:	4894      	ldr	r0, [pc, #592]	; (80067d4 <_printf_float+0x2e4>)
 8006584:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006588:	bf94      	ite	ls
 800658a:	4698      	movls	r8, r3
 800658c:	4680      	movhi	r8, r0
 800658e:	2303      	movs	r3, #3
 8006590:	6123      	str	r3, [r4, #16]
 8006592:	9b05      	ldr	r3, [sp, #20]
 8006594:	f023 0204 	bic.w	r2, r3, #4
 8006598:	6022      	str	r2, [r4, #0]
 800659a:	f04f 0900 	mov.w	r9, #0
 800659e:	9700      	str	r7, [sp, #0]
 80065a0:	4633      	mov	r3, r6
 80065a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80065a4:	4621      	mov	r1, r4
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f9d8 	bl	800695c <_printf_common>
 80065ac:	3001      	adds	r0, #1
 80065ae:	f040 8090 	bne.w	80066d2 <_printf_float+0x1e2>
 80065b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065b6:	b00d      	add	sp, #52	; 0x34
 80065b8:	ecbd 8b02 	vpop	{d8}
 80065bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c0:	4642      	mov	r2, r8
 80065c2:	464b      	mov	r3, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	4649      	mov	r1, r9
 80065c8:	f7fa fab8 	bl	8000b3c <__aeabi_dcmpun>
 80065cc:	b140      	cbz	r0, 80065e0 <_printf_float+0xf0>
 80065ce:	464b      	mov	r3, r9
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bfbc      	itt	lt
 80065d4:	232d      	movlt	r3, #45	; 0x2d
 80065d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065da:	487f      	ldr	r0, [pc, #508]	; (80067d8 <_printf_float+0x2e8>)
 80065dc:	4b7f      	ldr	r3, [pc, #508]	; (80067dc <_printf_float+0x2ec>)
 80065de:	e7d1      	b.n	8006584 <_printf_float+0x94>
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065e6:	9206      	str	r2, [sp, #24]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	d13f      	bne.n	800666c <_printf_float+0x17c>
 80065ec:	2306      	movs	r3, #6
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	9b05      	ldr	r3, [sp, #20]
 80065f2:	6861      	ldr	r1, [r4, #4]
 80065f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065f8:	2300      	movs	r3, #0
 80065fa:	9303      	str	r3, [sp, #12]
 80065fc:	ab0a      	add	r3, sp, #40	; 0x28
 80065fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006602:	ab09      	add	r3, sp, #36	; 0x24
 8006604:	ec49 8b10 	vmov	d0, r8, r9
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	6022      	str	r2, [r4, #0]
 800660c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006610:	4628      	mov	r0, r5
 8006612:	f7ff fecd 	bl	80063b0 <__cvt>
 8006616:	9b06      	ldr	r3, [sp, #24]
 8006618:	9909      	ldr	r1, [sp, #36]	; 0x24
 800661a:	2b47      	cmp	r3, #71	; 0x47
 800661c:	4680      	mov	r8, r0
 800661e:	d108      	bne.n	8006632 <_printf_float+0x142>
 8006620:	1cc8      	adds	r0, r1, #3
 8006622:	db02      	blt.n	800662a <_printf_float+0x13a>
 8006624:	6863      	ldr	r3, [r4, #4]
 8006626:	4299      	cmp	r1, r3
 8006628:	dd41      	ble.n	80066ae <_printf_float+0x1be>
 800662a:	f1ab 0b02 	sub.w	fp, fp, #2
 800662e:	fa5f fb8b 	uxtb.w	fp, fp
 8006632:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006636:	d820      	bhi.n	800667a <_printf_float+0x18a>
 8006638:	3901      	subs	r1, #1
 800663a:	465a      	mov	r2, fp
 800663c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006640:	9109      	str	r1, [sp, #36]	; 0x24
 8006642:	f7ff ff17 	bl	8006474 <__exponent>
 8006646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006648:	1813      	adds	r3, r2, r0
 800664a:	2a01      	cmp	r2, #1
 800664c:	4681      	mov	r9, r0
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	dc02      	bgt.n	8006658 <_printf_float+0x168>
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	07d2      	lsls	r2, r2, #31
 8006656:	d501      	bpl.n	800665c <_printf_float+0x16c>
 8006658:	3301      	adds	r3, #1
 800665a:	6123      	str	r3, [r4, #16]
 800665c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006660:	2b00      	cmp	r3, #0
 8006662:	d09c      	beq.n	800659e <_printf_float+0xae>
 8006664:	232d      	movs	r3, #45	; 0x2d
 8006666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800666a:	e798      	b.n	800659e <_printf_float+0xae>
 800666c:	9a06      	ldr	r2, [sp, #24]
 800666e:	2a47      	cmp	r2, #71	; 0x47
 8006670:	d1be      	bne.n	80065f0 <_printf_float+0x100>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1bc      	bne.n	80065f0 <_printf_float+0x100>
 8006676:	2301      	movs	r3, #1
 8006678:	e7b9      	b.n	80065ee <_printf_float+0xfe>
 800667a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800667e:	d118      	bne.n	80066b2 <_printf_float+0x1c2>
 8006680:	2900      	cmp	r1, #0
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	dd0b      	ble.n	800669e <_printf_float+0x1ae>
 8006686:	6121      	str	r1, [r4, #16]
 8006688:	b913      	cbnz	r3, 8006690 <_printf_float+0x1a0>
 800668a:	6822      	ldr	r2, [r4, #0]
 800668c:	07d0      	lsls	r0, r2, #31
 800668e:	d502      	bpl.n	8006696 <_printf_float+0x1a6>
 8006690:	3301      	adds	r3, #1
 8006692:	440b      	add	r3, r1
 8006694:	6123      	str	r3, [r4, #16]
 8006696:	65a1      	str	r1, [r4, #88]	; 0x58
 8006698:	f04f 0900 	mov.w	r9, #0
 800669c:	e7de      	b.n	800665c <_printf_float+0x16c>
 800669e:	b913      	cbnz	r3, 80066a6 <_printf_float+0x1b6>
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	07d2      	lsls	r2, r2, #31
 80066a4:	d501      	bpl.n	80066aa <_printf_float+0x1ba>
 80066a6:	3302      	adds	r3, #2
 80066a8:	e7f4      	b.n	8006694 <_printf_float+0x1a4>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e7f2      	b.n	8006694 <_printf_float+0x1a4>
 80066ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b4:	4299      	cmp	r1, r3
 80066b6:	db05      	blt.n	80066c4 <_printf_float+0x1d4>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	6121      	str	r1, [r4, #16]
 80066bc:	07d8      	lsls	r0, r3, #31
 80066be:	d5ea      	bpl.n	8006696 <_printf_float+0x1a6>
 80066c0:	1c4b      	adds	r3, r1, #1
 80066c2:	e7e7      	b.n	8006694 <_printf_float+0x1a4>
 80066c4:	2900      	cmp	r1, #0
 80066c6:	bfd4      	ite	le
 80066c8:	f1c1 0202 	rsble	r2, r1, #2
 80066cc:	2201      	movgt	r2, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	e7e0      	b.n	8006694 <_printf_float+0x1a4>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	055a      	lsls	r2, r3, #21
 80066d6:	d407      	bmi.n	80066e8 <_printf_float+0x1f8>
 80066d8:	6923      	ldr	r3, [r4, #16]
 80066da:	4642      	mov	r2, r8
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	d12c      	bne.n	8006740 <_printf_float+0x250>
 80066e6:	e764      	b.n	80065b2 <_printf_float+0xc2>
 80066e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066ec:	f240 80e0 	bls.w	80068b0 <_printf_float+0x3c0>
 80066f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066f4:	2200      	movs	r2, #0
 80066f6:	2300      	movs	r3, #0
 80066f8:	f7fa f9ee 	bl	8000ad8 <__aeabi_dcmpeq>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d034      	beq.n	800676a <_printf_float+0x27a>
 8006700:	4a37      	ldr	r2, [pc, #220]	; (80067e0 <_printf_float+0x2f0>)
 8006702:	2301      	movs	r3, #1
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	f43f af51 	beq.w	80065b2 <_printf_float+0xc2>
 8006710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006714:	429a      	cmp	r2, r3
 8006716:	db02      	blt.n	800671e <_printf_float+0x22e>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07d8      	lsls	r0, r3, #31
 800671c:	d510      	bpl.n	8006740 <_printf_float+0x250>
 800671e:	ee18 3a10 	vmov	r3, s16
 8006722:	4652      	mov	r2, sl
 8006724:	4631      	mov	r1, r6
 8006726:	4628      	mov	r0, r5
 8006728:	47b8      	blx	r7
 800672a:	3001      	adds	r0, #1
 800672c:	f43f af41 	beq.w	80065b2 <_printf_float+0xc2>
 8006730:	f04f 0800 	mov.w	r8, #0
 8006734:	f104 091a 	add.w	r9, r4, #26
 8006738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673a:	3b01      	subs	r3, #1
 800673c:	4543      	cmp	r3, r8
 800673e:	dc09      	bgt.n	8006754 <_printf_float+0x264>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	079b      	lsls	r3, r3, #30
 8006744:	f100 8105 	bmi.w	8006952 <_printf_float+0x462>
 8006748:	68e0      	ldr	r0, [r4, #12]
 800674a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674c:	4298      	cmp	r0, r3
 800674e:	bfb8      	it	lt
 8006750:	4618      	movlt	r0, r3
 8006752:	e730      	b.n	80065b6 <_printf_float+0xc6>
 8006754:	2301      	movs	r3, #1
 8006756:	464a      	mov	r2, r9
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af27 	beq.w	80065b2 <_printf_float+0xc2>
 8006764:	f108 0801 	add.w	r8, r8, #1
 8006768:	e7e6      	b.n	8006738 <_printf_float+0x248>
 800676a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	dc39      	bgt.n	80067e4 <_printf_float+0x2f4>
 8006770:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <_printf_float+0x2f0>)
 8006772:	2301      	movs	r3, #1
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af19 	beq.w	80065b2 <_printf_float+0xc2>
 8006780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006784:	4313      	orrs	r3, r2
 8006786:	d102      	bne.n	800678e <_printf_float+0x29e>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	07d9      	lsls	r1, r3, #31
 800678c:	d5d8      	bpl.n	8006740 <_printf_float+0x250>
 800678e:	ee18 3a10 	vmov	r3, s16
 8006792:	4652      	mov	r2, sl
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f af09 	beq.w	80065b2 <_printf_float+0xc2>
 80067a0:	f04f 0900 	mov.w	r9, #0
 80067a4:	f104 0a1a 	add.w	sl, r4, #26
 80067a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067aa:	425b      	negs	r3, r3
 80067ac:	454b      	cmp	r3, r9
 80067ae:	dc01      	bgt.n	80067b4 <_printf_float+0x2c4>
 80067b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b2:	e792      	b.n	80066da <_printf_float+0x1ea>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4652      	mov	r2, sl
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	f43f aef7 	beq.w	80065b2 <_printf_float+0xc2>
 80067c4:	f109 0901 	add.w	r9, r9, #1
 80067c8:	e7ee      	b.n	80067a8 <_printf_float+0x2b8>
 80067ca:	bf00      	nop
 80067cc:	7fefffff 	.word	0x7fefffff
 80067d0:	0800a8ec 	.word	0x0800a8ec
 80067d4:	0800a8f0 	.word	0x0800a8f0
 80067d8:	0800a8f8 	.word	0x0800a8f8
 80067dc:	0800a8f4 	.word	0x0800a8f4
 80067e0:	0800ab81 	.word	0x0800ab81
 80067e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067e8:	429a      	cmp	r2, r3
 80067ea:	bfa8      	it	ge
 80067ec:	461a      	movge	r2, r3
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	4691      	mov	r9, r2
 80067f2:	dc37      	bgt.n	8006864 <_printf_float+0x374>
 80067f4:	f04f 0b00 	mov.w	fp, #0
 80067f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067fc:	f104 021a 	add.w	r2, r4, #26
 8006800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006802:	9305      	str	r3, [sp, #20]
 8006804:	eba3 0309 	sub.w	r3, r3, r9
 8006808:	455b      	cmp	r3, fp
 800680a:	dc33      	bgt.n	8006874 <_printf_float+0x384>
 800680c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006810:	429a      	cmp	r2, r3
 8006812:	db3b      	blt.n	800688c <_printf_float+0x39c>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	07da      	lsls	r2, r3, #31
 8006818:	d438      	bmi.n	800688c <_printf_float+0x39c>
 800681a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681c:	9a05      	ldr	r2, [sp, #20]
 800681e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006820:	1a9a      	subs	r2, r3, r2
 8006822:	eba3 0901 	sub.w	r9, r3, r1
 8006826:	4591      	cmp	r9, r2
 8006828:	bfa8      	it	ge
 800682a:	4691      	movge	r9, r2
 800682c:	f1b9 0f00 	cmp.w	r9, #0
 8006830:	dc35      	bgt.n	800689e <_printf_float+0x3ae>
 8006832:	f04f 0800 	mov.w	r8, #0
 8006836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800683a:	f104 0a1a 	add.w	sl, r4, #26
 800683e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	eba3 0309 	sub.w	r3, r3, r9
 8006848:	4543      	cmp	r3, r8
 800684a:	f77f af79 	ble.w	8006740 <_printf_float+0x250>
 800684e:	2301      	movs	r3, #1
 8006850:	4652      	mov	r2, sl
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f aeaa 	beq.w	80065b2 <_printf_float+0xc2>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	e7ec      	b.n	800683e <_printf_float+0x34e>
 8006864:	4613      	mov	r3, r2
 8006866:	4631      	mov	r1, r6
 8006868:	4642      	mov	r2, r8
 800686a:	4628      	mov	r0, r5
 800686c:	47b8      	blx	r7
 800686e:	3001      	adds	r0, #1
 8006870:	d1c0      	bne.n	80067f4 <_printf_float+0x304>
 8006872:	e69e      	b.n	80065b2 <_printf_float+0xc2>
 8006874:	2301      	movs	r3, #1
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	9205      	str	r2, [sp, #20]
 800687c:	47b8      	blx	r7
 800687e:	3001      	adds	r0, #1
 8006880:	f43f ae97 	beq.w	80065b2 <_printf_float+0xc2>
 8006884:	9a05      	ldr	r2, [sp, #20]
 8006886:	f10b 0b01 	add.w	fp, fp, #1
 800688a:	e7b9      	b.n	8006800 <_printf_float+0x310>
 800688c:	ee18 3a10 	vmov	r3, s16
 8006890:	4652      	mov	r2, sl
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	d1be      	bne.n	800681a <_printf_float+0x32a>
 800689c:	e689      	b.n	80065b2 <_printf_float+0xc2>
 800689e:	9a05      	ldr	r2, [sp, #20]
 80068a0:	464b      	mov	r3, r9
 80068a2:	4442      	add	r2, r8
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	d1c1      	bne.n	8006832 <_printf_float+0x342>
 80068ae:	e680      	b.n	80065b2 <_printf_float+0xc2>
 80068b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b2:	2a01      	cmp	r2, #1
 80068b4:	dc01      	bgt.n	80068ba <_printf_float+0x3ca>
 80068b6:	07db      	lsls	r3, r3, #31
 80068b8:	d538      	bpl.n	800692c <_printf_float+0x43c>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4642      	mov	r2, r8
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f ae74 	beq.w	80065b2 <_printf_float+0xc2>
 80068ca:	ee18 3a10 	vmov	r3, s16
 80068ce:	4652      	mov	r2, sl
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	f43f ae6b 	beq.w	80065b2 <_printf_float+0xc2>
 80068dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068e0:	2200      	movs	r2, #0
 80068e2:	2300      	movs	r3, #0
 80068e4:	f7fa f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80068e8:	b9d8      	cbnz	r0, 8006922 <_printf_float+0x432>
 80068ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ec:	f108 0201 	add.w	r2, r8, #1
 80068f0:	3b01      	subs	r3, #1
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	d10e      	bne.n	800691a <_printf_float+0x42a>
 80068fc:	e659      	b.n	80065b2 <_printf_float+0xc2>
 80068fe:	2301      	movs	r3, #1
 8006900:	4652      	mov	r2, sl
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f ae52 	beq.w	80065b2 <_printf_float+0xc2>
 800690e:	f108 0801 	add.w	r8, r8, #1
 8006912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006914:	3b01      	subs	r3, #1
 8006916:	4543      	cmp	r3, r8
 8006918:	dcf1      	bgt.n	80068fe <_printf_float+0x40e>
 800691a:	464b      	mov	r3, r9
 800691c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006920:	e6dc      	b.n	80066dc <_printf_float+0x1ec>
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	f104 0a1a 	add.w	sl, r4, #26
 800692a:	e7f2      	b.n	8006912 <_printf_float+0x422>
 800692c:	2301      	movs	r3, #1
 800692e:	4642      	mov	r2, r8
 8006930:	e7df      	b.n	80068f2 <_printf_float+0x402>
 8006932:	2301      	movs	r3, #1
 8006934:	464a      	mov	r2, r9
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	f43f ae38 	beq.w	80065b2 <_printf_float+0xc2>
 8006942:	f108 0801 	add.w	r8, r8, #1
 8006946:	68e3      	ldr	r3, [r4, #12]
 8006948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800694a:	1a5b      	subs	r3, r3, r1
 800694c:	4543      	cmp	r3, r8
 800694e:	dcf0      	bgt.n	8006932 <_printf_float+0x442>
 8006950:	e6fa      	b.n	8006748 <_printf_float+0x258>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	f104 0919 	add.w	r9, r4, #25
 800695a:	e7f4      	b.n	8006946 <_printf_float+0x456>

0800695c <_printf_common>:
 800695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	4616      	mov	r6, r2
 8006962:	4699      	mov	r9, r3
 8006964:	688a      	ldr	r2, [r1, #8]
 8006966:	690b      	ldr	r3, [r1, #16]
 8006968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800696c:	4293      	cmp	r3, r2
 800696e:	bfb8      	it	lt
 8006970:	4613      	movlt	r3, r2
 8006972:	6033      	str	r3, [r6, #0]
 8006974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006978:	4607      	mov	r7, r0
 800697a:	460c      	mov	r4, r1
 800697c:	b10a      	cbz	r2, 8006982 <_printf_common+0x26>
 800697e:	3301      	adds	r3, #1
 8006980:	6033      	str	r3, [r6, #0]
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	0699      	lsls	r1, r3, #26
 8006986:	bf42      	ittt	mi
 8006988:	6833      	ldrmi	r3, [r6, #0]
 800698a:	3302      	addmi	r3, #2
 800698c:	6033      	strmi	r3, [r6, #0]
 800698e:	6825      	ldr	r5, [r4, #0]
 8006990:	f015 0506 	ands.w	r5, r5, #6
 8006994:	d106      	bne.n	80069a4 <_printf_common+0x48>
 8006996:	f104 0a19 	add.w	sl, r4, #25
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	6832      	ldr	r2, [r6, #0]
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	42ab      	cmp	r3, r5
 80069a2:	dc26      	bgt.n	80069f2 <_printf_common+0x96>
 80069a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069a8:	1e13      	subs	r3, r2, #0
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	bf18      	it	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	0692      	lsls	r2, r2, #26
 80069b2:	d42b      	bmi.n	8006a0c <_printf_common+0xb0>
 80069b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069b8:	4649      	mov	r1, r9
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c0      	blx	r8
 80069be:	3001      	adds	r0, #1
 80069c0:	d01e      	beq.n	8006a00 <_printf_common+0xa4>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	68e5      	ldr	r5, [r4, #12]
 80069c6:	6832      	ldr	r2, [r6, #0]
 80069c8:	f003 0306 	and.w	r3, r3, #6
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	bf08      	it	eq
 80069d0:	1aad      	subeq	r5, r5, r2
 80069d2:	68a3      	ldr	r3, [r4, #8]
 80069d4:	6922      	ldr	r2, [r4, #16]
 80069d6:	bf0c      	ite	eq
 80069d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069dc:	2500      	movne	r5, #0
 80069de:	4293      	cmp	r3, r2
 80069e0:	bfc4      	itt	gt
 80069e2:	1a9b      	subgt	r3, r3, r2
 80069e4:	18ed      	addgt	r5, r5, r3
 80069e6:	2600      	movs	r6, #0
 80069e8:	341a      	adds	r4, #26
 80069ea:	42b5      	cmp	r5, r6
 80069ec:	d11a      	bne.n	8006a24 <_printf_common+0xc8>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e008      	b.n	8006a04 <_printf_common+0xa8>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4652      	mov	r2, sl
 80069f6:	4649      	mov	r1, r9
 80069f8:	4638      	mov	r0, r7
 80069fa:	47c0      	blx	r8
 80069fc:	3001      	adds	r0, #1
 80069fe:	d103      	bne.n	8006a08 <_printf_common+0xac>
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a08:	3501      	adds	r5, #1
 8006a0a:	e7c6      	b.n	800699a <_printf_common+0x3e>
 8006a0c:	18e1      	adds	r1, r4, r3
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	2030      	movs	r0, #48	; 0x30
 8006a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a16:	4422      	add	r2, r4
 8006a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a20:	3302      	adds	r3, #2
 8006a22:	e7c7      	b.n	80069b4 <_printf_common+0x58>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4622      	mov	r2, r4
 8006a28:	4649      	mov	r1, r9
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	47c0      	blx	r8
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d0e6      	beq.n	8006a00 <_printf_common+0xa4>
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7d9      	b.n	80069ea <_printf_common+0x8e>
	...

08006a38 <_printf_i>:
 8006a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3c:	7e0f      	ldrb	r7, [r1, #24]
 8006a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a40:	2f78      	cmp	r7, #120	; 0x78
 8006a42:	4691      	mov	r9, r2
 8006a44:	4680      	mov	r8, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	469a      	mov	sl, r3
 8006a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a4e:	d807      	bhi.n	8006a60 <_printf_i+0x28>
 8006a50:	2f62      	cmp	r7, #98	; 0x62
 8006a52:	d80a      	bhi.n	8006a6a <_printf_i+0x32>
 8006a54:	2f00      	cmp	r7, #0
 8006a56:	f000 80d8 	beq.w	8006c0a <_printf_i+0x1d2>
 8006a5a:	2f58      	cmp	r7, #88	; 0x58
 8006a5c:	f000 80a3 	beq.w	8006ba6 <_printf_i+0x16e>
 8006a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a68:	e03a      	b.n	8006ae0 <_printf_i+0xa8>
 8006a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a6e:	2b15      	cmp	r3, #21
 8006a70:	d8f6      	bhi.n	8006a60 <_printf_i+0x28>
 8006a72:	a101      	add	r1, pc, #4	; (adr r1, 8006a78 <_printf_i+0x40>)
 8006a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a78:	08006ad1 	.word	0x08006ad1
 8006a7c:	08006ae5 	.word	0x08006ae5
 8006a80:	08006a61 	.word	0x08006a61
 8006a84:	08006a61 	.word	0x08006a61
 8006a88:	08006a61 	.word	0x08006a61
 8006a8c:	08006a61 	.word	0x08006a61
 8006a90:	08006ae5 	.word	0x08006ae5
 8006a94:	08006a61 	.word	0x08006a61
 8006a98:	08006a61 	.word	0x08006a61
 8006a9c:	08006a61 	.word	0x08006a61
 8006aa0:	08006a61 	.word	0x08006a61
 8006aa4:	08006bf1 	.word	0x08006bf1
 8006aa8:	08006b15 	.word	0x08006b15
 8006aac:	08006bd3 	.word	0x08006bd3
 8006ab0:	08006a61 	.word	0x08006a61
 8006ab4:	08006a61 	.word	0x08006a61
 8006ab8:	08006c13 	.word	0x08006c13
 8006abc:	08006a61 	.word	0x08006a61
 8006ac0:	08006b15 	.word	0x08006b15
 8006ac4:	08006a61 	.word	0x08006a61
 8006ac8:	08006a61 	.word	0x08006a61
 8006acc:	08006bdb 	.word	0x08006bdb
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	1d1a      	adds	r2, r3, #4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	602a      	str	r2, [r5, #0]
 8006ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0a3      	b.n	8006c2c <_printf_i+0x1f4>
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	6829      	ldr	r1, [r5, #0]
 8006ae8:	0606      	lsls	r6, r0, #24
 8006aea:	f101 0304 	add.w	r3, r1, #4
 8006aee:	d50a      	bpl.n	8006b06 <_printf_i+0xce>
 8006af0:	680e      	ldr	r6, [r1, #0]
 8006af2:	602b      	str	r3, [r5, #0]
 8006af4:	2e00      	cmp	r6, #0
 8006af6:	da03      	bge.n	8006b00 <_printf_i+0xc8>
 8006af8:	232d      	movs	r3, #45	; 0x2d
 8006afa:	4276      	negs	r6, r6
 8006afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b00:	485e      	ldr	r0, [pc, #376]	; (8006c7c <_printf_i+0x244>)
 8006b02:	230a      	movs	r3, #10
 8006b04:	e019      	b.n	8006b3a <_printf_i+0x102>
 8006b06:	680e      	ldr	r6, [r1, #0]
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b0e:	bf18      	it	ne
 8006b10:	b236      	sxthne	r6, r6
 8006b12:	e7ef      	b.n	8006af4 <_printf_i+0xbc>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	6820      	ldr	r0, [r4, #0]
 8006b18:	1d19      	adds	r1, r3, #4
 8006b1a:	6029      	str	r1, [r5, #0]
 8006b1c:	0601      	lsls	r1, r0, #24
 8006b1e:	d501      	bpl.n	8006b24 <_printf_i+0xec>
 8006b20:	681e      	ldr	r6, [r3, #0]
 8006b22:	e002      	b.n	8006b2a <_printf_i+0xf2>
 8006b24:	0646      	lsls	r6, r0, #25
 8006b26:	d5fb      	bpl.n	8006b20 <_printf_i+0xe8>
 8006b28:	881e      	ldrh	r6, [r3, #0]
 8006b2a:	4854      	ldr	r0, [pc, #336]	; (8006c7c <_printf_i+0x244>)
 8006b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b2e:	bf0c      	ite	eq
 8006b30:	2308      	moveq	r3, #8
 8006b32:	230a      	movne	r3, #10
 8006b34:	2100      	movs	r1, #0
 8006b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b3a:	6865      	ldr	r5, [r4, #4]
 8006b3c:	60a5      	str	r5, [r4, #8]
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	bfa2      	ittt	ge
 8006b42:	6821      	ldrge	r1, [r4, #0]
 8006b44:	f021 0104 	bicge.w	r1, r1, #4
 8006b48:	6021      	strge	r1, [r4, #0]
 8006b4a:	b90e      	cbnz	r6, 8006b50 <_printf_i+0x118>
 8006b4c:	2d00      	cmp	r5, #0
 8006b4e:	d04d      	beq.n	8006bec <_printf_i+0x1b4>
 8006b50:	4615      	mov	r5, r2
 8006b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b56:	fb03 6711 	mls	r7, r3, r1, r6
 8006b5a:	5dc7      	ldrb	r7, [r0, r7]
 8006b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b60:	4637      	mov	r7, r6
 8006b62:	42bb      	cmp	r3, r7
 8006b64:	460e      	mov	r6, r1
 8006b66:	d9f4      	bls.n	8006b52 <_printf_i+0x11a>
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d10b      	bne.n	8006b84 <_printf_i+0x14c>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	07de      	lsls	r6, r3, #31
 8006b70:	d508      	bpl.n	8006b84 <_printf_i+0x14c>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	6861      	ldr	r1, [r4, #4]
 8006b76:	4299      	cmp	r1, r3
 8006b78:	bfde      	ittt	le
 8006b7a:	2330      	movle	r3, #48	; 0x30
 8006b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006b84:	1b52      	subs	r2, r2, r5
 8006b86:	6122      	str	r2, [r4, #16]
 8006b88:	f8cd a000 	str.w	sl, [sp]
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	aa03      	add	r2, sp, #12
 8006b90:	4621      	mov	r1, r4
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7ff fee2 	bl	800695c <_printf_common>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d14c      	bne.n	8006c36 <_printf_i+0x1fe>
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ba0:	b004      	add	sp, #16
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba6:	4835      	ldr	r0, [pc, #212]	; (8006c7c <_printf_i+0x244>)
 8006ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bac:	6829      	ldr	r1, [r5, #0]
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bb4:	6029      	str	r1, [r5, #0]
 8006bb6:	061d      	lsls	r5, r3, #24
 8006bb8:	d514      	bpl.n	8006be4 <_printf_i+0x1ac>
 8006bba:	07df      	lsls	r7, r3, #31
 8006bbc:	bf44      	itt	mi
 8006bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8006bc2:	6023      	strmi	r3, [r4, #0]
 8006bc4:	b91e      	cbnz	r6, 8006bce <_printf_i+0x196>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	f023 0320 	bic.w	r3, r3, #32
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	2310      	movs	r3, #16
 8006bd0:	e7b0      	b.n	8006b34 <_printf_i+0xfc>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	f043 0320 	orr.w	r3, r3, #32
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	2378      	movs	r3, #120	; 0x78
 8006bdc:	4828      	ldr	r0, [pc, #160]	; (8006c80 <_printf_i+0x248>)
 8006bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006be2:	e7e3      	b.n	8006bac <_printf_i+0x174>
 8006be4:	0659      	lsls	r1, r3, #25
 8006be6:	bf48      	it	mi
 8006be8:	b2b6      	uxthmi	r6, r6
 8006bea:	e7e6      	b.n	8006bba <_printf_i+0x182>
 8006bec:	4615      	mov	r5, r2
 8006bee:	e7bb      	b.n	8006b68 <_printf_i+0x130>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	6826      	ldr	r6, [r4, #0]
 8006bf4:	6961      	ldr	r1, [r4, #20]
 8006bf6:	1d18      	adds	r0, r3, #4
 8006bf8:	6028      	str	r0, [r5, #0]
 8006bfa:	0635      	lsls	r5, r6, #24
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	d501      	bpl.n	8006c04 <_printf_i+0x1cc>
 8006c00:	6019      	str	r1, [r3, #0]
 8006c02:	e002      	b.n	8006c0a <_printf_i+0x1d2>
 8006c04:	0670      	lsls	r0, r6, #25
 8006c06:	d5fb      	bpl.n	8006c00 <_printf_i+0x1c8>
 8006c08:	8019      	strh	r1, [r3, #0]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	6123      	str	r3, [r4, #16]
 8006c0e:	4615      	mov	r5, r2
 8006c10:	e7ba      	b.n	8006b88 <_printf_i+0x150>
 8006c12:	682b      	ldr	r3, [r5, #0]
 8006c14:	1d1a      	adds	r2, r3, #4
 8006c16:	602a      	str	r2, [r5, #0]
 8006c18:	681d      	ldr	r5, [r3, #0]
 8006c1a:	6862      	ldr	r2, [r4, #4]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f7f9 fae6 	bl	80001f0 <memchr>
 8006c24:	b108      	cbz	r0, 8006c2a <_printf_i+0x1f2>
 8006c26:	1b40      	subs	r0, r0, r5
 8006c28:	6060      	str	r0, [r4, #4]
 8006c2a:	6863      	ldr	r3, [r4, #4]
 8006c2c:	6123      	str	r3, [r4, #16]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c34:	e7a8      	b.n	8006b88 <_printf_i+0x150>
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	462a      	mov	r2, r5
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	4640      	mov	r0, r8
 8006c3e:	47d0      	blx	sl
 8006c40:	3001      	adds	r0, #1
 8006c42:	d0ab      	beq.n	8006b9c <_printf_i+0x164>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	079b      	lsls	r3, r3, #30
 8006c48:	d413      	bmi.n	8006c72 <_printf_i+0x23a>
 8006c4a:	68e0      	ldr	r0, [r4, #12]
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	4298      	cmp	r0, r3
 8006c50:	bfb8      	it	lt
 8006c52:	4618      	movlt	r0, r3
 8006c54:	e7a4      	b.n	8006ba0 <_printf_i+0x168>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4632      	mov	r2, r6
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	47d0      	blx	sl
 8006c60:	3001      	adds	r0, #1
 8006c62:	d09b      	beq.n	8006b9c <_printf_i+0x164>
 8006c64:	3501      	adds	r5, #1
 8006c66:	68e3      	ldr	r3, [r4, #12]
 8006c68:	9903      	ldr	r1, [sp, #12]
 8006c6a:	1a5b      	subs	r3, r3, r1
 8006c6c:	42ab      	cmp	r3, r5
 8006c6e:	dcf2      	bgt.n	8006c56 <_printf_i+0x21e>
 8006c70:	e7eb      	b.n	8006c4a <_printf_i+0x212>
 8006c72:	2500      	movs	r5, #0
 8006c74:	f104 0619 	add.w	r6, r4, #25
 8006c78:	e7f5      	b.n	8006c66 <_printf_i+0x22e>
 8006c7a:	bf00      	nop
 8006c7c:	0800a8fc 	.word	0x0800a8fc
 8006c80:	0800a90d 	.word	0x0800a90d

08006c84 <iprintf>:
 8006c84:	b40f      	push	{r0, r1, r2, r3}
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <iprintf+0x2c>)
 8006c88:	b513      	push	{r0, r1, r4, lr}
 8006c8a:	681c      	ldr	r4, [r3, #0]
 8006c8c:	b124      	cbz	r4, 8006c98 <iprintf+0x14>
 8006c8e:	69a3      	ldr	r3, [r4, #24]
 8006c90:	b913      	cbnz	r3, 8006c98 <iprintf+0x14>
 8006c92:	4620      	mov	r0, r4
 8006c94:	f001 f96c 	bl	8007f70 <__sinit>
 8006c98:	ab05      	add	r3, sp, #20
 8006c9a:	9a04      	ldr	r2, [sp, #16]
 8006c9c:	68a1      	ldr	r1, [r4, #8]
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f002 f901 	bl	8008ea8 <_vfiprintf_r>
 8006ca6:	b002      	add	sp, #8
 8006ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cac:	b004      	add	sp, #16
 8006cae:	4770      	bx	lr
 8006cb0:	2000000c 	.word	0x2000000c

08006cb4 <_puts_r>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	460e      	mov	r6, r1
 8006cb8:	4605      	mov	r5, r0
 8006cba:	b118      	cbz	r0, 8006cc4 <_puts_r+0x10>
 8006cbc:	6983      	ldr	r3, [r0, #24]
 8006cbe:	b90b      	cbnz	r3, 8006cc4 <_puts_r+0x10>
 8006cc0:	f001 f956 	bl	8007f70 <__sinit>
 8006cc4:	69ab      	ldr	r3, [r5, #24]
 8006cc6:	68ac      	ldr	r4, [r5, #8]
 8006cc8:	b913      	cbnz	r3, 8006cd0 <_puts_r+0x1c>
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f001 f950 	bl	8007f70 <__sinit>
 8006cd0:	4b2c      	ldr	r3, [pc, #176]	; (8006d84 <_puts_r+0xd0>)
 8006cd2:	429c      	cmp	r4, r3
 8006cd4:	d120      	bne.n	8006d18 <_puts_r+0x64>
 8006cd6:	686c      	ldr	r4, [r5, #4]
 8006cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cda:	07db      	lsls	r3, r3, #31
 8006cdc:	d405      	bmi.n	8006cea <_puts_r+0x36>
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	0598      	lsls	r0, r3, #22
 8006ce2:	d402      	bmi.n	8006cea <_puts_r+0x36>
 8006ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ce6:	f001 f9e6 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	0719      	lsls	r1, r3, #28
 8006cee:	d51d      	bpl.n	8006d2c <_puts_r+0x78>
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	b1db      	cbz	r3, 8006d2c <_puts_r+0x78>
 8006cf4:	3e01      	subs	r6, #1
 8006cf6:	68a3      	ldr	r3, [r4, #8]
 8006cf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	60a3      	str	r3, [r4, #8]
 8006d00:	bb39      	cbnz	r1, 8006d52 <_puts_r+0x9e>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da38      	bge.n	8006d78 <_puts_r+0xc4>
 8006d06:	4622      	mov	r2, r4
 8006d08:	210a      	movs	r1, #10
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f000 f8ba 	bl	8006e84 <__swbuf_r>
 8006d10:	3001      	adds	r0, #1
 8006d12:	d011      	beq.n	8006d38 <_puts_r+0x84>
 8006d14:	250a      	movs	r5, #10
 8006d16:	e011      	b.n	8006d3c <_puts_r+0x88>
 8006d18:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <_puts_r+0xd4>)
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	d101      	bne.n	8006d22 <_puts_r+0x6e>
 8006d1e:	68ac      	ldr	r4, [r5, #8]
 8006d20:	e7da      	b.n	8006cd8 <_puts_r+0x24>
 8006d22:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <_puts_r+0xd8>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	bf08      	it	eq
 8006d28:	68ec      	ldreq	r4, [r5, #12]
 8006d2a:	e7d5      	b.n	8006cd8 <_puts_r+0x24>
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f90c 	bl	8006f4c <__swsetup_r>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d0dd      	beq.n	8006cf4 <_puts_r+0x40>
 8006d38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d3e:	07da      	lsls	r2, r3, #31
 8006d40:	d405      	bmi.n	8006d4e <_puts_r+0x9a>
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	059b      	lsls	r3, r3, #22
 8006d46:	d402      	bmi.n	8006d4e <_puts_r+0x9a>
 8006d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d4a:	f001 f9b5 	bl	80080b8 <__retarget_lock_release_recursive>
 8006d4e:	4628      	mov	r0, r5
 8006d50:	bd70      	pop	{r4, r5, r6, pc}
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da04      	bge.n	8006d60 <_puts_r+0xac>
 8006d56:	69a2      	ldr	r2, [r4, #24]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	dc06      	bgt.n	8006d6a <_puts_r+0xb6>
 8006d5c:	290a      	cmp	r1, #10
 8006d5e:	d004      	beq.n	8006d6a <_puts_r+0xb6>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	6022      	str	r2, [r4, #0]
 8006d66:	7019      	strb	r1, [r3, #0]
 8006d68:	e7c5      	b.n	8006cf6 <_puts_r+0x42>
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 f889 	bl	8006e84 <__swbuf_r>
 8006d72:	3001      	adds	r0, #1
 8006d74:	d1bf      	bne.n	8006cf6 <_puts_r+0x42>
 8006d76:	e7df      	b.n	8006d38 <_puts_r+0x84>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	250a      	movs	r5, #10
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	6022      	str	r2, [r4, #0]
 8006d80:	701d      	strb	r5, [r3, #0]
 8006d82:	e7db      	b.n	8006d3c <_puts_r+0x88>
 8006d84:	0800a9d0 	.word	0x0800a9d0
 8006d88:	0800a9f0 	.word	0x0800a9f0
 8006d8c:	0800a9b0 	.word	0x0800a9b0

08006d90 <puts>:
 8006d90:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <puts+0xc>)
 8006d92:	4601      	mov	r1, r0
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	f7ff bf8d 	b.w	8006cb4 <_puts_r>
 8006d9a:	bf00      	nop
 8006d9c:	2000000c 	.word	0x2000000c

08006da0 <siscanf>:
 8006da0:	b40e      	push	{r1, r2, r3}
 8006da2:	b510      	push	{r4, lr}
 8006da4:	b09f      	sub	sp, #124	; 0x7c
 8006da6:	ac21      	add	r4, sp, #132	; 0x84
 8006da8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006dac:	f854 2b04 	ldr.w	r2, [r4], #4
 8006db0:	9201      	str	r2, [sp, #4]
 8006db2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006db6:	9004      	str	r0, [sp, #16]
 8006db8:	9008      	str	r0, [sp, #32]
 8006dba:	f7f9 fa11 	bl	80001e0 <strlen>
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <siscanf+0x50>)
 8006dc0:	9005      	str	r0, [sp, #20]
 8006dc2:	9009      	str	r0, [sp, #36]	; 0x24
 8006dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8006dc6:	480b      	ldr	r0, [pc, #44]	; (8006df4 <siscanf+0x54>)
 8006dc8:	9a01      	ldr	r2, [sp, #4]
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	9403      	str	r4, [sp, #12]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9311      	str	r3, [sp, #68]	; 0x44
 8006dd2:	9316      	str	r3, [sp, #88]	; 0x58
 8006dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006ddc:	a904      	add	r1, sp, #16
 8006dde:	4623      	mov	r3, r4
 8006de0:	f001 fec0 	bl	8008b64 <__ssvfiscanf_r>
 8006de4:	b01f      	add	sp, #124	; 0x7c
 8006de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dea:	b003      	add	sp, #12
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	08006e1b 	.word	0x08006e1b
 8006df4:	2000000c 	.word	0x2000000c

08006df8 <__sread>:
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e00:	f002 fad4 	bl	80093ac <_read_r>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	bfab      	itete	ge
 8006e08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e0c:	181b      	addge	r3, r3, r0
 8006e0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e12:	bfac      	ite	ge
 8006e14:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e16:	81a3      	strhlt	r3, [r4, #12]
 8006e18:	bd10      	pop	{r4, pc}

08006e1a <__seofread>:
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	4770      	bx	lr

08006e1e <__swrite>:
 8006e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e22:	461f      	mov	r7, r3
 8006e24:	898b      	ldrh	r3, [r1, #12]
 8006e26:	05db      	lsls	r3, r3, #23
 8006e28:	4605      	mov	r5, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	4616      	mov	r6, r2
 8006e2e:	d505      	bpl.n	8006e3c <__swrite+0x1e>
 8006e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e34:	2302      	movs	r3, #2
 8006e36:	2200      	movs	r2, #0
 8006e38:	f001 f940 	bl	80080bc <_lseek_r>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	4632      	mov	r2, r6
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e52:	f000 b869 	b.w	8006f28 <_write_r>

08006e56 <__sseek>:
 8006e56:	b510      	push	{r4, lr}
 8006e58:	460c      	mov	r4, r1
 8006e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e5e:	f001 f92d 	bl	80080bc <_lseek_r>
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	bf15      	itete	ne
 8006e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e72:	81a3      	strheq	r3, [r4, #12]
 8006e74:	bf18      	it	ne
 8006e76:	81a3      	strhne	r3, [r4, #12]
 8006e78:	bd10      	pop	{r4, pc}

08006e7a <__sclose>:
 8006e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7e:	f000 b8d3 	b.w	8007028 <_close_r>
	...

08006e84 <__swbuf_r>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	460e      	mov	r6, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	b118      	cbz	r0, 8006e96 <__swbuf_r+0x12>
 8006e8e:	6983      	ldr	r3, [r0, #24]
 8006e90:	b90b      	cbnz	r3, 8006e96 <__swbuf_r+0x12>
 8006e92:	f001 f86d 	bl	8007f70 <__sinit>
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <__swbuf_r+0x98>)
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d12b      	bne.n	8006ef4 <__swbuf_r+0x70>
 8006e9c:	686c      	ldr	r4, [r5, #4]
 8006e9e:	69a3      	ldr	r3, [r4, #24]
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	071a      	lsls	r2, r3, #28
 8006ea6:	d52f      	bpl.n	8006f08 <__swbuf_r+0x84>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	b36b      	cbz	r3, 8006f08 <__swbuf_r+0x84>
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	6820      	ldr	r0, [r4, #0]
 8006eb0:	1ac0      	subs	r0, r0, r3
 8006eb2:	6963      	ldr	r3, [r4, #20]
 8006eb4:	b2f6      	uxtb	r6, r6
 8006eb6:	4283      	cmp	r3, r0
 8006eb8:	4637      	mov	r7, r6
 8006eba:	dc04      	bgt.n	8006ec6 <__swbuf_r+0x42>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 ffc2 	bl	8007e48 <_fflush_r>
 8006ec4:	bb30      	cbnz	r0, 8006f14 <__swbuf_r+0x90>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	60a3      	str	r3, [r4, #8]
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	701e      	strb	r6, [r3, #0]
 8006ed4:	6963      	ldr	r3, [r4, #20]
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	4283      	cmp	r3, r0
 8006eda:	d004      	beq.n	8006ee6 <__swbuf_r+0x62>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	07db      	lsls	r3, r3, #31
 8006ee0:	d506      	bpl.n	8006ef0 <__swbuf_r+0x6c>
 8006ee2:	2e0a      	cmp	r6, #10
 8006ee4:	d104      	bne.n	8006ef0 <__swbuf_r+0x6c>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 ffad 	bl	8007e48 <_fflush_r>
 8006eee:	b988      	cbnz	r0, 8006f14 <__swbuf_r+0x90>
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <__swbuf_r+0x9c>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <__swbuf_r+0x7a>
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	e7cf      	b.n	8006e9e <__swbuf_r+0x1a>
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <__swbuf_r+0xa0>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68ec      	ldreq	r4, [r5, #12]
 8006f06:	e7ca      	b.n	8006e9e <__swbuf_r+0x1a>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f81e 	bl	8006f4c <__swsetup_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d0cb      	beq.n	8006eac <__swbuf_r+0x28>
 8006f14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f18:	e7ea      	b.n	8006ef0 <__swbuf_r+0x6c>
 8006f1a:	bf00      	nop
 8006f1c:	0800a9d0 	.word	0x0800a9d0
 8006f20:	0800a9f0 	.word	0x0800a9f0
 8006f24:	0800a9b0 	.word	0x0800a9b0

08006f28 <_write_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <_write_r+0x20>)
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	4608      	mov	r0, r1
 8006f30:	4611      	mov	r1, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f7fa f830 	bl	8000f9c <_write>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_write_r+0x1e>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_write_r+0x1e>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	2000069c 	.word	0x2000069c

08006f4c <__swsetup_r>:
 8006f4c:	4b32      	ldr	r3, [pc, #200]	; (8007018 <__swsetup_r+0xcc>)
 8006f4e:	b570      	push	{r4, r5, r6, lr}
 8006f50:	681d      	ldr	r5, [r3, #0]
 8006f52:	4606      	mov	r6, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	b125      	cbz	r5, 8006f62 <__swsetup_r+0x16>
 8006f58:	69ab      	ldr	r3, [r5, #24]
 8006f5a:	b913      	cbnz	r3, 8006f62 <__swsetup_r+0x16>
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f001 f807 	bl	8007f70 <__sinit>
 8006f62:	4b2e      	ldr	r3, [pc, #184]	; (800701c <__swsetup_r+0xd0>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	d10f      	bne.n	8006f88 <__swsetup_r+0x3c>
 8006f68:	686c      	ldr	r4, [r5, #4]
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f70:	0719      	lsls	r1, r3, #28
 8006f72:	d42c      	bmi.n	8006fce <__swsetup_r+0x82>
 8006f74:	06dd      	lsls	r5, r3, #27
 8006f76:	d411      	bmi.n	8006f9c <__swsetup_r+0x50>
 8006f78:	2309      	movs	r3, #9
 8006f7a:	6033      	str	r3, [r6, #0]
 8006f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f86:	e03e      	b.n	8007006 <__swsetup_r+0xba>
 8006f88:	4b25      	ldr	r3, [pc, #148]	; (8007020 <__swsetup_r+0xd4>)
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d101      	bne.n	8006f92 <__swsetup_r+0x46>
 8006f8e:	68ac      	ldr	r4, [r5, #8]
 8006f90:	e7eb      	b.n	8006f6a <__swsetup_r+0x1e>
 8006f92:	4b24      	ldr	r3, [pc, #144]	; (8007024 <__swsetup_r+0xd8>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	bf08      	it	eq
 8006f98:	68ec      	ldreq	r4, [r5, #12]
 8006f9a:	e7e6      	b.n	8006f6a <__swsetup_r+0x1e>
 8006f9c:	0758      	lsls	r0, r3, #29
 8006f9e:	d512      	bpl.n	8006fc6 <__swsetup_r+0x7a>
 8006fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fa2:	b141      	cbz	r1, 8006fb6 <__swsetup_r+0x6a>
 8006fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	d002      	beq.n	8006fb2 <__swsetup_r+0x66>
 8006fac:	4630      	mov	r0, r6
 8006fae:	f001 fc9f 	bl	80088f0 <_free_r>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f043 0308 	orr.w	r3, r3, #8
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	b94b      	cbnz	r3, 8006fe6 <__swsetup_r+0x9a>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fdc:	d003      	beq.n	8006fe6 <__swsetup_r+0x9a>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f001 f8a3 	bl	800812c <__smakebuf_r>
 8006fe6:	89a0      	ldrh	r0, [r4, #12]
 8006fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fec:	f010 0301 	ands.w	r3, r0, #1
 8006ff0:	d00a      	beq.n	8007008 <__swsetup_r+0xbc>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60a3      	str	r3, [r4, #8]
 8006ff6:	6963      	ldr	r3, [r4, #20]
 8006ff8:	425b      	negs	r3, r3
 8006ffa:	61a3      	str	r3, [r4, #24]
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	b943      	cbnz	r3, 8007012 <__swsetup_r+0xc6>
 8007000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007004:	d1ba      	bne.n	8006f7c <__swsetup_r+0x30>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	0781      	lsls	r1, r0, #30
 800700a:	bf58      	it	pl
 800700c:	6963      	ldrpl	r3, [r4, #20]
 800700e:	60a3      	str	r3, [r4, #8]
 8007010:	e7f4      	b.n	8006ffc <__swsetup_r+0xb0>
 8007012:	2000      	movs	r0, #0
 8007014:	e7f7      	b.n	8007006 <__swsetup_r+0xba>
 8007016:	bf00      	nop
 8007018:	2000000c 	.word	0x2000000c
 800701c:	0800a9d0 	.word	0x0800a9d0
 8007020:	0800a9f0 	.word	0x0800a9f0
 8007024:	0800a9b0 	.word	0x0800a9b0

08007028 <_close_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d06      	ldr	r5, [pc, #24]	; (8007044 <_close_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f7fb fb03 	bl	800263e <_close>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_close_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_close_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	2000069c 	.word	0x2000069c

08007048 <quorem>:
 8007048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	6903      	ldr	r3, [r0, #16]
 800704e:	690c      	ldr	r4, [r1, #16]
 8007050:	42a3      	cmp	r3, r4
 8007052:	4607      	mov	r7, r0
 8007054:	f2c0 8081 	blt.w	800715a <quorem+0x112>
 8007058:	3c01      	subs	r4, #1
 800705a:	f101 0814 	add.w	r8, r1, #20
 800705e:	f100 0514 	add.w	r5, r0, #20
 8007062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800706c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007070:	3301      	adds	r3, #1
 8007072:	429a      	cmp	r2, r3
 8007074:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800707c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007080:	d331      	bcc.n	80070e6 <quorem+0x9e>
 8007082:	f04f 0e00 	mov.w	lr, #0
 8007086:	4640      	mov	r0, r8
 8007088:	46ac      	mov	ip, r5
 800708a:	46f2      	mov	sl, lr
 800708c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007090:	b293      	uxth	r3, r2
 8007092:	fb06 e303 	mla	r3, r6, r3, lr
 8007096:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800709a:	b29b      	uxth	r3, r3
 800709c:	ebaa 0303 	sub.w	r3, sl, r3
 80070a0:	f8dc a000 	ldr.w	sl, [ip]
 80070a4:	0c12      	lsrs	r2, r2, #16
 80070a6:	fa13 f38a 	uxtah	r3, r3, sl
 80070aa:	fb06 e202 	mla	r2, r6, r2, lr
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	9b00      	ldr	r3, [sp, #0]
 80070b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070b6:	b292      	uxth	r2, r2
 80070b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80070c4:	4581      	cmp	r9, r0
 80070c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ca:	f84c 3b04 	str.w	r3, [ip], #4
 80070ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070d2:	d2db      	bcs.n	800708c <quorem+0x44>
 80070d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80070d8:	b92b      	cbnz	r3, 80070e6 <quorem+0x9e>
 80070da:	9b01      	ldr	r3, [sp, #4]
 80070dc:	3b04      	subs	r3, #4
 80070de:	429d      	cmp	r5, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	d32e      	bcc.n	8007142 <quorem+0xfa>
 80070e4:	613c      	str	r4, [r7, #16]
 80070e6:	4638      	mov	r0, r7
 80070e8:	f001 faea 	bl	80086c0 <__mcmp>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	db24      	blt.n	800713a <quorem+0xf2>
 80070f0:	3601      	adds	r6, #1
 80070f2:	4628      	mov	r0, r5
 80070f4:	f04f 0c00 	mov.w	ip, #0
 80070f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80070fc:	f8d0 e000 	ldr.w	lr, [r0]
 8007100:	b293      	uxth	r3, r2
 8007102:	ebac 0303 	sub.w	r3, ip, r3
 8007106:	0c12      	lsrs	r2, r2, #16
 8007108:	fa13 f38e 	uxtah	r3, r3, lr
 800710c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007114:	b29b      	uxth	r3, r3
 8007116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800711a:	45c1      	cmp	r9, r8
 800711c:	f840 3b04 	str.w	r3, [r0], #4
 8007120:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007124:	d2e8      	bcs.n	80070f8 <quorem+0xb0>
 8007126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800712a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800712e:	b922      	cbnz	r2, 800713a <quorem+0xf2>
 8007130:	3b04      	subs	r3, #4
 8007132:	429d      	cmp	r5, r3
 8007134:	461a      	mov	r2, r3
 8007136:	d30a      	bcc.n	800714e <quorem+0x106>
 8007138:	613c      	str	r4, [r7, #16]
 800713a:	4630      	mov	r0, r6
 800713c:	b003      	add	sp, #12
 800713e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	3b04      	subs	r3, #4
 8007146:	2a00      	cmp	r2, #0
 8007148:	d1cc      	bne.n	80070e4 <quorem+0x9c>
 800714a:	3c01      	subs	r4, #1
 800714c:	e7c7      	b.n	80070de <quorem+0x96>
 800714e:	6812      	ldr	r2, [r2, #0]
 8007150:	3b04      	subs	r3, #4
 8007152:	2a00      	cmp	r2, #0
 8007154:	d1f0      	bne.n	8007138 <quorem+0xf0>
 8007156:	3c01      	subs	r4, #1
 8007158:	e7eb      	b.n	8007132 <quorem+0xea>
 800715a:	2000      	movs	r0, #0
 800715c:	e7ee      	b.n	800713c <quorem+0xf4>
	...

08007160 <_dtoa_r>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	ed2d 8b04 	vpush	{d8-d9}
 8007168:	ec57 6b10 	vmov	r6, r7, d0
 800716c:	b093      	sub	sp, #76	; 0x4c
 800716e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007170:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007174:	9106      	str	r1, [sp, #24]
 8007176:	ee10 aa10 	vmov	sl, s0
 800717a:	4604      	mov	r4, r0
 800717c:	9209      	str	r2, [sp, #36]	; 0x24
 800717e:	930c      	str	r3, [sp, #48]	; 0x30
 8007180:	46bb      	mov	fp, r7
 8007182:	b975      	cbnz	r5, 80071a2 <_dtoa_r+0x42>
 8007184:	2010      	movs	r0, #16
 8007186:	f001 f811 	bl	80081ac <malloc>
 800718a:	4602      	mov	r2, r0
 800718c:	6260      	str	r0, [r4, #36]	; 0x24
 800718e:	b920      	cbnz	r0, 800719a <_dtoa_r+0x3a>
 8007190:	4ba7      	ldr	r3, [pc, #668]	; (8007430 <_dtoa_r+0x2d0>)
 8007192:	21ea      	movs	r1, #234	; 0xea
 8007194:	48a7      	ldr	r0, [pc, #668]	; (8007434 <_dtoa_r+0x2d4>)
 8007196:	f002 fa95 	bl	80096c4 <__assert_func>
 800719a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800719e:	6005      	str	r5, [r0, #0]
 80071a0:	60c5      	str	r5, [r0, #12]
 80071a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a4:	6819      	ldr	r1, [r3, #0]
 80071a6:	b151      	cbz	r1, 80071be <_dtoa_r+0x5e>
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	604a      	str	r2, [r1, #4]
 80071ac:	2301      	movs	r3, #1
 80071ae:	4093      	lsls	r3, r2
 80071b0:	608b      	str	r3, [r1, #8]
 80071b2:	4620      	mov	r0, r4
 80071b4:	f001 f842 	bl	800823c <_Bfree>
 80071b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ba:	2200      	movs	r2, #0
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	1e3b      	subs	r3, r7, #0
 80071c0:	bfaa      	itet	ge
 80071c2:	2300      	movge	r3, #0
 80071c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80071c8:	f8c8 3000 	strge.w	r3, [r8]
 80071cc:	4b9a      	ldr	r3, [pc, #616]	; (8007438 <_dtoa_r+0x2d8>)
 80071ce:	bfbc      	itt	lt
 80071d0:	2201      	movlt	r2, #1
 80071d2:	f8c8 2000 	strlt.w	r2, [r8]
 80071d6:	ea33 030b 	bics.w	r3, r3, fp
 80071da:	d11b      	bne.n	8007214 <_dtoa_r+0xb4>
 80071dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071de:	f242 730f 	movw	r3, #9999	; 0x270f
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071e8:	4333      	orrs	r3, r6
 80071ea:	f000 8592 	beq.w	8007d12 <_dtoa_r+0xbb2>
 80071ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f0:	b963      	cbnz	r3, 800720c <_dtoa_r+0xac>
 80071f2:	4b92      	ldr	r3, [pc, #584]	; (800743c <_dtoa_r+0x2dc>)
 80071f4:	e022      	b.n	800723c <_dtoa_r+0xdc>
 80071f6:	4b92      	ldr	r3, [pc, #584]	; (8007440 <_dtoa_r+0x2e0>)
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	3308      	adds	r3, #8
 80071fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	9801      	ldr	r0, [sp, #4]
 8007202:	b013      	add	sp, #76	; 0x4c
 8007204:	ecbd 8b04 	vpop	{d8-d9}
 8007208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	4b8b      	ldr	r3, [pc, #556]	; (800743c <_dtoa_r+0x2dc>)
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	3303      	adds	r3, #3
 8007212:	e7f3      	b.n	80071fc <_dtoa_r+0x9c>
 8007214:	2200      	movs	r2, #0
 8007216:	2300      	movs	r3, #0
 8007218:	4650      	mov	r0, sl
 800721a:	4659      	mov	r1, fp
 800721c:	f7f9 fc5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007220:	ec4b ab19 	vmov	d9, sl, fp
 8007224:	4680      	mov	r8, r0
 8007226:	b158      	cbz	r0, 8007240 <_dtoa_r+0xe0>
 8007228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800722a:	2301      	movs	r3, #1
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 856b 	beq.w	8007d0c <_dtoa_r+0xbac>
 8007236:	4883      	ldr	r0, [pc, #524]	; (8007444 <_dtoa_r+0x2e4>)
 8007238:	6018      	str	r0, [r3, #0]
 800723a:	1e43      	subs	r3, r0, #1
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	e7df      	b.n	8007200 <_dtoa_r+0xa0>
 8007240:	ec4b ab10 	vmov	d0, sl, fp
 8007244:	aa10      	add	r2, sp, #64	; 0x40
 8007246:	a911      	add	r1, sp, #68	; 0x44
 8007248:	4620      	mov	r0, r4
 800724a:	f001 fadf 	bl	800880c <__d2b>
 800724e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007252:	ee08 0a10 	vmov	s16, r0
 8007256:	2d00      	cmp	r5, #0
 8007258:	f000 8084 	beq.w	8007364 <_dtoa_r+0x204>
 800725c:	ee19 3a90 	vmov	r3, s19
 8007260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007264:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007268:	4656      	mov	r6, sl
 800726a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800726e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007272:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007276:	4b74      	ldr	r3, [pc, #464]	; (8007448 <_dtoa_r+0x2e8>)
 8007278:	2200      	movs	r2, #0
 800727a:	4630      	mov	r0, r6
 800727c:	4639      	mov	r1, r7
 800727e:	f7f9 f80b 	bl	8000298 <__aeabi_dsub>
 8007282:	a365      	add	r3, pc, #404	; (adr r3, 8007418 <_dtoa_r+0x2b8>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f9 f9be 	bl	8000608 <__aeabi_dmul>
 800728c:	a364      	add	r3, pc, #400	; (adr r3, 8007420 <_dtoa_r+0x2c0>)
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f7f9 f803 	bl	800029c <__adddf3>
 8007296:	4606      	mov	r6, r0
 8007298:	4628      	mov	r0, r5
 800729a:	460f      	mov	r7, r1
 800729c:	f7f9 f94a 	bl	8000534 <__aeabi_i2d>
 80072a0:	a361      	add	r3, pc, #388	; (adr r3, 8007428 <_dtoa_r+0x2c8>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f9 f9af 	bl	8000608 <__aeabi_dmul>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4630      	mov	r0, r6
 80072b0:	4639      	mov	r1, r7
 80072b2:	f7f8 fff3 	bl	800029c <__adddf3>
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	f7f9 fc55 	bl	8000b68 <__aeabi_d2iz>
 80072be:	2200      	movs	r2, #0
 80072c0:	9000      	str	r0, [sp, #0]
 80072c2:	2300      	movs	r3, #0
 80072c4:	4630      	mov	r0, r6
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f9 fc10 	bl	8000aec <__aeabi_dcmplt>
 80072cc:	b150      	cbz	r0, 80072e4 <_dtoa_r+0x184>
 80072ce:	9800      	ldr	r0, [sp, #0]
 80072d0:	f7f9 f930 	bl	8000534 <__aeabi_i2d>
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	f7f9 fbfe 	bl	8000ad8 <__aeabi_dcmpeq>
 80072dc:	b910      	cbnz	r0, 80072e4 <_dtoa_r+0x184>
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	9b00      	ldr	r3, [sp, #0]
 80072e6:	2b16      	cmp	r3, #22
 80072e8:	d85a      	bhi.n	80073a0 <_dtoa_r+0x240>
 80072ea:	9a00      	ldr	r2, [sp, #0]
 80072ec:	4b57      	ldr	r3, [pc, #348]	; (800744c <_dtoa_r+0x2ec>)
 80072ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	ec51 0b19 	vmov	r0, r1, d9
 80072fa:	f7f9 fbf7 	bl	8000aec <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d050      	beq.n	80073a4 <_dtoa_r+0x244>
 8007302:	9b00      	ldr	r3, [sp, #0]
 8007304:	3b01      	subs	r3, #1
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	930b      	str	r3, [sp, #44]	; 0x2c
 800730c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800730e:	1b5d      	subs	r5, r3, r5
 8007310:	1e6b      	subs	r3, r5, #1
 8007312:	9305      	str	r3, [sp, #20]
 8007314:	bf45      	ittet	mi
 8007316:	f1c5 0301 	rsbmi	r3, r5, #1
 800731a:	9304      	strmi	r3, [sp, #16]
 800731c:	2300      	movpl	r3, #0
 800731e:	2300      	movmi	r3, #0
 8007320:	bf4c      	ite	mi
 8007322:	9305      	strmi	r3, [sp, #20]
 8007324:	9304      	strpl	r3, [sp, #16]
 8007326:	9b00      	ldr	r3, [sp, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	db3d      	blt.n	80073a8 <_dtoa_r+0x248>
 800732c:	9b05      	ldr	r3, [sp, #20]
 800732e:	9a00      	ldr	r2, [sp, #0]
 8007330:	920a      	str	r2, [sp, #40]	; 0x28
 8007332:	4413      	add	r3, r2
 8007334:	9305      	str	r3, [sp, #20]
 8007336:	2300      	movs	r3, #0
 8007338:	9307      	str	r3, [sp, #28]
 800733a:	9b06      	ldr	r3, [sp, #24]
 800733c:	2b09      	cmp	r3, #9
 800733e:	f200 8089 	bhi.w	8007454 <_dtoa_r+0x2f4>
 8007342:	2b05      	cmp	r3, #5
 8007344:	bfc4      	itt	gt
 8007346:	3b04      	subgt	r3, #4
 8007348:	9306      	strgt	r3, [sp, #24]
 800734a:	9b06      	ldr	r3, [sp, #24]
 800734c:	f1a3 0302 	sub.w	r3, r3, #2
 8007350:	bfcc      	ite	gt
 8007352:	2500      	movgt	r5, #0
 8007354:	2501      	movle	r5, #1
 8007356:	2b03      	cmp	r3, #3
 8007358:	f200 8087 	bhi.w	800746a <_dtoa_r+0x30a>
 800735c:	e8df f003 	tbb	[pc, r3]
 8007360:	59383a2d 	.word	0x59383a2d
 8007364:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007368:	441d      	add	r5, r3
 800736a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800736e:	2b20      	cmp	r3, #32
 8007370:	bfc1      	itttt	gt
 8007372:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007376:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800737a:	fa0b f303 	lslgt.w	r3, fp, r3
 800737e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007382:	bfda      	itte	le
 8007384:	f1c3 0320 	rsble	r3, r3, #32
 8007388:	fa06 f003 	lslle.w	r0, r6, r3
 800738c:	4318      	orrgt	r0, r3
 800738e:	f7f9 f8c1 	bl	8000514 <__aeabi_ui2d>
 8007392:	2301      	movs	r3, #1
 8007394:	4606      	mov	r6, r0
 8007396:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800739a:	3d01      	subs	r5, #1
 800739c:	930e      	str	r3, [sp, #56]	; 0x38
 800739e:	e76a      	b.n	8007276 <_dtoa_r+0x116>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e7b2      	b.n	800730a <_dtoa_r+0x1aa>
 80073a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80073a6:	e7b1      	b.n	800730c <_dtoa_r+0x1ac>
 80073a8:	9b04      	ldr	r3, [sp, #16]
 80073aa:	9a00      	ldr	r2, [sp, #0]
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	4253      	negs	r3, r2
 80073b2:	9307      	str	r3, [sp, #28]
 80073b4:	2300      	movs	r3, #0
 80073b6:	930a      	str	r3, [sp, #40]	; 0x28
 80073b8:	e7bf      	b.n	800733a <_dtoa_r+0x1da>
 80073ba:	2300      	movs	r3, #0
 80073bc:	9308      	str	r3, [sp, #32]
 80073be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dc55      	bgt.n	8007470 <_dtoa_r+0x310>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073ca:	461a      	mov	r2, r3
 80073cc:	9209      	str	r2, [sp, #36]	; 0x24
 80073ce:	e00c      	b.n	80073ea <_dtoa_r+0x28a>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e7f3      	b.n	80073bc <_dtoa_r+0x25c>
 80073d4:	2300      	movs	r3, #0
 80073d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073d8:	9308      	str	r3, [sp, #32]
 80073da:	9b00      	ldr	r3, [sp, #0]
 80073dc:	4413      	add	r3, r2
 80073de:	9302      	str	r3, [sp, #8]
 80073e0:	3301      	adds	r3, #1
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	9303      	str	r3, [sp, #12]
 80073e6:	bfb8      	it	lt
 80073e8:	2301      	movlt	r3, #1
 80073ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073ec:	2200      	movs	r2, #0
 80073ee:	6042      	str	r2, [r0, #4]
 80073f0:	2204      	movs	r2, #4
 80073f2:	f102 0614 	add.w	r6, r2, #20
 80073f6:	429e      	cmp	r6, r3
 80073f8:	6841      	ldr	r1, [r0, #4]
 80073fa:	d93d      	bls.n	8007478 <_dtoa_r+0x318>
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 fedd 	bl	80081bc <_Balloc>
 8007402:	9001      	str	r0, [sp, #4]
 8007404:	2800      	cmp	r0, #0
 8007406:	d13b      	bne.n	8007480 <_dtoa_r+0x320>
 8007408:	4b11      	ldr	r3, [pc, #68]	; (8007450 <_dtoa_r+0x2f0>)
 800740a:	4602      	mov	r2, r0
 800740c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007410:	e6c0      	b.n	8007194 <_dtoa_r+0x34>
 8007412:	2301      	movs	r3, #1
 8007414:	e7df      	b.n	80073d6 <_dtoa_r+0x276>
 8007416:	bf00      	nop
 8007418:	636f4361 	.word	0x636f4361
 800741c:	3fd287a7 	.word	0x3fd287a7
 8007420:	8b60c8b3 	.word	0x8b60c8b3
 8007424:	3fc68a28 	.word	0x3fc68a28
 8007428:	509f79fb 	.word	0x509f79fb
 800742c:	3fd34413 	.word	0x3fd34413
 8007430:	0800a92b 	.word	0x0800a92b
 8007434:	0800a942 	.word	0x0800a942
 8007438:	7ff00000 	.word	0x7ff00000
 800743c:	0800a927 	.word	0x0800a927
 8007440:	0800a91e 	.word	0x0800a91e
 8007444:	0800ab82 	.word	0x0800ab82
 8007448:	3ff80000 	.word	0x3ff80000
 800744c:	0800aa98 	.word	0x0800aa98
 8007450:	0800a99d 	.word	0x0800a99d
 8007454:	2501      	movs	r5, #1
 8007456:	2300      	movs	r3, #0
 8007458:	9306      	str	r3, [sp, #24]
 800745a:	9508      	str	r5, [sp, #32]
 800745c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007460:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	2312      	movs	r3, #18
 8007468:	e7b0      	b.n	80073cc <_dtoa_r+0x26c>
 800746a:	2301      	movs	r3, #1
 800746c:	9308      	str	r3, [sp, #32]
 800746e:	e7f5      	b.n	800745c <_dtoa_r+0x2fc>
 8007470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007472:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007476:	e7b8      	b.n	80073ea <_dtoa_r+0x28a>
 8007478:	3101      	adds	r1, #1
 800747a:	6041      	str	r1, [r0, #4]
 800747c:	0052      	lsls	r2, r2, #1
 800747e:	e7b8      	b.n	80073f2 <_dtoa_r+0x292>
 8007480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007482:	9a01      	ldr	r2, [sp, #4]
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	2b0e      	cmp	r3, #14
 800748a:	f200 809d 	bhi.w	80075c8 <_dtoa_r+0x468>
 800748e:	2d00      	cmp	r5, #0
 8007490:	f000 809a 	beq.w	80075c8 <_dtoa_r+0x468>
 8007494:	9b00      	ldr	r3, [sp, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	dd32      	ble.n	8007500 <_dtoa_r+0x3a0>
 800749a:	4ab7      	ldr	r2, [pc, #732]	; (8007778 <_dtoa_r+0x618>)
 800749c:	f003 030f 	and.w	r3, r3, #15
 80074a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074a8:	9b00      	ldr	r3, [sp, #0]
 80074aa:	05d8      	lsls	r0, r3, #23
 80074ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80074b0:	d516      	bpl.n	80074e0 <_dtoa_r+0x380>
 80074b2:	4bb2      	ldr	r3, [pc, #712]	; (800777c <_dtoa_r+0x61c>)
 80074b4:	ec51 0b19 	vmov	r0, r1, d9
 80074b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074bc:	f7f9 f9ce 	bl	800085c <__aeabi_ddiv>
 80074c0:	f007 070f 	and.w	r7, r7, #15
 80074c4:	4682      	mov	sl, r0
 80074c6:	468b      	mov	fp, r1
 80074c8:	2503      	movs	r5, #3
 80074ca:	4eac      	ldr	r6, [pc, #688]	; (800777c <_dtoa_r+0x61c>)
 80074cc:	b957      	cbnz	r7, 80074e4 <_dtoa_r+0x384>
 80074ce:	4642      	mov	r2, r8
 80074d0:	464b      	mov	r3, r9
 80074d2:	4650      	mov	r0, sl
 80074d4:	4659      	mov	r1, fp
 80074d6:	f7f9 f9c1 	bl	800085c <__aeabi_ddiv>
 80074da:	4682      	mov	sl, r0
 80074dc:	468b      	mov	fp, r1
 80074de:	e028      	b.n	8007532 <_dtoa_r+0x3d2>
 80074e0:	2502      	movs	r5, #2
 80074e2:	e7f2      	b.n	80074ca <_dtoa_r+0x36a>
 80074e4:	07f9      	lsls	r1, r7, #31
 80074e6:	d508      	bpl.n	80074fa <_dtoa_r+0x39a>
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074f0:	f7f9 f88a 	bl	8000608 <__aeabi_dmul>
 80074f4:	3501      	adds	r5, #1
 80074f6:	4680      	mov	r8, r0
 80074f8:	4689      	mov	r9, r1
 80074fa:	107f      	asrs	r7, r7, #1
 80074fc:	3608      	adds	r6, #8
 80074fe:	e7e5      	b.n	80074cc <_dtoa_r+0x36c>
 8007500:	f000 809b 	beq.w	800763a <_dtoa_r+0x4da>
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	4f9d      	ldr	r7, [pc, #628]	; (800777c <_dtoa_r+0x61c>)
 8007508:	425e      	negs	r6, r3
 800750a:	4b9b      	ldr	r3, [pc, #620]	; (8007778 <_dtoa_r+0x618>)
 800750c:	f006 020f 	and.w	r2, r6, #15
 8007510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	ec51 0b19 	vmov	r0, r1, d9
 800751c:	f7f9 f874 	bl	8000608 <__aeabi_dmul>
 8007520:	1136      	asrs	r6, r6, #4
 8007522:	4682      	mov	sl, r0
 8007524:	468b      	mov	fp, r1
 8007526:	2300      	movs	r3, #0
 8007528:	2502      	movs	r5, #2
 800752a:	2e00      	cmp	r6, #0
 800752c:	d17a      	bne.n	8007624 <_dtoa_r+0x4c4>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1d3      	bne.n	80074da <_dtoa_r+0x37a>
 8007532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8082 	beq.w	800763e <_dtoa_r+0x4de>
 800753a:	4b91      	ldr	r3, [pc, #580]	; (8007780 <_dtoa_r+0x620>)
 800753c:	2200      	movs	r2, #0
 800753e:	4650      	mov	r0, sl
 8007540:	4659      	mov	r1, fp
 8007542:	f7f9 fad3 	bl	8000aec <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	d079      	beq.n	800763e <_dtoa_r+0x4de>
 800754a:	9b03      	ldr	r3, [sp, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d076      	beq.n	800763e <_dtoa_r+0x4de>
 8007550:	9b02      	ldr	r3, [sp, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	dd36      	ble.n	80075c4 <_dtoa_r+0x464>
 8007556:	9b00      	ldr	r3, [sp, #0]
 8007558:	4650      	mov	r0, sl
 800755a:	4659      	mov	r1, fp
 800755c:	1e5f      	subs	r7, r3, #1
 800755e:	2200      	movs	r2, #0
 8007560:	4b88      	ldr	r3, [pc, #544]	; (8007784 <_dtoa_r+0x624>)
 8007562:	f7f9 f851 	bl	8000608 <__aeabi_dmul>
 8007566:	9e02      	ldr	r6, [sp, #8]
 8007568:	4682      	mov	sl, r0
 800756a:	468b      	mov	fp, r1
 800756c:	3501      	adds	r5, #1
 800756e:	4628      	mov	r0, r5
 8007570:	f7f8 ffe0 	bl	8000534 <__aeabi_i2d>
 8007574:	4652      	mov	r2, sl
 8007576:	465b      	mov	r3, fp
 8007578:	f7f9 f846 	bl	8000608 <__aeabi_dmul>
 800757c:	4b82      	ldr	r3, [pc, #520]	; (8007788 <_dtoa_r+0x628>)
 800757e:	2200      	movs	r2, #0
 8007580:	f7f8 fe8c 	bl	800029c <__adddf3>
 8007584:	46d0      	mov	r8, sl
 8007586:	46d9      	mov	r9, fp
 8007588:	4682      	mov	sl, r0
 800758a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800758e:	2e00      	cmp	r6, #0
 8007590:	d158      	bne.n	8007644 <_dtoa_r+0x4e4>
 8007592:	4b7e      	ldr	r3, [pc, #504]	; (800778c <_dtoa_r+0x62c>)
 8007594:	2200      	movs	r2, #0
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	f7f8 fe7d 	bl	8000298 <__aeabi_dsub>
 800759e:	4652      	mov	r2, sl
 80075a0:	465b      	mov	r3, fp
 80075a2:	4680      	mov	r8, r0
 80075a4:	4689      	mov	r9, r1
 80075a6:	f7f9 fabf 	bl	8000b28 <__aeabi_dcmpgt>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	f040 8295 	bne.w	8007ada <_dtoa_r+0x97a>
 80075b0:	4652      	mov	r2, sl
 80075b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075b6:	4640      	mov	r0, r8
 80075b8:	4649      	mov	r1, r9
 80075ba:	f7f9 fa97 	bl	8000aec <__aeabi_dcmplt>
 80075be:	2800      	cmp	r0, #0
 80075c0:	f040 8289 	bne.w	8007ad6 <_dtoa_r+0x976>
 80075c4:	ec5b ab19 	vmov	sl, fp, d9
 80075c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f2c0 8148 	blt.w	8007860 <_dtoa_r+0x700>
 80075d0:	9a00      	ldr	r2, [sp, #0]
 80075d2:	2a0e      	cmp	r2, #14
 80075d4:	f300 8144 	bgt.w	8007860 <_dtoa_r+0x700>
 80075d8:	4b67      	ldr	r3, [pc, #412]	; (8007778 <_dtoa_r+0x618>)
 80075da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f280 80d5 	bge.w	8007794 <_dtoa_r+0x634>
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f300 80d1 	bgt.w	8007794 <_dtoa_r+0x634>
 80075f2:	f040 826f 	bne.w	8007ad4 <_dtoa_r+0x974>
 80075f6:	4b65      	ldr	r3, [pc, #404]	; (800778c <_dtoa_r+0x62c>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	4640      	mov	r0, r8
 80075fc:	4649      	mov	r1, r9
 80075fe:	f7f9 f803 	bl	8000608 <__aeabi_dmul>
 8007602:	4652      	mov	r2, sl
 8007604:	465b      	mov	r3, fp
 8007606:	f7f9 fa85 	bl	8000b14 <__aeabi_dcmpge>
 800760a:	9e03      	ldr	r6, [sp, #12]
 800760c:	4637      	mov	r7, r6
 800760e:	2800      	cmp	r0, #0
 8007610:	f040 8245 	bne.w	8007a9e <_dtoa_r+0x93e>
 8007614:	9d01      	ldr	r5, [sp, #4]
 8007616:	2331      	movs	r3, #49	; 0x31
 8007618:	f805 3b01 	strb.w	r3, [r5], #1
 800761c:	9b00      	ldr	r3, [sp, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	e240      	b.n	8007aa6 <_dtoa_r+0x946>
 8007624:	07f2      	lsls	r2, r6, #31
 8007626:	d505      	bpl.n	8007634 <_dtoa_r+0x4d4>
 8007628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800762c:	f7f8 ffec 	bl	8000608 <__aeabi_dmul>
 8007630:	3501      	adds	r5, #1
 8007632:	2301      	movs	r3, #1
 8007634:	1076      	asrs	r6, r6, #1
 8007636:	3708      	adds	r7, #8
 8007638:	e777      	b.n	800752a <_dtoa_r+0x3ca>
 800763a:	2502      	movs	r5, #2
 800763c:	e779      	b.n	8007532 <_dtoa_r+0x3d2>
 800763e:	9f00      	ldr	r7, [sp, #0]
 8007640:	9e03      	ldr	r6, [sp, #12]
 8007642:	e794      	b.n	800756e <_dtoa_r+0x40e>
 8007644:	9901      	ldr	r1, [sp, #4]
 8007646:	4b4c      	ldr	r3, [pc, #304]	; (8007778 <_dtoa_r+0x618>)
 8007648:	4431      	add	r1, r6
 800764a:	910d      	str	r1, [sp, #52]	; 0x34
 800764c:	9908      	ldr	r1, [sp, #32]
 800764e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007656:	2900      	cmp	r1, #0
 8007658:	d043      	beq.n	80076e2 <_dtoa_r+0x582>
 800765a:	494d      	ldr	r1, [pc, #308]	; (8007790 <_dtoa_r+0x630>)
 800765c:	2000      	movs	r0, #0
 800765e:	f7f9 f8fd 	bl	800085c <__aeabi_ddiv>
 8007662:	4652      	mov	r2, sl
 8007664:	465b      	mov	r3, fp
 8007666:	f7f8 fe17 	bl	8000298 <__aeabi_dsub>
 800766a:	9d01      	ldr	r5, [sp, #4]
 800766c:	4682      	mov	sl, r0
 800766e:	468b      	mov	fp, r1
 8007670:	4649      	mov	r1, r9
 8007672:	4640      	mov	r0, r8
 8007674:	f7f9 fa78 	bl	8000b68 <__aeabi_d2iz>
 8007678:	4606      	mov	r6, r0
 800767a:	f7f8 ff5b 	bl	8000534 <__aeabi_i2d>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4640      	mov	r0, r8
 8007684:	4649      	mov	r1, r9
 8007686:	f7f8 fe07 	bl	8000298 <__aeabi_dsub>
 800768a:	3630      	adds	r6, #48	; 0x30
 800768c:	f805 6b01 	strb.w	r6, [r5], #1
 8007690:	4652      	mov	r2, sl
 8007692:	465b      	mov	r3, fp
 8007694:	4680      	mov	r8, r0
 8007696:	4689      	mov	r9, r1
 8007698:	f7f9 fa28 	bl	8000aec <__aeabi_dcmplt>
 800769c:	2800      	cmp	r0, #0
 800769e:	d163      	bne.n	8007768 <_dtoa_r+0x608>
 80076a0:	4642      	mov	r2, r8
 80076a2:	464b      	mov	r3, r9
 80076a4:	4936      	ldr	r1, [pc, #216]	; (8007780 <_dtoa_r+0x620>)
 80076a6:	2000      	movs	r0, #0
 80076a8:	f7f8 fdf6 	bl	8000298 <__aeabi_dsub>
 80076ac:	4652      	mov	r2, sl
 80076ae:	465b      	mov	r3, fp
 80076b0:	f7f9 fa1c 	bl	8000aec <__aeabi_dcmplt>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f040 80b5 	bne.w	8007824 <_dtoa_r+0x6c4>
 80076ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076bc:	429d      	cmp	r5, r3
 80076be:	d081      	beq.n	80075c4 <_dtoa_r+0x464>
 80076c0:	4b30      	ldr	r3, [pc, #192]	; (8007784 <_dtoa_r+0x624>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	4650      	mov	r0, sl
 80076c6:	4659      	mov	r1, fp
 80076c8:	f7f8 ff9e 	bl	8000608 <__aeabi_dmul>
 80076cc:	4b2d      	ldr	r3, [pc, #180]	; (8007784 <_dtoa_r+0x624>)
 80076ce:	4682      	mov	sl, r0
 80076d0:	468b      	mov	fp, r1
 80076d2:	4640      	mov	r0, r8
 80076d4:	4649      	mov	r1, r9
 80076d6:	2200      	movs	r2, #0
 80076d8:	f7f8 ff96 	bl	8000608 <__aeabi_dmul>
 80076dc:	4680      	mov	r8, r0
 80076de:	4689      	mov	r9, r1
 80076e0:	e7c6      	b.n	8007670 <_dtoa_r+0x510>
 80076e2:	4650      	mov	r0, sl
 80076e4:	4659      	mov	r1, fp
 80076e6:	f7f8 ff8f 	bl	8000608 <__aeabi_dmul>
 80076ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ec:	9d01      	ldr	r5, [sp, #4]
 80076ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80076f0:	4682      	mov	sl, r0
 80076f2:	468b      	mov	fp, r1
 80076f4:	4649      	mov	r1, r9
 80076f6:	4640      	mov	r0, r8
 80076f8:	f7f9 fa36 	bl	8000b68 <__aeabi_d2iz>
 80076fc:	4606      	mov	r6, r0
 80076fe:	f7f8 ff19 	bl	8000534 <__aeabi_i2d>
 8007702:	3630      	adds	r6, #48	; 0x30
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4640      	mov	r0, r8
 800770a:	4649      	mov	r1, r9
 800770c:	f7f8 fdc4 	bl	8000298 <__aeabi_dsub>
 8007710:	f805 6b01 	strb.w	r6, [r5], #1
 8007714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007716:	429d      	cmp	r5, r3
 8007718:	4680      	mov	r8, r0
 800771a:	4689      	mov	r9, r1
 800771c:	f04f 0200 	mov.w	r2, #0
 8007720:	d124      	bne.n	800776c <_dtoa_r+0x60c>
 8007722:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <_dtoa_r+0x630>)
 8007724:	4650      	mov	r0, sl
 8007726:	4659      	mov	r1, fp
 8007728:	f7f8 fdb8 	bl	800029c <__adddf3>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	f7f9 f9f8 	bl	8000b28 <__aeabi_dcmpgt>
 8007738:	2800      	cmp	r0, #0
 800773a:	d173      	bne.n	8007824 <_dtoa_r+0x6c4>
 800773c:	4652      	mov	r2, sl
 800773e:	465b      	mov	r3, fp
 8007740:	4913      	ldr	r1, [pc, #76]	; (8007790 <_dtoa_r+0x630>)
 8007742:	2000      	movs	r0, #0
 8007744:	f7f8 fda8 	bl	8000298 <__aeabi_dsub>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4640      	mov	r0, r8
 800774e:	4649      	mov	r1, r9
 8007750:	f7f9 f9cc 	bl	8000aec <__aeabi_dcmplt>
 8007754:	2800      	cmp	r0, #0
 8007756:	f43f af35 	beq.w	80075c4 <_dtoa_r+0x464>
 800775a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800775c:	1e6b      	subs	r3, r5, #1
 800775e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007760:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007764:	2b30      	cmp	r3, #48	; 0x30
 8007766:	d0f8      	beq.n	800775a <_dtoa_r+0x5fa>
 8007768:	9700      	str	r7, [sp, #0]
 800776a:	e049      	b.n	8007800 <_dtoa_r+0x6a0>
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <_dtoa_r+0x624>)
 800776e:	f7f8 ff4b 	bl	8000608 <__aeabi_dmul>
 8007772:	4680      	mov	r8, r0
 8007774:	4689      	mov	r9, r1
 8007776:	e7bd      	b.n	80076f4 <_dtoa_r+0x594>
 8007778:	0800aa98 	.word	0x0800aa98
 800777c:	0800aa70 	.word	0x0800aa70
 8007780:	3ff00000 	.word	0x3ff00000
 8007784:	40240000 	.word	0x40240000
 8007788:	401c0000 	.word	0x401c0000
 800778c:	40140000 	.word	0x40140000
 8007790:	3fe00000 	.word	0x3fe00000
 8007794:	9d01      	ldr	r5, [sp, #4]
 8007796:	4656      	mov	r6, sl
 8007798:	465f      	mov	r7, fp
 800779a:	4642      	mov	r2, r8
 800779c:	464b      	mov	r3, r9
 800779e:	4630      	mov	r0, r6
 80077a0:	4639      	mov	r1, r7
 80077a2:	f7f9 f85b 	bl	800085c <__aeabi_ddiv>
 80077a6:	f7f9 f9df 	bl	8000b68 <__aeabi_d2iz>
 80077aa:	4682      	mov	sl, r0
 80077ac:	f7f8 fec2 	bl	8000534 <__aeabi_i2d>
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	f7f8 ff28 	bl	8000608 <__aeabi_dmul>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4630      	mov	r0, r6
 80077be:	4639      	mov	r1, r7
 80077c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80077c4:	f7f8 fd68 	bl	8000298 <__aeabi_dsub>
 80077c8:	f805 6b01 	strb.w	r6, [r5], #1
 80077cc:	9e01      	ldr	r6, [sp, #4]
 80077ce:	9f03      	ldr	r7, [sp, #12]
 80077d0:	1bae      	subs	r6, r5, r6
 80077d2:	42b7      	cmp	r7, r6
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	d135      	bne.n	8007846 <_dtoa_r+0x6e6>
 80077da:	f7f8 fd5f 	bl	800029c <__adddf3>
 80077de:	4642      	mov	r2, r8
 80077e0:	464b      	mov	r3, r9
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	f7f9 f99f 	bl	8000b28 <__aeabi_dcmpgt>
 80077ea:	b9d0      	cbnz	r0, 8007822 <_dtoa_r+0x6c2>
 80077ec:	4642      	mov	r2, r8
 80077ee:	464b      	mov	r3, r9
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f970 	bl	8000ad8 <__aeabi_dcmpeq>
 80077f8:	b110      	cbz	r0, 8007800 <_dtoa_r+0x6a0>
 80077fa:	f01a 0f01 	tst.w	sl, #1
 80077fe:	d110      	bne.n	8007822 <_dtoa_r+0x6c2>
 8007800:	4620      	mov	r0, r4
 8007802:	ee18 1a10 	vmov	r1, s16
 8007806:	f000 fd19 	bl	800823c <_Bfree>
 800780a:	2300      	movs	r3, #0
 800780c:	9800      	ldr	r0, [sp, #0]
 800780e:	702b      	strb	r3, [r5, #0]
 8007810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007812:	3001      	adds	r0, #1
 8007814:	6018      	str	r0, [r3, #0]
 8007816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007818:	2b00      	cmp	r3, #0
 800781a:	f43f acf1 	beq.w	8007200 <_dtoa_r+0xa0>
 800781e:	601d      	str	r5, [r3, #0]
 8007820:	e4ee      	b.n	8007200 <_dtoa_r+0xa0>
 8007822:	9f00      	ldr	r7, [sp, #0]
 8007824:	462b      	mov	r3, r5
 8007826:	461d      	mov	r5, r3
 8007828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800782c:	2a39      	cmp	r2, #57	; 0x39
 800782e:	d106      	bne.n	800783e <_dtoa_r+0x6de>
 8007830:	9a01      	ldr	r2, [sp, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d1f7      	bne.n	8007826 <_dtoa_r+0x6c6>
 8007836:	9901      	ldr	r1, [sp, #4]
 8007838:	2230      	movs	r2, #48	; 0x30
 800783a:	3701      	adds	r7, #1
 800783c:	700a      	strb	r2, [r1, #0]
 800783e:	781a      	ldrb	r2, [r3, #0]
 8007840:	3201      	adds	r2, #1
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	e790      	b.n	8007768 <_dtoa_r+0x608>
 8007846:	4ba6      	ldr	r3, [pc, #664]	; (8007ae0 <_dtoa_r+0x980>)
 8007848:	2200      	movs	r2, #0
 800784a:	f7f8 fedd 	bl	8000608 <__aeabi_dmul>
 800784e:	2200      	movs	r2, #0
 8007850:	2300      	movs	r3, #0
 8007852:	4606      	mov	r6, r0
 8007854:	460f      	mov	r7, r1
 8007856:	f7f9 f93f 	bl	8000ad8 <__aeabi_dcmpeq>
 800785a:	2800      	cmp	r0, #0
 800785c:	d09d      	beq.n	800779a <_dtoa_r+0x63a>
 800785e:	e7cf      	b.n	8007800 <_dtoa_r+0x6a0>
 8007860:	9a08      	ldr	r2, [sp, #32]
 8007862:	2a00      	cmp	r2, #0
 8007864:	f000 80d7 	beq.w	8007a16 <_dtoa_r+0x8b6>
 8007868:	9a06      	ldr	r2, [sp, #24]
 800786a:	2a01      	cmp	r2, #1
 800786c:	f300 80ba 	bgt.w	80079e4 <_dtoa_r+0x884>
 8007870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007872:	2a00      	cmp	r2, #0
 8007874:	f000 80b2 	beq.w	80079dc <_dtoa_r+0x87c>
 8007878:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800787c:	9e07      	ldr	r6, [sp, #28]
 800787e:	9d04      	ldr	r5, [sp, #16]
 8007880:	9a04      	ldr	r2, [sp, #16]
 8007882:	441a      	add	r2, r3
 8007884:	9204      	str	r2, [sp, #16]
 8007886:	9a05      	ldr	r2, [sp, #20]
 8007888:	2101      	movs	r1, #1
 800788a:	441a      	add	r2, r3
 800788c:	4620      	mov	r0, r4
 800788e:	9205      	str	r2, [sp, #20]
 8007890:	f000 fd8c 	bl	80083ac <__i2b>
 8007894:	4607      	mov	r7, r0
 8007896:	2d00      	cmp	r5, #0
 8007898:	dd0c      	ble.n	80078b4 <_dtoa_r+0x754>
 800789a:	9b05      	ldr	r3, [sp, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	dd09      	ble.n	80078b4 <_dtoa_r+0x754>
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	9a04      	ldr	r2, [sp, #16]
 80078a4:	bfa8      	it	ge
 80078a6:	462b      	movge	r3, r5
 80078a8:	1ad2      	subs	r2, r2, r3
 80078aa:	9204      	str	r2, [sp, #16]
 80078ac:	9a05      	ldr	r2, [sp, #20]
 80078ae:	1aed      	subs	r5, r5, r3
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	9305      	str	r3, [sp, #20]
 80078b4:	9b07      	ldr	r3, [sp, #28]
 80078b6:	b31b      	cbz	r3, 8007900 <_dtoa_r+0x7a0>
 80078b8:	9b08      	ldr	r3, [sp, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80af 	beq.w	8007a1e <_dtoa_r+0x8be>
 80078c0:	2e00      	cmp	r6, #0
 80078c2:	dd13      	ble.n	80078ec <_dtoa_r+0x78c>
 80078c4:	4639      	mov	r1, r7
 80078c6:	4632      	mov	r2, r6
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fe2f 	bl	800852c <__pow5mult>
 80078ce:	ee18 2a10 	vmov	r2, s16
 80078d2:	4601      	mov	r1, r0
 80078d4:	4607      	mov	r7, r0
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 fd7e 	bl	80083d8 <__multiply>
 80078dc:	ee18 1a10 	vmov	r1, s16
 80078e0:	4680      	mov	r8, r0
 80078e2:	4620      	mov	r0, r4
 80078e4:	f000 fcaa 	bl	800823c <_Bfree>
 80078e8:	ee08 8a10 	vmov	s16, r8
 80078ec:	9b07      	ldr	r3, [sp, #28]
 80078ee:	1b9a      	subs	r2, r3, r6
 80078f0:	d006      	beq.n	8007900 <_dtoa_r+0x7a0>
 80078f2:	ee18 1a10 	vmov	r1, s16
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 fe18 	bl	800852c <__pow5mult>
 80078fc:	ee08 0a10 	vmov	s16, r0
 8007900:	2101      	movs	r1, #1
 8007902:	4620      	mov	r0, r4
 8007904:	f000 fd52 	bl	80083ac <__i2b>
 8007908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	4606      	mov	r6, r0
 800790e:	f340 8088 	ble.w	8007a22 <_dtoa_r+0x8c2>
 8007912:	461a      	mov	r2, r3
 8007914:	4601      	mov	r1, r0
 8007916:	4620      	mov	r0, r4
 8007918:	f000 fe08 	bl	800852c <__pow5mult>
 800791c:	9b06      	ldr	r3, [sp, #24]
 800791e:	2b01      	cmp	r3, #1
 8007920:	4606      	mov	r6, r0
 8007922:	f340 8081 	ble.w	8007a28 <_dtoa_r+0x8c8>
 8007926:	f04f 0800 	mov.w	r8, #0
 800792a:	6933      	ldr	r3, [r6, #16]
 800792c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007930:	6918      	ldr	r0, [r3, #16]
 8007932:	f000 fceb 	bl	800830c <__hi0bits>
 8007936:	f1c0 0020 	rsb	r0, r0, #32
 800793a:	9b05      	ldr	r3, [sp, #20]
 800793c:	4418      	add	r0, r3
 800793e:	f010 001f 	ands.w	r0, r0, #31
 8007942:	f000 8092 	beq.w	8007a6a <_dtoa_r+0x90a>
 8007946:	f1c0 0320 	rsb	r3, r0, #32
 800794a:	2b04      	cmp	r3, #4
 800794c:	f340 808a 	ble.w	8007a64 <_dtoa_r+0x904>
 8007950:	f1c0 001c 	rsb	r0, r0, #28
 8007954:	9b04      	ldr	r3, [sp, #16]
 8007956:	4403      	add	r3, r0
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	9b05      	ldr	r3, [sp, #20]
 800795c:	4403      	add	r3, r0
 800795e:	4405      	add	r5, r0
 8007960:	9305      	str	r3, [sp, #20]
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	dd07      	ble.n	8007978 <_dtoa_r+0x818>
 8007968:	ee18 1a10 	vmov	r1, s16
 800796c:	461a      	mov	r2, r3
 800796e:	4620      	mov	r0, r4
 8007970:	f000 fe36 	bl	80085e0 <__lshift>
 8007974:	ee08 0a10 	vmov	s16, r0
 8007978:	9b05      	ldr	r3, [sp, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dd05      	ble.n	800798a <_dtoa_r+0x82a>
 800797e:	4631      	mov	r1, r6
 8007980:	461a      	mov	r2, r3
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fe2c 	bl	80085e0 <__lshift>
 8007988:	4606      	mov	r6, r0
 800798a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d06e      	beq.n	8007a6e <_dtoa_r+0x90e>
 8007990:	ee18 0a10 	vmov	r0, s16
 8007994:	4631      	mov	r1, r6
 8007996:	f000 fe93 	bl	80086c0 <__mcmp>
 800799a:	2800      	cmp	r0, #0
 800799c:	da67      	bge.n	8007a6e <_dtoa_r+0x90e>
 800799e:	9b00      	ldr	r3, [sp, #0]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	ee18 1a10 	vmov	r1, s16
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	220a      	movs	r2, #10
 80079aa:	2300      	movs	r3, #0
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 fc67 	bl	8008280 <__multadd>
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	ee08 0a10 	vmov	s16, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 81b1 	beq.w	8007d20 <_dtoa_r+0xbc0>
 80079be:	2300      	movs	r3, #0
 80079c0:	4639      	mov	r1, r7
 80079c2:	220a      	movs	r2, #10
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fc5b 	bl	8008280 <__multadd>
 80079ca:	9b02      	ldr	r3, [sp, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	4607      	mov	r7, r0
 80079d0:	f300 808e 	bgt.w	8007af0 <_dtoa_r+0x990>
 80079d4:	9b06      	ldr	r3, [sp, #24]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	dc51      	bgt.n	8007a7e <_dtoa_r+0x91e>
 80079da:	e089      	b.n	8007af0 <_dtoa_r+0x990>
 80079dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079e2:	e74b      	b.n	800787c <_dtoa_r+0x71c>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	1e5e      	subs	r6, r3, #1
 80079e8:	9b07      	ldr	r3, [sp, #28]
 80079ea:	42b3      	cmp	r3, r6
 80079ec:	bfbf      	itttt	lt
 80079ee:	9b07      	ldrlt	r3, [sp, #28]
 80079f0:	9607      	strlt	r6, [sp, #28]
 80079f2:	1af2      	sublt	r2, r6, r3
 80079f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80079f6:	bfb6      	itet	lt
 80079f8:	189b      	addlt	r3, r3, r2
 80079fa:	1b9e      	subge	r6, r3, r6
 80079fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	bfb8      	it	lt
 8007a02:	2600      	movlt	r6, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bfb7      	itett	lt
 8007a08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007a0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007a10:	1a9d      	sublt	r5, r3, r2
 8007a12:	2300      	movlt	r3, #0
 8007a14:	e734      	b.n	8007880 <_dtoa_r+0x720>
 8007a16:	9e07      	ldr	r6, [sp, #28]
 8007a18:	9d04      	ldr	r5, [sp, #16]
 8007a1a:	9f08      	ldr	r7, [sp, #32]
 8007a1c:	e73b      	b.n	8007896 <_dtoa_r+0x736>
 8007a1e:	9a07      	ldr	r2, [sp, #28]
 8007a20:	e767      	b.n	80078f2 <_dtoa_r+0x792>
 8007a22:	9b06      	ldr	r3, [sp, #24]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	dc18      	bgt.n	8007a5a <_dtoa_r+0x8fa>
 8007a28:	f1ba 0f00 	cmp.w	sl, #0
 8007a2c:	d115      	bne.n	8007a5a <_dtoa_r+0x8fa>
 8007a2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a32:	b993      	cbnz	r3, 8007a5a <_dtoa_r+0x8fa>
 8007a34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a38:	0d1b      	lsrs	r3, r3, #20
 8007a3a:	051b      	lsls	r3, r3, #20
 8007a3c:	b183      	cbz	r3, 8007a60 <_dtoa_r+0x900>
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	3301      	adds	r3, #1
 8007a42:	9304      	str	r3, [sp, #16]
 8007a44:	9b05      	ldr	r3, [sp, #20]
 8007a46:	3301      	adds	r3, #1
 8007a48:	9305      	str	r3, [sp, #20]
 8007a4a:	f04f 0801 	mov.w	r8, #1
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f47f af6a 	bne.w	800792a <_dtoa_r+0x7ca>
 8007a56:	2001      	movs	r0, #1
 8007a58:	e76f      	b.n	800793a <_dtoa_r+0x7da>
 8007a5a:	f04f 0800 	mov.w	r8, #0
 8007a5e:	e7f6      	b.n	8007a4e <_dtoa_r+0x8ee>
 8007a60:	4698      	mov	r8, r3
 8007a62:	e7f4      	b.n	8007a4e <_dtoa_r+0x8ee>
 8007a64:	f43f af7d 	beq.w	8007962 <_dtoa_r+0x802>
 8007a68:	4618      	mov	r0, r3
 8007a6a:	301c      	adds	r0, #28
 8007a6c:	e772      	b.n	8007954 <_dtoa_r+0x7f4>
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	dc37      	bgt.n	8007ae4 <_dtoa_r+0x984>
 8007a74:	9b06      	ldr	r3, [sp, #24]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	dd34      	ble.n	8007ae4 <_dtoa_r+0x984>
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	9302      	str	r3, [sp, #8]
 8007a7e:	9b02      	ldr	r3, [sp, #8]
 8007a80:	b96b      	cbnz	r3, 8007a9e <_dtoa_r+0x93e>
 8007a82:	4631      	mov	r1, r6
 8007a84:	2205      	movs	r2, #5
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 fbfa 	bl	8008280 <__multadd>
 8007a8c:	4601      	mov	r1, r0
 8007a8e:	4606      	mov	r6, r0
 8007a90:	ee18 0a10 	vmov	r0, s16
 8007a94:	f000 fe14 	bl	80086c0 <__mcmp>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f73f adbb 	bgt.w	8007614 <_dtoa_r+0x4b4>
 8007a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa0:	9d01      	ldr	r5, [sp, #4]
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	f04f 0800 	mov.w	r8, #0
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 fbc5 	bl	800823c <_Bfree>
 8007ab2:	2f00      	cmp	r7, #0
 8007ab4:	f43f aea4 	beq.w	8007800 <_dtoa_r+0x6a0>
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	d005      	beq.n	8007aca <_dtoa_r+0x96a>
 8007abe:	45b8      	cmp	r8, r7
 8007ac0:	d003      	beq.n	8007aca <_dtoa_r+0x96a>
 8007ac2:	4641      	mov	r1, r8
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 fbb9 	bl	800823c <_Bfree>
 8007aca:	4639      	mov	r1, r7
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fbb5 	bl	800823c <_Bfree>
 8007ad2:	e695      	b.n	8007800 <_dtoa_r+0x6a0>
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	4637      	mov	r7, r6
 8007ad8:	e7e1      	b.n	8007a9e <_dtoa_r+0x93e>
 8007ada:	9700      	str	r7, [sp, #0]
 8007adc:	4637      	mov	r7, r6
 8007ade:	e599      	b.n	8007614 <_dtoa_r+0x4b4>
 8007ae0:	40240000 	.word	0x40240000
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 80ca 	beq.w	8007c80 <_dtoa_r+0xb20>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	9302      	str	r3, [sp, #8]
 8007af0:	2d00      	cmp	r5, #0
 8007af2:	dd05      	ble.n	8007b00 <_dtoa_r+0x9a0>
 8007af4:	4639      	mov	r1, r7
 8007af6:	462a      	mov	r2, r5
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fd71 	bl	80085e0 <__lshift>
 8007afe:	4607      	mov	r7, r0
 8007b00:	f1b8 0f00 	cmp.w	r8, #0
 8007b04:	d05b      	beq.n	8007bbe <_dtoa_r+0xa5e>
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fb57 	bl	80081bc <_Balloc>
 8007b0e:	4605      	mov	r5, r0
 8007b10:	b928      	cbnz	r0, 8007b1e <_dtoa_r+0x9be>
 8007b12:	4b87      	ldr	r3, [pc, #540]	; (8007d30 <_dtoa_r+0xbd0>)
 8007b14:	4602      	mov	r2, r0
 8007b16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b1a:	f7ff bb3b 	b.w	8007194 <_dtoa_r+0x34>
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	3202      	adds	r2, #2
 8007b22:	0092      	lsls	r2, r2, #2
 8007b24:	f107 010c 	add.w	r1, r7, #12
 8007b28:	300c      	adds	r0, #12
 8007b2a:	f7fe fc2b 	bl	8006384 <memcpy>
 8007b2e:	2201      	movs	r2, #1
 8007b30:	4629      	mov	r1, r5
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 fd54 	bl	80085e0 <__lshift>
 8007b38:	9b01      	ldr	r3, [sp, #4]
 8007b3a:	f103 0901 	add.w	r9, r3, #1
 8007b3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007b42:	4413      	add	r3, r2
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	f00a 0301 	and.w	r3, sl, #1
 8007b4a:	46b8      	mov	r8, r7
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	4607      	mov	r7, r0
 8007b50:	4631      	mov	r1, r6
 8007b52:	ee18 0a10 	vmov	r0, s16
 8007b56:	f7ff fa77 	bl	8007048 <quorem>
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	9002      	str	r0, [sp, #8]
 8007b5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b62:	ee18 0a10 	vmov	r0, s16
 8007b66:	f000 fdab 	bl	80086c0 <__mcmp>
 8007b6a:	463a      	mov	r2, r7
 8007b6c:	9003      	str	r0, [sp, #12]
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fdc1 	bl	80086f8 <__mdiff>
 8007b76:	68c2      	ldr	r2, [r0, #12]
 8007b78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	bb02      	cbnz	r2, 8007bc2 <_dtoa_r+0xa62>
 8007b80:	4601      	mov	r1, r0
 8007b82:	ee18 0a10 	vmov	r0, s16
 8007b86:	f000 fd9b 	bl	80086c0 <__mcmp>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4620      	mov	r0, r4
 8007b90:	9207      	str	r2, [sp, #28]
 8007b92:	f000 fb53 	bl	800823c <_Bfree>
 8007b96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007b9a:	ea43 0102 	orr.w	r1, r3, r2
 8007b9e:	9b04      	ldr	r3, [sp, #16]
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	464d      	mov	r5, r9
 8007ba4:	d10f      	bne.n	8007bc6 <_dtoa_r+0xa66>
 8007ba6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007baa:	d02a      	beq.n	8007c02 <_dtoa_r+0xaa2>
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd02      	ble.n	8007bb8 <_dtoa_r+0xa58>
 8007bb2:	9b02      	ldr	r3, [sp, #8]
 8007bb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007bb8:	f88b a000 	strb.w	sl, [fp]
 8007bbc:	e775      	b.n	8007aaa <_dtoa_r+0x94a>
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	e7ba      	b.n	8007b38 <_dtoa_r+0x9d8>
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	e7e2      	b.n	8007b8c <_dtoa_r+0xa2c>
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	db04      	blt.n	8007bd6 <_dtoa_r+0xa76>
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	9904      	ldr	r1, [sp, #16]
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	d122      	bne.n	8007c1c <_dtoa_r+0xabc>
 8007bd6:	2a00      	cmp	r2, #0
 8007bd8:	ddee      	ble.n	8007bb8 <_dtoa_r+0xa58>
 8007bda:	ee18 1a10 	vmov	r1, s16
 8007bde:	2201      	movs	r2, #1
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 fcfd 	bl	80085e0 <__lshift>
 8007be6:	4631      	mov	r1, r6
 8007be8:	ee08 0a10 	vmov	s16, r0
 8007bec:	f000 fd68 	bl	80086c0 <__mcmp>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	dc03      	bgt.n	8007bfc <_dtoa_r+0xa9c>
 8007bf4:	d1e0      	bne.n	8007bb8 <_dtoa_r+0xa58>
 8007bf6:	f01a 0f01 	tst.w	sl, #1
 8007bfa:	d0dd      	beq.n	8007bb8 <_dtoa_r+0xa58>
 8007bfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c00:	d1d7      	bne.n	8007bb2 <_dtoa_r+0xa52>
 8007c02:	2339      	movs	r3, #57	; 0x39
 8007c04:	f88b 3000 	strb.w	r3, [fp]
 8007c08:	462b      	mov	r3, r5
 8007c0a:	461d      	mov	r5, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c12:	2a39      	cmp	r2, #57	; 0x39
 8007c14:	d071      	beq.n	8007cfa <_dtoa_r+0xb9a>
 8007c16:	3201      	adds	r2, #1
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	e746      	b.n	8007aaa <_dtoa_r+0x94a>
 8007c1c:	2a00      	cmp	r2, #0
 8007c1e:	dd07      	ble.n	8007c30 <_dtoa_r+0xad0>
 8007c20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c24:	d0ed      	beq.n	8007c02 <_dtoa_r+0xaa2>
 8007c26:	f10a 0301 	add.w	r3, sl, #1
 8007c2a:	f88b 3000 	strb.w	r3, [fp]
 8007c2e:	e73c      	b.n	8007aaa <_dtoa_r+0x94a>
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007c36:	4599      	cmp	r9, r3
 8007c38:	d047      	beq.n	8007cca <_dtoa_r+0xb6a>
 8007c3a:	ee18 1a10 	vmov	r1, s16
 8007c3e:	2300      	movs	r3, #0
 8007c40:	220a      	movs	r2, #10
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 fb1c 	bl	8008280 <__multadd>
 8007c48:	45b8      	cmp	r8, r7
 8007c4a:	ee08 0a10 	vmov	s16, r0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	f04f 020a 	mov.w	r2, #10
 8007c56:	4641      	mov	r1, r8
 8007c58:	4620      	mov	r0, r4
 8007c5a:	d106      	bne.n	8007c6a <_dtoa_r+0xb0a>
 8007c5c:	f000 fb10 	bl	8008280 <__multadd>
 8007c60:	4680      	mov	r8, r0
 8007c62:	4607      	mov	r7, r0
 8007c64:	f109 0901 	add.w	r9, r9, #1
 8007c68:	e772      	b.n	8007b50 <_dtoa_r+0x9f0>
 8007c6a:	f000 fb09 	bl	8008280 <__multadd>
 8007c6e:	4639      	mov	r1, r7
 8007c70:	4680      	mov	r8, r0
 8007c72:	2300      	movs	r3, #0
 8007c74:	220a      	movs	r2, #10
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 fb02 	bl	8008280 <__multadd>
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	e7f1      	b.n	8007c64 <_dtoa_r+0xb04>
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	9302      	str	r3, [sp, #8]
 8007c84:	9d01      	ldr	r5, [sp, #4]
 8007c86:	ee18 0a10 	vmov	r0, s16
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	f7ff f9dc 	bl	8007048 <quorem>
 8007c90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c94:	9b01      	ldr	r3, [sp, #4]
 8007c96:	f805 ab01 	strb.w	sl, [r5], #1
 8007c9a:	1aea      	subs	r2, r5, r3
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	dd09      	ble.n	8007cb6 <_dtoa_r+0xb56>
 8007ca2:	ee18 1a10 	vmov	r1, s16
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	220a      	movs	r2, #10
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 fae8 	bl	8008280 <__multadd>
 8007cb0:	ee08 0a10 	vmov	s16, r0
 8007cb4:	e7e7      	b.n	8007c86 <_dtoa_r+0xb26>
 8007cb6:	9b02      	ldr	r3, [sp, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bfc8      	it	gt
 8007cbc:	461d      	movgt	r5, r3
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	bfd8      	it	le
 8007cc2:	2501      	movle	r5, #1
 8007cc4:	441d      	add	r5, r3
 8007cc6:	f04f 0800 	mov.w	r8, #0
 8007cca:	ee18 1a10 	vmov	r1, s16
 8007cce:	2201      	movs	r2, #1
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fc85 	bl	80085e0 <__lshift>
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	ee08 0a10 	vmov	s16, r0
 8007cdc:	f000 fcf0 	bl	80086c0 <__mcmp>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	dc91      	bgt.n	8007c08 <_dtoa_r+0xaa8>
 8007ce4:	d102      	bne.n	8007cec <_dtoa_r+0xb8c>
 8007ce6:	f01a 0f01 	tst.w	sl, #1
 8007cea:	d18d      	bne.n	8007c08 <_dtoa_r+0xaa8>
 8007cec:	462b      	mov	r3, r5
 8007cee:	461d      	mov	r5, r3
 8007cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cf4:	2a30      	cmp	r2, #48	; 0x30
 8007cf6:	d0fa      	beq.n	8007cee <_dtoa_r+0xb8e>
 8007cf8:	e6d7      	b.n	8007aaa <_dtoa_r+0x94a>
 8007cfa:	9a01      	ldr	r2, [sp, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d184      	bne.n	8007c0a <_dtoa_r+0xaaa>
 8007d00:	9b00      	ldr	r3, [sp, #0]
 8007d02:	3301      	adds	r3, #1
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	2331      	movs	r3, #49	; 0x31
 8007d08:	7013      	strb	r3, [r2, #0]
 8007d0a:	e6ce      	b.n	8007aaa <_dtoa_r+0x94a>
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <_dtoa_r+0xbd4>)
 8007d0e:	f7ff ba95 	b.w	800723c <_dtoa_r+0xdc>
 8007d12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f47f aa6e 	bne.w	80071f6 <_dtoa_r+0x96>
 8007d1a:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <_dtoa_r+0xbd8>)
 8007d1c:	f7ff ba8e 	b.w	800723c <_dtoa_r+0xdc>
 8007d20:	9b02      	ldr	r3, [sp, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dcae      	bgt.n	8007c84 <_dtoa_r+0xb24>
 8007d26:	9b06      	ldr	r3, [sp, #24]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	f73f aea8 	bgt.w	8007a7e <_dtoa_r+0x91e>
 8007d2e:	e7a9      	b.n	8007c84 <_dtoa_r+0xb24>
 8007d30:	0800a99d 	.word	0x0800a99d
 8007d34:	0800ab81 	.word	0x0800ab81
 8007d38:	0800a91e 	.word	0x0800a91e

08007d3c <__sflush_r>:
 8007d3c:	898a      	ldrh	r2, [r1, #12]
 8007d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	4605      	mov	r5, r0
 8007d44:	0710      	lsls	r0, r2, #28
 8007d46:	460c      	mov	r4, r1
 8007d48:	d458      	bmi.n	8007dfc <__sflush_r+0xc0>
 8007d4a:	684b      	ldr	r3, [r1, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dc05      	bgt.n	8007d5c <__sflush_r+0x20>
 8007d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc02      	bgt.n	8007d5c <__sflush_r+0x20>
 8007d56:	2000      	movs	r0, #0
 8007d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d0f9      	beq.n	8007d56 <__sflush_r+0x1a>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d68:	682f      	ldr	r7, [r5, #0]
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	d032      	beq.n	8007dd4 <__sflush_r+0x98>
 8007d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	075a      	lsls	r2, r3, #29
 8007d74:	d505      	bpl.n	8007d82 <__sflush_r+0x46>
 8007d76:	6863      	ldr	r3, [r4, #4]
 8007d78:	1ac0      	subs	r0, r0, r3
 8007d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d7c:	b10b      	cbz	r3, 8007d82 <__sflush_r+0x46>
 8007d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d80:	1ac0      	subs	r0, r0, r3
 8007d82:	2300      	movs	r3, #0
 8007d84:	4602      	mov	r2, r0
 8007d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d88:	6a21      	ldr	r1, [r4, #32]
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b0      	blx	r6
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	d106      	bne.n	8007da2 <__sflush_r+0x66>
 8007d94:	6829      	ldr	r1, [r5, #0]
 8007d96:	291d      	cmp	r1, #29
 8007d98:	d82c      	bhi.n	8007df4 <__sflush_r+0xb8>
 8007d9a:	4a2a      	ldr	r2, [pc, #168]	; (8007e44 <__sflush_r+0x108>)
 8007d9c:	40ca      	lsrs	r2, r1
 8007d9e:	07d6      	lsls	r6, r2, #31
 8007da0:	d528      	bpl.n	8007df4 <__sflush_r+0xb8>
 8007da2:	2200      	movs	r2, #0
 8007da4:	6062      	str	r2, [r4, #4]
 8007da6:	04d9      	lsls	r1, r3, #19
 8007da8:	6922      	ldr	r2, [r4, #16]
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	d504      	bpl.n	8007db8 <__sflush_r+0x7c>
 8007dae:	1c42      	adds	r2, r0, #1
 8007db0:	d101      	bne.n	8007db6 <__sflush_r+0x7a>
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	b903      	cbnz	r3, 8007db8 <__sflush_r+0x7c>
 8007db6:	6560      	str	r0, [r4, #84]	; 0x54
 8007db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dba:	602f      	str	r7, [r5, #0]
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d0ca      	beq.n	8007d56 <__sflush_r+0x1a>
 8007dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	d002      	beq.n	8007dce <__sflush_r+0x92>
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f000 fd91 	bl	80088f0 <_free_r>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8007dd2:	e7c1      	b.n	8007d58 <__sflush_r+0x1c>
 8007dd4:	6a21      	ldr	r1, [r4, #32]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4628      	mov	r0, r5
 8007dda:	47b0      	blx	r6
 8007ddc:	1c41      	adds	r1, r0, #1
 8007dde:	d1c7      	bne.n	8007d70 <__sflush_r+0x34>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c4      	beq.n	8007d70 <__sflush_r+0x34>
 8007de6:	2b1d      	cmp	r3, #29
 8007de8:	d001      	beq.n	8007dee <__sflush_r+0xb2>
 8007dea:	2b16      	cmp	r3, #22
 8007dec:	d101      	bne.n	8007df2 <__sflush_r+0xb6>
 8007dee:	602f      	str	r7, [r5, #0]
 8007df0:	e7b1      	b.n	8007d56 <__sflush_r+0x1a>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	e7ad      	b.n	8007d58 <__sflush_r+0x1c>
 8007dfc:	690f      	ldr	r7, [r1, #16]
 8007dfe:	2f00      	cmp	r7, #0
 8007e00:	d0a9      	beq.n	8007d56 <__sflush_r+0x1a>
 8007e02:	0793      	lsls	r3, r2, #30
 8007e04:	680e      	ldr	r6, [r1, #0]
 8007e06:	bf08      	it	eq
 8007e08:	694b      	ldreq	r3, [r1, #20]
 8007e0a:	600f      	str	r7, [r1, #0]
 8007e0c:	bf18      	it	ne
 8007e0e:	2300      	movne	r3, #0
 8007e10:	eba6 0807 	sub.w	r8, r6, r7
 8007e14:	608b      	str	r3, [r1, #8]
 8007e16:	f1b8 0f00 	cmp.w	r8, #0
 8007e1a:	dd9c      	ble.n	8007d56 <__sflush_r+0x1a>
 8007e1c:	6a21      	ldr	r1, [r4, #32]
 8007e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e20:	4643      	mov	r3, r8
 8007e22:	463a      	mov	r2, r7
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b0      	blx	r6
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	dc06      	bgt.n	8007e3a <__sflush_r+0xfe>
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e38:	e78e      	b.n	8007d58 <__sflush_r+0x1c>
 8007e3a:	4407      	add	r7, r0
 8007e3c:	eba8 0800 	sub.w	r8, r8, r0
 8007e40:	e7e9      	b.n	8007e16 <__sflush_r+0xda>
 8007e42:	bf00      	nop
 8007e44:	20400001 	.word	0x20400001

08007e48 <_fflush_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	690b      	ldr	r3, [r1, #16]
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	b913      	cbnz	r3, 8007e58 <_fflush_r+0x10>
 8007e52:	2500      	movs	r5, #0
 8007e54:	4628      	mov	r0, r5
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	b118      	cbz	r0, 8007e62 <_fflush_r+0x1a>
 8007e5a:	6983      	ldr	r3, [r0, #24]
 8007e5c:	b90b      	cbnz	r3, 8007e62 <_fflush_r+0x1a>
 8007e5e:	f000 f887 	bl	8007f70 <__sinit>
 8007e62:	4b14      	ldr	r3, [pc, #80]	; (8007eb4 <_fflush_r+0x6c>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	d11b      	bne.n	8007ea0 <_fflush_r+0x58>
 8007e68:	686c      	ldr	r4, [r5, #4]
 8007e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0ef      	beq.n	8007e52 <_fflush_r+0xa>
 8007e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e74:	07d0      	lsls	r0, r2, #31
 8007e76:	d404      	bmi.n	8007e82 <_fflush_r+0x3a>
 8007e78:	0599      	lsls	r1, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_fflush_r+0x3a>
 8007e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7e:	f000 f91a 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8007e82:	4628      	mov	r0, r5
 8007e84:	4621      	mov	r1, r4
 8007e86:	f7ff ff59 	bl	8007d3c <__sflush_r>
 8007e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e8c:	07da      	lsls	r2, r3, #31
 8007e8e:	4605      	mov	r5, r0
 8007e90:	d4e0      	bmi.n	8007e54 <_fflush_r+0xc>
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	059b      	lsls	r3, r3, #22
 8007e96:	d4dd      	bmi.n	8007e54 <_fflush_r+0xc>
 8007e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e9a:	f000 f90d 	bl	80080b8 <__retarget_lock_release_recursive>
 8007e9e:	e7d9      	b.n	8007e54 <_fflush_r+0xc>
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <_fflush_r+0x70>)
 8007ea2:	429c      	cmp	r4, r3
 8007ea4:	d101      	bne.n	8007eaa <_fflush_r+0x62>
 8007ea6:	68ac      	ldr	r4, [r5, #8]
 8007ea8:	e7df      	b.n	8007e6a <_fflush_r+0x22>
 8007eaa:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <_fflush_r+0x74>)
 8007eac:	429c      	cmp	r4, r3
 8007eae:	bf08      	it	eq
 8007eb0:	68ec      	ldreq	r4, [r5, #12]
 8007eb2:	e7da      	b.n	8007e6a <_fflush_r+0x22>
 8007eb4:	0800a9d0 	.word	0x0800a9d0
 8007eb8:	0800a9f0 	.word	0x0800a9f0
 8007ebc:	0800a9b0 	.word	0x0800a9b0

08007ec0 <std>:
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	b510      	push	{r4, lr}
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8007eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ece:	6083      	str	r3, [r0, #8]
 8007ed0:	8181      	strh	r1, [r0, #12]
 8007ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ed4:	81c2      	strh	r2, [r0, #14]
 8007ed6:	6183      	str	r3, [r0, #24]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	2208      	movs	r2, #8
 8007edc:	305c      	adds	r0, #92	; 0x5c
 8007ede:	f7fe fa5f 	bl	80063a0 <memset>
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <std+0x38>)
 8007ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <std+0x3c>)
 8007ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eea:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <std+0x40>)
 8007eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eee:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <std+0x44>)
 8007ef0:	6224      	str	r4, [r4, #32]
 8007ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ef4:	bd10      	pop	{r4, pc}
 8007ef6:	bf00      	nop
 8007ef8:	08006df9 	.word	0x08006df9
 8007efc:	08006e1f 	.word	0x08006e1f
 8007f00:	08006e57 	.word	0x08006e57
 8007f04:	08006e7b 	.word	0x08006e7b

08007f08 <_cleanup_r>:
 8007f08:	4901      	ldr	r1, [pc, #4]	; (8007f10 <_cleanup_r+0x8>)
 8007f0a:	f000 b8af 	b.w	800806c <_fwalk_reent>
 8007f0e:	bf00      	nop
 8007f10:	08007e49 	.word	0x08007e49

08007f14 <__sfmoreglue>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	2268      	movs	r2, #104	; 0x68
 8007f18:	1e4d      	subs	r5, r1, #1
 8007f1a:	4355      	muls	r5, r2
 8007f1c:	460e      	mov	r6, r1
 8007f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f22:	f000 fd51 	bl	80089c8 <_malloc_r>
 8007f26:	4604      	mov	r4, r0
 8007f28:	b140      	cbz	r0, 8007f3c <__sfmoreglue+0x28>
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8007f30:	300c      	adds	r0, #12
 8007f32:	60a0      	str	r0, [r4, #8]
 8007f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f38:	f7fe fa32 	bl	80063a0 <memset>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}

08007f40 <__sfp_lock_acquire>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__sfp_lock_acquire+0x8>)
 8007f42:	f000 b8b8 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000691 	.word	0x20000691

08007f4c <__sfp_lock_release>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__sfp_lock_release+0x8>)
 8007f4e:	f000 b8b3 	b.w	80080b8 <__retarget_lock_release_recursive>
 8007f52:	bf00      	nop
 8007f54:	20000691 	.word	0x20000691

08007f58 <__sinit_lock_acquire>:
 8007f58:	4801      	ldr	r0, [pc, #4]	; (8007f60 <__sinit_lock_acquire+0x8>)
 8007f5a:	f000 b8ac 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8007f5e:	bf00      	nop
 8007f60:	20000692 	.word	0x20000692

08007f64 <__sinit_lock_release>:
 8007f64:	4801      	ldr	r0, [pc, #4]	; (8007f6c <__sinit_lock_release+0x8>)
 8007f66:	f000 b8a7 	b.w	80080b8 <__retarget_lock_release_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	20000692 	.word	0x20000692

08007f70 <__sinit>:
 8007f70:	b510      	push	{r4, lr}
 8007f72:	4604      	mov	r4, r0
 8007f74:	f7ff fff0 	bl	8007f58 <__sinit_lock_acquire>
 8007f78:	69a3      	ldr	r3, [r4, #24]
 8007f7a:	b11b      	cbz	r3, 8007f84 <__sinit+0x14>
 8007f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f80:	f7ff bff0 	b.w	8007f64 <__sinit_lock_release>
 8007f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f88:	6523      	str	r3, [r4, #80]	; 0x50
 8007f8a:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <__sinit+0x68>)
 8007f8c:	4a13      	ldr	r2, [pc, #76]	; (8007fdc <__sinit+0x6c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	bf04      	itt	eq
 8007f96:	2301      	moveq	r3, #1
 8007f98:	61a3      	streq	r3, [r4, #24]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f820 	bl	8007fe0 <__sfp>
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 f81c 	bl	8007fe0 <__sfp>
 8007fa8:	60a0      	str	r0, [r4, #8]
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f818 	bl	8007fe0 <__sfp>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	60e0      	str	r0, [r4, #12]
 8007fb4:	2104      	movs	r1, #4
 8007fb6:	6860      	ldr	r0, [r4, #4]
 8007fb8:	f7ff ff82 	bl	8007ec0 <std>
 8007fbc:	68a0      	ldr	r0, [r4, #8]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	2109      	movs	r1, #9
 8007fc2:	f7ff ff7d 	bl	8007ec0 <std>
 8007fc6:	68e0      	ldr	r0, [r4, #12]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	2112      	movs	r1, #18
 8007fcc:	f7ff ff78 	bl	8007ec0 <std>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61a3      	str	r3, [r4, #24]
 8007fd4:	e7d2      	b.n	8007f7c <__sinit+0xc>
 8007fd6:	bf00      	nop
 8007fd8:	0800a8e8 	.word	0x0800a8e8
 8007fdc:	08007f09 	.word	0x08007f09

08007fe0 <__sfp>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	f7ff ffac 	bl	8007f40 <__sfp_lock_acquire>
 8007fe8:	4b1e      	ldr	r3, [pc, #120]	; (8008064 <__sfp+0x84>)
 8007fea:	681e      	ldr	r6, [r3, #0]
 8007fec:	69b3      	ldr	r3, [r6, #24]
 8007fee:	b913      	cbnz	r3, 8007ff6 <__sfp+0x16>
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff ffbd 	bl	8007f70 <__sinit>
 8007ff6:	3648      	adds	r6, #72	; 0x48
 8007ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	d503      	bpl.n	8008008 <__sfp+0x28>
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	b30b      	cbz	r3, 8008048 <__sfp+0x68>
 8008004:	6836      	ldr	r6, [r6, #0]
 8008006:	e7f7      	b.n	8007ff8 <__sfp+0x18>
 8008008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800800c:	b9d5      	cbnz	r5, 8008044 <__sfp+0x64>
 800800e:	4b16      	ldr	r3, [pc, #88]	; (8008068 <__sfp+0x88>)
 8008010:	60e3      	str	r3, [r4, #12]
 8008012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008016:	6665      	str	r5, [r4, #100]	; 0x64
 8008018:	f000 f84c 	bl	80080b4 <__retarget_lock_init_recursive>
 800801c:	f7ff ff96 	bl	8007f4c <__sfp_lock_release>
 8008020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008028:	6025      	str	r5, [r4, #0]
 800802a:	61a5      	str	r5, [r4, #24]
 800802c:	2208      	movs	r2, #8
 800802e:	4629      	mov	r1, r5
 8008030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008034:	f7fe f9b4 	bl	80063a0 <memset>
 8008038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800803c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008040:	4620      	mov	r0, r4
 8008042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008044:	3468      	adds	r4, #104	; 0x68
 8008046:	e7d9      	b.n	8007ffc <__sfp+0x1c>
 8008048:	2104      	movs	r1, #4
 800804a:	4638      	mov	r0, r7
 800804c:	f7ff ff62 	bl	8007f14 <__sfmoreglue>
 8008050:	4604      	mov	r4, r0
 8008052:	6030      	str	r0, [r6, #0]
 8008054:	2800      	cmp	r0, #0
 8008056:	d1d5      	bne.n	8008004 <__sfp+0x24>
 8008058:	f7ff ff78 	bl	8007f4c <__sfp_lock_release>
 800805c:	230c      	movs	r3, #12
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	e7ee      	b.n	8008040 <__sfp+0x60>
 8008062:	bf00      	nop
 8008064:	0800a8e8 	.word	0x0800a8e8
 8008068:	ffff0001 	.word	0xffff0001

0800806c <_fwalk_reent>:
 800806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008070:	4606      	mov	r6, r0
 8008072:	4688      	mov	r8, r1
 8008074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008078:	2700      	movs	r7, #0
 800807a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800807e:	f1b9 0901 	subs.w	r9, r9, #1
 8008082:	d505      	bpl.n	8008090 <_fwalk_reent+0x24>
 8008084:	6824      	ldr	r4, [r4, #0]
 8008086:	2c00      	cmp	r4, #0
 8008088:	d1f7      	bne.n	800807a <_fwalk_reent+0xe>
 800808a:	4638      	mov	r0, r7
 800808c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008090:	89ab      	ldrh	r3, [r5, #12]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d907      	bls.n	80080a6 <_fwalk_reent+0x3a>
 8008096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800809a:	3301      	adds	r3, #1
 800809c:	d003      	beq.n	80080a6 <_fwalk_reent+0x3a>
 800809e:	4629      	mov	r1, r5
 80080a0:	4630      	mov	r0, r6
 80080a2:	47c0      	blx	r8
 80080a4:	4307      	orrs	r7, r0
 80080a6:	3568      	adds	r5, #104	; 0x68
 80080a8:	e7e9      	b.n	800807e <_fwalk_reent+0x12>
	...

080080ac <_localeconv_r>:
 80080ac:	4800      	ldr	r0, [pc, #0]	; (80080b0 <_localeconv_r+0x4>)
 80080ae:	4770      	bx	lr
 80080b0:	20000160 	.word	0x20000160

080080b4 <__retarget_lock_init_recursive>:
 80080b4:	4770      	bx	lr

080080b6 <__retarget_lock_acquire_recursive>:
 80080b6:	4770      	bx	lr

080080b8 <__retarget_lock_release_recursive>:
 80080b8:	4770      	bx	lr
	...

080080bc <_lseek_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4d07      	ldr	r5, [pc, #28]	; (80080dc <_lseek_r+0x20>)
 80080c0:	4604      	mov	r4, r0
 80080c2:	4608      	mov	r0, r1
 80080c4:	4611      	mov	r1, r2
 80080c6:	2200      	movs	r2, #0
 80080c8:	602a      	str	r2, [r5, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f7fa fade 	bl	800268c <_lseek>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_lseek_r+0x1e>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_lseek_r+0x1e>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	2000069c 	.word	0x2000069c

080080e0 <__swhatbuf_r>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	460e      	mov	r6, r1
 80080e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e8:	2900      	cmp	r1, #0
 80080ea:	b096      	sub	sp, #88	; 0x58
 80080ec:	4614      	mov	r4, r2
 80080ee:	461d      	mov	r5, r3
 80080f0:	da08      	bge.n	8008104 <__swhatbuf_r+0x24>
 80080f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	602a      	str	r2, [r5, #0]
 80080fa:	061a      	lsls	r2, r3, #24
 80080fc:	d410      	bmi.n	8008120 <__swhatbuf_r+0x40>
 80080fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008102:	e00e      	b.n	8008122 <__swhatbuf_r+0x42>
 8008104:	466a      	mov	r2, sp
 8008106:	f001 fb0d 	bl	8009724 <_fstat_r>
 800810a:	2800      	cmp	r0, #0
 800810c:	dbf1      	blt.n	80080f2 <__swhatbuf_r+0x12>
 800810e:	9a01      	ldr	r2, [sp, #4]
 8008110:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008114:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008118:	425a      	negs	r2, r3
 800811a:	415a      	adcs	r2, r3
 800811c:	602a      	str	r2, [r5, #0]
 800811e:	e7ee      	b.n	80080fe <__swhatbuf_r+0x1e>
 8008120:	2340      	movs	r3, #64	; 0x40
 8008122:	2000      	movs	r0, #0
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	b016      	add	sp, #88	; 0x58
 8008128:	bd70      	pop	{r4, r5, r6, pc}
	...

0800812c <__smakebuf_r>:
 800812c:	898b      	ldrh	r3, [r1, #12]
 800812e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008130:	079d      	lsls	r5, r3, #30
 8008132:	4606      	mov	r6, r0
 8008134:	460c      	mov	r4, r1
 8008136:	d507      	bpl.n	8008148 <__smakebuf_r+0x1c>
 8008138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	6123      	str	r3, [r4, #16]
 8008140:	2301      	movs	r3, #1
 8008142:	6163      	str	r3, [r4, #20]
 8008144:	b002      	add	sp, #8
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	ab01      	add	r3, sp, #4
 800814a:	466a      	mov	r2, sp
 800814c:	f7ff ffc8 	bl	80080e0 <__swhatbuf_r>
 8008150:	9900      	ldr	r1, [sp, #0]
 8008152:	4605      	mov	r5, r0
 8008154:	4630      	mov	r0, r6
 8008156:	f000 fc37 	bl	80089c8 <_malloc_r>
 800815a:	b948      	cbnz	r0, 8008170 <__smakebuf_r+0x44>
 800815c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008160:	059a      	lsls	r2, r3, #22
 8008162:	d4ef      	bmi.n	8008144 <__smakebuf_r+0x18>
 8008164:	f023 0303 	bic.w	r3, r3, #3
 8008168:	f043 0302 	orr.w	r3, r3, #2
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	e7e3      	b.n	8008138 <__smakebuf_r+0xc>
 8008170:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <__smakebuf_r+0x7c>)
 8008172:	62b3      	str	r3, [r6, #40]	; 0x28
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	6020      	str	r0, [r4, #0]
 8008178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	6163      	str	r3, [r4, #20]
 8008182:	9b01      	ldr	r3, [sp, #4]
 8008184:	6120      	str	r0, [r4, #16]
 8008186:	b15b      	cbz	r3, 80081a0 <__smakebuf_r+0x74>
 8008188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800818c:	4630      	mov	r0, r6
 800818e:	f001 fadb 	bl	8009748 <_isatty_r>
 8008192:	b128      	cbz	r0, 80081a0 <__smakebuf_r+0x74>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f023 0303 	bic.w	r3, r3, #3
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	89a0      	ldrh	r0, [r4, #12]
 80081a2:	4305      	orrs	r5, r0
 80081a4:	81a5      	strh	r5, [r4, #12]
 80081a6:	e7cd      	b.n	8008144 <__smakebuf_r+0x18>
 80081a8:	08007f09 	.word	0x08007f09

080081ac <malloc>:
 80081ac:	4b02      	ldr	r3, [pc, #8]	; (80081b8 <malloc+0xc>)
 80081ae:	4601      	mov	r1, r0
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f000 bc09 	b.w	80089c8 <_malloc_r>
 80081b6:	bf00      	nop
 80081b8:	2000000c 	.word	0x2000000c

080081bc <_Balloc>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081c0:	4604      	mov	r4, r0
 80081c2:	460d      	mov	r5, r1
 80081c4:	b976      	cbnz	r6, 80081e4 <_Balloc+0x28>
 80081c6:	2010      	movs	r0, #16
 80081c8:	f7ff fff0 	bl	80081ac <malloc>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6260      	str	r0, [r4, #36]	; 0x24
 80081d0:	b920      	cbnz	r0, 80081dc <_Balloc+0x20>
 80081d2:	4b18      	ldr	r3, [pc, #96]	; (8008234 <_Balloc+0x78>)
 80081d4:	4818      	ldr	r0, [pc, #96]	; (8008238 <_Balloc+0x7c>)
 80081d6:	2166      	movs	r1, #102	; 0x66
 80081d8:	f001 fa74 	bl	80096c4 <__assert_func>
 80081dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081e0:	6006      	str	r6, [r0, #0]
 80081e2:	60c6      	str	r6, [r0, #12]
 80081e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081e6:	68f3      	ldr	r3, [r6, #12]
 80081e8:	b183      	cbz	r3, 800820c <_Balloc+0x50>
 80081ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081f2:	b9b8      	cbnz	r0, 8008224 <_Balloc+0x68>
 80081f4:	2101      	movs	r1, #1
 80081f6:	fa01 f605 	lsl.w	r6, r1, r5
 80081fa:	1d72      	adds	r2, r6, #5
 80081fc:	0092      	lsls	r2, r2, #2
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 fb60 	bl	80088c4 <_calloc_r>
 8008204:	b160      	cbz	r0, 8008220 <_Balloc+0x64>
 8008206:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800820a:	e00e      	b.n	800822a <_Balloc+0x6e>
 800820c:	2221      	movs	r2, #33	; 0x21
 800820e:	2104      	movs	r1, #4
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fb57 	bl	80088c4 <_calloc_r>
 8008216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008218:	60f0      	str	r0, [r6, #12]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e4      	bne.n	80081ea <_Balloc+0x2e>
 8008220:	2000      	movs	r0, #0
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	6802      	ldr	r2, [r0, #0]
 8008226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800822a:	2300      	movs	r3, #0
 800822c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008230:	e7f7      	b.n	8008222 <_Balloc+0x66>
 8008232:	bf00      	nop
 8008234:	0800a92b 	.word	0x0800a92b
 8008238:	0800aa10 	.word	0x0800aa10

0800823c <_Bfree>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008240:	4605      	mov	r5, r0
 8008242:	460c      	mov	r4, r1
 8008244:	b976      	cbnz	r6, 8008264 <_Bfree+0x28>
 8008246:	2010      	movs	r0, #16
 8008248:	f7ff ffb0 	bl	80081ac <malloc>
 800824c:	4602      	mov	r2, r0
 800824e:	6268      	str	r0, [r5, #36]	; 0x24
 8008250:	b920      	cbnz	r0, 800825c <_Bfree+0x20>
 8008252:	4b09      	ldr	r3, [pc, #36]	; (8008278 <_Bfree+0x3c>)
 8008254:	4809      	ldr	r0, [pc, #36]	; (800827c <_Bfree+0x40>)
 8008256:	218a      	movs	r1, #138	; 0x8a
 8008258:	f001 fa34 	bl	80096c4 <__assert_func>
 800825c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008260:	6006      	str	r6, [r0, #0]
 8008262:	60c6      	str	r6, [r0, #12]
 8008264:	b13c      	cbz	r4, 8008276 <_Bfree+0x3a>
 8008266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008268:	6862      	ldr	r2, [r4, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008270:	6021      	str	r1, [r4, #0]
 8008272:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	0800a92b 	.word	0x0800a92b
 800827c:	0800aa10 	.word	0x0800aa10

08008280 <__multadd>:
 8008280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008284:	690d      	ldr	r5, [r1, #16]
 8008286:	4607      	mov	r7, r0
 8008288:	460c      	mov	r4, r1
 800828a:	461e      	mov	r6, r3
 800828c:	f101 0c14 	add.w	ip, r1, #20
 8008290:	2000      	movs	r0, #0
 8008292:	f8dc 3000 	ldr.w	r3, [ip]
 8008296:	b299      	uxth	r1, r3
 8008298:	fb02 6101 	mla	r1, r2, r1, r6
 800829c:	0c1e      	lsrs	r6, r3, #16
 800829e:	0c0b      	lsrs	r3, r1, #16
 80082a0:	fb02 3306 	mla	r3, r2, r6, r3
 80082a4:	b289      	uxth	r1, r1
 80082a6:	3001      	adds	r0, #1
 80082a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082ac:	4285      	cmp	r5, r0
 80082ae:	f84c 1b04 	str.w	r1, [ip], #4
 80082b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082b6:	dcec      	bgt.n	8008292 <__multadd+0x12>
 80082b8:	b30e      	cbz	r6, 80082fe <__multadd+0x7e>
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	42ab      	cmp	r3, r5
 80082be:	dc19      	bgt.n	80082f4 <__multadd+0x74>
 80082c0:	6861      	ldr	r1, [r4, #4]
 80082c2:	4638      	mov	r0, r7
 80082c4:	3101      	adds	r1, #1
 80082c6:	f7ff ff79 	bl	80081bc <_Balloc>
 80082ca:	4680      	mov	r8, r0
 80082cc:	b928      	cbnz	r0, 80082da <__multadd+0x5a>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <__multadd+0x84>)
 80082d2:	480d      	ldr	r0, [pc, #52]	; (8008308 <__multadd+0x88>)
 80082d4:	21b5      	movs	r1, #181	; 0xb5
 80082d6:	f001 f9f5 	bl	80096c4 <__assert_func>
 80082da:	6922      	ldr	r2, [r4, #16]
 80082dc:	3202      	adds	r2, #2
 80082de:	f104 010c 	add.w	r1, r4, #12
 80082e2:	0092      	lsls	r2, r2, #2
 80082e4:	300c      	adds	r0, #12
 80082e6:	f7fe f84d 	bl	8006384 <memcpy>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4638      	mov	r0, r7
 80082ee:	f7ff ffa5 	bl	800823c <_Bfree>
 80082f2:	4644      	mov	r4, r8
 80082f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082f8:	3501      	adds	r5, #1
 80082fa:	615e      	str	r6, [r3, #20]
 80082fc:	6125      	str	r5, [r4, #16]
 80082fe:	4620      	mov	r0, r4
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	0800a99d 	.word	0x0800a99d
 8008308:	0800aa10 	.word	0x0800aa10

0800830c <__hi0bits>:
 800830c:	0c03      	lsrs	r3, r0, #16
 800830e:	041b      	lsls	r3, r3, #16
 8008310:	b9d3      	cbnz	r3, 8008348 <__hi0bits+0x3c>
 8008312:	0400      	lsls	r0, r0, #16
 8008314:	2310      	movs	r3, #16
 8008316:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800831a:	bf04      	itt	eq
 800831c:	0200      	lsleq	r0, r0, #8
 800831e:	3308      	addeq	r3, #8
 8008320:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008324:	bf04      	itt	eq
 8008326:	0100      	lsleq	r0, r0, #4
 8008328:	3304      	addeq	r3, #4
 800832a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800832e:	bf04      	itt	eq
 8008330:	0080      	lsleq	r0, r0, #2
 8008332:	3302      	addeq	r3, #2
 8008334:	2800      	cmp	r0, #0
 8008336:	db05      	blt.n	8008344 <__hi0bits+0x38>
 8008338:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800833c:	f103 0301 	add.w	r3, r3, #1
 8008340:	bf08      	it	eq
 8008342:	2320      	moveq	r3, #32
 8008344:	4618      	mov	r0, r3
 8008346:	4770      	bx	lr
 8008348:	2300      	movs	r3, #0
 800834a:	e7e4      	b.n	8008316 <__hi0bits+0xa>

0800834c <__lo0bits>:
 800834c:	6803      	ldr	r3, [r0, #0]
 800834e:	f013 0207 	ands.w	r2, r3, #7
 8008352:	4601      	mov	r1, r0
 8008354:	d00b      	beq.n	800836e <__lo0bits+0x22>
 8008356:	07da      	lsls	r2, r3, #31
 8008358:	d423      	bmi.n	80083a2 <__lo0bits+0x56>
 800835a:	0798      	lsls	r0, r3, #30
 800835c:	bf49      	itett	mi
 800835e:	085b      	lsrmi	r3, r3, #1
 8008360:	089b      	lsrpl	r3, r3, #2
 8008362:	2001      	movmi	r0, #1
 8008364:	600b      	strmi	r3, [r1, #0]
 8008366:	bf5c      	itt	pl
 8008368:	600b      	strpl	r3, [r1, #0]
 800836a:	2002      	movpl	r0, #2
 800836c:	4770      	bx	lr
 800836e:	b298      	uxth	r0, r3
 8008370:	b9a8      	cbnz	r0, 800839e <__lo0bits+0x52>
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	2010      	movs	r0, #16
 8008376:	b2da      	uxtb	r2, r3
 8008378:	b90a      	cbnz	r2, 800837e <__lo0bits+0x32>
 800837a:	3008      	adds	r0, #8
 800837c:	0a1b      	lsrs	r3, r3, #8
 800837e:	071a      	lsls	r2, r3, #28
 8008380:	bf04      	itt	eq
 8008382:	091b      	lsreq	r3, r3, #4
 8008384:	3004      	addeq	r0, #4
 8008386:	079a      	lsls	r2, r3, #30
 8008388:	bf04      	itt	eq
 800838a:	089b      	lsreq	r3, r3, #2
 800838c:	3002      	addeq	r0, #2
 800838e:	07da      	lsls	r2, r3, #31
 8008390:	d403      	bmi.n	800839a <__lo0bits+0x4e>
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	f100 0001 	add.w	r0, r0, #1
 8008398:	d005      	beq.n	80083a6 <__lo0bits+0x5a>
 800839a:	600b      	str	r3, [r1, #0]
 800839c:	4770      	bx	lr
 800839e:	4610      	mov	r0, r2
 80083a0:	e7e9      	b.n	8008376 <__lo0bits+0x2a>
 80083a2:	2000      	movs	r0, #0
 80083a4:	4770      	bx	lr
 80083a6:	2020      	movs	r0, #32
 80083a8:	4770      	bx	lr
	...

080083ac <__i2b>:
 80083ac:	b510      	push	{r4, lr}
 80083ae:	460c      	mov	r4, r1
 80083b0:	2101      	movs	r1, #1
 80083b2:	f7ff ff03 	bl	80081bc <_Balloc>
 80083b6:	4602      	mov	r2, r0
 80083b8:	b928      	cbnz	r0, 80083c6 <__i2b+0x1a>
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <__i2b+0x24>)
 80083bc:	4805      	ldr	r0, [pc, #20]	; (80083d4 <__i2b+0x28>)
 80083be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083c2:	f001 f97f 	bl	80096c4 <__assert_func>
 80083c6:	2301      	movs	r3, #1
 80083c8:	6144      	str	r4, [r0, #20]
 80083ca:	6103      	str	r3, [r0, #16]
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	0800a99d 	.word	0x0800a99d
 80083d4:	0800aa10 	.word	0x0800aa10

080083d8 <__multiply>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	4691      	mov	r9, r2
 80083de:	690a      	ldr	r2, [r1, #16]
 80083e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	bfb8      	it	lt
 80083e8:	460b      	movlt	r3, r1
 80083ea:	460c      	mov	r4, r1
 80083ec:	bfbc      	itt	lt
 80083ee:	464c      	movlt	r4, r9
 80083f0:	4699      	movlt	r9, r3
 80083f2:	6927      	ldr	r7, [r4, #16]
 80083f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083f8:	68a3      	ldr	r3, [r4, #8]
 80083fa:	6861      	ldr	r1, [r4, #4]
 80083fc:	eb07 060a 	add.w	r6, r7, sl
 8008400:	42b3      	cmp	r3, r6
 8008402:	b085      	sub	sp, #20
 8008404:	bfb8      	it	lt
 8008406:	3101      	addlt	r1, #1
 8008408:	f7ff fed8 	bl	80081bc <_Balloc>
 800840c:	b930      	cbnz	r0, 800841c <__multiply+0x44>
 800840e:	4602      	mov	r2, r0
 8008410:	4b44      	ldr	r3, [pc, #272]	; (8008524 <__multiply+0x14c>)
 8008412:	4845      	ldr	r0, [pc, #276]	; (8008528 <__multiply+0x150>)
 8008414:	f240 115d 	movw	r1, #349	; 0x15d
 8008418:	f001 f954 	bl	80096c4 <__assert_func>
 800841c:	f100 0514 	add.w	r5, r0, #20
 8008420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008424:	462b      	mov	r3, r5
 8008426:	2200      	movs	r2, #0
 8008428:	4543      	cmp	r3, r8
 800842a:	d321      	bcc.n	8008470 <__multiply+0x98>
 800842c:	f104 0314 	add.w	r3, r4, #20
 8008430:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008434:	f109 0314 	add.w	r3, r9, #20
 8008438:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800843c:	9202      	str	r2, [sp, #8]
 800843e:	1b3a      	subs	r2, r7, r4
 8008440:	3a15      	subs	r2, #21
 8008442:	f022 0203 	bic.w	r2, r2, #3
 8008446:	3204      	adds	r2, #4
 8008448:	f104 0115 	add.w	r1, r4, #21
 800844c:	428f      	cmp	r7, r1
 800844e:	bf38      	it	cc
 8008450:	2204      	movcc	r2, #4
 8008452:	9201      	str	r2, [sp, #4]
 8008454:	9a02      	ldr	r2, [sp, #8]
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	429a      	cmp	r2, r3
 800845a:	d80c      	bhi.n	8008476 <__multiply+0x9e>
 800845c:	2e00      	cmp	r6, #0
 800845e:	dd03      	ble.n	8008468 <__multiply+0x90>
 8008460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008464:	2b00      	cmp	r3, #0
 8008466:	d05a      	beq.n	800851e <__multiply+0x146>
 8008468:	6106      	str	r6, [r0, #16]
 800846a:	b005      	add	sp, #20
 800846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	f843 2b04 	str.w	r2, [r3], #4
 8008474:	e7d8      	b.n	8008428 <__multiply+0x50>
 8008476:	f8b3 a000 	ldrh.w	sl, [r3]
 800847a:	f1ba 0f00 	cmp.w	sl, #0
 800847e:	d024      	beq.n	80084ca <__multiply+0xf2>
 8008480:	f104 0e14 	add.w	lr, r4, #20
 8008484:	46a9      	mov	r9, r5
 8008486:	f04f 0c00 	mov.w	ip, #0
 800848a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800848e:	f8d9 1000 	ldr.w	r1, [r9]
 8008492:	fa1f fb82 	uxth.w	fp, r2
 8008496:	b289      	uxth	r1, r1
 8008498:	fb0a 110b 	mla	r1, sl, fp, r1
 800849c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80084a0:	f8d9 2000 	ldr.w	r2, [r9]
 80084a4:	4461      	add	r1, ip
 80084a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80084ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084b2:	b289      	uxth	r1, r1
 80084b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084b8:	4577      	cmp	r7, lr
 80084ba:	f849 1b04 	str.w	r1, [r9], #4
 80084be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084c2:	d8e2      	bhi.n	800848a <__multiply+0xb2>
 80084c4:	9a01      	ldr	r2, [sp, #4]
 80084c6:	f845 c002 	str.w	ip, [r5, r2]
 80084ca:	9a03      	ldr	r2, [sp, #12]
 80084cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084d0:	3304      	adds	r3, #4
 80084d2:	f1b9 0f00 	cmp.w	r9, #0
 80084d6:	d020      	beq.n	800851a <__multiply+0x142>
 80084d8:	6829      	ldr	r1, [r5, #0]
 80084da:	f104 0c14 	add.w	ip, r4, #20
 80084de:	46ae      	mov	lr, r5
 80084e0:	f04f 0a00 	mov.w	sl, #0
 80084e4:	f8bc b000 	ldrh.w	fp, [ip]
 80084e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084ec:	fb09 220b 	mla	r2, r9, fp, r2
 80084f0:	4492      	add	sl, r2
 80084f2:	b289      	uxth	r1, r1
 80084f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084f8:	f84e 1b04 	str.w	r1, [lr], #4
 80084fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008500:	f8be 1000 	ldrh.w	r1, [lr]
 8008504:	0c12      	lsrs	r2, r2, #16
 8008506:	fb09 1102 	mla	r1, r9, r2, r1
 800850a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800850e:	4567      	cmp	r7, ip
 8008510:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008514:	d8e6      	bhi.n	80084e4 <__multiply+0x10c>
 8008516:	9a01      	ldr	r2, [sp, #4]
 8008518:	50a9      	str	r1, [r5, r2]
 800851a:	3504      	adds	r5, #4
 800851c:	e79a      	b.n	8008454 <__multiply+0x7c>
 800851e:	3e01      	subs	r6, #1
 8008520:	e79c      	b.n	800845c <__multiply+0x84>
 8008522:	bf00      	nop
 8008524:	0800a99d 	.word	0x0800a99d
 8008528:	0800aa10 	.word	0x0800aa10

0800852c <__pow5mult>:
 800852c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008530:	4615      	mov	r5, r2
 8008532:	f012 0203 	ands.w	r2, r2, #3
 8008536:	4606      	mov	r6, r0
 8008538:	460f      	mov	r7, r1
 800853a:	d007      	beq.n	800854c <__pow5mult+0x20>
 800853c:	4c25      	ldr	r4, [pc, #148]	; (80085d4 <__pow5mult+0xa8>)
 800853e:	3a01      	subs	r2, #1
 8008540:	2300      	movs	r3, #0
 8008542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008546:	f7ff fe9b 	bl	8008280 <__multadd>
 800854a:	4607      	mov	r7, r0
 800854c:	10ad      	asrs	r5, r5, #2
 800854e:	d03d      	beq.n	80085cc <__pow5mult+0xa0>
 8008550:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008552:	b97c      	cbnz	r4, 8008574 <__pow5mult+0x48>
 8008554:	2010      	movs	r0, #16
 8008556:	f7ff fe29 	bl	80081ac <malloc>
 800855a:	4602      	mov	r2, r0
 800855c:	6270      	str	r0, [r6, #36]	; 0x24
 800855e:	b928      	cbnz	r0, 800856c <__pow5mult+0x40>
 8008560:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <__pow5mult+0xac>)
 8008562:	481e      	ldr	r0, [pc, #120]	; (80085dc <__pow5mult+0xb0>)
 8008564:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008568:	f001 f8ac 	bl	80096c4 <__assert_func>
 800856c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008570:	6004      	str	r4, [r0, #0]
 8008572:	60c4      	str	r4, [r0, #12]
 8008574:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800857c:	b94c      	cbnz	r4, 8008592 <__pow5mult+0x66>
 800857e:	f240 2171 	movw	r1, #625	; 0x271
 8008582:	4630      	mov	r0, r6
 8008584:	f7ff ff12 	bl	80083ac <__i2b>
 8008588:	2300      	movs	r3, #0
 800858a:	f8c8 0008 	str.w	r0, [r8, #8]
 800858e:	4604      	mov	r4, r0
 8008590:	6003      	str	r3, [r0, #0]
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	07eb      	lsls	r3, r5, #31
 8008598:	d50a      	bpl.n	80085b0 <__pow5mult+0x84>
 800859a:	4639      	mov	r1, r7
 800859c:	4622      	mov	r2, r4
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff ff1a 	bl	80083d8 <__multiply>
 80085a4:	4639      	mov	r1, r7
 80085a6:	4680      	mov	r8, r0
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7ff fe47 	bl	800823c <_Bfree>
 80085ae:	4647      	mov	r7, r8
 80085b0:	106d      	asrs	r5, r5, #1
 80085b2:	d00b      	beq.n	80085cc <__pow5mult+0xa0>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	b938      	cbnz	r0, 80085c8 <__pow5mult+0x9c>
 80085b8:	4622      	mov	r2, r4
 80085ba:	4621      	mov	r1, r4
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff ff0b 	bl	80083d8 <__multiply>
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	f8c0 9000 	str.w	r9, [r0]
 80085c8:	4604      	mov	r4, r0
 80085ca:	e7e4      	b.n	8008596 <__pow5mult+0x6a>
 80085cc:	4638      	mov	r0, r7
 80085ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d2:	bf00      	nop
 80085d4:	0800ab60 	.word	0x0800ab60
 80085d8:	0800a92b 	.word	0x0800a92b
 80085dc:	0800aa10 	.word	0x0800aa10

080085e0 <__lshift>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	6849      	ldr	r1, [r1, #4]
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	4607      	mov	r7, r0
 80085f2:	4691      	mov	r9, r2
 80085f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085f8:	f108 0601 	add.w	r6, r8, #1
 80085fc:	42b3      	cmp	r3, r6
 80085fe:	db0b      	blt.n	8008618 <__lshift+0x38>
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff fddb 	bl	80081bc <_Balloc>
 8008606:	4605      	mov	r5, r0
 8008608:	b948      	cbnz	r0, 800861e <__lshift+0x3e>
 800860a:	4602      	mov	r2, r0
 800860c:	4b2a      	ldr	r3, [pc, #168]	; (80086b8 <__lshift+0xd8>)
 800860e:	482b      	ldr	r0, [pc, #172]	; (80086bc <__lshift+0xdc>)
 8008610:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008614:	f001 f856 	bl	80096c4 <__assert_func>
 8008618:	3101      	adds	r1, #1
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	e7ee      	b.n	80085fc <__lshift+0x1c>
 800861e:	2300      	movs	r3, #0
 8008620:	f100 0114 	add.w	r1, r0, #20
 8008624:	f100 0210 	add.w	r2, r0, #16
 8008628:	4618      	mov	r0, r3
 800862a:	4553      	cmp	r3, sl
 800862c:	db37      	blt.n	800869e <__lshift+0xbe>
 800862e:	6920      	ldr	r0, [r4, #16]
 8008630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008634:	f104 0314 	add.w	r3, r4, #20
 8008638:	f019 091f 	ands.w	r9, r9, #31
 800863c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008640:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008644:	d02f      	beq.n	80086a6 <__lshift+0xc6>
 8008646:	f1c9 0e20 	rsb	lr, r9, #32
 800864a:	468a      	mov	sl, r1
 800864c:	f04f 0c00 	mov.w	ip, #0
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	fa02 f209 	lsl.w	r2, r2, r9
 8008656:	ea42 020c 	orr.w	r2, r2, ip
 800865a:	f84a 2b04 	str.w	r2, [sl], #4
 800865e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008662:	4298      	cmp	r0, r3
 8008664:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008668:	d8f2      	bhi.n	8008650 <__lshift+0x70>
 800866a:	1b03      	subs	r3, r0, r4
 800866c:	3b15      	subs	r3, #21
 800866e:	f023 0303 	bic.w	r3, r3, #3
 8008672:	3304      	adds	r3, #4
 8008674:	f104 0215 	add.w	r2, r4, #21
 8008678:	4290      	cmp	r0, r2
 800867a:	bf38      	it	cc
 800867c:	2304      	movcc	r3, #4
 800867e:	f841 c003 	str.w	ip, [r1, r3]
 8008682:	f1bc 0f00 	cmp.w	ip, #0
 8008686:	d001      	beq.n	800868c <__lshift+0xac>
 8008688:	f108 0602 	add.w	r6, r8, #2
 800868c:	3e01      	subs	r6, #1
 800868e:	4638      	mov	r0, r7
 8008690:	612e      	str	r6, [r5, #16]
 8008692:	4621      	mov	r1, r4
 8008694:	f7ff fdd2 	bl	800823c <_Bfree>
 8008698:	4628      	mov	r0, r5
 800869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869e:	f842 0f04 	str.w	r0, [r2, #4]!
 80086a2:	3301      	adds	r3, #1
 80086a4:	e7c1      	b.n	800862a <__lshift+0x4a>
 80086a6:	3904      	subs	r1, #4
 80086a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80086b0:	4298      	cmp	r0, r3
 80086b2:	d8f9      	bhi.n	80086a8 <__lshift+0xc8>
 80086b4:	e7ea      	b.n	800868c <__lshift+0xac>
 80086b6:	bf00      	nop
 80086b8:	0800a99d 	.word	0x0800a99d
 80086bc:	0800aa10 	.word	0x0800aa10

080086c0 <__mcmp>:
 80086c0:	b530      	push	{r4, r5, lr}
 80086c2:	6902      	ldr	r2, [r0, #16]
 80086c4:	690c      	ldr	r4, [r1, #16]
 80086c6:	1b12      	subs	r2, r2, r4
 80086c8:	d10e      	bne.n	80086e8 <__mcmp+0x28>
 80086ca:	f100 0314 	add.w	r3, r0, #20
 80086ce:	3114      	adds	r1, #20
 80086d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086e0:	42a5      	cmp	r5, r4
 80086e2:	d003      	beq.n	80086ec <__mcmp+0x2c>
 80086e4:	d305      	bcc.n	80086f2 <__mcmp+0x32>
 80086e6:	2201      	movs	r2, #1
 80086e8:	4610      	mov	r0, r2
 80086ea:	bd30      	pop	{r4, r5, pc}
 80086ec:	4283      	cmp	r3, r0
 80086ee:	d3f3      	bcc.n	80086d8 <__mcmp+0x18>
 80086f0:	e7fa      	b.n	80086e8 <__mcmp+0x28>
 80086f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086f6:	e7f7      	b.n	80086e8 <__mcmp+0x28>

080086f8 <__mdiff>:
 80086f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	460c      	mov	r4, r1
 80086fe:	4606      	mov	r6, r0
 8008700:	4611      	mov	r1, r2
 8008702:	4620      	mov	r0, r4
 8008704:	4690      	mov	r8, r2
 8008706:	f7ff ffdb 	bl	80086c0 <__mcmp>
 800870a:	1e05      	subs	r5, r0, #0
 800870c:	d110      	bne.n	8008730 <__mdiff+0x38>
 800870e:	4629      	mov	r1, r5
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff fd53 	bl	80081bc <_Balloc>
 8008716:	b930      	cbnz	r0, 8008726 <__mdiff+0x2e>
 8008718:	4b3a      	ldr	r3, [pc, #232]	; (8008804 <__mdiff+0x10c>)
 800871a:	4602      	mov	r2, r0
 800871c:	f240 2132 	movw	r1, #562	; 0x232
 8008720:	4839      	ldr	r0, [pc, #228]	; (8008808 <__mdiff+0x110>)
 8008722:	f000 ffcf 	bl	80096c4 <__assert_func>
 8008726:	2301      	movs	r3, #1
 8008728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800872c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008730:	bfa4      	itt	ge
 8008732:	4643      	movge	r3, r8
 8008734:	46a0      	movge	r8, r4
 8008736:	4630      	mov	r0, r6
 8008738:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800873c:	bfa6      	itte	ge
 800873e:	461c      	movge	r4, r3
 8008740:	2500      	movge	r5, #0
 8008742:	2501      	movlt	r5, #1
 8008744:	f7ff fd3a 	bl	80081bc <_Balloc>
 8008748:	b920      	cbnz	r0, 8008754 <__mdiff+0x5c>
 800874a:	4b2e      	ldr	r3, [pc, #184]	; (8008804 <__mdiff+0x10c>)
 800874c:	4602      	mov	r2, r0
 800874e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008752:	e7e5      	b.n	8008720 <__mdiff+0x28>
 8008754:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008758:	6926      	ldr	r6, [r4, #16]
 800875a:	60c5      	str	r5, [r0, #12]
 800875c:	f104 0914 	add.w	r9, r4, #20
 8008760:	f108 0514 	add.w	r5, r8, #20
 8008764:	f100 0e14 	add.w	lr, r0, #20
 8008768:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800876c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008770:	f108 0210 	add.w	r2, r8, #16
 8008774:	46f2      	mov	sl, lr
 8008776:	2100      	movs	r1, #0
 8008778:	f859 3b04 	ldr.w	r3, [r9], #4
 800877c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008780:	fa1f f883 	uxth.w	r8, r3
 8008784:	fa11 f18b 	uxtah	r1, r1, fp
 8008788:	0c1b      	lsrs	r3, r3, #16
 800878a:	eba1 0808 	sub.w	r8, r1, r8
 800878e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008792:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008796:	fa1f f888 	uxth.w	r8, r8
 800879a:	1419      	asrs	r1, r3, #16
 800879c:	454e      	cmp	r6, r9
 800879e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087a2:	f84a 3b04 	str.w	r3, [sl], #4
 80087a6:	d8e7      	bhi.n	8008778 <__mdiff+0x80>
 80087a8:	1b33      	subs	r3, r6, r4
 80087aa:	3b15      	subs	r3, #21
 80087ac:	f023 0303 	bic.w	r3, r3, #3
 80087b0:	3304      	adds	r3, #4
 80087b2:	3415      	adds	r4, #21
 80087b4:	42a6      	cmp	r6, r4
 80087b6:	bf38      	it	cc
 80087b8:	2304      	movcc	r3, #4
 80087ba:	441d      	add	r5, r3
 80087bc:	4473      	add	r3, lr
 80087be:	469e      	mov	lr, r3
 80087c0:	462e      	mov	r6, r5
 80087c2:	4566      	cmp	r6, ip
 80087c4:	d30e      	bcc.n	80087e4 <__mdiff+0xec>
 80087c6:	f10c 0203 	add.w	r2, ip, #3
 80087ca:	1b52      	subs	r2, r2, r5
 80087cc:	f022 0203 	bic.w	r2, r2, #3
 80087d0:	3d03      	subs	r5, #3
 80087d2:	45ac      	cmp	ip, r5
 80087d4:	bf38      	it	cc
 80087d6:	2200      	movcc	r2, #0
 80087d8:	441a      	add	r2, r3
 80087da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087de:	b17b      	cbz	r3, 8008800 <__mdiff+0x108>
 80087e0:	6107      	str	r7, [r0, #16]
 80087e2:	e7a3      	b.n	800872c <__mdiff+0x34>
 80087e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80087e8:	fa11 f288 	uxtah	r2, r1, r8
 80087ec:	1414      	asrs	r4, r2, #16
 80087ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087f2:	b292      	uxth	r2, r2
 80087f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087f8:	f84e 2b04 	str.w	r2, [lr], #4
 80087fc:	1421      	asrs	r1, r4, #16
 80087fe:	e7e0      	b.n	80087c2 <__mdiff+0xca>
 8008800:	3f01      	subs	r7, #1
 8008802:	e7ea      	b.n	80087da <__mdiff+0xe2>
 8008804:	0800a99d 	.word	0x0800a99d
 8008808:	0800aa10 	.word	0x0800aa10

0800880c <__d2b>:
 800880c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008810:	4689      	mov	r9, r1
 8008812:	2101      	movs	r1, #1
 8008814:	ec57 6b10 	vmov	r6, r7, d0
 8008818:	4690      	mov	r8, r2
 800881a:	f7ff fccf 	bl	80081bc <_Balloc>
 800881e:	4604      	mov	r4, r0
 8008820:	b930      	cbnz	r0, 8008830 <__d2b+0x24>
 8008822:	4602      	mov	r2, r0
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <__d2b+0xb0>)
 8008826:	4826      	ldr	r0, [pc, #152]	; (80088c0 <__d2b+0xb4>)
 8008828:	f240 310a 	movw	r1, #778	; 0x30a
 800882c:	f000 ff4a 	bl	80096c4 <__assert_func>
 8008830:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008834:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008838:	bb35      	cbnz	r5, 8008888 <__d2b+0x7c>
 800883a:	2e00      	cmp	r6, #0
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	d028      	beq.n	8008892 <__d2b+0x86>
 8008840:	4668      	mov	r0, sp
 8008842:	9600      	str	r6, [sp, #0]
 8008844:	f7ff fd82 	bl	800834c <__lo0bits>
 8008848:	9900      	ldr	r1, [sp, #0]
 800884a:	b300      	cbz	r0, 800888e <__d2b+0x82>
 800884c:	9a01      	ldr	r2, [sp, #4]
 800884e:	f1c0 0320 	rsb	r3, r0, #32
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	430b      	orrs	r3, r1
 8008858:	40c2      	lsrs	r2, r0
 800885a:	6163      	str	r3, [r4, #20]
 800885c:	9201      	str	r2, [sp, #4]
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	61a3      	str	r3, [r4, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	bf14      	ite	ne
 8008866:	2202      	movne	r2, #2
 8008868:	2201      	moveq	r2, #1
 800886a:	6122      	str	r2, [r4, #16]
 800886c:	b1d5      	cbz	r5, 80088a4 <__d2b+0x98>
 800886e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008872:	4405      	add	r5, r0
 8008874:	f8c9 5000 	str.w	r5, [r9]
 8008878:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800887c:	f8c8 0000 	str.w	r0, [r8]
 8008880:	4620      	mov	r0, r4
 8008882:	b003      	add	sp, #12
 8008884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800888c:	e7d5      	b.n	800883a <__d2b+0x2e>
 800888e:	6161      	str	r1, [r4, #20]
 8008890:	e7e5      	b.n	800885e <__d2b+0x52>
 8008892:	a801      	add	r0, sp, #4
 8008894:	f7ff fd5a 	bl	800834c <__lo0bits>
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	6163      	str	r3, [r4, #20]
 800889c:	2201      	movs	r2, #1
 800889e:	6122      	str	r2, [r4, #16]
 80088a0:	3020      	adds	r0, #32
 80088a2:	e7e3      	b.n	800886c <__d2b+0x60>
 80088a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088ac:	f8c9 0000 	str.w	r0, [r9]
 80088b0:	6918      	ldr	r0, [r3, #16]
 80088b2:	f7ff fd2b 	bl	800830c <__hi0bits>
 80088b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088ba:	e7df      	b.n	800887c <__d2b+0x70>
 80088bc:	0800a99d 	.word	0x0800a99d
 80088c0:	0800aa10 	.word	0x0800aa10

080088c4 <_calloc_r>:
 80088c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088c6:	fba1 2402 	umull	r2, r4, r1, r2
 80088ca:	b94c      	cbnz	r4, 80088e0 <_calloc_r+0x1c>
 80088cc:	4611      	mov	r1, r2
 80088ce:	9201      	str	r2, [sp, #4]
 80088d0:	f000 f87a 	bl	80089c8 <_malloc_r>
 80088d4:	9a01      	ldr	r2, [sp, #4]
 80088d6:	4605      	mov	r5, r0
 80088d8:	b930      	cbnz	r0, 80088e8 <_calloc_r+0x24>
 80088da:	4628      	mov	r0, r5
 80088dc:	b003      	add	sp, #12
 80088de:	bd30      	pop	{r4, r5, pc}
 80088e0:	220c      	movs	r2, #12
 80088e2:	6002      	str	r2, [r0, #0]
 80088e4:	2500      	movs	r5, #0
 80088e6:	e7f8      	b.n	80088da <_calloc_r+0x16>
 80088e8:	4621      	mov	r1, r4
 80088ea:	f7fd fd59 	bl	80063a0 <memset>
 80088ee:	e7f4      	b.n	80088da <_calloc_r+0x16>

080088f0 <_free_r>:
 80088f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088f2:	2900      	cmp	r1, #0
 80088f4:	d044      	beq.n	8008980 <_free_r+0x90>
 80088f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088fa:	9001      	str	r0, [sp, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008902:	bfb8      	it	lt
 8008904:	18e4      	addlt	r4, r4, r3
 8008906:	f000 ff41 	bl	800978c <__malloc_lock>
 800890a:	4a1e      	ldr	r2, [pc, #120]	; (8008984 <_free_r+0x94>)
 800890c:	9801      	ldr	r0, [sp, #4]
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	b933      	cbnz	r3, 8008920 <_free_r+0x30>
 8008912:	6063      	str	r3, [r4, #4]
 8008914:	6014      	str	r4, [r2, #0]
 8008916:	b003      	add	sp, #12
 8008918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800891c:	f000 bf3c 	b.w	8009798 <__malloc_unlock>
 8008920:	42a3      	cmp	r3, r4
 8008922:	d908      	bls.n	8008936 <_free_r+0x46>
 8008924:	6825      	ldr	r5, [r4, #0]
 8008926:	1961      	adds	r1, r4, r5
 8008928:	428b      	cmp	r3, r1
 800892a:	bf01      	itttt	eq
 800892c:	6819      	ldreq	r1, [r3, #0]
 800892e:	685b      	ldreq	r3, [r3, #4]
 8008930:	1949      	addeq	r1, r1, r5
 8008932:	6021      	streq	r1, [r4, #0]
 8008934:	e7ed      	b.n	8008912 <_free_r+0x22>
 8008936:	461a      	mov	r2, r3
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	b10b      	cbz	r3, 8008940 <_free_r+0x50>
 800893c:	42a3      	cmp	r3, r4
 800893e:	d9fa      	bls.n	8008936 <_free_r+0x46>
 8008940:	6811      	ldr	r1, [r2, #0]
 8008942:	1855      	adds	r5, r2, r1
 8008944:	42a5      	cmp	r5, r4
 8008946:	d10b      	bne.n	8008960 <_free_r+0x70>
 8008948:	6824      	ldr	r4, [r4, #0]
 800894a:	4421      	add	r1, r4
 800894c:	1854      	adds	r4, r2, r1
 800894e:	42a3      	cmp	r3, r4
 8008950:	6011      	str	r1, [r2, #0]
 8008952:	d1e0      	bne.n	8008916 <_free_r+0x26>
 8008954:	681c      	ldr	r4, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	6053      	str	r3, [r2, #4]
 800895a:	4421      	add	r1, r4
 800895c:	6011      	str	r1, [r2, #0]
 800895e:	e7da      	b.n	8008916 <_free_r+0x26>
 8008960:	d902      	bls.n	8008968 <_free_r+0x78>
 8008962:	230c      	movs	r3, #12
 8008964:	6003      	str	r3, [r0, #0]
 8008966:	e7d6      	b.n	8008916 <_free_r+0x26>
 8008968:	6825      	ldr	r5, [r4, #0]
 800896a:	1961      	adds	r1, r4, r5
 800896c:	428b      	cmp	r3, r1
 800896e:	bf04      	itt	eq
 8008970:	6819      	ldreq	r1, [r3, #0]
 8008972:	685b      	ldreq	r3, [r3, #4]
 8008974:	6063      	str	r3, [r4, #4]
 8008976:	bf04      	itt	eq
 8008978:	1949      	addeq	r1, r1, r5
 800897a:	6021      	streq	r1, [r4, #0]
 800897c:	6054      	str	r4, [r2, #4]
 800897e:	e7ca      	b.n	8008916 <_free_r+0x26>
 8008980:	b003      	add	sp, #12
 8008982:	bd30      	pop	{r4, r5, pc}
 8008984:	20000694 	.word	0x20000694

08008988 <sbrk_aligned>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	4e0e      	ldr	r6, [pc, #56]	; (80089c4 <sbrk_aligned+0x3c>)
 800898c:	460c      	mov	r4, r1
 800898e:	6831      	ldr	r1, [r6, #0]
 8008990:	4605      	mov	r5, r0
 8008992:	b911      	cbnz	r1, 800899a <sbrk_aligned+0x12>
 8008994:	f000 fd1c 	bl	80093d0 <_sbrk_r>
 8008998:	6030      	str	r0, [r6, #0]
 800899a:	4621      	mov	r1, r4
 800899c:	4628      	mov	r0, r5
 800899e:	f000 fd17 	bl	80093d0 <_sbrk_r>
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	d00a      	beq.n	80089bc <sbrk_aligned+0x34>
 80089a6:	1cc4      	adds	r4, r0, #3
 80089a8:	f024 0403 	bic.w	r4, r4, #3
 80089ac:	42a0      	cmp	r0, r4
 80089ae:	d007      	beq.n	80089c0 <sbrk_aligned+0x38>
 80089b0:	1a21      	subs	r1, r4, r0
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 fd0c 	bl	80093d0 <_sbrk_r>
 80089b8:	3001      	adds	r0, #1
 80089ba:	d101      	bne.n	80089c0 <sbrk_aligned+0x38>
 80089bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089c0:	4620      	mov	r0, r4
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	20000698 	.word	0x20000698

080089c8 <_malloc_r>:
 80089c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089cc:	1ccd      	adds	r5, r1, #3
 80089ce:	f025 0503 	bic.w	r5, r5, #3
 80089d2:	3508      	adds	r5, #8
 80089d4:	2d0c      	cmp	r5, #12
 80089d6:	bf38      	it	cc
 80089d8:	250c      	movcc	r5, #12
 80089da:	2d00      	cmp	r5, #0
 80089dc:	4607      	mov	r7, r0
 80089de:	db01      	blt.n	80089e4 <_malloc_r+0x1c>
 80089e0:	42a9      	cmp	r1, r5
 80089e2:	d905      	bls.n	80089f0 <_malloc_r+0x28>
 80089e4:	230c      	movs	r3, #12
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	2600      	movs	r6, #0
 80089ea:	4630      	mov	r0, r6
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	4e2e      	ldr	r6, [pc, #184]	; (8008aac <_malloc_r+0xe4>)
 80089f2:	f000 fecb 	bl	800978c <__malloc_lock>
 80089f6:	6833      	ldr	r3, [r6, #0]
 80089f8:	461c      	mov	r4, r3
 80089fa:	bb34      	cbnz	r4, 8008a4a <_malloc_r+0x82>
 80089fc:	4629      	mov	r1, r5
 80089fe:	4638      	mov	r0, r7
 8008a00:	f7ff ffc2 	bl	8008988 <sbrk_aligned>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	4604      	mov	r4, r0
 8008a08:	d14d      	bne.n	8008aa6 <_malloc_r+0xde>
 8008a0a:	6834      	ldr	r4, [r6, #0]
 8008a0c:	4626      	mov	r6, r4
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	d140      	bne.n	8008a94 <_malloc_r+0xcc>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	4631      	mov	r1, r6
 8008a16:	4638      	mov	r0, r7
 8008a18:	eb04 0803 	add.w	r8, r4, r3
 8008a1c:	f000 fcd8 	bl	80093d0 <_sbrk_r>
 8008a20:	4580      	cmp	r8, r0
 8008a22:	d13a      	bne.n	8008a9a <_malloc_r+0xd2>
 8008a24:	6821      	ldr	r1, [r4, #0]
 8008a26:	3503      	adds	r5, #3
 8008a28:	1a6d      	subs	r5, r5, r1
 8008a2a:	f025 0503 	bic.w	r5, r5, #3
 8008a2e:	3508      	adds	r5, #8
 8008a30:	2d0c      	cmp	r5, #12
 8008a32:	bf38      	it	cc
 8008a34:	250c      	movcc	r5, #12
 8008a36:	4629      	mov	r1, r5
 8008a38:	4638      	mov	r0, r7
 8008a3a:	f7ff ffa5 	bl	8008988 <sbrk_aligned>
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d02b      	beq.n	8008a9a <_malloc_r+0xd2>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	442b      	add	r3, r5
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	e00e      	b.n	8008a68 <_malloc_r+0xa0>
 8008a4a:	6822      	ldr	r2, [r4, #0]
 8008a4c:	1b52      	subs	r2, r2, r5
 8008a4e:	d41e      	bmi.n	8008a8e <_malloc_r+0xc6>
 8008a50:	2a0b      	cmp	r2, #11
 8008a52:	d916      	bls.n	8008a82 <_malloc_r+0xba>
 8008a54:	1961      	adds	r1, r4, r5
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	6025      	str	r5, [r4, #0]
 8008a5a:	bf18      	it	ne
 8008a5c:	6059      	strne	r1, [r3, #4]
 8008a5e:	6863      	ldr	r3, [r4, #4]
 8008a60:	bf08      	it	eq
 8008a62:	6031      	streq	r1, [r6, #0]
 8008a64:	5162      	str	r2, [r4, r5]
 8008a66:	604b      	str	r3, [r1, #4]
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f104 060b 	add.w	r6, r4, #11
 8008a6e:	f000 fe93 	bl	8009798 <__malloc_unlock>
 8008a72:	f026 0607 	bic.w	r6, r6, #7
 8008a76:	1d23      	adds	r3, r4, #4
 8008a78:	1af2      	subs	r2, r6, r3
 8008a7a:	d0b6      	beq.n	80089ea <_malloc_r+0x22>
 8008a7c:	1b9b      	subs	r3, r3, r6
 8008a7e:	50a3      	str	r3, [r4, r2]
 8008a80:	e7b3      	b.n	80089ea <_malloc_r+0x22>
 8008a82:	6862      	ldr	r2, [r4, #4]
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	bf0c      	ite	eq
 8008a88:	6032      	streq	r2, [r6, #0]
 8008a8a:	605a      	strne	r2, [r3, #4]
 8008a8c:	e7ec      	b.n	8008a68 <_malloc_r+0xa0>
 8008a8e:	4623      	mov	r3, r4
 8008a90:	6864      	ldr	r4, [r4, #4]
 8008a92:	e7b2      	b.n	80089fa <_malloc_r+0x32>
 8008a94:	4634      	mov	r4, r6
 8008a96:	6876      	ldr	r6, [r6, #4]
 8008a98:	e7b9      	b.n	8008a0e <_malloc_r+0x46>
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	603b      	str	r3, [r7, #0]
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f000 fe7a 	bl	8009798 <__malloc_unlock>
 8008aa4:	e7a1      	b.n	80089ea <_malloc_r+0x22>
 8008aa6:	6025      	str	r5, [r4, #0]
 8008aa8:	e7de      	b.n	8008a68 <_malloc_r+0xa0>
 8008aaa:	bf00      	nop
 8008aac:	20000694 	.word	0x20000694

08008ab0 <_sungetc_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	1c4b      	adds	r3, r1, #1
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	d103      	bne.n	8008ac0 <_sungetc_r+0x10>
 8008ab8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008abc:	4628      	mov	r0, r5
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	8993      	ldrh	r3, [r2, #12]
 8008ac2:	f023 0320 	bic.w	r3, r3, #32
 8008ac6:	8193      	strh	r3, [r2, #12]
 8008ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aca:	6852      	ldr	r2, [r2, #4]
 8008acc:	b2cd      	uxtb	r5, r1
 8008ace:	b18b      	cbz	r3, 8008af4 <_sungetc_r+0x44>
 8008ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	dd08      	ble.n	8008ae8 <_sungetc_r+0x38>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	1e5a      	subs	r2, r3, #1
 8008ada:	6022      	str	r2, [r4, #0]
 8008adc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	e7e9      	b.n	8008abc <_sungetc_r+0xc>
 8008ae8:	4621      	mov	r1, r4
 8008aea:	f000 fdb1 	bl	8009650 <__submore>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0f1      	beq.n	8008ad6 <_sungetc_r+0x26>
 8008af2:	e7e1      	b.n	8008ab8 <_sungetc_r+0x8>
 8008af4:	6921      	ldr	r1, [r4, #16]
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	b151      	cbz	r1, 8008b10 <_sungetc_r+0x60>
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d208      	bcs.n	8008b10 <_sungetc_r+0x60>
 8008afe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008b02:	42a9      	cmp	r1, r5
 8008b04:	d104      	bne.n	8008b10 <_sungetc_r+0x60>
 8008b06:	3b01      	subs	r3, #1
 8008b08:	3201      	adds	r2, #1
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	6062      	str	r2, [r4, #4]
 8008b0e:	e7d5      	b.n	8008abc <_sungetc_r+0xc>
 8008b10:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b18:	6363      	str	r3, [r4, #52]	; 0x34
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b1e:	4623      	mov	r3, r4
 8008b20:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	2301      	movs	r3, #1
 8008b28:	e7dc      	b.n	8008ae4 <_sungetc_r+0x34>

08008b2a <__ssrefill_r>:
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008b30:	b169      	cbz	r1, 8008b4e <__ssrefill_r+0x24>
 8008b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b36:	4299      	cmp	r1, r3
 8008b38:	d001      	beq.n	8008b3e <__ssrefill_r+0x14>
 8008b3a:	f7ff fed9 	bl	80088f0 <_free_r>
 8008b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b40:	6063      	str	r3, [r4, #4]
 8008b42:	2000      	movs	r0, #0
 8008b44:	6360      	str	r0, [r4, #52]	; 0x34
 8008b46:	b113      	cbz	r3, 8008b4e <__ssrefill_r+0x24>
 8008b48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b4a:	6023      	str	r3, [r4, #0]
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	2300      	movs	r3, #0
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f043 0320 	orr.w	r3, r3, #32
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b62:	e7f3      	b.n	8008b4c <__ssrefill_r+0x22>

08008b64 <__ssvfiscanf_r>:
 8008b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	460c      	mov	r4, r1
 8008b6a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008b6e:	2100      	movs	r1, #0
 8008b70:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008b74:	49a6      	ldr	r1, [pc, #664]	; (8008e10 <__ssvfiscanf_r+0x2ac>)
 8008b76:	91a0      	str	r1, [sp, #640]	; 0x280
 8008b78:	f10d 0804 	add.w	r8, sp, #4
 8008b7c:	49a5      	ldr	r1, [pc, #660]	; (8008e14 <__ssvfiscanf_r+0x2b0>)
 8008b7e:	4fa6      	ldr	r7, [pc, #664]	; (8008e18 <__ssvfiscanf_r+0x2b4>)
 8008b80:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008e1c <__ssvfiscanf_r+0x2b8>
 8008b84:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008b88:	4606      	mov	r6, r0
 8008b8a:	91a1      	str	r1, [sp, #644]	; 0x284
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	7813      	ldrb	r3, [r2, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 815a 	beq.w	8008e4a <__ssvfiscanf_r+0x2e6>
 8008b96:	5dd9      	ldrb	r1, [r3, r7]
 8008b98:	f011 0108 	ands.w	r1, r1, #8
 8008b9c:	f102 0501 	add.w	r5, r2, #1
 8008ba0:	d019      	beq.n	8008bd6 <__ssvfiscanf_r+0x72>
 8008ba2:	6863      	ldr	r3, [r4, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dd0f      	ble.n	8008bc8 <__ssvfiscanf_r+0x64>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	781a      	ldrb	r2, [r3, #0]
 8008bac:	5cba      	ldrb	r2, [r7, r2]
 8008bae:	0712      	lsls	r2, r2, #28
 8008bb0:	d401      	bmi.n	8008bb6 <__ssvfiscanf_r+0x52>
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	e7eb      	b.n	8008b8e <__ssvfiscanf_r+0x2a>
 8008bb6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008bb8:	3201      	adds	r2, #1
 8008bba:	9245      	str	r2, [sp, #276]	; 0x114
 8008bbc:	6862      	ldr	r2, [r4, #4]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	3a01      	subs	r2, #1
 8008bc2:	6062      	str	r2, [r4, #4]
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	e7ec      	b.n	8008ba2 <__ssvfiscanf_r+0x3e>
 8008bc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4798      	blx	r3
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d0e9      	beq.n	8008ba8 <__ssvfiscanf_r+0x44>
 8008bd4:	e7ed      	b.n	8008bb2 <__ssvfiscanf_r+0x4e>
 8008bd6:	2b25      	cmp	r3, #37	; 0x25
 8008bd8:	d012      	beq.n	8008c00 <__ssvfiscanf_r+0x9c>
 8008bda:	469a      	mov	sl, r3
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f340 8091 	ble.w	8008d06 <__ssvfiscanf_r+0x1a2>
 8008be4:	6822      	ldr	r2, [r4, #0]
 8008be6:	7813      	ldrb	r3, [r2, #0]
 8008be8:	4553      	cmp	r3, sl
 8008bea:	f040 812e 	bne.w	8008e4a <__ssvfiscanf_r+0x2e6>
 8008bee:	6863      	ldr	r3, [r4, #4]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	6063      	str	r3, [r4, #4]
 8008bf4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008bf6:	3201      	adds	r2, #1
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	6022      	str	r2, [r4, #0]
 8008bfc:	9345      	str	r3, [sp, #276]	; 0x114
 8008bfe:	e7d8      	b.n	8008bb2 <__ssvfiscanf_r+0x4e>
 8008c00:	9141      	str	r1, [sp, #260]	; 0x104
 8008c02:	9143      	str	r1, [sp, #268]	; 0x10c
 8008c04:	7853      	ldrb	r3, [r2, #1]
 8008c06:	2b2a      	cmp	r3, #42	; 0x2a
 8008c08:	bf02      	ittt	eq
 8008c0a:	2310      	moveq	r3, #16
 8008c0c:	1c95      	addeq	r5, r2, #2
 8008c0e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008c10:	220a      	movs	r2, #10
 8008c12:	46aa      	mov	sl, r5
 8008c14:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008c18:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d91d      	bls.n	8008c5c <__ssvfiscanf_r+0xf8>
 8008c20:	487e      	ldr	r0, [pc, #504]	; (8008e1c <__ssvfiscanf_r+0x2b8>)
 8008c22:	2203      	movs	r2, #3
 8008c24:	f7f7 fae4 	bl	80001f0 <memchr>
 8008c28:	b140      	cbz	r0, 8008c3c <__ssvfiscanf_r+0xd8>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	eba0 0009 	sub.w	r0, r0, r9
 8008c30:	fa03 f000 	lsl.w	r0, r3, r0
 8008c34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c36:	4318      	orrs	r0, r3
 8008c38:	9041      	str	r0, [sp, #260]	; 0x104
 8008c3a:	4655      	mov	r5, sl
 8008c3c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c40:	2b78      	cmp	r3, #120	; 0x78
 8008c42:	d806      	bhi.n	8008c52 <__ssvfiscanf_r+0xee>
 8008c44:	2b57      	cmp	r3, #87	; 0x57
 8008c46:	d810      	bhi.n	8008c6a <__ssvfiscanf_r+0x106>
 8008c48:	2b25      	cmp	r3, #37	; 0x25
 8008c4a:	d0c6      	beq.n	8008bda <__ssvfiscanf_r+0x76>
 8008c4c:	d856      	bhi.n	8008cfc <__ssvfiscanf_r+0x198>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d064      	beq.n	8008d1c <__ssvfiscanf_r+0x1b8>
 8008c52:	2303      	movs	r3, #3
 8008c54:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c56:	230a      	movs	r3, #10
 8008c58:	9342      	str	r3, [sp, #264]	; 0x108
 8008c5a:	e071      	b.n	8008d40 <__ssvfiscanf_r+0x1dc>
 8008c5c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008c5e:	fb02 1103 	mla	r1, r2, r3, r1
 8008c62:	3930      	subs	r1, #48	; 0x30
 8008c64:	9143      	str	r1, [sp, #268]	; 0x10c
 8008c66:	4655      	mov	r5, sl
 8008c68:	e7d3      	b.n	8008c12 <__ssvfiscanf_r+0xae>
 8008c6a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008c6e:	2a20      	cmp	r2, #32
 8008c70:	d8ef      	bhi.n	8008c52 <__ssvfiscanf_r+0xee>
 8008c72:	a101      	add	r1, pc, #4	; (adr r1, 8008c78 <__ssvfiscanf_r+0x114>)
 8008c74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c78:	08008d2b 	.word	0x08008d2b
 8008c7c:	08008c53 	.word	0x08008c53
 8008c80:	08008c53 	.word	0x08008c53
 8008c84:	08008d89 	.word	0x08008d89
 8008c88:	08008c53 	.word	0x08008c53
 8008c8c:	08008c53 	.word	0x08008c53
 8008c90:	08008c53 	.word	0x08008c53
 8008c94:	08008c53 	.word	0x08008c53
 8008c98:	08008c53 	.word	0x08008c53
 8008c9c:	08008c53 	.word	0x08008c53
 8008ca0:	08008c53 	.word	0x08008c53
 8008ca4:	08008d9f 	.word	0x08008d9f
 8008ca8:	08008d75 	.word	0x08008d75
 8008cac:	08008d03 	.word	0x08008d03
 8008cb0:	08008d03 	.word	0x08008d03
 8008cb4:	08008d03 	.word	0x08008d03
 8008cb8:	08008c53 	.word	0x08008c53
 8008cbc:	08008d79 	.word	0x08008d79
 8008cc0:	08008c53 	.word	0x08008c53
 8008cc4:	08008c53 	.word	0x08008c53
 8008cc8:	08008c53 	.word	0x08008c53
 8008ccc:	08008c53 	.word	0x08008c53
 8008cd0:	08008daf 	.word	0x08008daf
 8008cd4:	08008d81 	.word	0x08008d81
 8008cd8:	08008d23 	.word	0x08008d23
 8008cdc:	08008c53 	.word	0x08008c53
 8008ce0:	08008c53 	.word	0x08008c53
 8008ce4:	08008dab 	.word	0x08008dab
 8008ce8:	08008c53 	.word	0x08008c53
 8008cec:	08008d75 	.word	0x08008d75
 8008cf0:	08008c53 	.word	0x08008c53
 8008cf4:	08008c53 	.word	0x08008c53
 8008cf8:	08008d2b 	.word	0x08008d2b
 8008cfc:	3b45      	subs	r3, #69	; 0x45
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d8a7      	bhi.n	8008c52 <__ssvfiscanf_r+0xee>
 8008d02:	2305      	movs	r3, #5
 8008d04:	e01b      	b.n	8008d3e <__ssvfiscanf_r+0x1da>
 8008d06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	4798      	blx	r3
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f43f af68 	beq.w	8008be4 <__ssvfiscanf_r+0x80>
 8008d14:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f040 808d 	bne.w	8008e36 <__ssvfiscanf_r+0x2d2>
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d20:	e08f      	b.n	8008e42 <__ssvfiscanf_r+0x2de>
 8008d22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d24:	f042 0220 	orr.w	r2, r2, #32
 8008d28:	9241      	str	r2, [sp, #260]	; 0x104
 8008d2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d30:	9241      	str	r2, [sp, #260]	; 0x104
 8008d32:	2210      	movs	r2, #16
 8008d34:	2b6f      	cmp	r3, #111	; 0x6f
 8008d36:	9242      	str	r2, [sp, #264]	; 0x108
 8008d38:	bf34      	ite	cc
 8008d3a:	2303      	movcc	r3, #3
 8008d3c:	2304      	movcs	r3, #4
 8008d3e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd42      	ble.n	8008dcc <__ssvfiscanf_r+0x268>
 8008d46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d48:	0659      	lsls	r1, r3, #25
 8008d4a:	d404      	bmi.n	8008d56 <__ssvfiscanf_r+0x1f2>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	781a      	ldrb	r2, [r3, #0]
 8008d50:	5cba      	ldrb	r2, [r7, r2]
 8008d52:	0712      	lsls	r2, r2, #28
 8008d54:	d441      	bmi.n	8008dda <__ssvfiscanf_r+0x276>
 8008d56:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	dc50      	bgt.n	8008dfe <__ssvfiscanf_r+0x29a>
 8008d5c:	466b      	mov	r3, sp
 8008d5e:	4622      	mov	r2, r4
 8008d60:	a941      	add	r1, sp, #260	; 0x104
 8008d62:	4630      	mov	r0, r6
 8008d64:	f000 f9d0 	bl	8009108 <_scanf_chars>
 8008d68:	2801      	cmp	r0, #1
 8008d6a:	d06e      	beq.n	8008e4a <__ssvfiscanf_r+0x2e6>
 8008d6c:	2802      	cmp	r0, #2
 8008d6e:	f47f af20 	bne.w	8008bb2 <__ssvfiscanf_r+0x4e>
 8008d72:	e7cf      	b.n	8008d14 <__ssvfiscanf_r+0x1b0>
 8008d74:	220a      	movs	r2, #10
 8008d76:	e7dd      	b.n	8008d34 <__ssvfiscanf_r+0x1d0>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9342      	str	r3, [sp, #264]	; 0x108
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e7de      	b.n	8008d3e <__ssvfiscanf_r+0x1da>
 8008d80:	2308      	movs	r3, #8
 8008d82:	9342      	str	r3, [sp, #264]	; 0x108
 8008d84:	2304      	movs	r3, #4
 8008d86:	e7da      	b.n	8008d3e <__ssvfiscanf_r+0x1da>
 8008d88:	4629      	mov	r1, r5
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f000 fb30 	bl	80093f0 <__sccl>
 8008d90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d96:	9341      	str	r3, [sp, #260]	; 0x104
 8008d98:	4605      	mov	r5, r0
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e7cf      	b.n	8008d3e <__ssvfiscanf_r+0x1da>
 8008d9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da4:	9341      	str	r3, [sp, #260]	; 0x104
 8008da6:	2300      	movs	r3, #0
 8008da8:	e7c9      	b.n	8008d3e <__ssvfiscanf_r+0x1da>
 8008daa:	2302      	movs	r3, #2
 8008dac:	e7c7      	b.n	8008d3e <__ssvfiscanf_r+0x1da>
 8008dae:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008db0:	06c3      	lsls	r3, r0, #27
 8008db2:	f53f aefe 	bmi.w	8008bb2 <__ssvfiscanf_r+0x4e>
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008dba:	1d19      	adds	r1, r3, #4
 8008dbc:	9100      	str	r1, [sp, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f010 0f01 	tst.w	r0, #1
 8008dc4:	bf14      	ite	ne
 8008dc6:	801a      	strhne	r2, [r3, #0]
 8008dc8:	601a      	streq	r2, [r3, #0]
 8008dca:	e6f2      	b.n	8008bb2 <__ssvfiscanf_r+0x4e>
 8008dcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	4798      	blx	r3
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d0b6      	beq.n	8008d46 <__ssvfiscanf_r+0x1e2>
 8008dd8:	e79c      	b.n	8008d14 <__ssvfiscanf_r+0x1b0>
 8008dda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ddc:	3201      	adds	r2, #1
 8008dde:	9245      	str	r2, [sp, #276]	; 0x114
 8008de0:	6862      	ldr	r2, [r4, #4]
 8008de2:	3a01      	subs	r2, #1
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	6062      	str	r2, [r4, #4]
 8008de8:	dd02      	ble.n	8008df0 <__ssvfiscanf_r+0x28c>
 8008dea:	3301      	adds	r3, #1
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	e7ad      	b.n	8008d4c <__ssvfiscanf_r+0x1e8>
 8008df0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008df2:	4621      	mov	r1, r4
 8008df4:	4630      	mov	r0, r6
 8008df6:	4798      	blx	r3
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d0a7      	beq.n	8008d4c <__ssvfiscanf_r+0x1e8>
 8008dfc:	e78a      	b.n	8008d14 <__ssvfiscanf_r+0x1b0>
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	dc0e      	bgt.n	8008e20 <__ssvfiscanf_r+0x2bc>
 8008e02:	466b      	mov	r3, sp
 8008e04:	4622      	mov	r2, r4
 8008e06:	a941      	add	r1, sp, #260	; 0x104
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f000 f9d7 	bl	80091bc <_scanf_i>
 8008e0e:	e7ab      	b.n	8008d68 <__ssvfiscanf_r+0x204>
 8008e10:	08008ab1 	.word	0x08008ab1
 8008e14:	08008b2b 	.word	0x08008b2b
 8008e18:	0800abd5 	.word	0x0800abd5
 8008e1c:	0800ab6c 	.word	0x0800ab6c
 8008e20:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <__ssvfiscanf_r+0x2ec>)
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f43f aec5 	beq.w	8008bb2 <__ssvfiscanf_r+0x4e>
 8008e28:	466b      	mov	r3, sp
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	a941      	add	r1, sp, #260	; 0x104
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f3af 8000 	nop.w
 8008e34:	e798      	b.n	8008d68 <__ssvfiscanf_r+0x204>
 8008e36:	89a3      	ldrh	r3, [r4, #12]
 8008e38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008e3c:	bf18      	it	ne
 8008e3e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008e42:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e4c:	e7f9      	b.n	8008e42 <__ssvfiscanf_r+0x2de>
 8008e4e:	bf00      	nop
 8008e50:	00000000 	.word	0x00000000

08008e54 <__sfputc_r>:
 8008e54:	6893      	ldr	r3, [r2, #8]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	b410      	push	{r4}
 8008e5c:	6093      	str	r3, [r2, #8]
 8008e5e:	da08      	bge.n	8008e72 <__sfputc_r+0x1e>
 8008e60:	6994      	ldr	r4, [r2, #24]
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	db01      	blt.n	8008e6a <__sfputc_r+0x16>
 8008e66:	290a      	cmp	r1, #10
 8008e68:	d103      	bne.n	8008e72 <__sfputc_r+0x1e>
 8008e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6e:	f7fe b809 	b.w	8006e84 <__swbuf_r>
 8008e72:	6813      	ldr	r3, [r2, #0]
 8008e74:	1c58      	adds	r0, r3, #1
 8008e76:	6010      	str	r0, [r2, #0]
 8008e78:	7019      	strb	r1, [r3, #0]
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <__sfputs_r>:
 8008e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e84:	4606      	mov	r6, r0
 8008e86:	460f      	mov	r7, r1
 8008e88:	4614      	mov	r4, r2
 8008e8a:	18d5      	adds	r5, r2, r3
 8008e8c:	42ac      	cmp	r4, r5
 8008e8e:	d101      	bne.n	8008e94 <__sfputs_r+0x12>
 8008e90:	2000      	movs	r0, #0
 8008e92:	e007      	b.n	8008ea4 <__sfputs_r+0x22>
 8008e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e98:	463a      	mov	r2, r7
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7ff ffda 	bl	8008e54 <__sfputc_r>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d1f3      	bne.n	8008e8c <__sfputs_r+0xa>
 8008ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ea8 <_vfiprintf_r>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	460d      	mov	r5, r1
 8008eae:	b09d      	sub	sp, #116	; 0x74
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	4698      	mov	r8, r3
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	b118      	cbz	r0, 8008ec0 <_vfiprintf_r+0x18>
 8008eb8:	6983      	ldr	r3, [r0, #24]
 8008eba:	b90b      	cbnz	r3, 8008ec0 <_vfiprintf_r+0x18>
 8008ebc:	f7ff f858 	bl	8007f70 <__sinit>
 8008ec0:	4b89      	ldr	r3, [pc, #548]	; (80090e8 <_vfiprintf_r+0x240>)
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	d11b      	bne.n	8008efe <_vfiprintf_r+0x56>
 8008ec6:	6875      	ldr	r5, [r6, #4]
 8008ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eca:	07d9      	lsls	r1, r3, #31
 8008ecc:	d405      	bmi.n	8008eda <_vfiprintf_r+0x32>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	059a      	lsls	r2, r3, #22
 8008ed2:	d402      	bmi.n	8008eda <_vfiprintf_r+0x32>
 8008ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed6:	f7ff f8ee 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	071b      	lsls	r3, r3, #28
 8008ede:	d501      	bpl.n	8008ee4 <_vfiprintf_r+0x3c>
 8008ee0:	692b      	ldr	r3, [r5, #16]
 8008ee2:	b9eb      	cbnz	r3, 8008f20 <_vfiprintf_r+0x78>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7fe f830 	bl	8006f4c <__swsetup_r>
 8008eec:	b1c0      	cbz	r0, 8008f20 <_vfiprintf_r+0x78>
 8008eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ef0:	07dc      	lsls	r4, r3, #31
 8008ef2:	d50e      	bpl.n	8008f12 <_vfiprintf_r+0x6a>
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ef8:	b01d      	add	sp, #116	; 0x74
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	4b7b      	ldr	r3, [pc, #492]	; (80090ec <_vfiprintf_r+0x244>)
 8008f00:	429d      	cmp	r5, r3
 8008f02:	d101      	bne.n	8008f08 <_vfiprintf_r+0x60>
 8008f04:	68b5      	ldr	r5, [r6, #8]
 8008f06:	e7df      	b.n	8008ec8 <_vfiprintf_r+0x20>
 8008f08:	4b79      	ldr	r3, [pc, #484]	; (80090f0 <_vfiprintf_r+0x248>)
 8008f0a:	429d      	cmp	r5, r3
 8008f0c:	bf08      	it	eq
 8008f0e:	68f5      	ldreq	r5, [r6, #12]
 8008f10:	e7da      	b.n	8008ec8 <_vfiprintf_r+0x20>
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	0598      	lsls	r0, r3, #22
 8008f16:	d4ed      	bmi.n	8008ef4 <_vfiprintf_r+0x4c>
 8008f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f1a:	f7ff f8cd 	bl	80080b8 <__retarget_lock_release_recursive>
 8008f1e:	e7e9      	b.n	8008ef4 <_vfiprintf_r+0x4c>
 8008f20:	2300      	movs	r3, #0
 8008f22:	9309      	str	r3, [sp, #36]	; 0x24
 8008f24:	2320      	movs	r3, #32
 8008f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f2e:	2330      	movs	r3, #48	; 0x30
 8008f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090f4 <_vfiprintf_r+0x24c>
 8008f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f38:	f04f 0901 	mov.w	r9, #1
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	469a      	mov	sl, r3
 8008f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f44:	b10a      	cbz	r2, 8008f4a <_vfiprintf_r+0xa2>
 8008f46:	2a25      	cmp	r2, #37	; 0x25
 8008f48:	d1f9      	bne.n	8008f3e <_vfiprintf_r+0x96>
 8008f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4e:	d00b      	beq.n	8008f68 <_vfiprintf_r+0xc0>
 8008f50:	465b      	mov	r3, fp
 8008f52:	4622      	mov	r2, r4
 8008f54:	4629      	mov	r1, r5
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff ff93 	bl	8008e82 <__sfputs_r>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f000 80aa 	beq.w	80090b6 <_vfiprintf_r+0x20e>
 8008f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f64:	445a      	add	r2, fp
 8008f66:	9209      	str	r2, [sp, #36]	; 0x24
 8008f68:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 80a2 	beq.w	80090b6 <_vfiprintf_r+0x20e>
 8008f72:	2300      	movs	r3, #0
 8008f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7c:	f10a 0a01 	add.w	sl, sl, #1
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	9307      	str	r3, [sp, #28]
 8008f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f88:	931a      	str	r3, [sp, #104]	; 0x68
 8008f8a:	4654      	mov	r4, sl
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f92:	4858      	ldr	r0, [pc, #352]	; (80090f4 <_vfiprintf_r+0x24c>)
 8008f94:	f7f7 f92c 	bl	80001f0 <memchr>
 8008f98:	9a04      	ldr	r2, [sp, #16]
 8008f9a:	b9d8      	cbnz	r0, 8008fd4 <_vfiprintf_r+0x12c>
 8008f9c:	06d1      	lsls	r1, r2, #27
 8008f9e:	bf44      	itt	mi
 8008fa0:	2320      	movmi	r3, #32
 8008fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa6:	0713      	lsls	r3, r2, #28
 8008fa8:	bf44      	itt	mi
 8008faa:	232b      	movmi	r3, #43	; 0x2b
 8008fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb6:	d015      	beq.n	8008fe4 <_vfiprintf_r+0x13c>
 8008fb8:	9a07      	ldr	r2, [sp, #28]
 8008fba:	4654      	mov	r4, sl
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f04f 0c0a 	mov.w	ip, #10
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc8:	3b30      	subs	r3, #48	; 0x30
 8008fca:	2b09      	cmp	r3, #9
 8008fcc:	d94e      	bls.n	800906c <_vfiprintf_r+0x1c4>
 8008fce:	b1b0      	cbz	r0, 8008ffe <_vfiprintf_r+0x156>
 8008fd0:	9207      	str	r2, [sp, #28]
 8008fd2:	e014      	b.n	8008ffe <_vfiprintf_r+0x156>
 8008fd4:	eba0 0308 	sub.w	r3, r0, r8
 8008fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	46a2      	mov	sl, r4
 8008fe2:	e7d2      	b.n	8008f8a <_vfiprintf_r+0xe2>
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	1d19      	adds	r1, r3, #4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	9103      	str	r1, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfbb      	ittet	lt
 8008ff0:	425b      	neglt	r3, r3
 8008ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff6:	9307      	strge	r3, [sp, #28]
 8008ff8:	9307      	strlt	r3, [sp, #28]
 8008ffa:	bfb8      	it	lt
 8008ffc:	9204      	strlt	r2, [sp, #16]
 8008ffe:	7823      	ldrb	r3, [r4, #0]
 8009000:	2b2e      	cmp	r3, #46	; 0x2e
 8009002:	d10c      	bne.n	800901e <_vfiprintf_r+0x176>
 8009004:	7863      	ldrb	r3, [r4, #1]
 8009006:	2b2a      	cmp	r3, #42	; 0x2a
 8009008:	d135      	bne.n	8009076 <_vfiprintf_r+0x1ce>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	1d1a      	adds	r2, r3, #4
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	9203      	str	r2, [sp, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	bfb8      	it	lt
 8009016:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800901a:	3402      	adds	r4, #2
 800901c:	9305      	str	r3, [sp, #20]
 800901e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009104 <_vfiprintf_r+0x25c>
 8009022:	7821      	ldrb	r1, [r4, #0]
 8009024:	2203      	movs	r2, #3
 8009026:	4650      	mov	r0, sl
 8009028:	f7f7 f8e2 	bl	80001f0 <memchr>
 800902c:	b140      	cbz	r0, 8009040 <_vfiprintf_r+0x198>
 800902e:	2340      	movs	r3, #64	; 0x40
 8009030:	eba0 000a 	sub.w	r0, r0, sl
 8009034:	fa03 f000 	lsl.w	r0, r3, r0
 8009038:	9b04      	ldr	r3, [sp, #16]
 800903a:	4303      	orrs	r3, r0
 800903c:	3401      	adds	r4, #1
 800903e:	9304      	str	r3, [sp, #16]
 8009040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009044:	482c      	ldr	r0, [pc, #176]	; (80090f8 <_vfiprintf_r+0x250>)
 8009046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800904a:	2206      	movs	r2, #6
 800904c:	f7f7 f8d0 	bl	80001f0 <memchr>
 8009050:	2800      	cmp	r0, #0
 8009052:	d03f      	beq.n	80090d4 <_vfiprintf_r+0x22c>
 8009054:	4b29      	ldr	r3, [pc, #164]	; (80090fc <_vfiprintf_r+0x254>)
 8009056:	bb1b      	cbnz	r3, 80090a0 <_vfiprintf_r+0x1f8>
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	3307      	adds	r3, #7
 800905c:	f023 0307 	bic.w	r3, r3, #7
 8009060:	3308      	adds	r3, #8
 8009062:	9303      	str	r3, [sp, #12]
 8009064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009066:	443b      	add	r3, r7
 8009068:	9309      	str	r3, [sp, #36]	; 0x24
 800906a:	e767      	b.n	8008f3c <_vfiprintf_r+0x94>
 800906c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009070:	460c      	mov	r4, r1
 8009072:	2001      	movs	r0, #1
 8009074:	e7a5      	b.n	8008fc2 <_vfiprintf_r+0x11a>
 8009076:	2300      	movs	r3, #0
 8009078:	3401      	adds	r4, #1
 800907a:	9305      	str	r3, [sp, #20]
 800907c:	4619      	mov	r1, r3
 800907e:	f04f 0c0a 	mov.w	ip, #10
 8009082:	4620      	mov	r0, r4
 8009084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009088:	3a30      	subs	r2, #48	; 0x30
 800908a:	2a09      	cmp	r2, #9
 800908c:	d903      	bls.n	8009096 <_vfiprintf_r+0x1ee>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0c5      	beq.n	800901e <_vfiprintf_r+0x176>
 8009092:	9105      	str	r1, [sp, #20]
 8009094:	e7c3      	b.n	800901e <_vfiprintf_r+0x176>
 8009096:	fb0c 2101 	mla	r1, ip, r1, r2
 800909a:	4604      	mov	r4, r0
 800909c:	2301      	movs	r3, #1
 800909e:	e7f0      	b.n	8009082 <_vfiprintf_r+0x1da>
 80090a0:	ab03      	add	r3, sp, #12
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	462a      	mov	r2, r5
 80090a6:	4b16      	ldr	r3, [pc, #88]	; (8009100 <_vfiprintf_r+0x258>)
 80090a8:	a904      	add	r1, sp, #16
 80090aa:	4630      	mov	r0, r6
 80090ac:	f7fd fa20 	bl	80064f0 <_printf_float>
 80090b0:	4607      	mov	r7, r0
 80090b2:	1c78      	adds	r0, r7, #1
 80090b4:	d1d6      	bne.n	8009064 <_vfiprintf_r+0x1bc>
 80090b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b8:	07d9      	lsls	r1, r3, #31
 80090ba:	d405      	bmi.n	80090c8 <_vfiprintf_r+0x220>
 80090bc:	89ab      	ldrh	r3, [r5, #12]
 80090be:	059a      	lsls	r2, r3, #22
 80090c0:	d402      	bmi.n	80090c8 <_vfiprintf_r+0x220>
 80090c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c4:	f7fe fff8 	bl	80080b8 <__retarget_lock_release_recursive>
 80090c8:	89ab      	ldrh	r3, [r5, #12]
 80090ca:	065b      	lsls	r3, r3, #25
 80090cc:	f53f af12 	bmi.w	8008ef4 <_vfiprintf_r+0x4c>
 80090d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d2:	e711      	b.n	8008ef8 <_vfiprintf_r+0x50>
 80090d4:	ab03      	add	r3, sp, #12
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	462a      	mov	r2, r5
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <_vfiprintf_r+0x258>)
 80090dc:	a904      	add	r1, sp, #16
 80090de:	4630      	mov	r0, r6
 80090e0:	f7fd fcaa 	bl	8006a38 <_printf_i>
 80090e4:	e7e4      	b.n	80090b0 <_vfiprintf_r+0x208>
 80090e6:	bf00      	nop
 80090e8:	0800a9d0 	.word	0x0800a9d0
 80090ec:	0800a9f0 	.word	0x0800a9f0
 80090f0:	0800a9b0 	.word	0x0800a9b0
 80090f4:	0800ab70 	.word	0x0800ab70
 80090f8:	0800ab76 	.word	0x0800ab76
 80090fc:	080064f1 	.word	0x080064f1
 8009100:	08008e83 	.word	0x08008e83
 8009104:	0800ab6c 	.word	0x0800ab6c

08009108 <_scanf_chars>:
 8009108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800910c:	4615      	mov	r5, r2
 800910e:	688a      	ldr	r2, [r1, #8]
 8009110:	4680      	mov	r8, r0
 8009112:	460c      	mov	r4, r1
 8009114:	b932      	cbnz	r2, 8009124 <_scanf_chars+0x1c>
 8009116:	698a      	ldr	r2, [r1, #24]
 8009118:	2a00      	cmp	r2, #0
 800911a:	bf0c      	ite	eq
 800911c:	2201      	moveq	r2, #1
 800911e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009122:	608a      	str	r2, [r1, #8]
 8009124:	6822      	ldr	r2, [r4, #0]
 8009126:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80091b8 <_scanf_chars+0xb0>
 800912a:	06d1      	lsls	r1, r2, #27
 800912c:	bf5f      	itttt	pl
 800912e:	681a      	ldrpl	r2, [r3, #0]
 8009130:	1d11      	addpl	r1, r2, #4
 8009132:	6019      	strpl	r1, [r3, #0]
 8009134:	6816      	ldrpl	r6, [r2, #0]
 8009136:	2700      	movs	r7, #0
 8009138:	69a0      	ldr	r0, [r4, #24]
 800913a:	b188      	cbz	r0, 8009160 <_scanf_chars+0x58>
 800913c:	2801      	cmp	r0, #1
 800913e:	d107      	bne.n	8009150 <_scanf_chars+0x48>
 8009140:	682a      	ldr	r2, [r5, #0]
 8009142:	7811      	ldrb	r1, [r2, #0]
 8009144:	6962      	ldr	r2, [r4, #20]
 8009146:	5c52      	ldrb	r2, [r2, r1]
 8009148:	b952      	cbnz	r2, 8009160 <_scanf_chars+0x58>
 800914a:	2f00      	cmp	r7, #0
 800914c:	d031      	beq.n	80091b2 <_scanf_chars+0xaa>
 800914e:	e022      	b.n	8009196 <_scanf_chars+0x8e>
 8009150:	2802      	cmp	r0, #2
 8009152:	d120      	bne.n	8009196 <_scanf_chars+0x8e>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f813 3009 	ldrb.w	r3, [r3, r9]
 800915c:	071b      	lsls	r3, r3, #28
 800915e:	d41a      	bmi.n	8009196 <_scanf_chars+0x8e>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	06da      	lsls	r2, r3, #27
 8009164:	bf5e      	ittt	pl
 8009166:	682b      	ldrpl	r3, [r5, #0]
 8009168:	781b      	ldrbpl	r3, [r3, #0]
 800916a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800916e:	682a      	ldr	r2, [r5, #0]
 8009170:	686b      	ldr	r3, [r5, #4]
 8009172:	3201      	adds	r2, #1
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	68a2      	ldr	r2, [r4, #8]
 8009178:	3b01      	subs	r3, #1
 800917a:	3a01      	subs	r2, #1
 800917c:	606b      	str	r3, [r5, #4]
 800917e:	3701      	adds	r7, #1
 8009180:	60a2      	str	r2, [r4, #8]
 8009182:	b142      	cbz	r2, 8009196 <_scanf_chars+0x8e>
 8009184:	2b00      	cmp	r3, #0
 8009186:	dcd7      	bgt.n	8009138 <_scanf_chars+0x30>
 8009188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800918c:	4629      	mov	r1, r5
 800918e:	4640      	mov	r0, r8
 8009190:	4798      	blx	r3
 8009192:	2800      	cmp	r0, #0
 8009194:	d0d0      	beq.n	8009138 <_scanf_chars+0x30>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	f013 0310 	ands.w	r3, r3, #16
 800919c:	d105      	bne.n	80091aa <_scanf_chars+0xa2>
 800919e:	68e2      	ldr	r2, [r4, #12]
 80091a0:	3201      	adds	r2, #1
 80091a2:	60e2      	str	r2, [r4, #12]
 80091a4:	69a2      	ldr	r2, [r4, #24]
 80091a6:	b102      	cbz	r2, 80091aa <_scanf_chars+0xa2>
 80091a8:	7033      	strb	r3, [r6, #0]
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	443b      	add	r3, r7
 80091ae:	6123      	str	r3, [r4, #16]
 80091b0:	2000      	movs	r0, #0
 80091b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b6:	bf00      	nop
 80091b8:	0800abd5 	.word	0x0800abd5

080091bc <_scanf_i>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	4698      	mov	r8, r3
 80091c2:	4b76      	ldr	r3, [pc, #472]	; (800939c <_scanf_i+0x1e0>)
 80091c4:	460c      	mov	r4, r1
 80091c6:	4682      	mov	sl, r0
 80091c8:	4616      	mov	r6, r2
 80091ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091ce:	b087      	sub	sp, #28
 80091d0:	ab03      	add	r3, sp, #12
 80091d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80091d6:	4b72      	ldr	r3, [pc, #456]	; (80093a0 <_scanf_i+0x1e4>)
 80091d8:	69a1      	ldr	r1, [r4, #24]
 80091da:	4a72      	ldr	r2, [pc, #456]	; (80093a4 <_scanf_i+0x1e8>)
 80091dc:	2903      	cmp	r1, #3
 80091de:	bf18      	it	ne
 80091e0:	461a      	movne	r2, r3
 80091e2:	68a3      	ldr	r3, [r4, #8]
 80091e4:	9201      	str	r2, [sp, #4]
 80091e6:	1e5a      	subs	r2, r3, #1
 80091e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80091ec:	bf88      	it	hi
 80091ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80091f2:	4627      	mov	r7, r4
 80091f4:	bf82      	ittt	hi
 80091f6:	eb03 0905 	addhi.w	r9, r3, r5
 80091fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80091fe:	60a3      	strhi	r3, [r4, #8]
 8009200:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009204:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009208:	bf98      	it	ls
 800920a:	f04f 0900 	movls.w	r9, #0
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	463d      	mov	r5, r7
 8009212:	f04f 0b00 	mov.w	fp, #0
 8009216:	6831      	ldr	r1, [r6, #0]
 8009218:	ab03      	add	r3, sp, #12
 800921a:	7809      	ldrb	r1, [r1, #0]
 800921c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009220:	2202      	movs	r2, #2
 8009222:	f7f6 ffe5 	bl	80001f0 <memchr>
 8009226:	b328      	cbz	r0, 8009274 <_scanf_i+0xb8>
 8009228:	f1bb 0f01 	cmp.w	fp, #1
 800922c:	d159      	bne.n	80092e2 <_scanf_i+0x126>
 800922e:	6862      	ldr	r2, [r4, #4]
 8009230:	b92a      	cbnz	r2, 800923e <_scanf_i+0x82>
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	2308      	movs	r3, #8
 8009236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800923a:	6063      	str	r3, [r4, #4]
 800923c:	6022      	str	r2, [r4, #0]
 800923e:	6822      	ldr	r2, [r4, #0]
 8009240:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009244:	6022      	str	r2, [r4, #0]
 8009246:	68a2      	ldr	r2, [r4, #8]
 8009248:	1e51      	subs	r1, r2, #1
 800924a:	60a1      	str	r1, [r4, #8]
 800924c:	b192      	cbz	r2, 8009274 <_scanf_i+0xb8>
 800924e:	6832      	ldr	r2, [r6, #0]
 8009250:	1c51      	adds	r1, r2, #1
 8009252:	6031      	str	r1, [r6, #0]
 8009254:	7812      	ldrb	r2, [r2, #0]
 8009256:	f805 2b01 	strb.w	r2, [r5], #1
 800925a:	6872      	ldr	r2, [r6, #4]
 800925c:	3a01      	subs	r2, #1
 800925e:	2a00      	cmp	r2, #0
 8009260:	6072      	str	r2, [r6, #4]
 8009262:	dc07      	bgt.n	8009274 <_scanf_i+0xb8>
 8009264:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009268:	4631      	mov	r1, r6
 800926a:	4650      	mov	r0, sl
 800926c:	4790      	blx	r2
 800926e:	2800      	cmp	r0, #0
 8009270:	f040 8085 	bne.w	800937e <_scanf_i+0x1c2>
 8009274:	f10b 0b01 	add.w	fp, fp, #1
 8009278:	f1bb 0f03 	cmp.w	fp, #3
 800927c:	d1cb      	bne.n	8009216 <_scanf_i+0x5a>
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	b90b      	cbnz	r3, 8009286 <_scanf_i+0xca>
 8009282:	230a      	movs	r3, #10
 8009284:	6063      	str	r3, [r4, #4]
 8009286:	6863      	ldr	r3, [r4, #4]
 8009288:	4947      	ldr	r1, [pc, #284]	; (80093a8 <_scanf_i+0x1ec>)
 800928a:	6960      	ldr	r0, [r4, #20]
 800928c:	1ac9      	subs	r1, r1, r3
 800928e:	f000 f8af 	bl	80093f0 <__sccl>
 8009292:	f04f 0b00 	mov.w	fp, #0
 8009296:	68a3      	ldr	r3, [r4, #8]
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d03d      	beq.n	800931a <_scanf_i+0x15e>
 800929e:	6831      	ldr	r1, [r6, #0]
 80092a0:	6960      	ldr	r0, [r4, #20]
 80092a2:	f891 c000 	ldrb.w	ip, [r1]
 80092a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d035      	beq.n	800931a <_scanf_i+0x15e>
 80092ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80092b2:	d124      	bne.n	80092fe <_scanf_i+0x142>
 80092b4:	0510      	lsls	r0, r2, #20
 80092b6:	d522      	bpl.n	80092fe <_scanf_i+0x142>
 80092b8:	f10b 0b01 	add.w	fp, fp, #1
 80092bc:	f1b9 0f00 	cmp.w	r9, #0
 80092c0:	d003      	beq.n	80092ca <_scanf_i+0x10e>
 80092c2:	3301      	adds	r3, #1
 80092c4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80092c8:	60a3      	str	r3, [r4, #8]
 80092ca:	6873      	ldr	r3, [r6, #4]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	6073      	str	r3, [r6, #4]
 80092d2:	dd1b      	ble.n	800930c <_scanf_i+0x150>
 80092d4:	6833      	ldr	r3, [r6, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	6033      	str	r3, [r6, #0]
 80092da:	68a3      	ldr	r3, [r4, #8]
 80092dc:	3b01      	subs	r3, #1
 80092de:	60a3      	str	r3, [r4, #8]
 80092e0:	e7d9      	b.n	8009296 <_scanf_i+0xda>
 80092e2:	f1bb 0f02 	cmp.w	fp, #2
 80092e6:	d1ae      	bne.n	8009246 <_scanf_i+0x8a>
 80092e8:	6822      	ldr	r2, [r4, #0]
 80092ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80092ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80092f2:	d1bf      	bne.n	8009274 <_scanf_i+0xb8>
 80092f4:	2310      	movs	r3, #16
 80092f6:	6063      	str	r3, [r4, #4]
 80092f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092fc:	e7a2      	b.n	8009244 <_scanf_i+0x88>
 80092fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009302:	6022      	str	r2, [r4, #0]
 8009304:	780b      	ldrb	r3, [r1, #0]
 8009306:	f805 3b01 	strb.w	r3, [r5], #1
 800930a:	e7de      	b.n	80092ca <_scanf_i+0x10e>
 800930c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009310:	4631      	mov	r1, r6
 8009312:	4650      	mov	r0, sl
 8009314:	4798      	blx	r3
 8009316:	2800      	cmp	r0, #0
 8009318:	d0df      	beq.n	80092da <_scanf_i+0x11e>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	05db      	lsls	r3, r3, #23
 800931e:	d50d      	bpl.n	800933c <_scanf_i+0x180>
 8009320:	42bd      	cmp	r5, r7
 8009322:	d909      	bls.n	8009338 <_scanf_i+0x17c>
 8009324:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009328:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800932c:	4632      	mov	r2, r6
 800932e:	4650      	mov	r0, sl
 8009330:	4798      	blx	r3
 8009332:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009336:	464d      	mov	r5, r9
 8009338:	42bd      	cmp	r5, r7
 800933a:	d02d      	beq.n	8009398 <_scanf_i+0x1dc>
 800933c:	6822      	ldr	r2, [r4, #0]
 800933e:	f012 0210 	ands.w	r2, r2, #16
 8009342:	d113      	bne.n	800936c <_scanf_i+0x1b0>
 8009344:	702a      	strb	r2, [r5, #0]
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	9e01      	ldr	r6, [sp, #4]
 800934a:	4639      	mov	r1, r7
 800934c:	4650      	mov	r0, sl
 800934e:	47b0      	blx	r6
 8009350:	6821      	ldr	r1, [r4, #0]
 8009352:	f8d8 3000 	ldr.w	r3, [r8]
 8009356:	f011 0f20 	tst.w	r1, #32
 800935a:	d013      	beq.n	8009384 <_scanf_i+0x1c8>
 800935c:	1d1a      	adds	r2, r3, #4
 800935e:	f8c8 2000 	str.w	r2, [r8]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6018      	str	r0, [r3, #0]
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60e3      	str	r3, [r4, #12]
 800936c:	1bed      	subs	r5, r5, r7
 800936e:	44ab      	add	fp, r5
 8009370:	6925      	ldr	r5, [r4, #16]
 8009372:	445d      	add	r5, fp
 8009374:	6125      	str	r5, [r4, #16]
 8009376:	2000      	movs	r0, #0
 8009378:	b007      	add	sp, #28
 800937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937e:	f04f 0b00 	mov.w	fp, #0
 8009382:	e7ca      	b.n	800931a <_scanf_i+0x15e>
 8009384:	1d1a      	adds	r2, r3, #4
 8009386:	f8c8 2000 	str.w	r2, [r8]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f011 0f01 	tst.w	r1, #1
 8009390:	bf14      	ite	ne
 8009392:	8018      	strhne	r0, [r3, #0]
 8009394:	6018      	streq	r0, [r3, #0]
 8009396:	e7e6      	b.n	8009366 <_scanf_i+0x1aa>
 8009398:	2001      	movs	r0, #1
 800939a:	e7ed      	b.n	8009378 <_scanf_i+0x1bc>
 800939c:	0800a8bc 	.word	0x0800a8bc
 80093a0:	0800964d 	.word	0x0800964d
 80093a4:	08009565 	.word	0x08009565
 80093a8:	0800ab96 	.word	0x0800ab96

080093ac <_read_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d07      	ldr	r5, [pc, #28]	; (80093cc <_read_r+0x20>)
 80093b0:	4604      	mov	r4, r0
 80093b2:	4608      	mov	r0, r1
 80093b4:	4611      	mov	r1, r2
 80093b6:	2200      	movs	r2, #0
 80093b8:	602a      	str	r2, [r5, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f7f9 f922 	bl	8002604 <_read>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_read_r+0x1e>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_read_r+0x1e>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	2000069c 	.word	0x2000069c

080093d0 <_sbrk_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d06      	ldr	r5, [pc, #24]	; (80093ec <_sbrk_r+0x1c>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	602b      	str	r3, [r5, #0]
 80093dc:	f7f9 f964 	bl	80026a8 <_sbrk>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_sbrk_r+0x1a>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_sbrk_r+0x1a>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	2000069c 	.word	0x2000069c

080093f0 <__sccl>:
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	780b      	ldrb	r3, [r1, #0]
 80093f4:	4604      	mov	r4, r0
 80093f6:	2b5e      	cmp	r3, #94	; 0x5e
 80093f8:	bf0b      	itete	eq
 80093fa:	784b      	ldrbeq	r3, [r1, #1]
 80093fc:	1c48      	addne	r0, r1, #1
 80093fe:	1c88      	addeq	r0, r1, #2
 8009400:	2200      	movne	r2, #0
 8009402:	bf08      	it	eq
 8009404:	2201      	moveq	r2, #1
 8009406:	1e61      	subs	r1, r4, #1
 8009408:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800940c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009410:	42a9      	cmp	r1, r5
 8009412:	d1fb      	bne.n	800940c <__sccl+0x1c>
 8009414:	b90b      	cbnz	r3, 800941a <__sccl+0x2a>
 8009416:	3801      	subs	r0, #1
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	f082 0201 	eor.w	r2, r2, #1
 800941e:	54e2      	strb	r2, [r4, r3]
 8009420:	4605      	mov	r5, r0
 8009422:	4628      	mov	r0, r5
 8009424:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009428:	292d      	cmp	r1, #45	; 0x2d
 800942a:	d006      	beq.n	800943a <__sccl+0x4a>
 800942c:	295d      	cmp	r1, #93	; 0x5d
 800942e:	d0f3      	beq.n	8009418 <__sccl+0x28>
 8009430:	b909      	cbnz	r1, 8009436 <__sccl+0x46>
 8009432:	4628      	mov	r0, r5
 8009434:	e7f0      	b.n	8009418 <__sccl+0x28>
 8009436:	460b      	mov	r3, r1
 8009438:	e7f1      	b.n	800941e <__sccl+0x2e>
 800943a:	786e      	ldrb	r6, [r5, #1]
 800943c:	2e5d      	cmp	r6, #93	; 0x5d
 800943e:	d0fa      	beq.n	8009436 <__sccl+0x46>
 8009440:	42b3      	cmp	r3, r6
 8009442:	dcf8      	bgt.n	8009436 <__sccl+0x46>
 8009444:	3502      	adds	r5, #2
 8009446:	4619      	mov	r1, r3
 8009448:	3101      	adds	r1, #1
 800944a:	428e      	cmp	r6, r1
 800944c:	5462      	strb	r2, [r4, r1]
 800944e:	dcfb      	bgt.n	8009448 <__sccl+0x58>
 8009450:	1af1      	subs	r1, r6, r3
 8009452:	3901      	subs	r1, #1
 8009454:	1c58      	adds	r0, r3, #1
 8009456:	42b3      	cmp	r3, r6
 8009458:	bfa8      	it	ge
 800945a:	2100      	movge	r1, #0
 800945c:	1843      	adds	r3, r0, r1
 800945e:	e7e0      	b.n	8009422 <__sccl+0x32>

08009460 <_strtol_l.constprop.0>:
 8009460:	2b01      	cmp	r3, #1
 8009462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009466:	d001      	beq.n	800946c <_strtol_l.constprop.0+0xc>
 8009468:	2b24      	cmp	r3, #36	; 0x24
 800946a:	d906      	bls.n	800947a <_strtol_l.constprop.0+0x1a>
 800946c:	f7fc ff60 	bl	8006330 <__errno>
 8009470:	2316      	movs	r3, #22
 8009472:	6003      	str	r3, [r0, #0]
 8009474:	2000      	movs	r0, #0
 8009476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009560 <_strtol_l.constprop.0+0x100>
 800947e:	460d      	mov	r5, r1
 8009480:	462e      	mov	r6, r5
 8009482:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009486:	f814 700c 	ldrb.w	r7, [r4, ip]
 800948a:	f017 0708 	ands.w	r7, r7, #8
 800948e:	d1f7      	bne.n	8009480 <_strtol_l.constprop.0+0x20>
 8009490:	2c2d      	cmp	r4, #45	; 0x2d
 8009492:	d132      	bne.n	80094fa <_strtol_l.constprop.0+0x9a>
 8009494:	782c      	ldrb	r4, [r5, #0]
 8009496:	2701      	movs	r7, #1
 8009498:	1cb5      	adds	r5, r6, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d05b      	beq.n	8009556 <_strtol_l.constprop.0+0xf6>
 800949e:	2b10      	cmp	r3, #16
 80094a0:	d109      	bne.n	80094b6 <_strtol_l.constprop.0+0x56>
 80094a2:	2c30      	cmp	r4, #48	; 0x30
 80094a4:	d107      	bne.n	80094b6 <_strtol_l.constprop.0+0x56>
 80094a6:	782c      	ldrb	r4, [r5, #0]
 80094a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80094ac:	2c58      	cmp	r4, #88	; 0x58
 80094ae:	d14d      	bne.n	800954c <_strtol_l.constprop.0+0xec>
 80094b0:	786c      	ldrb	r4, [r5, #1]
 80094b2:	2310      	movs	r3, #16
 80094b4:	3502      	adds	r5, #2
 80094b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80094ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80094be:	f04f 0c00 	mov.w	ip, #0
 80094c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80094c6:	4666      	mov	r6, ip
 80094c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80094cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80094d0:	f1be 0f09 	cmp.w	lr, #9
 80094d4:	d816      	bhi.n	8009504 <_strtol_l.constprop.0+0xa4>
 80094d6:	4674      	mov	r4, lr
 80094d8:	42a3      	cmp	r3, r4
 80094da:	dd24      	ble.n	8009526 <_strtol_l.constprop.0+0xc6>
 80094dc:	f1bc 0f00 	cmp.w	ip, #0
 80094e0:	db1e      	blt.n	8009520 <_strtol_l.constprop.0+0xc0>
 80094e2:	45b1      	cmp	r9, r6
 80094e4:	d31c      	bcc.n	8009520 <_strtol_l.constprop.0+0xc0>
 80094e6:	d101      	bne.n	80094ec <_strtol_l.constprop.0+0x8c>
 80094e8:	45a2      	cmp	sl, r4
 80094ea:	db19      	blt.n	8009520 <_strtol_l.constprop.0+0xc0>
 80094ec:	fb06 4603 	mla	r6, r6, r3, r4
 80094f0:	f04f 0c01 	mov.w	ip, #1
 80094f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f8:	e7e8      	b.n	80094cc <_strtol_l.constprop.0+0x6c>
 80094fa:	2c2b      	cmp	r4, #43	; 0x2b
 80094fc:	bf04      	itt	eq
 80094fe:	782c      	ldrbeq	r4, [r5, #0]
 8009500:	1cb5      	addeq	r5, r6, #2
 8009502:	e7ca      	b.n	800949a <_strtol_l.constprop.0+0x3a>
 8009504:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009508:	f1be 0f19 	cmp.w	lr, #25
 800950c:	d801      	bhi.n	8009512 <_strtol_l.constprop.0+0xb2>
 800950e:	3c37      	subs	r4, #55	; 0x37
 8009510:	e7e2      	b.n	80094d8 <_strtol_l.constprop.0+0x78>
 8009512:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009516:	f1be 0f19 	cmp.w	lr, #25
 800951a:	d804      	bhi.n	8009526 <_strtol_l.constprop.0+0xc6>
 800951c:	3c57      	subs	r4, #87	; 0x57
 800951e:	e7db      	b.n	80094d8 <_strtol_l.constprop.0+0x78>
 8009520:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009524:	e7e6      	b.n	80094f4 <_strtol_l.constprop.0+0x94>
 8009526:	f1bc 0f00 	cmp.w	ip, #0
 800952a:	da05      	bge.n	8009538 <_strtol_l.constprop.0+0xd8>
 800952c:	2322      	movs	r3, #34	; 0x22
 800952e:	6003      	str	r3, [r0, #0]
 8009530:	4646      	mov	r6, r8
 8009532:	b942      	cbnz	r2, 8009546 <_strtol_l.constprop.0+0xe6>
 8009534:	4630      	mov	r0, r6
 8009536:	e79e      	b.n	8009476 <_strtol_l.constprop.0+0x16>
 8009538:	b107      	cbz	r7, 800953c <_strtol_l.constprop.0+0xdc>
 800953a:	4276      	negs	r6, r6
 800953c:	2a00      	cmp	r2, #0
 800953e:	d0f9      	beq.n	8009534 <_strtol_l.constprop.0+0xd4>
 8009540:	f1bc 0f00 	cmp.w	ip, #0
 8009544:	d000      	beq.n	8009548 <_strtol_l.constprop.0+0xe8>
 8009546:	1e69      	subs	r1, r5, #1
 8009548:	6011      	str	r1, [r2, #0]
 800954a:	e7f3      	b.n	8009534 <_strtol_l.constprop.0+0xd4>
 800954c:	2430      	movs	r4, #48	; 0x30
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1b1      	bne.n	80094b6 <_strtol_l.constprop.0+0x56>
 8009552:	2308      	movs	r3, #8
 8009554:	e7af      	b.n	80094b6 <_strtol_l.constprop.0+0x56>
 8009556:	2c30      	cmp	r4, #48	; 0x30
 8009558:	d0a5      	beq.n	80094a6 <_strtol_l.constprop.0+0x46>
 800955a:	230a      	movs	r3, #10
 800955c:	e7ab      	b.n	80094b6 <_strtol_l.constprop.0+0x56>
 800955e:	bf00      	nop
 8009560:	0800abd5 	.word	0x0800abd5

08009564 <_strtol_r>:
 8009564:	f7ff bf7c 	b.w	8009460 <_strtol_l.constprop.0>

08009568 <_strtoul_l.constprop.0>:
 8009568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800956c:	4f36      	ldr	r7, [pc, #216]	; (8009648 <_strtoul_l.constprop.0+0xe0>)
 800956e:	4686      	mov	lr, r0
 8009570:	460d      	mov	r5, r1
 8009572:	4628      	mov	r0, r5
 8009574:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009578:	5de6      	ldrb	r6, [r4, r7]
 800957a:	f016 0608 	ands.w	r6, r6, #8
 800957e:	d1f8      	bne.n	8009572 <_strtoul_l.constprop.0+0xa>
 8009580:	2c2d      	cmp	r4, #45	; 0x2d
 8009582:	d12f      	bne.n	80095e4 <_strtoul_l.constprop.0+0x7c>
 8009584:	782c      	ldrb	r4, [r5, #0]
 8009586:	2601      	movs	r6, #1
 8009588:	1c85      	adds	r5, r0, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d057      	beq.n	800963e <_strtoul_l.constprop.0+0xd6>
 800958e:	2b10      	cmp	r3, #16
 8009590:	d109      	bne.n	80095a6 <_strtoul_l.constprop.0+0x3e>
 8009592:	2c30      	cmp	r4, #48	; 0x30
 8009594:	d107      	bne.n	80095a6 <_strtoul_l.constprop.0+0x3e>
 8009596:	7828      	ldrb	r0, [r5, #0]
 8009598:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800959c:	2858      	cmp	r0, #88	; 0x58
 800959e:	d149      	bne.n	8009634 <_strtoul_l.constprop.0+0xcc>
 80095a0:	786c      	ldrb	r4, [r5, #1]
 80095a2:	2310      	movs	r3, #16
 80095a4:	3502      	adds	r5, #2
 80095a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80095aa:	2700      	movs	r7, #0
 80095ac:	fbb8 f8f3 	udiv	r8, r8, r3
 80095b0:	fb03 f908 	mul.w	r9, r3, r8
 80095b4:	ea6f 0909 	mvn.w	r9, r9
 80095b8:	4638      	mov	r0, r7
 80095ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80095be:	f1bc 0f09 	cmp.w	ip, #9
 80095c2:	d814      	bhi.n	80095ee <_strtoul_l.constprop.0+0x86>
 80095c4:	4664      	mov	r4, ip
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	dd22      	ble.n	8009610 <_strtoul_l.constprop.0+0xa8>
 80095ca:	2f00      	cmp	r7, #0
 80095cc:	db1d      	blt.n	800960a <_strtoul_l.constprop.0+0xa2>
 80095ce:	4580      	cmp	r8, r0
 80095d0:	d31b      	bcc.n	800960a <_strtoul_l.constprop.0+0xa2>
 80095d2:	d101      	bne.n	80095d8 <_strtoul_l.constprop.0+0x70>
 80095d4:	45a1      	cmp	r9, r4
 80095d6:	db18      	blt.n	800960a <_strtoul_l.constprop.0+0xa2>
 80095d8:	fb00 4003 	mla	r0, r0, r3, r4
 80095dc:	2701      	movs	r7, #1
 80095de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095e2:	e7ea      	b.n	80095ba <_strtoul_l.constprop.0+0x52>
 80095e4:	2c2b      	cmp	r4, #43	; 0x2b
 80095e6:	bf04      	itt	eq
 80095e8:	782c      	ldrbeq	r4, [r5, #0]
 80095ea:	1c85      	addeq	r5, r0, #2
 80095ec:	e7cd      	b.n	800958a <_strtoul_l.constprop.0+0x22>
 80095ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80095f2:	f1bc 0f19 	cmp.w	ip, #25
 80095f6:	d801      	bhi.n	80095fc <_strtoul_l.constprop.0+0x94>
 80095f8:	3c37      	subs	r4, #55	; 0x37
 80095fa:	e7e4      	b.n	80095c6 <_strtoul_l.constprop.0+0x5e>
 80095fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009600:	f1bc 0f19 	cmp.w	ip, #25
 8009604:	d804      	bhi.n	8009610 <_strtoul_l.constprop.0+0xa8>
 8009606:	3c57      	subs	r4, #87	; 0x57
 8009608:	e7dd      	b.n	80095c6 <_strtoul_l.constprop.0+0x5e>
 800960a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800960e:	e7e6      	b.n	80095de <_strtoul_l.constprop.0+0x76>
 8009610:	2f00      	cmp	r7, #0
 8009612:	da07      	bge.n	8009624 <_strtoul_l.constprop.0+0xbc>
 8009614:	2322      	movs	r3, #34	; 0x22
 8009616:	f8ce 3000 	str.w	r3, [lr]
 800961a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800961e:	b932      	cbnz	r2, 800962e <_strtoul_l.constprop.0+0xc6>
 8009620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009624:	b106      	cbz	r6, 8009628 <_strtoul_l.constprop.0+0xc0>
 8009626:	4240      	negs	r0, r0
 8009628:	2a00      	cmp	r2, #0
 800962a:	d0f9      	beq.n	8009620 <_strtoul_l.constprop.0+0xb8>
 800962c:	b107      	cbz	r7, 8009630 <_strtoul_l.constprop.0+0xc8>
 800962e:	1e69      	subs	r1, r5, #1
 8009630:	6011      	str	r1, [r2, #0]
 8009632:	e7f5      	b.n	8009620 <_strtoul_l.constprop.0+0xb8>
 8009634:	2430      	movs	r4, #48	; 0x30
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1b5      	bne.n	80095a6 <_strtoul_l.constprop.0+0x3e>
 800963a:	2308      	movs	r3, #8
 800963c:	e7b3      	b.n	80095a6 <_strtoul_l.constprop.0+0x3e>
 800963e:	2c30      	cmp	r4, #48	; 0x30
 8009640:	d0a9      	beq.n	8009596 <_strtoul_l.constprop.0+0x2e>
 8009642:	230a      	movs	r3, #10
 8009644:	e7af      	b.n	80095a6 <_strtoul_l.constprop.0+0x3e>
 8009646:	bf00      	nop
 8009648:	0800abd5 	.word	0x0800abd5

0800964c <_strtoul_r>:
 800964c:	f7ff bf8c 	b.w	8009568 <_strtoul_l.constprop.0>

08009650 <__submore>:
 8009650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009654:	460c      	mov	r4, r1
 8009656:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800965c:	4299      	cmp	r1, r3
 800965e:	d11d      	bne.n	800969c <__submore+0x4c>
 8009660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009664:	f7ff f9b0 	bl	80089c8 <_malloc_r>
 8009668:	b918      	cbnz	r0, 8009672 <__submore+0x22>
 800966a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800966e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009676:	63a3      	str	r3, [r4, #56]	; 0x38
 8009678:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800967c:	6360      	str	r0, [r4, #52]	; 0x34
 800967e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009682:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009686:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800968a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800968e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009692:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009696:	6020      	str	r0, [r4, #0]
 8009698:	2000      	movs	r0, #0
 800969a:	e7e8      	b.n	800966e <__submore+0x1e>
 800969c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800969e:	0077      	lsls	r7, r6, #1
 80096a0:	463a      	mov	r2, r7
 80096a2:	f000 f87f 	bl	80097a4 <_realloc_r>
 80096a6:	4605      	mov	r5, r0
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d0de      	beq.n	800966a <__submore+0x1a>
 80096ac:	eb00 0806 	add.w	r8, r0, r6
 80096b0:	4601      	mov	r1, r0
 80096b2:	4632      	mov	r2, r6
 80096b4:	4640      	mov	r0, r8
 80096b6:	f7fc fe65 	bl	8006384 <memcpy>
 80096ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80096be:	f8c4 8000 	str.w	r8, [r4]
 80096c2:	e7e9      	b.n	8009698 <__submore+0x48>

080096c4 <__assert_func>:
 80096c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096c6:	4614      	mov	r4, r2
 80096c8:	461a      	mov	r2, r3
 80096ca:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <__assert_func+0x2c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4605      	mov	r5, r0
 80096d0:	68d8      	ldr	r0, [r3, #12]
 80096d2:	b14c      	cbz	r4, 80096e8 <__assert_func+0x24>
 80096d4:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <__assert_func+0x30>)
 80096d6:	9100      	str	r1, [sp, #0]
 80096d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096dc:	4906      	ldr	r1, [pc, #24]	; (80096f8 <__assert_func+0x34>)
 80096de:	462b      	mov	r3, r5
 80096e0:	f000 f80e 	bl	8009700 <fiprintf>
 80096e4:	f000 f89a 	bl	800981c <abort>
 80096e8:	4b04      	ldr	r3, [pc, #16]	; (80096fc <__assert_func+0x38>)
 80096ea:	461c      	mov	r4, r3
 80096ec:	e7f3      	b.n	80096d6 <__assert_func+0x12>
 80096ee:	bf00      	nop
 80096f0:	2000000c 	.word	0x2000000c
 80096f4:	0800ab98 	.word	0x0800ab98
 80096f8:	0800aba5 	.word	0x0800aba5
 80096fc:	0800abd3 	.word	0x0800abd3

08009700 <fiprintf>:
 8009700:	b40e      	push	{r1, r2, r3}
 8009702:	b503      	push	{r0, r1, lr}
 8009704:	4601      	mov	r1, r0
 8009706:	ab03      	add	r3, sp, #12
 8009708:	4805      	ldr	r0, [pc, #20]	; (8009720 <fiprintf+0x20>)
 800970a:	f853 2b04 	ldr.w	r2, [r3], #4
 800970e:	6800      	ldr	r0, [r0, #0]
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	f7ff fbc9 	bl	8008ea8 <_vfiprintf_r>
 8009716:	b002      	add	sp, #8
 8009718:	f85d eb04 	ldr.w	lr, [sp], #4
 800971c:	b003      	add	sp, #12
 800971e:	4770      	bx	lr
 8009720:	2000000c 	.word	0x2000000c

08009724 <_fstat_r>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	4d07      	ldr	r5, [pc, #28]	; (8009744 <_fstat_r+0x20>)
 8009728:	2300      	movs	r3, #0
 800972a:	4604      	mov	r4, r0
 800972c:	4608      	mov	r0, r1
 800972e:	4611      	mov	r1, r2
 8009730:	602b      	str	r3, [r5, #0]
 8009732:	f7f8 ff90 	bl	8002656 <_fstat>
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	d102      	bne.n	8009740 <_fstat_r+0x1c>
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	b103      	cbz	r3, 8009740 <_fstat_r+0x1c>
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	bd38      	pop	{r3, r4, r5, pc}
 8009742:	bf00      	nop
 8009744:	2000069c 	.word	0x2000069c

08009748 <_isatty_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d06      	ldr	r5, [pc, #24]	; (8009764 <_isatty_r+0x1c>)
 800974c:	2300      	movs	r3, #0
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	602b      	str	r3, [r5, #0]
 8009754:	f7f8 ff8f 	bl	8002676 <_isatty>
 8009758:	1c43      	adds	r3, r0, #1
 800975a:	d102      	bne.n	8009762 <_isatty_r+0x1a>
 800975c:	682b      	ldr	r3, [r5, #0]
 800975e:	b103      	cbz	r3, 8009762 <_isatty_r+0x1a>
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	2000069c 	.word	0x2000069c

08009768 <__ascii_mbtowc>:
 8009768:	b082      	sub	sp, #8
 800976a:	b901      	cbnz	r1, 800976e <__ascii_mbtowc+0x6>
 800976c:	a901      	add	r1, sp, #4
 800976e:	b142      	cbz	r2, 8009782 <__ascii_mbtowc+0x1a>
 8009770:	b14b      	cbz	r3, 8009786 <__ascii_mbtowc+0x1e>
 8009772:	7813      	ldrb	r3, [r2, #0]
 8009774:	600b      	str	r3, [r1, #0]
 8009776:	7812      	ldrb	r2, [r2, #0]
 8009778:	1e10      	subs	r0, r2, #0
 800977a:	bf18      	it	ne
 800977c:	2001      	movne	r0, #1
 800977e:	b002      	add	sp, #8
 8009780:	4770      	bx	lr
 8009782:	4610      	mov	r0, r2
 8009784:	e7fb      	b.n	800977e <__ascii_mbtowc+0x16>
 8009786:	f06f 0001 	mvn.w	r0, #1
 800978a:	e7f8      	b.n	800977e <__ascii_mbtowc+0x16>

0800978c <__malloc_lock>:
 800978c:	4801      	ldr	r0, [pc, #4]	; (8009794 <__malloc_lock+0x8>)
 800978e:	f7fe bc92 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8009792:	bf00      	nop
 8009794:	20000690 	.word	0x20000690

08009798 <__malloc_unlock>:
 8009798:	4801      	ldr	r0, [pc, #4]	; (80097a0 <__malloc_unlock+0x8>)
 800979a:	f7fe bc8d 	b.w	80080b8 <__retarget_lock_release_recursive>
 800979e:	bf00      	nop
 80097a0:	20000690 	.word	0x20000690

080097a4 <_realloc_r>:
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	4680      	mov	r8, r0
 80097aa:	4614      	mov	r4, r2
 80097ac:	460e      	mov	r6, r1
 80097ae:	b921      	cbnz	r1, 80097ba <_realloc_r+0x16>
 80097b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b4:	4611      	mov	r1, r2
 80097b6:	f7ff b907 	b.w	80089c8 <_malloc_r>
 80097ba:	b92a      	cbnz	r2, 80097c8 <_realloc_r+0x24>
 80097bc:	f7ff f898 	bl	80088f0 <_free_r>
 80097c0:	4625      	mov	r5, r4
 80097c2:	4628      	mov	r0, r5
 80097c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c8:	f000 f82f 	bl	800982a <_malloc_usable_size_r>
 80097cc:	4284      	cmp	r4, r0
 80097ce:	4607      	mov	r7, r0
 80097d0:	d802      	bhi.n	80097d8 <_realloc_r+0x34>
 80097d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097d6:	d812      	bhi.n	80097fe <_realloc_r+0x5a>
 80097d8:	4621      	mov	r1, r4
 80097da:	4640      	mov	r0, r8
 80097dc:	f7ff f8f4 	bl	80089c8 <_malloc_r>
 80097e0:	4605      	mov	r5, r0
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0ed      	beq.n	80097c2 <_realloc_r+0x1e>
 80097e6:	42bc      	cmp	r4, r7
 80097e8:	4622      	mov	r2, r4
 80097ea:	4631      	mov	r1, r6
 80097ec:	bf28      	it	cs
 80097ee:	463a      	movcs	r2, r7
 80097f0:	f7fc fdc8 	bl	8006384 <memcpy>
 80097f4:	4631      	mov	r1, r6
 80097f6:	4640      	mov	r0, r8
 80097f8:	f7ff f87a 	bl	80088f0 <_free_r>
 80097fc:	e7e1      	b.n	80097c2 <_realloc_r+0x1e>
 80097fe:	4635      	mov	r5, r6
 8009800:	e7df      	b.n	80097c2 <_realloc_r+0x1e>

08009802 <__ascii_wctomb>:
 8009802:	b149      	cbz	r1, 8009818 <__ascii_wctomb+0x16>
 8009804:	2aff      	cmp	r2, #255	; 0xff
 8009806:	bf85      	ittet	hi
 8009808:	238a      	movhi	r3, #138	; 0x8a
 800980a:	6003      	strhi	r3, [r0, #0]
 800980c:	700a      	strbls	r2, [r1, #0]
 800980e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009812:	bf98      	it	ls
 8009814:	2001      	movls	r0, #1
 8009816:	4770      	bx	lr
 8009818:	4608      	mov	r0, r1
 800981a:	4770      	bx	lr

0800981c <abort>:
 800981c:	b508      	push	{r3, lr}
 800981e:	2006      	movs	r0, #6
 8009820:	f000 f834 	bl	800988c <raise>
 8009824:	2001      	movs	r0, #1
 8009826:	f7f8 fee3 	bl	80025f0 <_exit>

0800982a <_malloc_usable_size_r>:
 800982a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800982e:	1f18      	subs	r0, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	bfbc      	itt	lt
 8009834:	580b      	ldrlt	r3, [r1, r0]
 8009836:	18c0      	addlt	r0, r0, r3
 8009838:	4770      	bx	lr

0800983a <_raise_r>:
 800983a:	291f      	cmp	r1, #31
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	d904      	bls.n	800984e <_raise_r+0x14>
 8009844:	2316      	movs	r3, #22
 8009846:	6003      	str	r3, [r0, #0]
 8009848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009850:	b112      	cbz	r2, 8009858 <_raise_r+0x1e>
 8009852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009856:	b94b      	cbnz	r3, 800986c <_raise_r+0x32>
 8009858:	4620      	mov	r0, r4
 800985a:	f000 f831 	bl	80098c0 <_getpid_r>
 800985e:	462a      	mov	r2, r5
 8009860:	4601      	mov	r1, r0
 8009862:	4620      	mov	r0, r4
 8009864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009868:	f000 b818 	b.w	800989c <_kill_r>
 800986c:	2b01      	cmp	r3, #1
 800986e:	d00a      	beq.n	8009886 <_raise_r+0x4c>
 8009870:	1c59      	adds	r1, r3, #1
 8009872:	d103      	bne.n	800987c <_raise_r+0x42>
 8009874:	2316      	movs	r3, #22
 8009876:	6003      	str	r3, [r0, #0]
 8009878:	2001      	movs	r0, #1
 800987a:	e7e7      	b.n	800984c <_raise_r+0x12>
 800987c:	2400      	movs	r4, #0
 800987e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009882:	4628      	mov	r0, r5
 8009884:	4798      	blx	r3
 8009886:	2000      	movs	r0, #0
 8009888:	e7e0      	b.n	800984c <_raise_r+0x12>
	...

0800988c <raise>:
 800988c:	4b02      	ldr	r3, [pc, #8]	; (8009898 <raise+0xc>)
 800988e:	4601      	mov	r1, r0
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f7ff bfd2 	b.w	800983a <_raise_r>
 8009896:	bf00      	nop
 8009898:	2000000c 	.word	0x2000000c

0800989c <_kill_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d07      	ldr	r5, [pc, #28]	; (80098bc <_kill_r+0x20>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	4611      	mov	r1, r2
 80098a8:	602b      	str	r3, [r5, #0]
 80098aa:	f7f8 fe91 	bl	80025d0 <_kill>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d102      	bne.n	80098b8 <_kill_r+0x1c>
 80098b2:	682b      	ldr	r3, [r5, #0]
 80098b4:	b103      	cbz	r3, 80098b8 <_kill_r+0x1c>
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	bf00      	nop
 80098bc:	2000069c 	.word	0x2000069c

080098c0 <_getpid_r>:
 80098c0:	f7f8 be7e 	b.w	80025c0 <_getpid>

080098c4 <fabs>:
 80098c4:	ec51 0b10 	vmov	r0, r1, d0
 80098c8:	ee10 2a10 	vmov	r2, s0
 80098cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098d0:	ec43 2b10 	vmov	d0, r2, r3
 80098d4:	4770      	bx	lr
	...

080098d8 <pow>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	ed2d 8b02 	vpush	{d8}
 80098de:	eeb0 8a40 	vmov.f32	s16, s0
 80098e2:	eef0 8a60 	vmov.f32	s17, s1
 80098e6:	ec55 4b11 	vmov	r4, r5, d1
 80098ea:	f000 f891 	bl	8009a10 <__ieee754_pow>
 80098ee:	4622      	mov	r2, r4
 80098f0:	462b      	mov	r3, r5
 80098f2:	4620      	mov	r0, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	ec57 6b10 	vmov	r6, r7, d0
 80098fa:	f7f7 f91f 	bl	8000b3c <__aeabi_dcmpun>
 80098fe:	2800      	cmp	r0, #0
 8009900:	d13b      	bne.n	800997a <pow+0xa2>
 8009902:	ec51 0b18 	vmov	r0, r1, d8
 8009906:	2200      	movs	r2, #0
 8009908:	2300      	movs	r3, #0
 800990a:	f7f7 f8e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800990e:	b1b8      	cbz	r0, 8009940 <pow+0x68>
 8009910:	2200      	movs	r2, #0
 8009912:	2300      	movs	r3, #0
 8009914:	4620      	mov	r0, r4
 8009916:	4629      	mov	r1, r5
 8009918:	f7f7 f8de 	bl	8000ad8 <__aeabi_dcmpeq>
 800991c:	2800      	cmp	r0, #0
 800991e:	d146      	bne.n	80099ae <pow+0xd6>
 8009920:	ec45 4b10 	vmov	d0, r4, r5
 8009924:	f000 fe84 	bl	800a630 <finite>
 8009928:	b338      	cbz	r0, 800997a <pow+0xa2>
 800992a:	2200      	movs	r2, #0
 800992c:	2300      	movs	r3, #0
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f7 f8db 	bl	8000aec <__aeabi_dcmplt>
 8009936:	b300      	cbz	r0, 800997a <pow+0xa2>
 8009938:	f7fc fcfa 	bl	8006330 <__errno>
 800993c:	2322      	movs	r3, #34	; 0x22
 800993e:	e01b      	b.n	8009978 <pow+0xa0>
 8009940:	ec47 6b10 	vmov	d0, r6, r7
 8009944:	f000 fe74 	bl	800a630 <finite>
 8009948:	b9e0      	cbnz	r0, 8009984 <pow+0xac>
 800994a:	eeb0 0a48 	vmov.f32	s0, s16
 800994e:	eef0 0a68 	vmov.f32	s1, s17
 8009952:	f000 fe6d 	bl	800a630 <finite>
 8009956:	b1a8      	cbz	r0, 8009984 <pow+0xac>
 8009958:	ec45 4b10 	vmov	d0, r4, r5
 800995c:	f000 fe68 	bl	800a630 <finite>
 8009960:	b180      	cbz	r0, 8009984 <pow+0xac>
 8009962:	4632      	mov	r2, r6
 8009964:	463b      	mov	r3, r7
 8009966:	4630      	mov	r0, r6
 8009968:	4639      	mov	r1, r7
 800996a:	f7f7 f8e7 	bl	8000b3c <__aeabi_dcmpun>
 800996e:	2800      	cmp	r0, #0
 8009970:	d0e2      	beq.n	8009938 <pow+0x60>
 8009972:	f7fc fcdd 	bl	8006330 <__errno>
 8009976:	2321      	movs	r3, #33	; 0x21
 8009978:	6003      	str	r3, [r0, #0]
 800997a:	ecbd 8b02 	vpop	{d8}
 800997e:	ec47 6b10 	vmov	d0, r6, r7
 8009982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009984:	2200      	movs	r2, #0
 8009986:	2300      	movs	r3, #0
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009990:	2800      	cmp	r0, #0
 8009992:	d0f2      	beq.n	800997a <pow+0xa2>
 8009994:	eeb0 0a48 	vmov.f32	s0, s16
 8009998:	eef0 0a68 	vmov.f32	s1, s17
 800999c:	f000 fe48 	bl	800a630 <finite>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d0ea      	beq.n	800997a <pow+0xa2>
 80099a4:	ec45 4b10 	vmov	d0, r4, r5
 80099a8:	f000 fe42 	bl	800a630 <finite>
 80099ac:	e7c3      	b.n	8009936 <pow+0x5e>
 80099ae:	4f01      	ldr	r7, [pc, #4]	; (80099b4 <pow+0xdc>)
 80099b0:	2600      	movs	r6, #0
 80099b2:	e7e2      	b.n	800997a <pow+0xa2>
 80099b4:	3ff00000 	.word	0x3ff00000

080099b8 <sqrt>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	ed2d 8b02 	vpush	{d8}
 80099be:	ec55 4b10 	vmov	r4, r5, d0
 80099c2:	f000 fd53 	bl	800a46c <__ieee754_sqrt>
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	eeb0 8a40 	vmov.f32	s16, s0
 80099d2:	eef0 8a60 	vmov.f32	s17, s1
 80099d6:	f7f7 f8b1 	bl	8000b3c <__aeabi_dcmpun>
 80099da:	b990      	cbnz	r0, 8009a02 <sqrt+0x4a>
 80099dc:	2200      	movs	r2, #0
 80099de:	2300      	movs	r3, #0
 80099e0:	4620      	mov	r0, r4
 80099e2:	4629      	mov	r1, r5
 80099e4:	f7f7 f882 	bl	8000aec <__aeabi_dcmplt>
 80099e8:	b158      	cbz	r0, 8009a02 <sqrt+0x4a>
 80099ea:	f7fc fca1 	bl	8006330 <__errno>
 80099ee:	2321      	movs	r3, #33	; 0x21
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	2200      	movs	r2, #0
 80099f4:	2300      	movs	r3, #0
 80099f6:	4610      	mov	r0, r2
 80099f8:	4619      	mov	r1, r3
 80099fa:	f7f6 ff2f 	bl	800085c <__aeabi_ddiv>
 80099fe:	ec41 0b18 	vmov	d8, r0, r1
 8009a02:	eeb0 0a48 	vmov.f32	s0, s16
 8009a06:	eef0 0a68 	vmov.f32	s1, s17
 8009a0a:	ecbd 8b02 	vpop	{d8}
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}

08009a10 <__ieee754_pow>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	ed2d 8b06 	vpush	{d8-d10}
 8009a18:	b089      	sub	sp, #36	; 0x24
 8009a1a:	ed8d 1b00 	vstr	d1, [sp]
 8009a1e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009a22:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009a26:	ea58 0102 	orrs.w	r1, r8, r2
 8009a2a:	ec57 6b10 	vmov	r6, r7, d0
 8009a2e:	d115      	bne.n	8009a5c <__ieee754_pow+0x4c>
 8009a30:	19b3      	adds	r3, r6, r6
 8009a32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009a36:	4152      	adcs	r2, r2
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	4b89      	ldr	r3, [pc, #548]	; (8009c60 <__ieee754_pow+0x250>)
 8009a3c:	4193      	sbcs	r3, r2
 8009a3e:	f080 84d2 	bcs.w	800a3e6 <__ieee754_pow+0x9d6>
 8009a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a46:	4630      	mov	r0, r6
 8009a48:	4639      	mov	r1, r7
 8009a4a:	f7f6 fc27 	bl	800029c <__adddf3>
 8009a4e:	ec41 0b10 	vmov	d0, r0, r1
 8009a52:	b009      	add	sp, #36	; 0x24
 8009a54:	ecbd 8b06 	vpop	{d8-d10}
 8009a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5c:	4b81      	ldr	r3, [pc, #516]	; (8009c64 <__ieee754_pow+0x254>)
 8009a5e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009a62:	429c      	cmp	r4, r3
 8009a64:	ee10 aa10 	vmov	sl, s0
 8009a68:	463d      	mov	r5, r7
 8009a6a:	dc06      	bgt.n	8009a7a <__ieee754_pow+0x6a>
 8009a6c:	d101      	bne.n	8009a72 <__ieee754_pow+0x62>
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d1e7      	bne.n	8009a42 <__ieee754_pow+0x32>
 8009a72:	4598      	cmp	r8, r3
 8009a74:	dc01      	bgt.n	8009a7a <__ieee754_pow+0x6a>
 8009a76:	d10f      	bne.n	8009a98 <__ieee754_pow+0x88>
 8009a78:	b172      	cbz	r2, 8009a98 <__ieee754_pow+0x88>
 8009a7a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009a7e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009a82:	ea55 050a 	orrs.w	r5, r5, sl
 8009a86:	d1dc      	bne.n	8009a42 <__ieee754_pow+0x32>
 8009a88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a8c:	18db      	adds	r3, r3, r3
 8009a8e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009a92:	4152      	adcs	r2, r2
 8009a94:	429d      	cmp	r5, r3
 8009a96:	e7d0      	b.n	8009a3a <__ieee754_pow+0x2a>
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	da3b      	bge.n	8009b14 <__ieee754_pow+0x104>
 8009a9c:	4b72      	ldr	r3, [pc, #456]	; (8009c68 <__ieee754_pow+0x258>)
 8009a9e:	4598      	cmp	r8, r3
 8009aa0:	dc51      	bgt.n	8009b46 <__ieee754_pow+0x136>
 8009aa2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009aa6:	4598      	cmp	r8, r3
 8009aa8:	f340 84ac 	ble.w	800a404 <__ieee754_pow+0x9f4>
 8009aac:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ab0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ab4:	2b14      	cmp	r3, #20
 8009ab6:	dd0f      	ble.n	8009ad8 <__ieee754_pow+0xc8>
 8009ab8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009abc:	fa22 f103 	lsr.w	r1, r2, r3
 8009ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	f040 849d 	bne.w	800a404 <__ieee754_pow+0x9f4>
 8009aca:	f001 0101 	and.w	r1, r1, #1
 8009ace:	f1c1 0302 	rsb	r3, r1, #2
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	b182      	cbz	r2, 8009af8 <__ieee754_pow+0xe8>
 8009ad6:	e05f      	b.n	8009b98 <__ieee754_pow+0x188>
 8009ad8:	2a00      	cmp	r2, #0
 8009ada:	d15b      	bne.n	8009b94 <__ieee754_pow+0x184>
 8009adc:	f1c3 0314 	rsb	r3, r3, #20
 8009ae0:	fa48 f103 	asr.w	r1, r8, r3
 8009ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae8:	4543      	cmp	r3, r8
 8009aea:	f040 8488 	bne.w	800a3fe <__ieee754_pow+0x9ee>
 8009aee:	f001 0101 	and.w	r1, r1, #1
 8009af2:	f1c1 0302 	rsb	r3, r1, #2
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	4b5c      	ldr	r3, [pc, #368]	; (8009c6c <__ieee754_pow+0x25c>)
 8009afa:	4598      	cmp	r8, r3
 8009afc:	d132      	bne.n	8009b64 <__ieee754_pow+0x154>
 8009afe:	f1b9 0f00 	cmp.w	r9, #0
 8009b02:	f280 8478 	bge.w	800a3f6 <__ieee754_pow+0x9e6>
 8009b06:	4959      	ldr	r1, [pc, #356]	; (8009c6c <__ieee754_pow+0x25c>)
 8009b08:	4632      	mov	r2, r6
 8009b0a:	463b      	mov	r3, r7
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f7f6 fea5 	bl	800085c <__aeabi_ddiv>
 8009b12:	e79c      	b.n	8009a4e <__ieee754_pow+0x3e>
 8009b14:	2300      	movs	r3, #0
 8009b16:	9304      	str	r3, [sp, #16]
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	d13d      	bne.n	8009b98 <__ieee754_pow+0x188>
 8009b1c:	4b51      	ldr	r3, [pc, #324]	; (8009c64 <__ieee754_pow+0x254>)
 8009b1e:	4598      	cmp	r8, r3
 8009b20:	d1ea      	bne.n	8009af8 <__ieee754_pow+0xe8>
 8009b22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009b26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009b2a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b2e:	f000 845a 	beq.w	800a3e6 <__ieee754_pow+0x9d6>
 8009b32:	4b4f      	ldr	r3, [pc, #316]	; (8009c70 <__ieee754_pow+0x260>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	dd08      	ble.n	8009b4a <__ieee754_pow+0x13a>
 8009b38:	f1b9 0f00 	cmp.w	r9, #0
 8009b3c:	f2c0 8457 	blt.w	800a3ee <__ieee754_pow+0x9de>
 8009b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b44:	e783      	b.n	8009a4e <__ieee754_pow+0x3e>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e7e5      	b.n	8009b16 <__ieee754_pow+0x106>
 8009b4a:	f1b9 0f00 	cmp.w	r9, #0
 8009b4e:	f04f 0000 	mov.w	r0, #0
 8009b52:	f04f 0100 	mov.w	r1, #0
 8009b56:	f6bf af7a 	bge.w	8009a4e <__ieee754_pow+0x3e>
 8009b5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009b5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b62:	e774      	b.n	8009a4e <__ieee754_pow+0x3e>
 8009b64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009b68:	d106      	bne.n	8009b78 <__ieee754_pow+0x168>
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	4630      	mov	r0, r6
 8009b70:	4639      	mov	r1, r7
 8009b72:	f7f6 fd49 	bl	8000608 <__aeabi_dmul>
 8009b76:	e76a      	b.n	8009a4e <__ieee754_pow+0x3e>
 8009b78:	4b3e      	ldr	r3, [pc, #248]	; (8009c74 <__ieee754_pow+0x264>)
 8009b7a:	4599      	cmp	r9, r3
 8009b7c:	d10c      	bne.n	8009b98 <__ieee754_pow+0x188>
 8009b7e:	2d00      	cmp	r5, #0
 8009b80:	db0a      	blt.n	8009b98 <__ieee754_pow+0x188>
 8009b82:	ec47 6b10 	vmov	d0, r6, r7
 8009b86:	b009      	add	sp, #36	; 0x24
 8009b88:	ecbd 8b06 	vpop	{d8-d10}
 8009b8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	f000 bc6c 	b.w	800a46c <__ieee754_sqrt>
 8009b94:	2300      	movs	r3, #0
 8009b96:	9304      	str	r3, [sp, #16]
 8009b98:	ec47 6b10 	vmov	d0, r6, r7
 8009b9c:	f7ff fe92 	bl	80098c4 <fabs>
 8009ba0:	ec51 0b10 	vmov	r0, r1, d0
 8009ba4:	f1ba 0f00 	cmp.w	sl, #0
 8009ba8:	d129      	bne.n	8009bfe <__ieee754_pow+0x1ee>
 8009baa:	b124      	cbz	r4, 8009bb6 <__ieee754_pow+0x1a6>
 8009bac:	4b2f      	ldr	r3, [pc, #188]	; (8009c6c <__ieee754_pow+0x25c>)
 8009bae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d123      	bne.n	8009bfe <__ieee754_pow+0x1ee>
 8009bb6:	f1b9 0f00 	cmp.w	r9, #0
 8009bba:	da05      	bge.n	8009bc8 <__ieee754_pow+0x1b8>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	492a      	ldr	r1, [pc, #168]	; (8009c6c <__ieee754_pow+0x25c>)
 8009bc4:	f7f6 fe4a 	bl	800085c <__aeabi_ddiv>
 8009bc8:	2d00      	cmp	r5, #0
 8009bca:	f6bf af40 	bge.w	8009a4e <__ieee754_pow+0x3e>
 8009bce:	9b04      	ldr	r3, [sp, #16]
 8009bd0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009bd4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009bd8:	4323      	orrs	r3, r4
 8009bda:	d108      	bne.n	8009bee <__ieee754_pow+0x1de>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4610      	mov	r0, r2
 8009be2:	4619      	mov	r1, r3
 8009be4:	f7f6 fb58 	bl	8000298 <__aeabi_dsub>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	e78f      	b.n	8009b0e <__ieee754_pow+0xfe>
 8009bee:	9b04      	ldr	r3, [sp, #16]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	f47f af2c 	bne.w	8009a4e <__ieee754_pow+0x3e>
 8009bf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	e727      	b.n	8009a4e <__ieee754_pow+0x3e>
 8009bfe:	0feb      	lsrs	r3, r5, #31
 8009c00:	3b01      	subs	r3, #1
 8009c02:	9306      	str	r3, [sp, #24]
 8009c04:	9a06      	ldr	r2, [sp, #24]
 8009c06:	9b04      	ldr	r3, [sp, #16]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	d102      	bne.n	8009c12 <__ieee754_pow+0x202>
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	463b      	mov	r3, r7
 8009c10:	e7e6      	b.n	8009be0 <__ieee754_pow+0x1d0>
 8009c12:	4b19      	ldr	r3, [pc, #100]	; (8009c78 <__ieee754_pow+0x268>)
 8009c14:	4598      	cmp	r8, r3
 8009c16:	f340 80fb 	ble.w	8009e10 <__ieee754_pow+0x400>
 8009c1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009c1e:	4598      	cmp	r8, r3
 8009c20:	4b13      	ldr	r3, [pc, #76]	; (8009c70 <__ieee754_pow+0x260>)
 8009c22:	dd0c      	ble.n	8009c3e <__ieee754_pow+0x22e>
 8009c24:	429c      	cmp	r4, r3
 8009c26:	dc0f      	bgt.n	8009c48 <__ieee754_pow+0x238>
 8009c28:	f1b9 0f00 	cmp.w	r9, #0
 8009c2c:	da0f      	bge.n	8009c4e <__ieee754_pow+0x23e>
 8009c2e:	2000      	movs	r0, #0
 8009c30:	b009      	add	sp, #36	; 0x24
 8009c32:	ecbd 8b06 	vpop	{d8-d10}
 8009c36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	f000 bcf0 	b.w	800a61e <__math_oflow>
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	dbf2      	blt.n	8009c28 <__ieee754_pow+0x218>
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <__ieee754_pow+0x25c>)
 8009c44:	429c      	cmp	r4, r3
 8009c46:	dd19      	ble.n	8009c7c <__ieee754_pow+0x26c>
 8009c48:	f1b9 0f00 	cmp.w	r9, #0
 8009c4c:	dcef      	bgt.n	8009c2e <__ieee754_pow+0x21e>
 8009c4e:	2000      	movs	r0, #0
 8009c50:	b009      	add	sp, #36	; 0x24
 8009c52:	ecbd 8b06 	vpop	{d8-d10}
 8009c56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	f000 bcd7 	b.w	800a60c <__math_uflow>
 8009c5e:	bf00      	nop
 8009c60:	fff00000 	.word	0xfff00000
 8009c64:	7ff00000 	.word	0x7ff00000
 8009c68:	433fffff 	.word	0x433fffff
 8009c6c:	3ff00000 	.word	0x3ff00000
 8009c70:	3fefffff 	.word	0x3fefffff
 8009c74:	3fe00000 	.word	0x3fe00000
 8009c78:	41e00000 	.word	0x41e00000
 8009c7c:	4b60      	ldr	r3, [pc, #384]	; (8009e00 <__ieee754_pow+0x3f0>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f7f6 fb0a 	bl	8000298 <__aeabi_dsub>
 8009c84:	a354      	add	r3, pc, #336	; (adr r3, 8009dd8 <__ieee754_pow+0x3c8>)
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	f7f6 fcbb 	bl	8000608 <__aeabi_dmul>
 8009c92:	a353      	add	r3, pc, #332	; (adr r3, 8009de0 <__ieee754_pow+0x3d0>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	f7f6 fcb2 	bl	8000608 <__aeabi_dmul>
 8009ca4:	4b57      	ldr	r3, [pc, #348]	; (8009e04 <__ieee754_pow+0x3f4>)
 8009ca6:	4682      	mov	sl, r0
 8009ca8:	468b      	mov	fp, r1
 8009caa:	2200      	movs	r2, #0
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f7f6 fcaa 	bl	8000608 <__aeabi_dmul>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	a14b      	add	r1, pc, #300	; (adr r1, 8009de8 <__ieee754_pow+0x3d8>)
 8009cba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cbe:	f7f6 faeb 	bl	8000298 <__aeabi_dsub>
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	462b      	mov	r3, r5
 8009cc6:	f7f6 fc9f 	bl	8000608 <__aeabi_dmul>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	2000      	movs	r0, #0
 8009cd0:	494d      	ldr	r1, [pc, #308]	; (8009e08 <__ieee754_pow+0x3f8>)
 8009cd2:	f7f6 fae1 	bl	8000298 <__aeabi_dsub>
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	4680      	mov	r8, r0
 8009cda:	4689      	mov	r9, r1
 8009cdc:	462b      	mov	r3, r5
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 fc91 	bl	8000608 <__aeabi_dmul>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4640      	mov	r0, r8
 8009cec:	4649      	mov	r1, r9
 8009cee:	f7f6 fc8b 	bl	8000608 <__aeabi_dmul>
 8009cf2:	a33f      	add	r3, pc, #252	; (adr r3, 8009df0 <__ieee754_pow+0x3e0>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 fc86 	bl	8000608 <__aeabi_dmul>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4650      	mov	r0, sl
 8009d02:	4659      	mov	r1, fp
 8009d04:	f7f6 fac8 	bl	8000298 <__aeabi_dsub>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	4689      	mov	r9, r1
 8009d10:	4630      	mov	r0, r6
 8009d12:	4639      	mov	r1, r7
 8009d14:	f7f6 fac2 	bl	800029c <__adddf3>
 8009d18:	2000      	movs	r0, #0
 8009d1a:	4632      	mov	r2, r6
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	4604      	mov	r4, r0
 8009d20:	460d      	mov	r5, r1
 8009d22:	f7f6 fab9 	bl	8000298 <__aeabi_dsub>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4640      	mov	r0, r8
 8009d2c:	4649      	mov	r1, r9
 8009d2e:	f7f6 fab3 	bl	8000298 <__aeabi_dsub>
 8009d32:	9b04      	ldr	r3, [sp, #16]
 8009d34:	9a06      	ldr	r2, [sp, #24]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	4682      	mov	sl, r0
 8009d3c:	468b      	mov	fp, r1
 8009d3e:	f040 81e7 	bne.w	800a110 <__ieee754_pow+0x700>
 8009d42:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009df8 <__ieee754_pow+0x3e8>
 8009d46:	eeb0 8a47 	vmov.f32	s16, s14
 8009d4a:	eef0 8a67 	vmov.f32	s17, s15
 8009d4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009d52:	2600      	movs	r6, #0
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d5c:	f7f6 fa9c 	bl	8000298 <__aeabi_dsub>
 8009d60:	4622      	mov	r2, r4
 8009d62:	462b      	mov	r3, r5
 8009d64:	f7f6 fc50 	bl	8000608 <__aeabi_dmul>
 8009d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	4689      	mov	r9, r1
 8009d70:	4650      	mov	r0, sl
 8009d72:	4659      	mov	r1, fp
 8009d74:	f7f6 fc48 	bl	8000608 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	4649      	mov	r1, r9
 8009d80:	f7f6 fa8c 	bl	800029c <__adddf3>
 8009d84:	4632      	mov	r2, r6
 8009d86:	463b      	mov	r3, r7
 8009d88:	4680      	mov	r8, r0
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fc3a 	bl	8000608 <__aeabi_dmul>
 8009d94:	460b      	mov	r3, r1
 8009d96:	4604      	mov	r4, r0
 8009d98:	460d      	mov	r5, r1
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	4640      	mov	r0, r8
 8009da0:	f7f6 fa7c 	bl	800029c <__adddf3>
 8009da4:	4b19      	ldr	r3, [pc, #100]	; (8009e0c <__ieee754_pow+0x3fc>)
 8009da6:	4299      	cmp	r1, r3
 8009da8:	ec45 4b19 	vmov	d9, r4, r5
 8009dac:	4606      	mov	r6, r0
 8009dae:	460f      	mov	r7, r1
 8009db0:	468b      	mov	fp, r1
 8009db2:	f340 82f1 	ble.w	800a398 <__ieee754_pow+0x988>
 8009db6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009dba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009dbe:	4303      	orrs	r3, r0
 8009dc0:	f000 81e4 	beq.w	800a18c <__ieee754_pow+0x77c>
 8009dc4:	ec51 0b18 	vmov	r0, r1, d8
 8009dc8:	2200      	movs	r2, #0
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f7f6 fe8e 	bl	8000aec <__aeabi_dcmplt>
 8009dd0:	3800      	subs	r0, #0
 8009dd2:	bf18      	it	ne
 8009dd4:	2001      	movne	r0, #1
 8009dd6:	e72b      	b.n	8009c30 <__ieee754_pow+0x220>
 8009dd8:	60000000 	.word	0x60000000
 8009ddc:	3ff71547 	.word	0x3ff71547
 8009de0:	f85ddf44 	.word	0xf85ddf44
 8009de4:	3e54ae0b 	.word	0x3e54ae0b
 8009de8:	55555555 	.word	0x55555555
 8009dec:	3fd55555 	.word	0x3fd55555
 8009df0:	652b82fe 	.word	0x652b82fe
 8009df4:	3ff71547 	.word	0x3ff71547
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	bff00000 	.word	0xbff00000
 8009e00:	3ff00000 	.word	0x3ff00000
 8009e04:	3fd00000 	.word	0x3fd00000
 8009e08:	3fe00000 	.word	0x3fe00000
 8009e0c:	408fffff 	.word	0x408fffff
 8009e10:	4bd5      	ldr	r3, [pc, #852]	; (800a168 <__ieee754_pow+0x758>)
 8009e12:	402b      	ands	r3, r5
 8009e14:	2200      	movs	r2, #0
 8009e16:	b92b      	cbnz	r3, 8009e24 <__ieee754_pow+0x414>
 8009e18:	4bd4      	ldr	r3, [pc, #848]	; (800a16c <__ieee754_pow+0x75c>)
 8009e1a:	f7f6 fbf5 	bl	8000608 <__aeabi_dmul>
 8009e1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009e22:	460c      	mov	r4, r1
 8009e24:	1523      	asrs	r3, r4, #20
 8009e26:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e2a:	4413      	add	r3, r2
 8009e2c:	9305      	str	r3, [sp, #20]
 8009e2e:	4bd0      	ldr	r3, [pc, #832]	; (800a170 <__ieee754_pow+0x760>)
 8009e30:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e34:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009e38:	429c      	cmp	r4, r3
 8009e3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e3e:	dd08      	ble.n	8009e52 <__ieee754_pow+0x442>
 8009e40:	4bcc      	ldr	r3, [pc, #816]	; (800a174 <__ieee754_pow+0x764>)
 8009e42:	429c      	cmp	r4, r3
 8009e44:	f340 8162 	ble.w	800a10c <__ieee754_pow+0x6fc>
 8009e48:	9b05      	ldr	r3, [sp, #20]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9305      	str	r3, [sp, #20]
 8009e4e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009e52:	2400      	movs	r4, #0
 8009e54:	00e3      	lsls	r3, r4, #3
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	4bc7      	ldr	r3, [pc, #796]	; (800a178 <__ieee754_pow+0x768>)
 8009e5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e5e:	ed93 7b00 	vldr	d7, [r3]
 8009e62:	4629      	mov	r1, r5
 8009e64:	ec53 2b17 	vmov	r2, r3, d7
 8009e68:	eeb0 9a47 	vmov.f32	s18, s14
 8009e6c:	eef0 9a67 	vmov.f32	s19, s15
 8009e70:	4682      	mov	sl, r0
 8009e72:	f7f6 fa11 	bl	8000298 <__aeabi_dsub>
 8009e76:	4652      	mov	r2, sl
 8009e78:	4606      	mov	r6, r0
 8009e7a:	460f      	mov	r7, r1
 8009e7c:	462b      	mov	r3, r5
 8009e7e:	ec51 0b19 	vmov	r0, r1, d9
 8009e82:	f7f6 fa0b 	bl	800029c <__adddf3>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	49bb      	ldr	r1, [pc, #748]	; (800a17c <__ieee754_pow+0x76c>)
 8009e8e:	f7f6 fce5 	bl	800085c <__aeabi_ddiv>
 8009e92:	ec41 0b1a 	vmov	d10, r0, r1
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	f7f6 fbb3 	bl	8000608 <__aeabi_dmul>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea8:	9302      	str	r3, [sp, #8]
 8009eaa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009eae:	46ab      	mov	fp, r5
 8009eb0:	106d      	asrs	r5, r5, #1
 8009eb2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009eb6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009eba:	ec41 0b18 	vmov	d8, r0, r1
 8009ebe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	4614      	mov	r4, r2
 8009eca:	461d      	mov	r5, r3
 8009ecc:	f7f6 fb9c 	bl	8000608 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	f7f6 f9de 	bl	8000298 <__aeabi_dsub>
 8009edc:	ec53 2b19 	vmov	r2, r3, d9
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	460f      	mov	r7, r1
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 f9d6 	bl	8000298 <__aeabi_dsub>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4650      	mov	r0, sl
 8009ef2:	4659      	mov	r1, fp
 8009ef4:	f7f6 f9d0 	bl	8000298 <__aeabi_dsub>
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	f7f6 fb84 	bl	8000608 <__aeabi_dmul>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4630      	mov	r0, r6
 8009f06:	4639      	mov	r1, r7
 8009f08:	f7f6 f9c6 	bl	8000298 <__aeabi_dsub>
 8009f0c:	ec53 2b1a 	vmov	r2, r3, d10
 8009f10:	f7f6 fb7a 	bl	8000608 <__aeabi_dmul>
 8009f14:	ec53 2b18 	vmov	r2, r3, d8
 8009f18:	ec41 0b19 	vmov	d9, r0, r1
 8009f1c:	ec51 0b18 	vmov	r0, r1, d8
 8009f20:	f7f6 fb72 	bl	8000608 <__aeabi_dmul>
 8009f24:	a37c      	add	r3, pc, #496	; (adr r3, 800a118 <__ieee754_pow+0x708>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	f7f6 fb6b 	bl	8000608 <__aeabi_dmul>
 8009f32:	a37b      	add	r3, pc, #492	; (adr r3, 800a120 <__ieee754_pow+0x710>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f7f6 f9b0 	bl	800029c <__adddf3>
 8009f3c:	4622      	mov	r2, r4
 8009f3e:	462b      	mov	r3, r5
 8009f40:	f7f6 fb62 	bl	8000608 <__aeabi_dmul>
 8009f44:	a378      	add	r3, pc, #480	; (adr r3, 800a128 <__ieee754_pow+0x718>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f7f6 f9a7 	bl	800029c <__adddf3>
 8009f4e:	4622      	mov	r2, r4
 8009f50:	462b      	mov	r3, r5
 8009f52:	f7f6 fb59 	bl	8000608 <__aeabi_dmul>
 8009f56:	a376      	add	r3, pc, #472	; (adr r3, 800a130 <__ieee754_pow+0x720>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 f99e 	bl	800029c <__adddf3>
 8009f60:	4622      	mov	r2, r4
 8009f62:	462b      	mov	r3, r5
 8009f64:	f7f6 fb50 	bl	8000608 <__aeabi_dmul>
 8009f68:	a373      	add	r3, pc, #460	; (adr r3, 800a138 <__ieee754_pow+0x728>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 f995 	bl	800029c <__adddf3>
 8009f72:	4622      	mov	r2, r4
 8009f74:	462b      	mov	r3, r5
 8009f76:	f7f6 fb47 	bl	8000608 <__aeabi_dmul>
 8009f7a:	a371      	add	r3, pc, #452	; (adr r3, 800a140 <__ieee754_pow+0x730>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f98c 	bl	800029c <__adddf3>
 8009f84:	4622      	mov	r2, r4
 8009f86:	4606      	mov	r6, r0
 8009f88:	460f      	mov	r7, r1
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	4629      	mov	r1, r5
 8009f90:	f7f6 fb3a 	bl	8000608 <__aeabi_dmul>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4630      	mov	r0, r6
 8009f9a:	4639      	mov	r1, r7
 8009f9c:	f7f6 fb34 	bl	8000608 <__aeabi_dmul>
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	460d      	mov	r5, r1
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	ec51 0b18 	vmov	r0, r1, d8
 8009fac:	f7f6 f976 	bl	800029c <__adddf3>
 8009fb0:	ec53 2b19 	vmov	r2, r3, d9
 8009fb4:	f7f6 fb28 	bl	8000608 <__aeabi_dmul>
 8009fb8:	4622      	mov	r2, r4
 8009fba:	462b      	mov	r3, r5
 8009fbc:	f7f6 f96e 	bl	800029c <__adddf3>
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	4682      	mov	sl, r0
 8009fc4:	468b      	mov	fp, r1
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	4640      	mov	r0, r8
 8009fca:	4649      	mov	r1, r9
 8009fcc:	f7f6 fb1c 	bl	8000608 <__aeabi_dmul>
 8009fd0:	4b6b      	ldr	r3, [pc, #428]	; (800a180 <__ieee754_pow+0x770>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	f7f6 f960 	bl	800029c <__adddf3>
 8009fdc:	4652      	mov	r2, sl
 8009fde:	465b      	mov	r3, fp
 8009fe0:	f7f6 f95c 	bl	800029c <__adddf3>
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4640      	mov	r0, r8
 8009ff0:	4649      	mov	r1, r9
 8009ff2:	f7f6 fb09 	bl	8000608 <__aeabi_dmul>
 8009ff6:	4b62      	ldr	r3, [pc, #392]	; (800a180 <__ieee754_pow+0x770>)
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	4620      	mov	r0, r4
 800a000:	4629      	mov	r1, r5
 800a002:	f7f6 f949 	bl	8000298 <__aeabi_dsub>
 800a006:	4632      	mov	r2, r6
 800a008:	463b      	mov	r3, r7
 800a00a:	f7f6 f945 	bl	8000298 <__aeabi_dsub>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4650      	mov	r0, sl
 800a014:	4659      	mov	r1, fp
 800a016:	f7f6 f93f 	bl	8000298 <__aeabi_dsub>
 800a01a:	ec53 2b18 	vmov	r2, r3, d8
 800a01e:	f7f6 faf3 	bl	8000608 <__aeabi_dmul>
 800a022:	4622      	mov	r2, r4
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	462b      	mov	r3, r5
 800a02a:	ec51 0b19 	vmov	r0, r1, d9
 800a02e:	f7f6 faeb 	bl	8000608 <__aeabi_dmul>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4630      	mov	r0, r6
 800a038:	4639      	mov	r1, r7
 800a03a:	f7f6 f92f 	bl	800029c <__adddf3>
 800a03e:	4606      	mov	r6, r0
 800a040:	460f      	mov	r7, r1
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4640      	mov	r0, r8
 800a048:	4649      	mov	r1, r9
 800a04a:	f7f6 f927 	bl	800029c <__adddf3>
 800a04e:	a33e      	add	r3, pc, #248	; (adr r3, 800a148 <__ieee754_pow+0x738>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	2000      	movs	r0, #0
 800a056:	4604      	mov	r4, r0
 800a058:	460d      	mov	r5, r1
 800a05a:	f7f6 fad5 	bl	8000608 <__aeabi_dmul>
 800a05e:	4642      	mov	r2, r8
 800a060:	ec41 0b18 	vmov	d8, r0, r1
 800a064:	464b      	mov	r3, r9
 800a066:	4620      	mov	r0, r4
 800a068:	4629      	mov	r1, r5
 800a06a:	f7f6 f915 	bl	8000298 <__aeabi_dsub>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	4630      	mov	r0, r6
 800a074:	4639      	mov	r1, r7
 800a076:	f7f6 f90f 	bl	8000298 <__aeabi_dsub>
 800a07a:	a335      	add	r3, pc, #212	; (adr r3, 800a150 <__ieee754_pow+0x740>)
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f7f6 fac2 	bl	8000608 <__aeabi_dmul>
 800a084:	a334      	add	r3, pc, #208	; (adr r3, 800a158 <__ieee754_pow+0x748>)
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	4606      	mov	r6, r0
 800a08c:	460f      	mov	r7, r1
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 fab9 	bl	8000608 <__aeabi_dmul>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4630      	mov	r0, r6
 800a09c:	4639      	mov	r1, r7
 800a09e:	f7f6 f8fd 	bl	800029c <__adddf3>
 800a0a2:	9a07      	ldr	r2, [sp, #28]
 800a0a4:	4b37      	ldr	r3, [pc, #220]	; (800a184 <__ieee754_pow+0x774>)
 800a0a6:	4413      	add	r3, r2
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f7f6 f8f6 	bl	800029c <__adddf3>
 800a0b0:	4682      	mov	sl, r0
 800a0b2:	9805      	ldr	r0, [sp, #20]
 800a0b4:	468b      	mov	fp, r1
 800a0b6:	f7f6 fa3d 	bl	8000534 <__aeabi_i2d>
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	4b32      	ldr	r3, [pc, #200]	; (800a188 <__ieee754_pow+0x778>)
 800a0be:	4413      	add	r3, r2
 800a0c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	460f      	mov	r7, r1
 800a0c8:	4652      	mov	r2, sl
 800a0ca:	465b      	mov	r3, fp
 800a0cc:	ec51 0b18 	vmov	r0, r1, d8
 800a0d0:	f7f6 f8e4 	bl	800029c <__adddf3>
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	f7f6 f8e0 	bl	800029c <__adddf3>
 800a0dc:	4632      	mov	r2, r6
 800a0de:	463b      	mov	r3, r7
 800a0e0:	f7f6 f8dc 	bl	800029c <__adddf3>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	463b      	mov	r3, r7
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	f7f6 f8d3 	bl	8000298 <__aeabi_dsub>
 800a0f2:	4642      	mov	r2, r8
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	f7f6 f8cf 	bl	8000298 <__aeabi_dsub>
 800a0fa:	ec53 2b18 	vmov	r2, r3, d8
 800a0fe:	f7f6 f8cb 	bl	8000298 <__aeabi_dsub>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	4650      	mov	r0, sl
 800a108:	4659      	mov	r1, fp
 800a10a:	e610      	b.n	8009d2e <__ieee754_pow+0x31e>
 800a10c:	2401      	movs	r4, #1
 800a10e:	e6a1      	b.n	8009e54 <__ieee754_pow+0x444>
 800a110:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a160 <__ieee754_pow+0x750>
 800a114:	e617      	b.n	8009d46 <__ieee754_pow+0x336>
 800a116:	bf00      	nop
 800a118:	4a454eef 	.word	0x4a454eef
 800a11c:	3fca7e28 	.word	0x3fca7e28
 800a120:	93c9db65 	.word	0x93c9db65
 800a124:	3fcd864a 	.word	0x3fcd864a
 800a128:	a91d4101 	.word	0xa91d4101
 800a12c:	3fd17460 	.word	0x3fd17460
 800a130:	518f264d 	.word	0x518f264d
 800a134:	3fd55555 	.word	0x3fd55555
 800a138:	db6fabff 	.word	0xdb6fabff
 800a13c:	3fdb6db6 	.word	0x3fdb6db6
 800a140:	33333303 	.word	0x33333303
 800a144:	3fe33333 	.word	0x3fe33333
 800a148:	e0000000 	.word	0xe0000000
 800a14c:	3feec709 	.word	0x3feec709
 800a150:	dc3a03fd 	.word	0xdc3a03fd
 800a154:	3feec709 	.word	0x3feec709
 800a158:	145b01f5 	.word	0x145b01f5
 800a15c:	be3e2fe0 	.word	0xbe3e2fe0
 800a160:	00000000 	.word	0x00000000
 800a164:	3ff00000 	.word	0x3ff00000
 800a168:	7ff00000 	.word	0x7ff00000
 800a16c:	43400000 	.word	0x43400000
 800a170:	0003988e 	.word	0x0003988e
 800a174:	000bb679 	.word	0x000bb679
 800a178:	0800ace0 	.word	0x0800ace0
 800a17c:	3ff00000 	.word	0x3ff00000
 800a180:	40080000 	.word	0x40080000
 800a184:	0800ad00 	.word	0x0800ad00
 800a188:	0800acf0 	.word	0x0800acf0
 800a18c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a464 <__ieee754_pow+0xa54>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 f881 	bl	800029c <__adddf3>
 800a19a:	4622      	mov	r2, r4
 800a19c:	ec41 0b1a 	vmov	d10, r0, r1
 800a1a0:	462b      	mov	r3, r5
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	f7f6 f877 	bl	8000298 <__aeabi_dsub>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	ec51 0b1a 	vmov	r0, r1, d10
 800a1b2:	f7f6 fcb9 	bl	8000b28 <__aeabi_dcmpgt>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	f47f ae04 	bne.w	8009dc4 <__ieee754_pow+0x3b4>
 800a1bc:	4aa4      	ldr	r2, [pc, #656]	; (800a450 <__ieee754_pow+0xa40>)
 800a1be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	f340 8108 	ble.w	800a3d8 <__ieee754_pow+0x9c8>
 800a1c8:	151b      	asrs	r3, r3, #20
 800a1ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a1ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a1d2:	fa4a f303 	asr.w	r3, sl, r3
 800a1d6:	445b      	add	r3, fp
 800a1d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a1dc:	4e9d      	ldr	r6, [pc, #628]	; (800a454 <__ieee754_pow+0xa44>)
 800a1de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a1e2:	4116      	asrs	r6, r2
 800a1e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	ea23 0106 	bic.w	r1, r3, r6
 800a1ee:	f1c2 0214 	rsb	r2, r2, #20
 800a1f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a1f6:	fa4a fa02 	asr.w	sl, sl, r2
 800a1fa:	f1bb 0f00 	cmp.w	fp, #0
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4620      	mov	r0, r4
 800a204:	4629      	mov	r1, r5
 800a206:	bfb8      	it	lt
 800a208:	f1ca 0a00 	rsblt	sl, sl, #0
 800a20c:	f7f6 f844 	bl	8000298 <__aeabi_dsub>
 800a210:	ec41 0b19 	vmov	d9, r0, r1
 800a214:	4642      	mov	r2, r8
 800a216:	464b      	mov	r3, r9
 800a218:	ec51 0b19 	vmov	r0, r1, d9
 800a21c:	f7f6 f83e 	bl	800029c <__adddf3>
 800a220:	a37b      	add	r3, pc, #492	; (adr r3, 800a410 <__ieee754_pow+0xa00>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	2000      	movs	r0, #0
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	f7f6 f9ec 	bl	8000608 <__aeabi_dmul>
 800a230:	ec53 2b19 	vmov	r2, r3, d9
 800a234:	4606      	mov	r6, r0
 800a236:	460f      	mov	r7, r1
 800a238:	4620      	mov	r0, r4
 800a23a:	4629      	mov	r1, r5
 800a23c:	f7f6 f82c 	bl	8000298 <__aeabi_dsub>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4640      	mov	r0, r8
 800a246:	4649      	mov	r1, r9
 800a248:	f7f6 f826 	bl	8000298 <__aeabi_dsub>
 800a24c:	a372      	add	r3, pc, #456	; (adr r3, 800a418 <__ieee754_pow+0xa08>)
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	f7f6 f9d9 	bl	8000608 <__aeabi_dmul>
 800a256:	a372      	add	r3, pc, #456	; (adr r3, 800a420 <__ieee754_pow+0xa10>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	4680      	mov	r8, r0
 800a25e:	4689      	mov	r9, r1
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f6 f9d0 	bl	8000608 <__aeabi_dmul>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	f7f6 f814 	bl	800029c <__adddf3>
 800a274:	4604      	mov	r4, r0
 800a276:	460d      	mov	r5, r1
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 f80c 	bl	800029c <__adddf3>
 800a284:	4632      	mov	r2, r6
 800a286:	463b      	mov	r3, r7
 800a288:	4680      	mov	r8, r0
 800a28a:	4689      	mov	r9, r1
 800a28c:	f7f6 f804 	bl	8000298 <__aeabi_dsub>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7f5 fffe 	bl	8000298 <__aeabi_dsub>
 800a29c:	4642      	mov	r2, r8
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	f7f6 f9ae 	bl	8000608 <__aeabi_dmul>
 800a2ac:	a35e      	add	r3, pc, #376	; (adr r3, 800a428 <__ieee754_pow+0xa18>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	460d      	mov	r5, r1
 800a2b6:	f7f6 f9a7 	bl	8000608 <__aeabi_dmul>
 800a2ba:	a35d      	add	r3, pc, #372	; (adr r3, 800a430 <__ieee754_pow+0xa20>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f5 ffea 	bl	8000298 <__aeabi_dsub>
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	f7f6 f99e 	bl	8000608 <__aeabi_dmul>
 800a2cc:	a35a      	add	r3, pc, #360	; (adr r3, 800a438 <__ieee754_pow+0xa28>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f5 ffe3 	bl	800029c <__adddf3>
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	462b      	mov	r3, r5
 800a2da:	f7f6 f995 	bl	8000608 <__aeabi_dmul>
 800a2de:	a358      	add	r3, pc, #352	; (adr r3, 800a440 <__ieee754_pow+0xa30>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f5 ffd8 	bl	8000298 <__aeabi_dsub>
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	f7f6 f98c 	bl	8000608 <__aeabi_dmul>
 800a2f0:	a355      	add	r3, pc, #340	; (adr r3, 800a448 <__ieee754_pow+0xa38>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	f7f5 ffd1 	bl	800029c <__adddf3>
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	f7f6 f983 	bl	8000608 <__aeabi_dmul>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4640      	mov	r0, r8
 800a308:	4649      	mov	r1, r9
 800a30a:	f7f5 ffc5 	bl	8000298 <__aeabi_dsub>
 800a30e:	4604      	mov	r4, r0
 800a310:	460d      	mov	r5, r1
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4640      	mov	r0, r8
 800a318:	4649      	mov	r1, r9
 800a31a:	f7f6 f975 	bl	8000608 <__aeabi_dmul>
 800a31e:	2200      	movs	r2, #0
 800a320:	ec41 0b19 	vmov	d9, r0, r1
 800a324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a328:	4620      	mov	r0, r4
 800a32a:	4629      	mov	r1, r5
 800a32c:	f7f5 ffb4 	bl	8000298 <__aeabi_dsub>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	ec51 0b19 	vmov	r0, r1, d9
 800a338:	f7f6 fa90 	bl	800085c <__aeabi_ddiv>
 800a33c:	4632      	mov	r2, r6
 800a33e:	4604      	mov	r4, r0
 800a340:	460d      	mov	r5, r1
 800a342:	463b      	mov	r3, r7
 800a344:	4640      	mov	r0, r8
 800a346:	4649      	mov	r1, r9
 800a348:	f7f6 f95e 	bl	8000608 <__aeabi_dmul>
 800a34c:	4632      	mov	r2, r6
 800a34e:	463b      	mov	r3, r7
 800a350:	f7f5 ffa4 	bl	800029c <__adddf3>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f5 ff9c 	bl	8000298 <__aeabi_dsub>
 800a360:	4642      	mov	r2, r8
 800a362:	464b      	mov	r3, r9
 800a364:	f7f5 ff98 	bl	8000298 <__aeabi_dsub>
 800a368:	460b      	mov	r3, r1
 800a36a:	4602      	mov	r2, r0
 800a36c:	493a      	ldr	r1, [pc, #232]	; (800a458 <__ieee754_pow+0xa48>)
 800a36e:	2000      	movs	r0, #0
 800a370:	f7f5 ff92 	bl	8000298 <__aeabi_dsub>
 800a374:	ec41 0b10 	vmov	d0, r0, r1
 800a378:	ee10 3a90 	vmov	r3, s1
 800a37c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a384:	da2b      	bge.n	800a3de <__ieee754_pow+0x9ce>
 800a386:	4650      	mov	r0, sl
 800a388:	f000 f95e 	bl	800a648 <scalbn>
 800a38c:	ec51 0b10 	vmov	r0, r1, d0
 800a390:	ec53 2b18 	vmov	r2, r3, d8
 800a394:	f7ff bbed 	b.w	8009b72 <__ieee754_pow+0x162>
 800a398:	4b30      	ldr	r3, [pc, #192]	; (800a45c <__ieee754_pow+0xa4c>)
 800a39a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a39e:	429e      	cmp	r6, r3
 800a3a0:	f77f af0c 	ble.w	800a1bc <__ieee754_pow+0x7ac>
 800a3a4:	4b2e      	ldr	r3, [pc, #184]	; (800a460 <__ieee754_pow+0xa50>)
 800a3a6:	440b      	add	r3, r1
 800a3a8:	4303      	orrs	r3, r0
 800a3aa:	d009      	beq.n	800a3c0 <__ieee754_pow+0x9b0>
 800a3ac:	ec51 0b18 	vmov	r0, r1, d8
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f7f6 fb9a 	bl	8000aec <__aeabi_dcmplt>
 800a3b8:	3800      	subs	r0, #0
 800a3ba:	bf18      	it	ne
 800a3bc:	2001      	movne	r0, #1
 800a3be:	e447      	b.n	8009c50 <__ieee754_pow+0x240>
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	462b      	mov	r3, r5
 800a3c4:	f7f5 ff68 	bl	8000298 <__aeabi_dsub>
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	464b      	mov	r3, r9
 800a3cc:	f7f6 fba2 	bl	8000b14 <__aeabi_dcmpge>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	f43f aef3 	beq.w	800a1bc <__ieee754_pow+0x7ac>
 800a3d6:	e7e9      	b.n	800a3ac <__ieee754_pow+0x99c>
 800a3d8:	f04f 0a00 	mov.w	sl, #0
 800a3dc:	e71a      	b.n	800a214 <__ieee754_pow+0x804>
 800a3de:	ec51 0b10 	vmov	r0, r1, d0
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	e7d4      	b.n	800a390 <__ieee754_pow+0x980>
 800a3e6:	491c      	ldr	r1, [pc, #112]	; (800a458 <__ieee754_pow+0xa48>)
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	f7ff bb30 	b.w	8009a4e <__ieee754_pow+0x3e>
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f7ff bb2c 	b.w	8009a4e <__ieee754_pow+0x3e>
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	f7ff bb28 	b.w	8009a4e <__ieee754_pow+0x3e>
 800a3fe:	9204      	str	r2, [sp, #16]
 800a400:	f7ff bb7a 	b.w	8009af8 <__ieee754_pow+0xe8>
 800a404:	2300      	movs	r3, #0
 800a406:	f7ff bb64 	b.w	8009ad2 <__ieee754_pow+0xc2>
 800a40a:	bf00      	nop
 800a40c:	f3af 8000 	nop.w
 800a410:	00000000 	.word	0x00000000
 800a414:	3fe62e43 	.word	0x3fe62e43
 800a418:	fefa39ef 	.word	0xfefa39ef
 800a41c:	3fe62e42 	.word	0x3fe62e42
 800a420:	0ca86c39 	.word	0x0ca86c39
 800a424:	be205c61 	.word	0xbe205c61
 800a428:	72bea4d0 	.word	0x72bea4d0
 800a42c:	3e663769 	.word	0x3e663769
 800a430:	c5d26bf1 	.word	0xc5d26bf1
 800a434:	3ebbbd41 	.word	0x3ebbbd41
 800a438:	af25de2c 	.word	0xaf25de2c
 800a43c:	3f11566a 	.word	0x3f11566a
 800a440:	16bebd93 	.word	0x16bebd93
 800a444:	3f66c16c 	.word	0x3f66c16c
 800a448:	5555553e 	.word	0x5555553e
 800a44c:	3fc55555 	.word	0x3fc55555
 800a450:	3fe00000 	.word	0x3fe00000
 800a454:	000fffff 	.word	0x000fffff
 800a458:	3ff00000 	.word	0x3ff00000
 800a45c:	4090cbff 	.word	0x4090cbff
 800a460:	3f6f3400 	.word	0x3f6f3400
 800a464:	652b82fe 	.word	0x652b82fe
 800a468:	3c971547 	.word	0x3c971547

0800a46c <__ieee754_sqrt>:
 800a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a470:	ec55 4b10 	vmov	r4, r5, d0
 800a474:	4e55      	ldr	r6, [pc, #340]	; (800a5cc <__ieee754_sqrt+0x160>)
 800a476:	43ae      	bics	r6, r5
 800a478:	ee10 0a10 	vmov	r0, s0
 800a47c:	ee10 3a10 	vmov	r3, s0
 800a480:	462a      	mov	r2, r5
 800a482:	4629      	mov	r1, r5
 800a484:	d110      	bne.n	800a4a8 <__ieee754_sqrt+0x3c>
 800a486:	ee10 2a10 	vmov	r2, s0
 800a48a:	462b      	mov	r3, r5
 800a48c:	f7f6 f8bc 	bl	8000608 <__aeabi_dmul>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4620      	mov	r0, r4
 800a496:	4629      	mov	r1, r5
 800a498:	f7f5 ff00 	bl	800029c <__adddf3>
 800a49c:	4604      	mov	r4, r0
 800a49e:	460d      	mov	r5, r1
 800a4a0:	ec45 4b10 	vmov	d0, r4, r5
 800a4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	dc10      	bgt.n	800a4ce <__ieee754_sqrt+0x62>
 800a4ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a4b0:	4330      	orrs	r0, r6
 800a4b2:	d0f5      	beq.n	800a4a0 <__ieee754_sqrt+0x34>
 800a4b4:	b15d      	cbz	r5, 800a4ce <__ieee754_sqrt+0x62>
 800a4b6:	ee10 2a10 	vmov	r2, s0
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	ee10 0a10 	vmov	r0, s0
 800a4c0:	f7f5 feea 	bl	8000298 <__aeabi_dsub>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	f7f6 f9c8 	bl	800085c <__aeabi_ddiv>
 800a4cc:	e7e6      	b.n	800a49c <__ieee754_sqrt+0x30>
 800a4ce:	1512      	asrs	r2, r2, #20
 800a4d0:	d074      	beq.n	800a5bc <__ieee754_sqrt+0x150>
 800a4d2:	07d4      	lsls	r4, r2, #31
 800a4d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a4d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a4dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a4e0:	bf5e      	ittt	pl
 800a4e2:	0fda      	lsrpl	r2, r3, #31
 800a4e4:	005b      	lslpl	r3, r3, #1
 800a4e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	0fda      	lsrs	r2, r3, #31
 800a4ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a4f2:	107f      	asrs	r7, r7, #1
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	2516      	movs	r5, #22
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a4fe:	1886      	adds	r6, r0, r2
 800a500:	428e      	cmp	r6, r1
 800a502:	bfde      	ittt	le
 800a504:	1b89      	suble	r1, r1, r6
 800a506:	18b0      	addle	r0, r6, r2
 800a508:	18a4      	addle	r4, r4, r2
 800a50a:	0049      	lsls	r1, r1, #1
 800a50c:	3d01      	subs	r5, #1
 800a50e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a512:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a516:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a51a:	d1f0      	bne.n	800a4fe <__ieee754_sqrt+0x92>
 800a51c:	462a      	mov	r2, r5
 800a51e:	f04f 0e20 	mov.w	lr, #32
 800a522:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a526:	4281      	cmp	r1, r0
 800a528:	eb06 0c05 	add.w	ip, r6, r5
 800a52c:	dc02      	bgt.n	800a534 <__ieee754_sqrt+0xc8>
 800a52e:	d113      	bne.n	800a558 <__ieee754_sqrt+0xec>
 800a530:	459c      	cmp	ip, r3
 800a532:	d811      	bhi.n	800a558 <__ieee754_sqrt+0xec>
 800a534:	f1bc 0f00 	cmp.w	ip, #0
 800a538:	eb0c 0506 	add.w	r5, ip, r6
 800a53c:	da43      	bge.n	800a5c6 <__ieee754_sqrt+0x15a>
 800a53e:	2d00      	cmp	r5, #0
 800a540:	db41      	blt.n	800a5c6 <__ieee754_sqrt+0x15a>
 800a542:	f100 0801 	add.w	r8, r0, #1
 800a546:	1a09      	subs	r1, r1, r0
 800a548:	459c      	cmp	ip, r3
 800a54a:	bf88      	it	hi
 800a54c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a550:	eba3 030c 	sub.w	r3, r3, ip
 800a554:	4432      	add	r2, r6
 800a556:	4640      	mov	r0, r8
 800a558:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a55c:	f1be 0e01 	subs.w	lr, lr, #1
 800a560:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a564:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a568:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a56c:	d1db      	bne.n	800a526 <__ieee754_sqrt+0xba>
 800a56e:	430b      	orrs	r3, r1
 800a570:	d006      	beq.n	800a580 <__ieee754_sqrt+0x114>
 800a572:	1c50      	adds	r0, r2, #1
 800a574:	bf13      	iteet	ne
 800a576:	3201      	addne	r2, #1
 800a578:	3401      	addeq	r4, #1
 800a57a:	4672      	moveq	r2, lr
 800a57c:	f022 0201 	bicne.w	r2, r2, #1
 800a580:	1063      	asrs	r3, r4, #1
 800a582:	0852      	lsrs	r2, r2, #1
 800a584:	07e1      	lsls	r1, r4, #31
 800a586:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a58a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a58e:	bf48      	it	mi
 800a590:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a594:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a598:	4614      	mov	r4, r2
 800a59a:	e781      	b.n	800a4a0 <__ieee754_sqrt+0x34>
 800a59c:	0ad9      	lsrs	r1, r3, #11
 800a59e:	3815      	subs	r0, #21
 800a5a0:	055b      	lsls	r3, r3, #21
 800a5a2:	2900      	cmp	r1, #0
 800a5a4:	d0fa      	beq.n	800a59c <__ieee754_sqrt+0x130>
 800a5a6:	02cd      	lsls	r5, r1, #11
 800a5a8:	d50a      	bpl.n	800a5c0 <__ieee754_sqrt+0x154>
 800a5aa:	f1c2 0420 	rsb	r4, r2, #32
 800a5ae:	fa23 f404 	lsr.w	r4, r3, r4
 800a5b2:	1e55      	subs	r5, r2, #1
 800a5b4:	4093      	lsls	r3, r2
 800a5b6:	4321      	orrs	r1, r4
 800a5b8:	1b42      	subs	r2, r0, r5
 800a5ba:	e78a      	b.n	800a4d2 <__ieee754_sqrt+0x66>
 800a5bc:	4610      	mov	r0, r2
 800a5be:	e7f0      	b.n	800a5a2 <__ieee754_sqrt+0x136>
 800a5c0:	0049      	lsls	r1, r1, #1
 800a5c2:	3201      	adds	r2, #1
 800a5c4:	e7ef      	b.n	800a5a6 <__ieee754_sqrt+0x13a>
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	e7bd      	b.n	800a546 <__ieee754_sqrt+0xda>
 800a5ca:	bf00      	nop
 800a5cc:	7ff00000 	.word	0x7ff00000

0800a5d0 <with_errno>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	460d      	mov	r5, r1
 800a5d6:	4616      	mov	r6, r2
 800a5d8:	f7fb feaa 	bl	8006330 <__errno>
 800a5dc:	4629      	mov	r1, r5
 800a5de:	6006      	str	r6, [r0, #0]
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}

0800a5e4 <xflow>:
 800a5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5e6:	4614      	mov	r4, r2
 800a5e8:	461d      	mov	r5, r3
 800a5ea:	b108      	cbz	r0, 800a5f0 <xflow+0xc>
 800a5ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a5f0:	e9cd 2300 	strd	r2, r3, [sp]
 800a5f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f7f6 f804 	bl	8000608 <__aeabi_dmul>
 800a600:	2222      	movs	r2, #34	; 0x22
 800a602:	b003      	add	sp, #12
 800a604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a608:	f7ff bfe2 	b.w	800a5d0 <with_errno>

0800a60c <__math_uflow>:
 800a60c:	b508      	push	{r3, lr}
 800a60e:	2200      	movs	r2, #0
 800a610:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a614:	f7ff ffe6 	bl	800a5e4 <xflow>
 800a618:	ec41 0b10 	vmov	d0, r0, r1
 800a61c:	bd08      	pop	{r3, pc}

0800a61e <__math_oflow>:
 800a61e:	b508      	push	{r3, lr}
 800a620:	2200      	movs	r2, #0
 800a622:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a626:	f7ff ffdd 	bl	800a5e4 <xflow>
 800a62a:	ec41 0b10 	vmov	d0, r0, r1
 800a62e:	bd08      	pop	{r3, pc}

0800a630 <finite>:
 800a630:	b082      	sub	sp, #8
 800a632:	ed8d 0b00 	vstr	d0, [sp]
 800a636:	9801      	ldr	r0, [sp, #4]
 800a638:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a63c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a640:	0fc0      	lsrs	r0, r0, #31
 800a642:	b002      	add	sp, #8
 800a644:	4770      	bx	lr
	...

0800a648 <scalbn>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	ec55 4b10 	vmov	r4, r5, d0
 800a64e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a652:	4606      	mov	r6, r0
 800a654:	462b      	mov	r3, r5
 800a656:	b99a      	cbnz	r2, 800a680 <scalbn+0x38>
 800a658:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a65c:	4323      	orrs	r3, r4
 800a65e:	d036      	beq.n	800a6ce <scalbn+0x86>
 800a660:	4b39      	ldr	r3, [pc, #228]	; (800a748 <scalbn+0x100>)
 800a662:	4629      	mov	r1, r5
 800a664:	ee10 0a10 	vmov	r0, s0
 800a668:	2200      	movs	r2, #0
 800a66a:	f7f5 ffcd 	bl	8000608 <__aeabi_dmul>
 800a66e:	4b37      	ldr	r3, [pc, #220]	; (800a74c <scalbn+0x104>)
 800a670:	429e      	cmp	r6, r3
 800a672:	4604      	mov	r4, r0
 800a674:	460d      	mov	r5, r1
 800a676:	da10      	bge.n	800a69a <scalbn+0x52>
 800a678:	a32b      	add	r3, pc, #172	; (adr r3, 800a728 <scalbn+0xe0>)
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	e03a      	b.n	800a6f6 <scalbn+0xae>
 800a680:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a684:	428a      	cmp	r2, r1
 800a686:	d10c      	bne.n	800a6a2 <scalbn+0x5a>
 800a688:	ee10 2a10 	vmov	r2, s0
 800a68c:	4620      	mov	r0, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	f7f5 fe04 	bl	800029c <__adddf3>
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	e019      	b.n	800a6ce <scalbn+0x86>
 800a69a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a69e:	460b      	mov	r3, r1
 800a6a0:	3a36      	subs	r2, #54	; 0x36
 800a6a2:	4432      	add	r2, r6
 800a6a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a6a8:	428a      	cmp	r2, r1
 800a6aa:	dd08      	ble.n	800a6be <scalbn+0x76>
 800a6ac:	2d00      	cmp	r5, #0
 800a6ae:	a120      	add	r1, pc, #128	; (adr r1, 800a730 <scalbn+0xe8>)
 800a6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b4:	da1c      	bge.n	800a6f0 <scalbn+0xa8>
 800a6b6:	a120      	add	r1, pc, #128	; (adr r1, 800a738 <scalbn+0xf0>)
 800a6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6bc:	e018      	b.n	800a6f0 <scalbn+0xa8>
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	dd08      	ble.n	800a6d4 <scalbn+0x8c>
 800a6c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a6c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6ce:	ec45 4b10 	vmov	d0, r4, r5
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a6d8:	da19      	bge.n	800a70e <scalbn+0xc6>
 800a6da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a6de:	429e      	cmp	r6, r3
 800a6e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a6e4:	dd0a      	ble.n	800a6fc <scalbn+0xb4>
 800a6e6:	a112      	add	r1, pc, #72	; (adr r1, 800a730 <scalbn+0xe8>)
 800a6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1e2      	bne.n	800a6b6 <scalbn+0x6e>
 800a6f0:	a30f      	add	r3, pc, #60	; (adr r3, 800a730 <scalbn+0xe8>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 ff87 	bl	8000608 <__aeabi_dmul>
 800a6fa:	e7cb      	b.n	800a694 <scalbn+0x4c>
 800a6fc:	a10a      	add	r1, pc, #40	; (adr r1, 800a728 <scalbn+0xe0>)
 800a6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0b8      	beq.n	800a678 <scalbn+0x30>
 800a706:	a10e      	add	r1, pc, #56	; (adr r1, 800a740 <scalbn+0xf8>)
 800a708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a70c:	e7b4      	b.n	800a678 <scalbn+0x30>
 800a70e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a712:	3236      	adds	r2, #54	; 0x36
 800a714:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a718:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a71c:	4620      	mov	r0, r4
 800a71e:	4b0c      	ldr	r3, [pc, #48]	; (800a750 <scalbn+0x108>)
 800a720:	2200      	movs	r2, #0
 800a722:	e7e8      	b.n	800a6f6 <scalbn+0xae>
 800a724:	f3af 8000 	nop.w
 800a728:	c2f8f359 	.word	0xc2f8f359
 800a72c:	01a56e1f 	.word	0x01a56e1f
 800a730:	8800759c 	.word	0x8800759c
 800a734:	7e37e43c 	.word	0x7e37e43c
 800a738:	8800759c 	.word	0x8800759c
 800a73c:	fe37e43c 	.word	0xfe37e43c
 800a740:	c2f8f359 	.word	0xc2f8f359
 800a744:	81a56e1f 	.word	0x81a56e1f
 800a748:	43500000 	.word	0x43500000
 800a74c:	ffff3cb0 	.word	0xffff3cb0
 800a750:	3c900000 	.word	0x3c900000

0800a754 <_init>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	bf00      	nop
 800a758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75a:	bc08      	pop	{r3}
 800a75c:	469e      	mov	lr, r3
 800a75e:	4770      	bx	lr

0800a760 <_fini>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	bf00      	nop
 800a764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a766:	bc08      	pop	{r3}
 800a768:	469e      	mov	lr, r3
 800a76a:	4770      	bx	lr
