
SR_Parallel3RRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009818  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  080099b8  080099b8  000199b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee0  08009ee0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee0  08009ee0  00019ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee8  08009ee8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee8  08009ee8  00019ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001e0  0800a0cc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  0800a0cc  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e726  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecb  00000000  00000000  0002e932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00030800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00031550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017202  00000000  00000000  000321e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7ed  00000000  00000000  000493ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f561  00000000  00000000  00057bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd4  00000000  00000000  000e7188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099a0 	.word	0x080099a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080099a0 	.word	0x080099a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_write>:
static void MX_USART2_UART_Init(void);
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */

int _write( int file,unsigned char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <_write+0x28>)
 8000fb4:	f003 ff67 	bl	8004e86 <HAL_UART_Transmit>
	return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200003dc 	.word	0x200003dc

08000fc8 <correction>:




float correction(unsigned long steps, unsigned long accel, unsigned long decel, unsigned max)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
	return 1.0;
 8000fd6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fda:	ee07 3a90 	vmov	s15, r3
}
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <estimate_ttc>:


float estimate_ttc(motorInfo *motor)
{
 8000ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	float tmp;
	if(motor->accel_stop <= motor->peak_velocity)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1a      	ldr	r2, [r3, #32]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	429a      	cmp	r2, r3
 8001004:	f200 8087 	bhi.w	8001116 <estimate_ttc+0x126>
		{
		motor->acc_time= motor->max_speed/(double)motor->acceleration;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa81 	bl	8000514 <__aeabi_ui2d>
 8001012:	4604      	mov	r4, r0
 8001014:	460d      	mov	r5, r1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa7a 	bl	8000514 <__aeabi_ui2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff fc18 	bl	800085c <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			tmp = (motor->max_speed)*((double)1/motor->acceleration +(double)1/motor->deceleration);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa6a 	bl	8000514 <__aeabi_ui2d>
 8001040:	4604      	mov	r4, r0
 8001042:	460d      	mov	r5, r1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa63 	bl	8000514 <__aeabi_ui2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4980      	ldr	r1, [pc, #512]	; (8001258 <estimate_ttc+0x268>)
 8001058:	f7ff fc00 	bl	800085c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4690      	mov	r8, r2
 8001062:	4699      	mov	r9, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa53 	bl	8000514 <__aeabi_ui2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	f04f 0000 	mov.w	r0, #0
 8001076:	4978      	ldr	r1, [pc, #480]	; (8001258 <estimate_ttc+0x268>)
 8001078:	f7ff fbf0 	bl	800085c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4640      	mov	r0, r8
 8001082:	4649      	mov	r1, r9
 8001084:	f7ff f90a 	bl	800029c <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4620      	mov	r0, r4
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff faba 	bl	8000608 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fdac 	bl	8000bf8 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60fb      	str	r3, [r7, #12]
			tmp += (motor->decel_start-motor->accel_stop)*(double)ALPHA*1000/motor->max_speed;
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fa57 	bl	8000558 <__aeabi_f2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa2b 	bl	8000514 <__aeabi_ui2d>
 80010be:	a362      	add	r3, pc, #392	; (adr r3, 8001248 <estimate_ttc+0x258>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff faa0 	bl	8000608 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b61      	ldr	r3, [pc, #388]	; (800125c <estimate_ttc+0x26c>)
 80010d6:	f7ff fa97 	bl	8000608 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4690      	mov	r8, r2
 80010e0:	4699      	mov	r9, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa14 	bl	8000514 <__aeabi_ui2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4640      	mov	r0, r8
 80010f2:	4649      	mov	r1, r9
 80010f4:	f7ff fbb2 	bl	800085c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	f7ff f8cc 	bl	800029c <__adddf3>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd74 	bl	8000bf8 <__aeabi_d2f>
 8001110:	4603      	mov	r3, r0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e082      	b.n	800121c <estimate_ttc+0x22c>
	else
		{
			/*tmp = (double)sqrt(2000*ALPHA*motor->total_steps);
			tmp *=1.0/sqrt(motor->acceleration) + 1.0/sqrt(motor->deceleration);
			*/
			motor->acc_time=sqrt(2000*ALPHA*motor->peak_velocity/motor->acceleration);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f9fa 	bl	8000514 <__aeabi_ui2d>
 8001120:	a34b      	add	r3, pc, #300	; (adr r3, 8001250 <estimate_ttc+0x260>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fa6f 	bl	8000608 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4614      	mov	r4, r2
 8001130:	461d      	mov	r5, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9ec 	bl	8000514 <__aeabi_ui2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff fb8a 	bl	800085c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	ec43 2b17 	vmov	d7, r2, r3
 8001150:	eeb0 0a47 	vmov.f32	s0, s14
 8001154:	eef0 0a67 	vmov.f32	s1, s15
 8001158:	f008 fb44 	bl	80097e4 <sqrt>
 800115c:	eeb0 7a40 	vmov.f32	s14, s0
 8001160:	eef0 7a60 	vmov.f32	s15, s1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			tmp=sqrt(2000*ALPHA*motor->peak_velocity/motor->acceleration)+sqrt(2000*ALPHA*(motor->total_steps-motor->peak_velocity)/motor->deceleration);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f9d0 	bl	8000514 <__aeabi_ui2d>
 8001174:	a336      	add	r3, pc, #216	; (adr r3, 8001250 <estimate_ttc+0x260>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa45 	bl	8000608 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4614      	mov	r4, r2
 8001184:	461d      	mov	r5, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9c2 	bl	8000514 <__aeabi_ui2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7ff fb60 	bl	800085c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	ec43 2b17 	vmov	d7, r2, r3
 80011a4:	eeb0 0a47 	vmov.f32	s0, s14
 80011a8:	eef0 0a67 	vmov.f32	s1, s15
 80011ac:	f008 fb1a 	bl	80097e4 <sqrt>
 80011b0:	ec59 8b10 	vmov	r8, r9, d0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f9a8 	bl	8000514 <__aeabi_ui2d>
 80011c4:	a322      	add	r3, pc, #136	; (adr r3, 8001250 <estimate_ttc+0x260>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fa1d 	bl	8000608 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f99a 	bl	8000514 <__aeabi_ui2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff fb38 	bl	800085c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	ec43 2b17 	vmov	d7, r2, r3
 80011f4:	eeb0 0a47 	vmov.f32	s0, s14
 80011f8:	eef0 0a67 	vmov.f32	s1, s15
 80011fc:	f008 faf2 	bl	80097e4 <sqrt>
 8001200:	ec53 2b10 	vmov	r2, r3, d0
 8001204:	4640      	mov	r0, r8
 8001206:	4649      	mov	r1, r9
 8001208:	f7ff f848 	bl	800029c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcf0 	bl	8000bf8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]

		}

	return tmp*correction(motor->total_steps,motor->acceleration,motor->deceleration,motor->max_speed);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f7ff fecc 	bl	8000fc8 <correction>
 8001230:	eeb0 7a40 	vmov.f32	s14, s0
 8001234:	edd7 7a03 	vldr	s15, [r7, #12]
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001248:	ae261898 	.word	0xae261898
 800124c:	3f5015be 	.word	0x3f5015be
 8001250:	6c226809 	.word	0x6c226809
 8001254:	3fff6a78 	.word	0x3fff6a78
 8001258:	3ff00000 	.word	0x3ff00000
 800125c:	408f4000 	.word	0x408f4000

08001260 <init_movement>:

void init_movement(motorInfo *motor, long total_steps, unsigned long accel, unsigned long decel, unsigned max)
{
 8001260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001264:	b088      	sub	sp, #32
 8001266:	af00      	add	r7, sp, #0
 8001268:	61f8      	str	r0, [r7, #28]
 800126a:	61b9      	str	r1, [r7, #24]
 800126c:	617a      	str	r2, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]


		max = max <= MIN_VEL? MIN_VEL:max;
 8001270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001272:	f240 6222 	movw	r2, #1570	; 0x622
 8001276:	4293      	cmp	r3, r2
 8001278:	d90a      	bls.n	8001290 <init_movement+0x30>
 800127a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800127c:	f7ff f94a 	bl	8000514 <__aeabi_ui2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc96 	bl	8000bb8 <__aeabi_d2uiz>
 800128c:	4603      	mov	r3, r0
 800128e:	e001      	b.n	8001294 <init_movement+0x34>
 8001290:	f240 6322 	movw	r3, #1570	; 0x622
 8001294:	643b      	str	r3, [r7, #64]	; 0x40
		motor->max_speed = (max >= MAX_VEL) ? MAX_VEL : max;
 8001296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001298:	f646 3260 	movw	r2, #27488	; 0x6b60
 800129c:	4293      	cmp	r3, r2
 800129e:	d80a      	bhi.n	80012b6 <init_movement+0x56>
 80012a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012a2:	f7ff f937 	bl	8000514 <__aeabi_ui2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fc83 	bl	8000bb8 <__aeabi_d2uiz>
 80012b2:	4603      	mov	r3, r0
 80012b4:	e001      	b.n	80012ba <init_movement+0x5a>
 80012b6:	f646 3360 	movw	r3, #27488	; 0x6b60
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	6013      	str	r3, [r2, #0]
		motor->dir = total_steps>0 ? 1 : -1;
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd01      	ble.n	80012c8 <init_movement+0x68>
 80012c4:	2201      	movs	r2, #1
 80012c6:	e001      	b.n	80012cc <init_movement+0x6c>
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	609a      	str	r2, [r3, #8]

		HAL_GPIO_WritePin(motor->GPIOX, motor->GPIO_Label, motor->dir > 0);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	6958      	ldr	r0, [r3, #20]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	8b19      	ldrh	r1, [r3, #24]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfcc      	ite	gt
 80012e0:	2301      	movgt	r3, #1
 80012e2:	2300      	movle	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	f002 f8e8 	bl	80034bc <HAL_GPIO_WritePin>


		motor->total_steps=total_steps>0?total_steps:-total_steps;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfb8      	it	lt
 80012f2:	425b      	neglt	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	63da      	str	r2, [r3, #60]	; 0x3c
		motor->rest=0;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
		motor->state=ACCEL;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		motor->auto_reload=0.676*CLK_FRQ*sqrt(2000*ALPHA/accel)/(motor->timer->Instance->PSC+1);// length of current pulse in timer ticks
 8001308:	6978      	ldr	r0, [r7, #20]
 800130a:	f7ff f903 	bl	8000514 <__aeabi_ui2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	a18a      	add	r1, pc, #552	; (adr r1, 800153c <init_movement+0x2dc>)
 8001314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001318:	f7ff faa0 	bl	800085c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	ec43 2b17 	vmov	d7, r2, r3
 8001324:	eeb0 0a47 	vmov.f32	s0, s14
 8001328:	eef0 0a67 	vmov.f32	s1, s15
 800132c:	f008 fa5a 	bl	80097e4 <sqrt>
 8001330:	ec51 0b10 	vmov	r0, r1, d0
 8001334:	a383      	add	r3, pc, #524	; (adr r3, 8001544 <init_movement+0x2e4>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f965 	bl	8000608 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4614      	mov	r4, r2
 8001344:	461d      	mov	r5, r3
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	3301      	adds	r3, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8df 	bl	8000514 <__aeabi_ui2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7ff fa7d 	bl	800085c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fc25 	bl	8000bb8 <__aeabi_d2uiz>
 800136e:	4602      	mov	r2, r0
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	60da      	str	r2, [r3, #12]
		motor->max_speed_ARR = CLK_FRQ*ALPHA*1000/motor->max_speed/(motor->timer->Instance->PSC+1);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8cb 	bl	8000514 <__aeabi_ui2d>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	a172      	add	r1, pc, #456	; (adr r1, 800154c <init_movement+0x2ec>)
 8001384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001388:	f7ff fa68 	bl	800085c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	3301      	adds	r3, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8b8 	bl	8000514 <__aeabi_ui2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff fa56 	bl	800085c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fbfe 	bl	8000bb8 <__aeabi_d2uiz>
 80013bc:	4602      	mov	r2, r0
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	605a      	str	r2, [r3, #4]
		motor->accel_stop = motor->max_speed*motor->max_speed/(2000*ALPHA*accel);
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8a0 	bl	8000514 <__aeabi_ui2d>
 80013d4:	4604      	mov	r4, r0
 80013d6:	460d      	mov	r5, r1
 80013d8:	6978      	ldr	r0, [r7, #20]
 80013da:	f7ff f89b 	bl	8000514 <__aeabi_ui2d>
 80013de:	a357      	add	r3, pc, #348	; (adr r3, 800153c <init_movement+0x2dc>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f910 	bl	8000608 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4620      	mov	r0, r4
 80013ee:	4629      	mov	r1, r5
 80013f0:	f7ff fa34 	bl	800085c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fbdc 	bl	8000bb8 <__aeabi_d2uiz>
 8001400:	4602      	mov	r2, r0
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	621a      	str	r2, [r3, #32]

		if(!motor->accel_stop)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <init_movement+0x1b4>
			motor->accel_stop =1 ;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	2201      	movs	r2, #1
 8001412:	621a      	str	r2, [r3, #32]


		motor->peak_velocity=(motor->total_steps*(unsigned long long)decel)/(accel+decel);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001418:	2200      	movs	r2, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	60fa      	str	r2, [r7, #12]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2200      	movs	r2, #0
 8001422:	469a      	mov	sl, r3
 8001424:	4693      	mov	fp, r2
 8001426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800142a:	460b      	mov	r3, r1
 800142c:	fb0a f203 	mul.w	r2, sl, r3
 8001430:	4603      	mov	r3, r0
 8001432:	fb03 f30b 	mul.w	r3, r3, fp
 8001436:	4413      	add	r3, r2
 8001438:	4602      	mov	r2, r0
 800143a:	fba2 890a 	umull	r8, r9, r2, sl
 800143e:	444b      	add	r3, r9
 8001440:	4699      	mov	r9, r3
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4413      	add	r3, r2
 8001448:	2200      	movs	r2, #0
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001452:	4640      	mov	r0, r8
 8001454:	4649      	mov	r1, r9
 8001456:	f7ff fc1f 	bl	8000c98 <__aeabi_uldivmod>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	61da      	str	r2, [r3, #28]

		if(!motor->peak_velocity)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <init_movement+0x210>
			motor->peak_velocity =1;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	2201      	movs	r2, #1
 800146e:	61da      	str	r2, [r3, #28]

		if(motor->accel_stop <= motor->peak_velocity)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	d80d      	bhi.n	8001498 <init_movement+0x238>
			motor->decel_start= (motor->total_steps-(motor->accel_stop*accel)/decel);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	6979      	ldr	r1, [r7, #20]
 8001486:	fb03 f101 	mul.w	r1, r3, r1
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001490:	1ad2      	subs	r2, r2, r3
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
 8001496:	e003      	b.n	80014a0 <init_movement+0x240>
		else
			motor->decel_start = motor->peak_velocity;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	625a      	str	r2, [r3, #36]	; 0x24


		motor->movement_done=0;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		motor->acceleration=accel;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
		motor->deceleration=decel;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
		motor->steps=0;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2200      	movs	r2, #0
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38

		motor->time_to_complete=estimate_ttc(motor);
 80014ba:	69f8      	ldr	r0, [r7, #28]
 80014bc:	f7ff fd98 	bl	8000ff0 <estimate_ttc>
 80014c0:	ee10 3a10 	vmov	r3, s0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f847 	bl	8000558 <__aeabi_f2d>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	69f9      	ldr	r1, [r7, #28]
 80014d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		motor->T1=motor->T2=motor->T3=0;
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2200      	movs	r2, #0
 80014d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	649a      	str	r2, [r3, #72]	; 0x48
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44

		motor->timer->Instance->ARR=motor->auto_reload;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	68d2      	ldr	r2, [r2, #12]
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
		//generujemy update resetując rejestry
		//bez tego nie działa, 4 godziny życia za mną :(
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0201 	orr.w	r2, r2, #1
 8001508:	615a      	str	r2, [r3, #20]


  		motor->T1 = __HAL_TIM_GET_COUNTER(&htim5);
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <init_movement+0x2d8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
		HAL_TIM_OC_Start(motor->timer,TIM_CHANNEL_1);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fdb0 	bl	8004080 <HAL_TIM_OC_Start>
	    HAL_TIM_Base_Start_IT(motor->timer);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fccb 	bl	8003ec0 <HAL_TIM_Base_Start_IT>




}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001534:	f3af 8000 	nop.w
 8001538:	20000394 	.word	0x20000394
 800153c:	6c226809 	.word	0x6c226809
 8001540:	3fff6a78 	.word	0x3fff6a78
 8001544:	00000001 	.word	0x00000001
 8001548:	418b13a4 	.word	0x418b13a4
 800154c:	c5ffffff 	.word	0xc5ffffff
 8001550:	4193a95e 	.word	0x4193a95e

08001554 <reset_motor>:
void reset_motor(motorInfo *motor,TIM_HandleTypeDef *timer,GPIO_TypeDef *GPIOX,uint16_t GPIO_Label)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	807b      	strh	r3, [r7, #2]
	motor->timer = timer;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	611a      	str	r2, [r3, #16]
	motor->GPIOX = GPIOX;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	615a      	str	r2, [r3, #20]
	motor->GPIO_Label=GPIO_Label;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	831a      	strh	r2, [r3, #24]
	test.movement_done=1;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <reset_motor+0x60>)
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	motor->step_position=0;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(motor->GPIOX, motor->GPIO_Label, motor->dir>0);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6958      	ldr	r0, [r3, #20]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8b19      	ldrh	r1, [r3, #24]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	bfcc      	ite	gt
 8001592:	2301      	movgt	r3, #1
 8001594:	2300      	movle	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	f001 ff8f 	bl	80034bc <HAL_GPIO_WritePin>
	HAL_TIM_OC_Stop(motor->timer,TIM_CHANNEL_1);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fe1b 	bl	80041e0 <HAL_TIM_OC_Stop>


}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000480 	.word	0x20000480

080015b8 <calculate_auto_reload>:




unsigned long calculate_auto_reload(motorInfo *motor)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

	if(motor->steps < motor->total_steps)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <calculate_auto_reload+0x24>
	{
		motor->step_position+=motor->dir;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	441a      	add	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
 80015da:	e003      	b.n	80015e4 <calculate_auto_reload+0x2c>
	}
	else
		motor->state=STOP;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	motor->steps++;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
	unsigned long  tmp=0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]

	switch (motor->state)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	f200 80c9 	bhi.w	8001792 <calculate_auto_reload+0x1da>
 8001600:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <calculate_auto_reload+0x50>)
 8001602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001606:	bf00      	nop
 8001608:	08001619 	.word	0x08001619
 800160c:	08001653 	.word	0x08001653
 8001610:	08001731 	.word	0x08001731
 8001614:	08001701 	.word	0x08001701
	{
	case STOP:

		motor->movement_done=1;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		flag_htim2_done=1;
 8001620:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <calculate_auto_reload+0x1e8>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(motor->timer,TIM_CHANNEL_1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f002 fdd7 	bl	80041e0 <HAL_TIM_OC_Stop>
		HAL_TIM_Base_Stop_IT(motor->timer);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	4618      	mov	r0, r3
 8001638:	f002 fca4 	bl	8003f84 <HAL_TIM_Base_Stop_IT>


			motor->T3 = __HAL_TIM_GET_COUNTER(&htim5) - motor->T3;
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <calculate_auto_reload+0x1ec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	1ad2      	subs	r2, r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	64da      	str	r2, [r3, #76]	; 0x4c

		return motor->auto_reload;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	e0a1      	b.n	8001796 <calculate_auto_reload+0x1de>
		break;
	case ACCEL:

		tmp=motor->rest;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	60fb      	str	r3, [r7, #12]
		motor->rest =(2*motor->auto_reload + tmp)%(4*motor->steps + 1);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	005a      	lsls	r2, r3, #1
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	3201      	adds	r2, #1
 800166a:	fbb3 f1f2 	udiv	r1, r3, r2
 800166e:	fb01 f202 	mul.w	r2, r1, r2
 8001672:	1a9a      	subs	r2, r3, r2
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
		motor->auto_reload -= (2*motor->auto_reload + tmp)/(4*motor->steps + 1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	005a      	lsls	r2, r3, #1
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	3301      	adds	r3, #1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68d2      	ldr	r2, [r2, #12]
 8001692:	1ad2      	subs	r2, r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]

		if(motor->steps>=motor->decel_start)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d311      	bcc.n	80016c8 <calculate_auto_reload+0x110>
			{
	  		 motor->T1 = __HAL_TIM_GET_COUNTER(&htim5)-motor->T1;
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <calculate_auto_reload+0x1ec>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	1ad2      	subs	r2, r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44

	  	//	 htim5.Instance->CNT=0;
	  		 motor->T3 =  __HAL_TIM_GET_COUNTER(&htim5);
 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <calculate_auto_reload+0x1ec>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	64da      	str	r2, [r3, #76]	; 0x4c

				motor->state=DECEL;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2202      	movs	r2, #2
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5);

			motor->state = RUN;
			motor->auto_reload = motor->max_speed_ARR;
		}
		break;
 80016c6:	e061      	b.n	800178c <calculate_auto_reload+0x1d4>
		else if(motor->steps >= motor->accel_stop)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d35b      	bcc.n	800178c <calculate_auto_reload+0x1d4>
			motor->T1 = __HAL_TIM_GET_COUNTER(&htim5)-motor->T1;
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <calculate_auto_reload+0x1ec>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	1ad2      	subs	r2, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5);
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <calculate_auto_reload+0x1ec>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	649a      	str	r2, [r3, #72]	; 0x48
			motor->state = RUN;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2203      	movs	r2, #3
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			motor->auto_reload = motor->max_speed_ARR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60da      	str	r2, [r3, #12]
		break;
 80016fe:	e045      	b.n	800178c <calculate_auto_reload+0x1d4>
	case RUN:
		if(motor->steps >= motor->decel_start)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	429a      	cmp	r2, r3
 800170a:	d341      	bcc.n	8001790 <calculate_auto_reload+0x1d8>
		{
			motor->T2 =  __HAL_TIM_GET_COUNTER(&htim5)-motor->T2;
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <calculate_auto_reload+0x1ec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001716:	1ad2      	subs	r2, r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	649a      	str	r2, [r3, #72]	; 0x48
		//	htim5.Instance->CNT=0;
			motor->T3 =  __HAL_TIM_GET_COUNTER(&htim5);
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <calculate_auto_reload+0x1ec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	64da      	str	r2, [r3, #76]	; 0x4c
			motor->state=DECEL;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2202      	movs	r2, #2
 800172a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				//motor->rest=0;
		}
		break;
 800172e:	e02f      	b.n	8001790 <calculate_auto_reload+0x1d8>
	case DECEL:
		tmp=motor->rest;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	60fb      	str	r3, [r7, #12]
		motor->rest =(long)((2*motor->auto_reload + motor->rest))%(4*((long)(motor->steps-motor->total_steps)) + 1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	005a      	lsls	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	4413      	add	r3, r2
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174c:	1acb      	subs	r3, r1, r3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	3301      	adds	r3, #1
 8001752:	fb92 f1f3 	sdiv	r1, r2, r3
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
		motor->auto_reload -= (long)((2*motor->auto_reload + tmp))/(4*((long)(motor->steps-motor->total_steps)) + 1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	005a      	lsls	r2, r3, #1
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	4619      	mov	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	3301      	adds	r3, #1
 800177c:	fb91 f2f3 	sdiv	r2, r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	1a9a      	subs	r2, r3, r2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60da      	str	r2, [r3, #12]
		break;
 800178a:	e002      	b.n	8001792 <calculate_auto_reload+0x1da>
		break;
 800178c:	bf00      	nop
 800178e:	e000      	b.n	8001792 <calculate_auto_reload+0x1da>
		break;
 8001790:	bf00      	nop

	}



	return (motor->auto_reload);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]


}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200004e8 	.word	0x200004e8
 80017a4:	20000394 	.word	0x20000394

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ac:	b08a      	sub	sp, #40	; 0x28
 80017ae:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b0:	f000 ff7a 	bl	80026a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b4:	f000 f9ba 	bl	8001b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b8:	f000 fbca 	bl	8001f50 <MX_GPIO_Init>
  MX_TIM3_Init();
 80017bc:	f000 fa7c 	bl	8001cb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017c0:	f000 fad4 	bl	8001d6c <MX_TIM4_Init>
  MX_TIM2_Init();
 80017c4:	f000 fa1e 	bl	8001c04 <MX_TIM2_Init>
  MX_DMA_Init();
 80017c8:	f000 fba2 	bl	8001f10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017cc:	f000 fb76 	bl	8001ebc <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80017d0:	f000 fb26 	bl	8001e20 <MX_TIM5_Init>





	  reset_motor(&test,&htim2,STEPPER_DIR_1_GPIO_Port, STEPPER_DIR_1_Pin);
 80017d4:	2340      	movs	r3, #64	; 0x40
 80017d6:	4abc      	ldr	r2, [pc, #752]	; (8001ac8 <main+0x320>)
 80017d8:	49bc      	ldr	r1, [pc, #752]	; (8001acc <main+0x324>)
 80017da:	48bd      	ldr	r0, [pc, #756]	; (8001ad0 <main+0x328>)
 80017dc:	f7ff feba 	bl	8001554 <reset_motor>


	  HAL_TIM_Base_Start_IT(&htim3);
 80017e0:	48bc      	ldr	r0, [pc, #752]	; (8001ad4 <main+0x32c>)
 80017e2:	f002 fb6d 	bl	8003ec0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim4);
 80017e6:	48bc      	ldr	r0, [pc, #752]	; (8001ad8 <main+0x330>)
 80017e8:	f002 fb6a 	bl	8003ec0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim5);
 80017ec:	48bb      	ldr	r0, [pc, #748]	; (8001adc <main+0x334>)
 80017ee:	f002 fb67 	bl	8003ec0 <HAL_TIM_Base_Start_IT>



  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	49ba      	ldr	r1, [pc, #744]	; (8001ae0 <main+0x338>)
 80017f6:	48bb      	ldr	r0, [pc, #748]	; (8001ae4 <main+0x33c>)
 80017f8:	f003 fbd7 	bl	8004faa <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 80017fc:	4bba      	ldr	r3, [pc, #744]	; (8001ae8 <main+0x340>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4bb9      	ldr	r3, [pc, #740]	; (8001ae8 <main+0x340>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0208 	bic.w	r2, r2, #8
 800180a:	601a      	str	r2, [r3, #0]


flag_htim2_done=flag_command_recieved=0;
 800180c:	2300      	movs	r3, #0
 800180e:	4ab7      	ldr	r2, [pc, #732]	; (8001aec <main+0x344>)
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4ab7      	ldr	r2, [pc, #732]	; (8001af0 <main+0x348>)
 8001814:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_htim2_done)
 8001816:	4bb6      	ldr	r3, [pc, #728]	; (8001af0 <main+0x348>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8115 	beq.w	8001a4a <main+0x2a2>
	  {
		  timer_val = __HAL_TIM_GET_COUNTER(&htim5)-timer_val;
 8001820:	4bae      	ldr	r3, [pc, #696]	; (8001adc <main+0x334>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]

		  printf("Done in %f, expected: %f MotorPos: %d\r\n",timer_val/1000000.0,test.time_to_complete, test.step_position);
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f7fe fe71 	bl	8000514 <__aeabi_ui2d>
 8001832:	a3a3      	add	r3, pc, #652	; (adr r3, 8001ac0 <main+0x318>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7ff f810 	bl	800085c <__aeabi_ddiv>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4614      	mov	r4, r2
 8001842:	461d      	mov	r5, r3
 8001844:	4ba2      	ldr	r3, [pc, #648]	; (8001ad0 <main+0x328>)
 8001846:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800184a:	49a1      	ldr	r1, [pc, #644]	; (8001ad0 <main+0x328>)
 800184c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800184e:	9102      	str	r1, [sp, #8]
 8001850:	e9cd 2300 	strd	r2, r3, [sp]
 8001854:	4622      	mov	r2, r4
 8001856:	462b      	mov	r3, r5
 8001858:	48a6      	ldr	r0, [pc, #664]	; (8001af4 <main+0x34c>)
 800185a:	f005 f9a1 	bl	8006ba0 <iprintf>
		  printf("Time breakdown --- T1: %f   T2: %f   T3: %f\r\n", (double)test.T1/1000000, (double)test.T2/1000000, (double)test.T3/1000000);
 800185e:	4b9c      	ldr	r3, [pc, #624]	; (8001ad0 <main+0x328>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe56 	bl	8000514 <__aeabi_ui2d>
 8001868:	a395      	add	r3, pc, #596	; (adr r3, 8001ac0 <main+0x318>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fff5 	bl	800085c <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4690      	mov	r8, r2
 8001878:	4699      	mov	r9, r3
 800187a:	4b95      	ldr	r3, [pc, #596]	; (8001ad0 <main+0x328>)
 800187c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe48 	bl	8000514 <__aeabi_ui2d>
 8001884:	a38e      	add	r3, pc, #568	; (adr r3, 8001ac0 <main+0x318>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe ffe7 	bl	800085c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4614      	mov	r4, r2
 8001894:	461d      	mov	r5, r3
 8001896:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <main+0x328>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe3a 	bl	8000514 <__aeabi_ui2d>
 80018a0:	a387      	add	r3, pc, #540	; (adr r3, 8001ac0 <main+0x318>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe ffd9 	bl	800085c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018b2:	e9cd 4500 	strd	r4, r5, [sp]
 80018b6:	4642      	mov	r2, r8
 80018b8:	464b      	mov	r3, r9
 80018ba:	488f      	ldr	r0, [pc, #572]	; (8001af8 <main+0x350>)
 80018bc:	f005 f970 	bl	8006ba0 <iprintf>
		tmp = ((double)test.T1/1000000+(double)test.T2/1000000+(double)test.T3/1000000);
 80018c0:	4b83      	ldr	r3, [pc, #524]	; (8001ad0 <main+0x328>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe25 	bl	8000514 <__aeabi_ui2d>
 80018ca:	a37d      	add	r3, pc, #500	; (adr r3, 8001ac0 <main+0x318>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe ffc4 	bl	800085c <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4614      	mov	r4, r2
 80018da:	461d      	mov	r5, r3
 80018dc:	4b7c      	ldr	r3, [pc, #496]	; (8001ad0 <main+0x328>)
 80018de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe17 	bl	8000514 <__aeabi_ui2d>
 80018e6:	a376      	add	r3, pc, #472	; (adr r3, 8001ac0 <main+0x318>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe ffb6 	bl	800085c <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fcd0 	bl	800029c <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <main+0x328>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe03 	bl	8000514 <__aeabi_ui2d>
 800190e:	a36c      	add	r3, pc, #432	; (adr r3, 8001ac0 <main+0x318>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe ffa2 	bl	800085c <__aeabi_ddiv>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fcbc 	bl	800029c <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f964 	bl	8000bf8 <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	613b      	str	r3, [r7, #16]
		 printf("T_approx - T_exact : %fs , Error as percentege of actual time %f \n",test.time_to_complete-tmp,(test.time_to_complete*100.0/tmp-100.0));
 8001934:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <main+0x328>)
 8001936:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 800193a:	6938      	ldr	r0, [r7, #16]
 800193c:	f7fe fe0c 	bl	8000558 <__aeabi_f2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4620      	mov	r0, r4
 8001946:	4629      	mov	r1, r5
 8001948:	f7fe fca6 	bl	8000298 <__aeabi_dsub>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4614      	mov	r4, r2
 8001952:	461d      	mov	r5, r3
 8001954:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <main+0x328>)
 8001956:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <main+0x354>)
 8001960:	f7fe fe52 	bl	8000608 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4690      	mov	r8, r2
 800196a:	4699      	mov	r9, r3
 800196c:	6938      	ldr	r0, [r7, #16]
 800196e:	f7fe fdf3 	bl	8000558 <__aeabi_f2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4640      	mov	r0, r8
 8001978:	4649      	mov	r1, r9
 800197a:	f7fe ff6f 	bl	800085c <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <main+0x354>)
 800198c:	f7fe fc84 	bl	8000298 <__aeabi_dsub>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9cd 2300 	strd	r2, r3, [sp]
 8001998:	4622      	mov	r2, r4
 800199a:	462b      	mov	r3, r5
 800199c:	4858      	ldr	r0, [pc, #352]	; (8001b00 <main+0x358>)
 800199e:	f005 f8ff 	bl	8006ba0 <iprintf>
		 tmp = ((double)test.T1/1000000);
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <main+0x328>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdb4 	bl	8000514 <__aeabi_ui2d>
 80019ac:	a344      	add	r3, pc, #272	; (adr r3, 8001ac0 <main+0x318>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe ff53 	bl	800085c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f91b 	bl	8000bf8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
		 printf("acc time estimate: %fs ,Delta %fs, error as percentage: %f",test.acc_time,(test.acc_time-tmp), test.acc_time*100.0/tmp-100.0);
 80019c6:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <main+0x328>)
 80019c8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <main+0x328>)
 80019ce:	e9d3 8914 	ldrd	r8, r9, [r3, #80]	; 0x50
 80019d2:	6938      	ldr	r0, [r7, #16]
 80019d4:	f7fe fdc0 	bl	8000558 <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4640      	mov	r0, r8
 80019de:	4649      	mov	r1, r9
 80019e0:	f7fe fc5a 	bl	8000298 <__aeabi_dsub>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4690      	mov	r8, r2
 80019ea:	4699      	mov	r9, r3
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <main+0x328>)
 80019ee:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <main+0x354>)
 80019f8:	f7fe fe06 	bl	8000608 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4692      	mov	sl, r2
 8001a02:	469b      	mov	fp, r3
 8001a04:	6938      	ldr	r0, [r7, #16]
 8001a06:	f7fe fda7 	bl	8000558 <__aeabi_f2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4650      	mov	r0, sl
 8001a10:	4659      	mov	r1, fp
 8001a12:	f7fe ff23 	bl	800085c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b36      	ldr	r3, [pc, #216]	; (8001afc <main+0x354>)
 8001a24:	f7fe fc38 	bl	8000298 <__aeabi_dsub>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a30:	e9cd 8900 	strd	r8, r9, [sp]
 8001a34:	4622      	mov	r2, r4
 8001a36:	462b      	mov	r3, r5
 8001a38:	4832      	ldr	r0, [pc, #200]	; (8001b04 <main+0x35c>)
 8001a3a:	f005 f8b1 	bl	8006ba0 <iprintf>
		  printf("\r\n\r\n---------\r\n\r\n");
 8001a3e:	4832      	ldr	r0, [pc, #200]	; (8001b08 <main+0x360>)
 8001a40:	f005 f934 	bl	8006cac <puts>
		  flag_htim2_done=0;
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <main+0x348>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]

	  }

	  if(flag_command_recieved)
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <main+0x344>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f43f aee1 	beq.w	8001816 <main+0x6e>
	  {
		  memcpy(MainBuf,RxBuf,size_recieved);
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <main+0x364>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4921      	ldr	r1, [pc, #132]	; (8001ae0 <main+0x338>)
 8001a5c:	482c      	ldr	r0, [pc, #176]	; (8001b10 <main+0x368>)
 8001a5e:	f004 fc1f 	bl	80062a0 <memcpy>
		  		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001a62:	2240      	movs	r2, #64	; 0x40
 8001a64:	491e      	ldr	r1, [pc, #120]	; (8001ae0 <main+0x338>)
 8001a66:	481f      	ldr	r0, [pc, #124]	; (8001ae4 <main+0x33c>)
 8001a68:	f003 fa9f 	bl	8004faa <HAL_UARTEx_ReceiveToIdle_DMA>
		  		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <main+0x340>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <main+0x340>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0208 	bic.w	r2, r2, #8
 8001a7a:	601a      	str	r2, [r3, #0]

		  		printf("Recieved: %s \r\n",MainBuf);
 8001a7c:	4924      	ldr	r1, [pc, #144]	; (8001b10 <main+0x368>)
 8001a7e:	4825      	ldr	r0, [pc, #148]	; (8001b14 <main+0x36c>)
 8001a80:	f005 f88e 	bl	8006ba0 <iprintf>

		  		sscanf(MainBuf,"%d %u %u %u",&steps, &accel, &decel, &max_speed);
 8001a84:	f107 010c 	add.w	r1, r7, #12
 8001a88:	1d3a      	adds	r2, r7, #4
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	463b      	mov	r3, r7
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	460b      	mov	r3, r1
 8001a96:	4920      	ldr	r1, [pc, #128]	; (8001b18 <main+0x370>)
 8001a98:	481d      	ldr	r0, [pc, #116]	; (8001b10 <main+0x368>)
 8001a9a:	f005 f90f 	bl	8006cbc <siscanf>
		  		//accel, decel in 1m rad/s^2
		  		//max_speed in 1m rad/s
		  		init_movement(&test,steps,accel,decel,max_speed);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4601      	mov	r1, r0
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <main+0x328>)
 8001ab0:	f7ff fbd6 	bl	8001260 <init_movement>


		  		//htim5.Instance->CNT=0;
		  		timer_val = __HAL_TIM_GET_COUNTER(&htim5);
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <main+0x334>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	e02f      	b.n	8001b1c <main+0x374>
 8001abc:	f3af 8000 	nop.w
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	412e8480 	.word	0x412e8480
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	200002bc 	.word	0x200002bc
 8001ad0:	20000480 	.word	0x20000480
 8001ad4:	20000304 	.word	0x20000304
 8001ad8:	2000034c 	.word	0x2000034c
 8001adc:	20000394 	.word	0x20000394
 8001ae0:	200001fc 	.word	0x200001fc
 8001ae4:	200003dc 	.word	0x200003dc
 8001ae8:	20000420 	.word	0x20000420
 8001aec:	200004ec 	.word	0x200004ec
 8001af0:	200004e8 	.word	0x200004e8
 8001af4:	080099b8 	.word	0x080099b8
 8001af8:	080099e0 	.word	0x080099e0
 8001afc:	40590000 	.word	0x40590000
 8001b00:	08009a10 	.word	0x08009a10
 8001b04:	08009a54 	.word	0x08009a54
 8001b08:	08009a90 	.word	0x08009a90
 8001b0c:	200004f0 	.word	0x200004f0
 8001b10:	2000023c 	.word	0x2000023c
 8001b14:	08009aa4 	.word	0x08009aa4
 8001b18:	08009ab4 	.word	0x08009ab4
 8001b1c:	617b      	str	r3, [r7, #20]
		  		flag_command_recieved=0;
 8001b1e:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <main+0x380>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
	  if(flag_htim2_done)
 8001b24:	e677      	b.n	8001816 <main+0x6e>
 8001b26:	bf00      	nop
 8001b28:	200004ec 	.word	0x200004ec

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b094      	sub	sp, #80	; 0x50
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	2230      	movs	r2, #48	; 0x30
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 fbbe 	bl	80062bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <SystemClock_Config+0xd0>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <SystemClock_Config+0xd0>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <SystemClock_Config+0xd0>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <SystemClock_Config+0xd4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <SystemClock_Config+0xd4>)
 8001b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <SystemClock_Config+0xd4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b90:	2301      	movs	r3, #1
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b94:	2310      	movs	r3, #16
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ba4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ba8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fc9a 	bl	80034f0 <HAL_RCC_OscConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bc2:	f000 fa75 	bl	80020b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2102      	movs	r1, #2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fefc 	bl	80039e0 <HAL_RCC_ClockConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001bee:	f000 fa5f 	bl	80020b0 <Error_Handler>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3750      	adds	r7, #80	; 0x50
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40007000 	.word	0x40007000

08001c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c30:	f240 128f 	movw	r2, #399	; 0x18f
 8001c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c3e:	f240 128f 	movw	r2, #399	; 0x18f
 8001c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001c50:	4818      	ldr	r0, [pc, #96]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c52:	f002 f9c6 	bl	8003fe2 <HAL_TIM_OC_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001c5c:	f000 fa28 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c60:	2320      	movs	r3, #32
 8001c62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c68:	f107 0320 	add.w	r3, r7, #32
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c70:	f003 f83a 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001c7a:	f000 fa19 	bl	80020b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001c7e:	2330      	movs	r3, #48	; 0x30
 8001c80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001c96:	f002 fc0f 	bl	80044b8 <HAL_TIM_OC_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ca0:	f000 fa06 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM2_Init+0xb0>)
 8001ca6:	f000 fab5 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200002bc 	.word	0x200002bc

08001cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	615a      	str	r2, [r3, #20]
 8001cd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001cdc:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <MX_TIM3_Init+0xb0>)
 8001cde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001ce0:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001ce2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001ce6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001d02:	4818      	ldr	r0, [pc, #96]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001d04:	f002 f96d 	bl	8003fe2 <HAL_TIM_OC_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001d0e:	f000 f9cf 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4810      	ldr	r0, [pc, #64]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001d22:	f002 ffe1 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001d2c:	f000 f9c0 	bl	80020b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	4619      	mov	r1, r3
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001d48:	f002 fbb6 	bl	80044b8 <HAL_TIM_OC_ConfigChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001d52:	f000 f9ad 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d56:	4803      	ldr	r0, [pc, #12]	; (8001d64 <MX_TIM3_Init+0xac>)
 8001d58:	f000 fa5c 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000304 	.word	0x20000304
 8001d68:	40000400 	.word	0x40000400

08001d6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001d90:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <MX_TIM4_Init+0xb0>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001db4:	4818      	ldr	r0, [pc, #96]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001db6:	f002 f914 	bl	8003fe2 <HAL_TIM_OC_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001dc0:	f000 f976 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dcc:	f107 0320 	add.w	r3, r7, #32
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4811      	ldr	r0, [pc, #68]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001dd4:	f002 ff88 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001dde:	f000 f967 	bl	80020b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4807      	ldr	r0, [pc, #28]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001dfa:	f002 fb5d 	bl	80044b8 <HAL_TIM_OC_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001e04:	f000 f954 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001e0a:	f000 fa03 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000034c 	.word	0x2000034c
 8001e1c:	40000800 	.word	0x40000800

08001e20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <MX_TIM5_Init+0x98>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e44:	2253      	movs	r2, #83	; 0x53
 8001e46:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e62:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e64:	f001 ffdc 	bl	8003e20 <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001e6e:	f000 f91f 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e80:	f002 fb76 	bl	8004570 <HAL_TIM_ConfigClockSource>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001e8a:	f000 f911 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e96:	463b      	mov	r3, r7
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4806      	ldr	r0, [pc, #24]	; (8001eb4 <MX_TIM5_Init+0x94>)
 8001e9c:	f002 ff24 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001ea6:	f000 f903 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000394 	.word	0x20000394
 8001eb8:	40000c00 	.word	0x40000c00

08001ebc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <MX_USART2_UART_Init+0x50>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ef4:	f002 ff7a 	bl	8004dec <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001efe:	f000 f8d7 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200003dc 	.word	0x200003dc
 8001f0c:	40004400 	.word	0x40004400

08001f10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <MX_DMA_Init+0x3c>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <MX_DMA_Init+0x3c>)
 8001f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_DMA_Init+0x3c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2010      	movs	r0, #16
 8001f38:	f000 fd03 	bl	8002942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f3c:	2010      	movs	r0, #16
 8001f3e:	f000 fd1c 	bl	800297a <HAL_NVIC_EnableIRQ>

}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b31      	ldr	r3, [pc, #196]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a30      	ldr	r2, [pc, #192]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a29      	ldr	r2, [pc, #164]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a22      	ldr	r2, [pc, #136]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <MX_GPIO_Init+0xe0>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001fdc:	4815      	ldr	r0, [pc, #84]	; (8002034 <MX_GPIO_Init+0xe4>)
 8001fde:	f001 fa6d 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_DIR_1_GPIO_Port, STEPPER_DIR_1_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2140      	movs	r1, #64	; 0x40
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <MX_GPIO_Init+0xe8>)
 8001fe8:	f001 fa68 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEPPER_DIR_3_Pin STEPPER_DIR_2_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_3_Pin|STEPPER_DIR_2_Pin;
 8001fec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	4619      	mov	r1, r3
 8002004:	480b      	ldr	r0, [pc, #44]	; (8002034 <MX_GPIO_Init+0xe4>)
 8002006:	f001 f8d5 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEPPER_DIR_1_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_1_Pin;
 800200a:	2340      	movs	r3, #64	; 0x40
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEPPER_DIR_1_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_GPIO_Init+0xe8>)
 8002022:	f001 f8c7 	bl	80031b4 <HAL_GPIO_Init>

}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800

0800203c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_UARTEx_RxEventCallback+0x30>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d105      	bne.n	800205e <HAL_UARTEx_RxEventCallback+0x22>
	{
		flag_command_recieved=1;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_UARTEx_RxEventCallback+0x34>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
		size_recieved=Size;
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <HAL_UARTEx_RxEventCallback+0x38>)
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	8013      	strh	r3, [r2, #0]
	}

}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40004400 	.word	0x40004400
 8002070:	200004ec 	.word	0x200004ec
 8002074:	200004f0 	.word	0x200004f0

08002078 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	if(htim == test.timer)
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d10c      	bne.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(!test.movement_done)
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 800208c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0x2c>
			TIM2->ARR=calculate_auto_reload(&test);
 8002096:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800209a:	4804      	ldr	r0, [pc, #16]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 800209c:	f7ff fa8c 	bl	80015b8 <calculate_auto_reload>
 80020a0:	4603      	mov	r3, r0
 80020a2:	62e3      	str	r3, [r4, #44]	; 0x2c


	}
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	20000480 	.word	0x20000480

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <Error_Handler+0x8>
	...

080020bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020fa:	2007      	movs	r0, #7
 80020fc:	f000 fc16 	bl	800292c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d116      	bne.n	800214c <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	201c      	movs	r0, #28
 8002140:	f000 fbff 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002144:	201c      	movs	r0, #28
 8002146:	f000 fc18 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800214a:	e036      	b.n	80021ba <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_TIM_OC_MspInit+0xbc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d116      	bne.n	8002184 <HAL_TIM_OC_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	201d      	movs	r0, #29
 8002178:	f000 fbe3 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800217c:	201d      	movs	r0, #29
 800217e:	f000 fbfc 	bl	800297a <HAL_NVIC_EnableIRQ>
}
 8002182:	e01a      	b.n	80021ba <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM4)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_TIM_OC_MspInit+0xc0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d115      	bne.n	80021ba <HAL_TIM_OC_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_TIM_OC_MspInit+0xb8>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	201e      	movs	r0, #30
 80021b0:	f000 fbc7 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021b4:	201e      	movs	r0, #30
 80021b6:	f000 fbe0 	bl	800297a <HAL_NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40000800 	.word	0x40000800

080021d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0b      	ldr	r2, [pc, #44]	; (800220c <HAL_TIM_Base_MspInit+0x3c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10d      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_TIM_Base_MspInit+0x40>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_TIM_Base_MspInit+0x40>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_TIM_Base_MspInit+0x40>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40000c00 	.word	0x40000c00
 8002210:	40023800 	.word	0x40023800

08002214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d11e      	bne.n	8002274 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a33      	ldr	r2, [pc, #204]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b31      	ldr	r3, [pc, #196]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEPPER_PULSE_1_Pin;
 8002252:	2320      	movs	r3, #32
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002262:	2301      	movs	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_1_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	4828      	ldr	r0, [pc, #160]	; (8002310 <HAL_TIM_MspPostInit+0xfc>)
 800226e:	f000 ffa1 	bl	80031b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002272:	e046      	b.n	8002302 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_TIM_MspPostInit+0x100>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d11e      	bne.n	80022bc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a21      	ldr	r2, [pc, #132]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEPPER_PULSE_2_Pin;
 800229a:	2340      	movs	r3, #64	; 0x40
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022aa:	2302      	movs	r3, #2
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_2_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4816      	ldr	r0, [pc, #88]	; (8002310 <HAL_TIM_MspPostInit+0xfc>)
 80022b6:	f000 ff7d 	bl	80031b4 <HAL_GPIO_Init>
}
 80022ba:	e022      	b.n	8002302 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a15      	ldr	r2, [pc, #84]	; (8002318 <HAL_TIM_MspPostInit+0x104>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d11d      	bne.n	8002302 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_TIM_MspPostInit+0xf8>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_PULSE_3_Pin;
 80022e2:	2340      	movs	r3, #64	; 0x40
 80022e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022f2:	2302      	movs	r3, #2
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEPPER_PULSE_3_GPIO_Port, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	4807      	ldr	r0, [pc, #28]	; (800231c <HAL_TIM_MspPostInit+0x108>)
 80022fe:	f000 ff59 	bl	80031b4 <HAL_GPIO_Init>
}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000
 8002314:	40000400 	.word	0x40000400
 8002318:	40000800 	.word	0x40000800
 800231c:	40020400 	.word	0x40020400

08002320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a34      	ldr	r2, [pc, #208]	; (8002410 <HAL_UART_MspInit+0xf0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d161      	bne.n	8002406 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_UART_MspInit+0xf4>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a32      	ldr	r2, [pc, #200]	; (8002414 <HAL_UART_MspInit+0xf4>)
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_UART_MspInit+0xf4>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_UART_MspInit+0xf4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <HAL_UART_MspInit+0xf4>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_UART_MspInit+0xf4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800237a:	230c      	movs	r3, #12
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800238a:	2307      	movs	r3, #7
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4820      	ldr	r0, [pc, #128]	; (8002418 <HAL_UART_MspInit+0xf8>)
 8002396:	f000 ff0d 	bl	80031b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <HAL_UART_MspInit+0xfc>)
 800239c:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_UART_MspInit+0x100>)
 800239e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023da:	4810      	ldr	r0, [pc, #64]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023dc:	f000 fae8 	bl	80029b0 <HAL_DMA_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80023e6:	f7ff fe63 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_UART_MspInit+0xfc>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2026      	movs	r0, #38	; 0x26
 80023fc:	f000 faa1 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002400:	2026      	movs	r0, #38	; 0x26
 8002402:	f000 faba 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40004400 	.word	0x40004400
 8002414:	40023800 	.word	0x40023800
 8002418:	40020000 	.word	0x40020000
 800241c:	20000420 	.word	0x20000420
 8002420:	40026088 	.word	0x40026088

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <NMI_Handler+0x4>

0800242a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <HardFault_Handler+0x4>

08002430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <MemManage_Handler+0x4>

08002436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <BusFault_Handler+0x4>

0800243c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <UsageFault_Handler+0x4>

08002442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002470:	f000 f96c 	bl	800274c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <DMA1_Stream5_IRQHandler+0x10>)
 800247e:	f000 fc2f 	bl	8002ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000420 	.word	0x20000420

0800248c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <TIM2_IRQHandler+0x10>)
 8002492:	f001 ff09 	bl	80042a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200002bc 	.word	0x200002bc

080024a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <TIM3_IRQHandler+0x10>)
 80024a6:	f001 feff 	bl	80042a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000304 	.word	0x20000304

080024b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <TIM4_IRQHandler+0x10>)
 80024ba:	f001 fef5 	bl	80042a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000034c 	.word	0x2000034c

080024c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <USART2_IRQHandler+0x10>)
 80024ce:	f002 fdd1 	bl	8005074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200003dc 	.word	0x200003dc

080024dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	return 1;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_kill>:

int _kill(int pid, int sig)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024f6:	f003 fea9 	bl	800624c <__errno>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2216      	movs	r2, #22
 80024fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_exit>:

void _exit (int status)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ffe7 	bl	80024ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800251e:	e7fe      	b.n	800251e <_exit+0x12>

08002520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e00a      	b.n	8002548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002532:	f3af 8000 	nop.w
 8002536:	4601      	mov	r1, r0
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	60ba      	str	r2, [r7, #8]
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3301      	adds	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	dbf0      	blt.n	8002532 <_read+0x12>
	}

return len;
 8002550:	687b      	ldr	r3, [r7, #4]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_close>:
	}
	return len;
}

int _close(int file)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
	return -1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002582:	605a      	str	r2, [r3, #4]
	return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_isatty>:

int _isatty(int file)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
	return 1;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
	return 0;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <_sbrk+0x5c>)
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <_sbrk+0x60>)
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <_sbrk+0x64>)
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <_sbrk+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f4:	f003 fe2a 	bl	800624c <__errno>
 80025f8:	4603      	mov	r3, r0
 80025fa:	220c      	movs	r2, #12
 80025fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002602:	e009      	b.n	8002618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <_sbrk+0x64>)
 8002614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20018000 	.word	0x20018000
 8002624:	00000400 	.word	0x00000400
 8002628:	200004f4 	.word	0x200004f4
 800262c:	20000510 	.word	0x20000510

08002630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <SystemInit+0x20>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <SystemInit+0x20>)
 800263c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800268c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002658:	480d      	ldr	r0, [pc, #52]	; (8002690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800265a:	490e      	ldr	r1, [pc, #56]	; (8002694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002660:	e002      	b.n	8002668 <LoopCopyDataInit>

08002662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002666:	3304      	adds	r3, #4

08002668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800266c:	d3f9      	bcc.n	8002662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266e:	4a0b      	ldr	r2, [pc, #44]	; (800269c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002670:	4c0b      	ldr	r4, [pc, #44]	; (80026a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002674:	e001      	b.n	800267a <LoopFillZerobss>

08002676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002678:	3204      	adds	r2, #4

0800267a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800267c:	d3fb      	bcc.n	8002676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800267e:	f7ff ffd7 	bl	8002630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002682:	f003 fde9 	bl	8006258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002686:	f7ff f88f 	bl	80017a8 <main>
  bx  lr    
 800268a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800268c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002694:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002698:	08009ef0 	.word	0x08009ef0
  ldr r2, =_sbss
 800269c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80026a0:	2000050c 	.word	0x2000050c

080026a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC_IRQHandler>
	...

080026a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_Init+0x40>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_Init+0x40>)
 80026be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_Init+0x40>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f92b 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 f808 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7ff fcee 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_InitTick+0x54>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f943 	bl	8002996 <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00e      	b.n	8002738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d80a      	bhi.n	8002736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002728:	f000 f90b 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800272c:	4a06      	ldr	r2, [pc, #24]	; (8002748 <HAL_InitTick+0x5c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000000 	.word	0x20000000
 8002744:	20000008 	.word	0x20000008
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x20>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_IncTick+0x24>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_IncTick+0x24>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000008 	.word	0x20000008
 8002770:	200004f8 	.word	0x200004f8

08002774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_GetTick+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200004f8 	.word	0x200004f8

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff29 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff ff3e 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff8e 	bl	8002880 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff31 	bl	80027f0 <__NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ffa2 	bl	80028e8 <SysTick_Config>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff feda 	bl	8002774 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e099      	b.n	8002b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ec:	e00f      	b.n	8002a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ee:	f7ff fec1 	bl	8002774 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d908      	bls.n	8002a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e078      	b.n	8002b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e8      	bne.n	80029ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <HAL_DMA_Init+0x158>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d107      	bne.n	8002a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	4313      	orrs	r3, r2
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0307 	bic.w	r3, r3, #7
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d117      	bne.n	8002ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fb01 	bl	80030bc <DMA_CheckFifoParam>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e016      	b.n	8002b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fab8 	bl	8003050 <DMA_CalcBaseAndBitshift>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	223f      	movs	r2, #63	; 0x3f
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	f010803f 	.word	0xf010803f

08002b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_DMA_Start_IT+0x26>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e040      	b.n	8002bb4 <HAL_DMA_Start_IT+0xa8>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d12f      	bne.n	8002ba6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fa4a 	bl	8002ff4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b64:	223f      	movs	r2, #63	; 0x3f
 8002b66:	409a      	lsls	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0216 	orr.w	r2, r2, #22
 8002b7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0208 	orr.w	r2, r2, #8
 8002b92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e005      	b.n	8002bb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bca:	f7ff fdd3 	bl	8002774 <HAL_GetTick>
 8002bce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d008      	beq.n	8002bee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e052      	b.n	8002c94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0216 	bic.w	r2, r2, #22
 8002bfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d103      	bne.n	8002c1e <HAL_DMA_Abort+0x62>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0208 	bic.w	r2, r2, #8
 8002c2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3e:	e013      	b.n	8002c68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c40:	f7ff fd98 	bl	8002774 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d90c      	bls.n	8002c68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2203      	movs	r2, #3
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e015      	b.n	8002c94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e4      	bne.n	8002c40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	223f      	movs	r2, #63	; 0x3f
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d004      	beq.n	8002cba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e00c      	b.n	8002cd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cec:	4b8e      	ldr	r3, [pc, #568]	; (8002f28 <HAL_DMA_IRQHandler+0x248>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a8e      	ldr	r2, [pc, #568]	; (8002f2c <HAL_DMA_IRQHandler+0x24c>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0a9b      	lsrs	r3, r3, #10
 8002cf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01a      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0204 	bic.w	r2, r2, #4
 8002d32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2208      	movs	r2, #8
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	2201      	movs	r2, #1
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d012      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2201      	movs	r2, #1
 8002d70:	409a      	lsls	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f043 0202 	orr.w	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	2204      	movs	r2, #4
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d012      	beq.n	8002db8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	2204      	movs	r2, #4
 8002da6:	409a      	lsls	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d043      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03c      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	2210      	movs	r2, #16
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d018      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d024      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
 8002e0e:	e01f      	b.n	8002e50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
 8002e20:	e016      	b.n	8002e50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0208 	bic.w	r2, r2, #8
 8002e3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	2220      	movs	r2, #32
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 808f 	beq.w	8002f80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8087 	beq.w	8002f80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	2220      	movs	r2, #32
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d136      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0216 	bic.w	r2, r2, #22
 8002e98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_DMA_IRQHandler+0x1da>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0208 	bic.w	r2, r2, #8
 8002ec8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	223f      	movs	r2, #63	; 0x3f
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d07e      	beq.n	8002fec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
        }
        return;
 8002ef6:	e079      	b.n	8002fec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01d      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10d      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d031      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
 8002f24:	e02c      	b.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d023      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
 8002f40:	e01e      	b.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10f      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0210 	bic.w	r2, r2, #16
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d032      	beq.n	8002fee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2205      	movs	r2, #5
 8002f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d307      	bcc.n	8002fc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f2      	bne.n	8002fac <HAL_DMA_IRQHandler+0x2cc>
 8002fc6:	e000      	b.n	8002fca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	e000      	b.n	8002fee <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fec:	bf00      	nop
    }
  }
}
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003010:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d108      	bne.n	8003034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003032:	e007      	b.n	8003044 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	3b10      	subs	r3, #16
 8003060:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800306a:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <DMA_CalcBaseAndBitshift+0x68>)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d909      	bls.n	8003092 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	1d1a      	adds	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	659a      	str	r2, [r3, #88]	; 0x58
 8003090:	e007      	b.n	80030a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	aaaaaaab 	.word	0xaaaaaaab
 80030b8:	08009ae4 	.word	0x08009ae4

080030bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11f      	bne.n	8003116 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d856      	bhi.n	800318a <DMA_CheckFifoParam+0xce>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <DMA_CheckFifoParam+0x28>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	08003107 	.word	0x08003107
 80030ec:	080030f5 	.word	0x080030f5
 80030f0:	0800318b 	.word	0x0800318b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d046      	beq.n	800318e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003104:	e043      	b.n	800318e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800310e:	d140      	bne.n	8003192 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003114:	e03d      	b.n	8003192 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311e:	d121      	bne.n	8003164 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d837      	bhi.n	8003196 <DMA_CheckFifoParam+0xda>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <DMA_CheckFifoParam+0x70>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	0800313d 	.word	0x0800313d
 8003130:	08003143 	.word	0x08003143
 8003134:	0800313d 	.word	0x0800313d
 8003138:	08003155 	.word	0x08003155
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      break;
 8003140:	e030      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d025      	beq.n	800319a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003152:	e022      	b.n	800319a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800315c:	d11f      	bne.n	800319e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003162:	e01c      	b.n	800319e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d903      	bls.n	8003172 <DMA_CheckFifoParam+0xb6>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d003      	beq.n	8003178 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003170:	e018      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
      break;
 8003176:	e015      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      break;
 8003188:	e00b      	b.n	80031a2 <DMA_CheckFifoParam+0xe6>
      break;
 800318a:	bf00      	nop
 800318c:	e00a      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
 8003190:	e008      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003192:	bf00      	nop
 8003194:	e006      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
 8003198:	e004      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
      break;
 800319a:	bf00      	nop
 800319c:	e002      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800319e:	bf00      	nop
 80031a0:	e000      	b.n	80031a4 <DMA_CheckFifoParam+0xe8>
      break;
 80031a2:	bf00      	nop
    }
  } 
  
  return status; 
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop

080031b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e159      	b.n	8003484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	f040 8148 	bne.w	800347e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d005      	beq.n	8003206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003202:	2b02      	cmp	r3, #2
 8003204:	d130      	bne.n	8003268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	2203      	movs	r2, #3
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800323c:	2201      	movs	r2, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 0201 	and.w	r2, r3, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b03      	cmp	r3, #3
 8003272:	d017      	beq.n	80032a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d123      	bne.n	80032f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	08da      	lsrs	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3208      	adds	r2, #8
 80032b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	08da      	lsrs	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	69b9      	ldr	r1, [r7, #24]
 80032f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a2 	beq.w	800347e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	4b57      	ldr	r3, [pc, #348]	; (800349c <HAL_GPIO_Init+0x2e8>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a56      	ldr	r2, [pc, #344]	; (800349c <HAL_GPIO_Init+0x2e8>)
 8003344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b54      	ldr	r3, [pc, #336]	; (800349c <HAL_GPIO_Init+0x2e8>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003356:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_GPIO_Init+0x2ec>)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3302      	adds	r3, #2
 800335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a49      	ldr	r2, [pc, #292]	; (80034a4 <HAL_GPIO_Init+0x2f0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x202>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a48      	ldr	r2, [pc, #288]	; (80034a8 <HAL_GPIO_Init+0x2f4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x1fe>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a47      	ldr	r2, [pc, #284]	; (80034ac <HAL_GPIO_Init+0x2f8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x1fa>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a46      	ldr	r2, [pc, #280]	; (80034b0 <HAL_GPIO_Init+0x2fc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x1f6>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a45      	ldr	r2, [pc, #276]	; (80034b4 <HAL_GPIO_Init+0x300>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x1f2>
 80033a2:	2304      	movs	r3, #4
 80033a4:	e008      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033a6:	2307      	movs	r3, #7
 80033a8:	e006      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033aa:	2303      	movs	r3, #3
 80033ac:	e004      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e002      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033b6:	2300      	movs	r3, #0
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	f002 0203 	and.w	r2, r2, #3
 80033be:	0092      	lsls	r2, r2, #2
 80033c0:	4093      	lsls	r3, r2
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c8:	4935      	ldr	r1, [pc, #212]	; (80034a0 <HAL_GPIO_Init+0x2ec>)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	3302      	adds	r3, #2
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_GPIO_Init+0x304>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033fa:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <HAL_GPIO_Init+0x304>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <HAL_GPIO_Init+0x304>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003424:	4a24      	ldr	r2, [pc, #144]	; (80034b8 <HAL_GPIO_Init+0x304>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <HAL_GPIO_Init+0x304>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800344e:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <HAL_GPIO_Init+0x304>)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <HAL_GPIO_Init+0x304>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003478:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_GPIO_Init+0x304>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3301      	adds	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b0f      	cmp	r3, #15
 8003488:	f67f aea2 	bls.w	80031d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	40013800 	.word	0x40013800
 80034a4:	40020000 	.word	0x40020000
 80034a8:	40020400 	.word	0x40020400
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020c00 	.word	0x40020c00
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40013c00 	.word	0x40013c00

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d8:	e003      	b.n	80034e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	041a      	lsls	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	619a      	str	r2, [r3, #24]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e267      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d075      	beq.n	80035fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b04      	cmp	r3, #4
 8003518:	d00c      	beq.n	8003534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b85      	ldr	r3, [pc, #532]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d112      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4b82      	ldr	r3, [pc, #520]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4b7e      	ldr	r3, [pc, #504]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x108>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d157      	bne.n	80035f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e242      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x74>
 8003556:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a75      	ldr	r2, [pc, #468]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x98>
 800356e:	4b70      	ldr	r3, [pc, #448]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6f      	ldr	r2, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6c      	ldr	r2, [pc, #432]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003588:	4b69      	ldr	r3, [pc, #420]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a68      	ldr	r2, [pc, #416]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7ff f8e4 	bl	8002774 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7ff f8e0 	bl	8002774 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e207      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xc0>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7ff f8d0 	bl	8002774 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7ff f8cc 	bl	8002774 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e1f3      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	4b51      	ldr	r3, [pc, #324]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0xe8>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d063      	beq.n	80036ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003606:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d11c      	bne.n	8003658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361e:	4b44      	ldr	r3, [pc, #272]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d116      	bne.n	8003658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_RCC_OscConfig+0x152>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d001      	beq.n	8003642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e1c7      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4937      	ldr	r1, [pc, #220]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	e03a      	b.n	80036ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_RCC_OscConfig+0x244>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7ff f885 	bl	8002774 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366e:	f7ff f881 	bl	8002774 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1a8      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4925      	ldr	r1, [pc, #148]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
 80036a0:	e015      	b.n	80036ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x244>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7ff f864 	bl	8002774 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b0:	f7ff f860 	bl	8002774 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e187      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d036      	beq.n	8003748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d016      	beq.n	8003710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_RCC_OscConfig+0x248>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7ff f844 	bl	8002774 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f0:	f7ff f840 	bl	8002774 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e167      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x200>
 800370e:	e01b      	b.n	8003748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_OscConfig+0x248>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7ff f82d 	bl	8002774 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	e00e      	b.n	800373c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371e:	f7ff f829 	bl	8002774 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d907      	bls.n	800373c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e150      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
 8003730:	40023800 	.word	0x40023800
 8003734:	42470000 	.word	0x42470000
 8003738:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	4b88      	ldr	r3, [pc, #544]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ea      	bne.n	800371e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8097 	beq.w	8003884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	4b7d      	ldr	r3, [pc, #500]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a7c      	ldr	r2, [pc, #496]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b7a      	ldr	r3, [pc, #488]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b77      	ldr	r3, [pc, #476]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d118      	bne.n	80037c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003792:	4b74      	ldr	r3, [pc, #464]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a73      	ldr	r2, [pc, #460]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379e:	f7fe ffe9 	bl	8002774 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a6:	f7fe ffe5 	bl	8002774 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e10c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	4b6a      	ldr	r3, [pc, #424]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x2ea>
 80037cc:	4b64      	ldr	r3, [pc, #400]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a63      	ldr	r2, [pc, #396]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	e01c      	b.n	8003814 <HAL_RCC_OscConfig+0x324>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b05      	cmp	r3, #5
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x30c>
 80037e2:	4b5f      	ldr	r3, [pc, #380]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a5e      	ldr	r2, [pc, #376]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	4b5c      	ldr	r3, [pc, #368]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a5b      	ldr	r2, [pc, #364]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0x324>
 80037fc:	4b58      	ldr	r3, [pc, #352]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	4a57      	ldr	r2, [pc, #348]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	6713      	str	r3, [r2, #112]	; 0x70
 8003808:	4b55      	ldr	r3, [pc, #340]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a54      	ldr	r2, [pc, #336]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800380e:	f023 0304 	bic.w	r3, r3, #4
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fe ffaa 	bl	8002774 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	e00a      	b.n	800383a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fe ffa6 	bl	8002774 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0cb      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0ee      	beq.n	8003824 <HAL_RCC_OscConfig+0x334>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7fe ff94 	bl	8002774 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe ff90 	bl	8002774 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0b5      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003866:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ee      	bne.n	8003850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003878:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	4a38      	ldr	r2, [pc, #224]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a1 	beq.w	80039d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388e:	4b34      	ldr	r3, [pc, #208]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b08      	cmp	r3, #8
 8003898:	d05c      	beq.n	8003954 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d141      	bne.n	8003926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe ff64 	bl	8002774 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe ff60 	bl	8002774 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e087      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	4b27      	ldr	r3, [pc, #156]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	491b      	ldr	r1, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe ff39 	bl	8002774 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fe ff35 	bl	8002774 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e05c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x416>
 8003924:	e054      	b.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe ff22 	bl	8002774 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe ff1e 	bl	8002774 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e045      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x444>
 8003952:	e03d      	b.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e038      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_RCC_OscConfig+0x4ec>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d028      	beq.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d121      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d11a      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d111      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	3b01      	subs	r3, #1
 80039b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0cc      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d90c      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d044      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d119      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e067      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4934      	ldr	r1, [pc, #208]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad0:	f7fe fe50 	bl	8002774 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fe fe4c 	bl	8002774 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d20c      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fdb0 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08009acc 	.word	0x08009acc
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000004 	.word	0x20000004

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b094      	sub	sp, #80	; 0x50
 8003bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb8:	2300      	movs	r3, #0
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc4:	4b79      	ldr	r3, [pc, #484]	; (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00d      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x40>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	f200 80e1 	bhi.w	8003d98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bde:	e0db      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b73      	ldr	r3, [pc, #460]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003be4:	e0db      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be6:	4b73      	ldr	r3, [pc, #460]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003be8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bea:	e0d8      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bec:	4b6f      	ldr	r3, [pc, #444]	; (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d063      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c02:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	2200      	movs	r2, #0
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c14:	633b      	str	r3, [r7, #48]	; 0x30
 8003c16:	2300      	movs	r3, #0
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	0159      	lsls	r1, r3, #5
 8003c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c30:	0150      	lsls	r0, r2, #5
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4621      	mov	r1, r4
 8003c38:	1a51      	subs	r1, r2, r1
 8003c3a:	6139      	str	r1, [r7, #16]
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c50:	4659      	mov	r1, fp
 8003c52:	018b      	lsls	r3, r1, #6
 8003c54:	4651      	mov	r1, sl
 8003c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	018a      	lsls	r2, r1, #6
 8003c5e:	4651      	mov	r1, sl
 8003c60:	ebb2 0801 	subs.w	r8, r2, r1
 8003c64:	4659      	mov	r1, fp
 8003c66:	eb63 0901 	sbc.w	r9, r3, r1
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7e:	4690      	mov	r8, r2
 8003c80:	4699      	mov	r9, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	eb18 0303 	adds.w	r3, r8, r3
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	462b      	mov	r3, r5
 8003c8c:	eb49 0303 	adc.w	r3, r9, r3
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	024b      	lsls	r3, r1, #9
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca8:	4621      	mov	r1, r4
 8003caa:	024a      	lsls	r2, r1, #9
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cbc:	f7fc ffec 	bl	8000c98 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc8:	e058      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b38      	ldr	r3, [pc, #224]	; (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	0159      	lsls	r1, r3, #5
 8003cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf6:	0150      	lsls	r0, r2, #5
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d02:	4649      	mov	r1, r9
 8003d04:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d1c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d20:	eb63 050b 	sbc.w	r5, r3, fp
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	00eb      	lsls	r3, r5, #3
 8003d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d32:	00e2      	lsls	r2, r4, #3
 8003d34:	4614      	mov	r4, r2
 8003d36:	461d      	mov	r5, r3
 8003d38:	4643      	mov	r3, r8
 8003d3a:	18e3      	adds	r3, r4, r3
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	464b      	mov	r3, r9
 8003d40:	eb45 0303 	adc.w	r3, r5, r3
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d52:	4629      	mov	r1, r5
 8003d54:	028b      	lsls	r3, r1, #10
 8003d56:	4621      	mov	r1, r4
 8003d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	028a      	lsls	r2, r1, #10
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d66:	2200      	movs	r2, #0
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	61fa      	str	r2, [r7, #28]
 8003d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d70:	f7fc ff92 	bl	8000c98 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3750      	adds	r7, #80	; 0x50
 8003da4:	46bd      	mov	sp, r7
 8003da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	007a1200 	.word	0x007a1200

08003db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000000 	.word	0x20000000

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd4:	f7ff fff0 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0a9b      	lsrs	r3, r3, #10
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08009adc 	.word	0x08009adc

08003df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dfc:	f7ff ffdc 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0b5b      	lsrs	r3, r3, #13
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	08009adc 	.word	0x08009adc

08003e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e041      	b.n	8003eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fe f9c2 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 fc76 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e044      	b.n	8003f62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d018      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x6c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d013      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x6c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x6c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x6c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_TIM_Base_Start_IT+0xbc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x6c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d111      	bne.n	8003f50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d010      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	e007      	b.n	8003f60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40014000 	.word	0x40014000

08003f84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1a      	ldr	r2, [r3, #32]
 8003fa2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10f      	bne.n	8003fcc <HAL_TIM_Base_Stop_IT+0x48>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a1a      	ldr	r2, [r3, #32]
 8003fb2:	f240 4344 	movw	r3, #1092	; 0x444
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_Base_Stop_IT+0x48>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e041      	b.n	8004078 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d106      	bne.n	800400e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7fe f87f 	bl	800210c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f000 fb95 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_TIM_OC_Start+0x24>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e022      	b.n	80040ea <HAL_TIM_OC_Start+0x6a>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d109      	bne.n	80040be <HAL_TIM_OC_Start+0x3e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	e015      	b.n	80040ea <HAL_TIM_OC_Start+0x6a>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d109      	bne.n	80040d8 <HAL_TIM_OC_Start+0x58>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e008      	b.n	80040ea <HAL_TIM_OC_Start+0x6a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e068      	b.n	80041c4 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_OC_Start+0x82>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	e013      	b.n	800412a <HAL_TIM_OC_Start+0xaa>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d104      	bne.n	8004112 <HAL_TIM_OC_Start+0x92>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004110:	e00b      	b.n	800412a <HAL_TIM_OC_Start+0xaa>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d104      	bne.n	8004122 <HAL_TIM_OC_Start+0xa2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004120:	e003      	b.n	800412a <HAL_TIM_OC_Start+0xaa>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2201      	movs	r2, #1
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fdb2 	bl	8004c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a23      	ldr	r2, [pc, #140]	; (80041cc <HAL_TIM_OC_Start+0x14c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d107      	bne.n	8004152 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <HAL_TIM_OC_Start+0x14c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d018      	beq.n	800418e <HAL_TIM_OC_Start+0x10e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d013      	beq.n	800418e <HAL_TIM_OC_Start+0x10e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <HAL_TIM_OC_Start+0x150>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_TIM_OC_Start+0x10e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <HAL_TIM_OC_Start+0x154>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_TIM_OC_Start+0x10e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <HAL_TIM_OC_Start+0x158>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_TIM_OC_Start+0x10e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_TIM_OC_Start+0x15c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d111      	bne.n	80041b2 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b06      	cmp	r3, #6
 800419e:	d010      	beq.n	80041c2 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b0:	e007      	b.n	80041c2 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40014000 	.word	0x40014000

080041e0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	6839      	ldr	r1, [r7, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fd52 	bl	8004c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <HAL_TIM_OC_Stop+0xc4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d117      	bne.n	8004232 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	f241 1311 	movw	r3, #4369	; 0x1111
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <HAL_TIM_OC_Stop+0x52>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	f240 4344 	movw	r3, #1092	; 0x444
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_TIM_OC_Stop+0x52>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	f241 1311 	movw	r3, #4369	; 0x1111
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10f      	bne.n	8004262 <HAL_TIM_OC_Stop+0x82>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	f240 4344 	movw	r3, #1092	; 0x444
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <HAL_TIM_OC_Stop+0x82>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_TIM_OC_Stop+0x92>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	e013      	b.n	800429a <HAL_TIM_OC_Stop+0xba>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d104      	bne.n	8004282 <HAL_TIM_OC_Stop+0xa2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004280:	e00b      	b.n	800429a <HAL_TIM_OC_Stop+0xba>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d104      	bne.n	8004292 <HAL_TIM_OC_Stop+0xb2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004290:	e003      	b.n	800429a <HAL_TIM_OC_Stop+0xba>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40010000 	.word	0x40010000

080042a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0202 	mvn.w	r2, #2
 80042d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa11 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa03 	bl	80046fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fa14 	bl	8004726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b04      	cmp	r3, #4
 8004310:	d122      	bne.n	8004358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0204 	mvn.w	r2, #4
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f9e7 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9d9 	bl	80046fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f9ea 	bl	8004726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b08      	cmp	r3, #8
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b08      	cmp	r3, #8
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0208 	mvn.w	r2, #8
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2204      	movs	r2, #4
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f9bd 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9af 	bl	80046fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f9c0 	bl	8004726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0210 	mvn.w	r2, #16
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2208      	movs	r2, #8
 80043d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f993 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f985 	bl	80046fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f996 	bl	8004726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0201 	mvn.w	r2, #1
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd fe26 	bl	8002078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fcc0 	bl	8004dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d10e      	bne.n	8004484 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d107      	bne.n	8004484 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f95b 	bl	800473a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	d10e      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b20      	cmp	r3, #32
 800449e:	d107      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0220 	mvn.w	r2, #32
 80044a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fc8a 	bl	8004dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e048      	b.n	8004568 <HAL_TIM_OC_ConfigChannel+0xb0>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b0c      	cmp	r3, #12
 80044e2:	d839      	bhi.n	8004558 <HAL_TIM_OC_ConfigChannel+0xa0>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004559 	.word	0x08004559
 80044f4:	08004559 	.word	0x08004559
 80044f8:	08004559 	.word	0x08004559
 80044fc:	0800452f 	.word	0x0800452f
 8004500:	08004559 	.word	0x08004559
 8004504:	08004559 	.word	0x08004559
 8004508:	08004559 	.word	0x08004559
 800450c:	0800453d 	.word	0x0800453d
 8004510:	08004559 	.word	0x08004559
 8004514:	08004559 	.word	0x08004559
 8004518:	08004559 	.word	0x08004559
 800451c:	0800454b 	.word	0x0800454b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f992 	bl	8004850 <TIM_OC1_SetConfig>
      break;
 800452c:	e017      	b.n	800455e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 f9f1 	bl	800491c <TIM_OC2_SetConfig>
      break;
 800453a:	e010      	b.n	800455e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fa56 	bl	80049f4 <TIM_OC3_SetConfig>
      break;
 8004548:	e009      	b.n	800455e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fab9 	bl	8004ac8 <TIM_OC4_SetConfig>
      break;
 8004556:	e002      	b.n	800455e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
      break;
 800455c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_TIM_ConfigClockSource+0x1c>
 8004588:	2302      	movs	r3, #2
 800458a:	e0b4      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x186>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c4:	d03e      	beq.n	8004644 <HAL_TIM_ConfigClockSource+0xd4>
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ca:	f200 8087 	bhi.w	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	f000 8086 	beq.w	80046e2 <HAL_TIM_ConfigClockSource+0x172>
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d87f      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b70      	cmp	r3, #112	; 0x70
 80045de:	d01a      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0xa6>
 80045e0:	2b70      	cmp	r3, #112	; 0x70
 80045e2:	d87b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b60      	cmp	r3, #96	; 0x60
 80045e6:	d050      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x11a>
 80045e8:	2b60      	cmp	r3, #96	; 0x60
 80045ea:	d877      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b50      	cmp	r3, #80	; 0x50
 80045ee:	d03c      	beq.n	800466a <HAL_TIM_ConfigClockSource+0xfa>
 80045f0:	2b50      	cmp	r3, #80	; 0x50
 80045f2:	d873      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d058      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x13a>
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d86f      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b30      	cmp	r3, #48	; 0x30
 80045fe:	d064      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b30      	cmp	r3, #48	; 0x30
 8004602:	d86b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b20      	cmp	r3, #32
 8004606:	d060      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b20      	cmp	r3, #32
 800460a:	d867      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05c      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004610:	2b10      	cmp	r3, #16
 8004612:	d05a      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004614:	e062      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6899      	ldr	r1, [r3, #8]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f000 fb19 	bl	8004c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	609a      	str	r2, [r3, #8]
      break;
 8004642:	e04f      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6899      	ldr	r1, [r3, #8]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f000 fb02 	bl	8004c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004666:	609a      	str	r2, [r3, #8]
      break;
 8004668:	e03c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	461a      	mov	r2, r3
 8004678:	f000 fa76 	bl	8004b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2150      	movs	r1, #80	; 0x50
 8004682:	4618      	mov	r0, r3
 8004684:	f000 facf 	bl	8004c26 <TIM_ITRx_SetConfig>
      break;
 8004688:	e02c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	461a      	mov	r2, r3
 8004698:	f000 fa95 	bl	8004bc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2160      	movs	r1, #96	; 0x60
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fabf 	bl	8004c26 <TIM_ITRx_SetConfig>
      break;
 80046a8:	e01c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f000 fa56 	bl	8004b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2140      	movs	r1, #64	; 0x40
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 faaf 	bl	8004c26 <TIM_ITRx_SetConfig>
      break;
 80046c8:	e00c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 faa6 	bl	8004c26 <TIM_ITRx_SetConfig>
      break;
 80046da:	e003      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      break;
 80046e0:	e000      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a34      	ldr	r2, [pc, #208]	; (8004834 <TIM_Base_SetConfig+0xe4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00f      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476e:	d00b      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a31      	ldr	r2, [pc, #196]	; (8004838 <TIM_Base_SetConfig+0xe8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a30      	ldr	r2, [pc, #192]	; (800483c <TIM_Base_SetConfig+0xec>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a2f      	ldr	r2, [pc, #188]	; (8004840 <TIM_Base_SetConfig+0xf0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a25      	ldr	r2, [pc, #148]	; (8004834 <TIM_Base_SetConfig+0xe4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01b      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d017      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <TIM_Base_SetConfig+0xe8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a21      	ldr	r2, [pc, #132]	; (800483c <TIM_Base_SetConfig+0xec>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00f      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <TIM_Base_SetConfig+0xf0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00b      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <TIM_Base_SetConfig+0xf4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <TIM_Base_SetConfig+0xf8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1d      	ldr	r2, [pc, #116]	; (800484c <TIM_Base_SetConfig+0xfc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <TIM_Base_SetConfig+0xe4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d103      	bne.n	8004820 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	615a      	str	r2, [r3, #20]
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40010000 	.word	0x40010000
 8004838:	40000400 	.word	0x40000400
 800483c:	40000800 	.word	0x40000800
 8004840:	40000c00 	.word	0x40000c00
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 0302 	bic.w	r3, r3, #2
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <TIM_OC1_SetConfig+0xc8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10c      	bne.n	80048c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0308 	bic.w	r3, r3, #8
 80048b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a13      	ldr	r2, [pc, #76]	; (8004918 <TIM_OC1_SetConfig+0xc8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d111      	bne.n	80048f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40010000 	.word	0x40010000

0800491c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 0210 	bic.w	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0320 	bic.w	r3, r3, #32
 8004966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <TIM_OC2_SetConfig+0xd4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d10d      	bne.n	8004998 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <TIM_OC2_SetConfig+0xd4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d113      	bne.n	80049c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000

080049f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <TIM_OC3_SetConfig+0xd0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10d      	bne.n	8004a6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <TIM_OC3_SetConfig+0xd0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d113      	bne.n	8004a9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	621a      	str	r2, [r3, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40010000 	.word	0x40010000

08004ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	031b      	lsls	r3, r3, #12
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <TIM_OC4_SetConfig+0x9c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d109      	bne.n	8004b3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000

08004b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f023 030a 	bic.w	r3, r3, #10
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b087      	sub	sp, #28
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0210 	bic.w	r2, r3, #16
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	031b      	lsls	r3, r3, #12
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f043 0307 	orr.w	r3, r3, #7
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	609a      	str	r2, [r3, #8]
}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	021a      	lsls	r2, r3, #8
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	609a      	str	r2, [r3, #8]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	2201      	movs	r2, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a1a      	ldr	r2, [r3, #32]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e050      	b.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d018      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d013      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00e      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d10c      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40014000 	.word	0x40014000

08004dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e03f      	b.n	8004e7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fd fa84 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 ff97 	bl	8005d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b08a      	sub	sp, #40	; 0x28
 8004e8a:	af02      	add	r7, sp, #8
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d17c      	bne.n	8004fa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_UART_Transmit+0x2c>
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e075      	b.n	8004fa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Transmit+0x3e>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e06e      	b.n	8004fa2 <HAL_UART_Transmit+0x11c>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2221      	movs	r2, #33	; 0x21
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eda:	f7fd fc4b 	bl	8002774 <HAL_GetTick>
 8004ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef4:	d108      	bne.n	8004f08 <HAL_UART_Transmit+0x82>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e003      	b.n	8004f10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f18:	e02a      	b.n	8004f70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fc53 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e036      	b.n	8004fa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	e007      	b.n	8004f62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1cf      	bne.n	8004f1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2200      	movs	r2, #0
 8004f82:	2140      	movs	r1, #64	; 0x40
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fc23 	bl	80057d0 <UART_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e006      	b.n	8004fa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e000      	b.n	8004fa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08c      	sub	sp, #48	; 0x30
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d152      	bne.n	800506a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e04b      	b.n	800506c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e044      	b.n	800506c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fc58 	bl	80058ac <UART_Start_Receive_DMA>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005006:	2b00      	cmp	r3, #0
 8005008:	d12c      	bne.n	8005064 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	2b01      	cmp	r3, #1
 8005010:	d125      	bne.n	800505e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	617b      	str	r3, [r7, #20]
   return(result);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f043 0310 	orr.w	r3, r3, #16
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005048:	627a      	str	r2, [r7, #36]	; 0x24
 800504a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6a39      	ldr	r1, [r7, #32]
 800504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	61fb      	str	r3, [r7, #28]
   return(result);
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e5      	bne.n	8005028 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800505c:	e002      	b.n	8005064 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005068:	e000      	b.n	800506c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3730      	adds	r7, #48	; 0x30
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b0ba      	sub	sp, #232	; 0xe8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800509a:	2300      	movs	r3, #0
 800509c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_UART_IRQHandler+0x66>
 80050c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fd8b 	bl	8005bee <UART_Receive_IT>
      return;
 80050d8:	e256      	b.n	8005588 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80de 	beq.w	80052a0 <HAL_UART_IRQHandler+0x22c>
 80050e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80d1 	beq.w	80052a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_UART_IRQHandler+0xae>
 800510a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0201 	orr.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_UART_IRQHandler+0xd2>
 800512e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f043 0202 	orr.w	r2, r3, #2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_UART_IRQHandler+0xf6>
 8005152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f043 0204 	orr.w	r2, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d011      	beq.n	800519a <HAL_UART_IRQHandler+0x126>
 8005176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0208 	orr.w	r2, r3, #8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 81ed 	beq.w	800557e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_UART_IRQHandler+0x14e>
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fd16 	bl	8005bee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d103      	bne.n	80051ee <HAL_UART_IRQHandler+0x17a>
 80051e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d04f      	beq.n	800528e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fc1e 	bl	8005a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d141      	bne.n	8005286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800521c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800522e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800523a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1d9      	bne.n	8005202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d013      	beq.n	800527e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	4a7d      	ldr	r2, [pc, #500]	; (8005450 <HAL_UART_IRQHandler+0x3dc>)
 800525c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd fd1a 	bl	8002c9c <HAL_DMA_Abort_IT>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d016      	beq.n	800529c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005278:	4610      	mov	r0, r2
 800527a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	e00e      	b.n	800529c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f9a4 	bl	80055cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005284:	e00a      	b.n	800529c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f9a0 	bl	80055cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528c:	e006      	b.n	800529c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f99c 	bl	80055cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800529a:	e170      	b.n	800557e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529c:	bf00      	nop
    return;
 800529e:	e16e      	b.n	800557e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	f040 814a 	bne.w	800553e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ae:	f003 0310 	and.w	r3, r3, #16
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8143 	beq.w	800553e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 813c 	beq.w	800553e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	f040 80b4 	bne.w	8005454 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8140 	beq.w	8005582 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800530a:	429a      	cmp	r2, r3
 800530c:	f080 8139 	bcs.w	8005582 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005316:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	f000 8088 	beq.w	8005436 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800533c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800535e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800536a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1d9      	bne.n	8005326 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3314      	adds	r3, #20
 8005378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3314      	adds	r3, #20
 8005392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800539a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800539e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e1      	bne.n	8005372 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005406:	f023 0310 	bic.w	r3, r3, #16
 800540a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005418:	65ba      	str	r2, [r7, #88]	; 0x58
 800541a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800541e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e3      	bne.n	80053f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	4618      	mov	r0, r3
 8005432:	f7fd fbc3 	bl	8002bbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800543e:	b29b      	uxth	r3, r3
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	b29b      	uxth	r3, r3
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fc fdf8 	bl	800203c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800544c:	e099      	b.n	8005582 <HAL_UART_IRQHandler+0x50e>
 800544e:	bf00      	nop
 8005450:	08005af7 	.word	0x08005af7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800545c:	b29b      	uxth	r3, r3
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 808b 	beq.w	8005586 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8086 	beq.w	8005586 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	330c      	adds	r3, #12
 8005480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800549e:	647a      	str	r2, [r7, #68]	; 0x44
 80054a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e3      	bne.n	800547a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	623b      	str	r3, [r7, #32]
   return(result);
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3314      	adds	r3, #20
 80054d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054d6:	633a      	str	r2, [r7, #48]	; 0x30
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e3      	bne.n	80054b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	60fb      	str	r3, [r7, #12]
   return(result);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0310 	bic.w	r3, r3, #16
 800550e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800551c:	61fa      	str	r2, [r7, #28]
 800551e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	69b9      	ldr	r1, [r7, #24]
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	617b      	str	r3, [r7, #20]
   return(result);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e3      	bne.n	80054f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fc fd80 	bl	800203c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800553c:	e023      	b.n	8005586 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_UART_IRQHandler+0x4ea>
 800554a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fae1 	bl	8005b1e <UART_Transmit_IT>
    return;
 800555c:	e014      	b.n	8005588 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <HAL_UART_IRQHandler+0x514>
 800556a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fb21 	bl	8005bbe <UART_EndTransmit_IT>
    return;
 800557c:	e004      	b.n	8005588 <HAL_UART_IRQHandler+0x514>
    return;
 800557e:	bf00      	nop
 8005580:	e002      	b.n	8005588 <HAL_UART_IRQHandler+0x514>
      return;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <HAL_UART_IRQHandler+0x514>
      return;
 8005586:	bf00      	nop
  }
}
 8005588:	37e8      	adds	r7, #232	; 0xe8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop

08005590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b09c      	sub	sp, #112	; 0x70
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d172      	bne.n	80056e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80055fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fe:	2200      	movs	r2, #0
 8005600:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	66bb      	str	r3, [r7, #104]	; 0x68
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005622:	65ba      	str	r2, [r7, #88]	; 0x58
 8005624:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e5      	bne.n	8005602 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3314      	adds	r3, #20
 800563c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	667b      	str	r3, [r7, #100]	; 0x64
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3314      	adds	r3, #20
 8005654:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005656:	647a      	str	r2, [r7, #68]	; 0x44
 8005658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800565c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e5      	bne.n	8005636 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	623b      	str	r3, [r7, #32]
   return(result);
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005680:	663b      	str	r3, [r7, #96]	; 0x60
 8005682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800568a:	633a      	str	r2, [r7, #48]	; 0x30
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800569e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d119      	bne.n	80056e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f023 0310 	bic.w	r3, r3, #16
 80056c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056ce:	61fa      	str	r2, [r7, #28]
 80056d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	69b9      	ldr	r1, [r7, #24]
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	617b      	str	r3, [r7, #20]
   return(result);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d106      	bne.n	80056f8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ee:	4619      	mov	r1, r3
 80056f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80056f2:	f7fc fca3 	bl	800203c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056f6:	e002      	b.n	80056fe <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80056f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80056fa:	f7ff ff53 	bl	80055a4 <HAL_UART_RxCpltCallback>
}
 80056fe:	bf00      	nop
 8005700:	3770      	adds	r7, #112	; 0x70
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	2b01      	cmp	r3, #1
 800571a:	d108      	bne.n	800572e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005720:	085b      	lsrs	r3, r3, #1
 8005722:	b29b      	uxth	r3, r3
 8005724:	4619      	mov	r1, r3
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7fc fc88 	bl	800203c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800572c:	e002      	b.n	8005734 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff ff42 	bl	80055b8 <HAL_UART_RxHalfCpltCallback>
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	2b80      	cmp	r3, #128	; 0x80
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b21      	cmp	r3, #33	; 0x21
 800576e:	d108      	bne.n	8005782 <UART_DMAError+0x46>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800577c:	68b8      	ldr	r0, [r7, #8]
 800577e:	f000 f92f 	bl	80059e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b22      	cmp	r3, #34	; 0x22
 80057a2:	d108      	bne.n	80057b6 <UART_DMAError+0x7a>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2200      	movs	r2, #0
 80057ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f000 f93d 	bl	8005a30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0210 	orr.w	r2, r3, #16
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c2:	68b8      	ldr	r0, [r7, #8]
 80057c4:	f7ff ff02 	bl	80055cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b090      	sub	sp, #64	; 0x40
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e0:	e050      	b.n	8005884 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e8:	d04c      	beq.n	8005884 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <UART_WaitOnFlagUntilTimeout+0x30>
 80057f0:	f7fc ffc0 	bl	8002774 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d241      	bcs.n	8005884 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005820:	637a      	str	r2, [r7, #52]	; 0x34
 8005822:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e5      	bne.n	8005800 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	613b      	str	r3, [r7, #16]
   return(result);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005854:	623a      	str	r2, [r7, #32]
 8005856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	69f9      	ldr	r1, [r7, #28]
 800585a:	6a3a      	ldr	r2, [r7, #32]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	61bb      	str	r3, [r7, #24]
   return(result);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e00f      	b.n	80058a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	429a      	cmp	r2, r3
 8005892:	bf0c      	ite	eq
 8005894:	2301      	moveq	r3, #1
 8005896:	2300      	movne	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d09f      	beq.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3740      	adds	r7, #64	; 0x40
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b098      	sub	sp, #96	; 0x60
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2222      	movs	r2, #34	; 0x22
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	4a3e      	ldr	r2, [pc, #248]	; (80059d4 <UART_Start_Receive_DMA+0x128>)
 80058da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	4a3d      	ldr	r2, [pc, #244]	; (80059d8 <UART_Start_Receive_DMA+0x12c>)
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	4a3c      	ldr	r2, [pc, #240]	; (80059dc <UART_Start_Receive_DMA+0x130>)
 80058ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	2200      	movs	r2, #0
 80058f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	f7fd f8fe 	bl	8002b0c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800593e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005944:	65bb      	str	r3, [r7, #88]	; 0x58
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800594e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005950:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800595c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e5      	bne.n	800592e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	657b      	str	r3, [r7, #84]	; 0x54
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3314      	adds	r3, #20
 8005980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005982:	63ba      	str	r2, [r7, #56]	; 0x38
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e5      	bne.n	8005962 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3314      	adds	r3, #20
 800599c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	617b      	str	r3, [r7, #20]
   return(result);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ac:	653b      	str	r3, [r7, #80]	; 0x50
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3314      	adds	r3, #20
 80059b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059b6:	627a      	str	r2, [r7, #36]	; 0x24
 80059b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6a39      	ldr	r1, [r7, #32]
 80059bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e5      	bne.n	8005996 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3760      	adds	r7, #96	; 0x60
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	080055e1 	.word	0x080055e1
 80059d8:	08005707 	.word	0x08005707
 80059dc:	0800573d 	.word	0x0800573d

080059e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b089      	sub	sp, #36	; 0x24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	61ba      	str	r2, [r7, #24]
 8005a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6979      	ldr	r1, [r7, #20]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	613b      	str	r3, [r7, #16]
   return(result);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005a24:	bf00      	nop
 8005a26:	3724      	adds	r7, #36	; 0x24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b095      	sub	sp, #84	; 0x54
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a58:	643a      	str	r2, [r7, #64]	; 0x40
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3314      	adds	r3, #20
 8005a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d119      	bne.n	8005adc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f023 0310 	bic.w	r3, r3, #16
 8005abe:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac8:	61ba      	str	r2, [r7, #24]
 8005aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6979      	ldr	r1, [r7, #20]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005aea:	bf00      	nop
 8005aec:	3754      	adds	r7, #84	; 0x54
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff fd5b 	bl	80055cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b21      	cmp	r3, #33	; 0x21
 8005b30:	d13e      	bne.n	8005bb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3a:	d114      	bne.n	8005b66 <UART_Transmit_IT+0x48>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d110      	bne.n	8005b66 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	1c9a      	adds	r2, r3, #2
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	621a      	str	r2, [r3, #32]
 8005b64:	e008      	b.n	8005b78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	1c59      	adds	r1, r3, #1
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6211      	str	r1, [r2, #32]
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4619      	mov	r1, r3
 8005b86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10f      	bne.n	8005bac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005baa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e000      	b.n	8005bb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bb0:	2302      	movs	r3, #2
  }
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fcd6 	bl	8005590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b08c      	sub	sp, #48	; 0x30
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b22      	cmp	r3, #34	; 0x22
 8005c00:	f040 80ab 	bne.w	8005d5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0c:	d117      	bne.n	8005c3e <UART_Receive_IT+0x50>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d113      	bne.n	8005c3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c3c:	e026      	b.n	8005c8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c50:	d007      	beq.n	8005c62 <UART_Receive_IT+0x74>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <UART_Receive_IT+0x82>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	e008      	b.n	8005c82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d15a      	bne.n	8005d56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0220 	bic.w	r2, r2, #32
 8005cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695a      	ldr	r2, [r3, #20]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d135      	bne.n	8005d4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f023 0310 	bic.w	r3, r3, #16
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d06:	623a      	str	r2, [r7, #32]
 8005d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	69f9      	ldr	r1, [r7, #28]
 8005d0c:	6a3a      	ldr	r2, [r7, #32]
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0310 	and.w	r3, r3, #16
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d10a      	bne.n	8005d3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fc f979 	bl	800203c <HAL_UARTEx_RxEventCallback>
 8005d4a:	e002      	b.n	8005d52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fc29 	bl	80055a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e002      	b.n	8005d5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e000      	b.n	8005d5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d5a:	2302      	movs	r3, #2
  }
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3730      	adds	r7, #48	; 0x30
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d68:	b0c0      	sub	sp, #256	; 0x100
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d80:	68d9      	ldr	r1, [r3, #12]
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	ea40 0301 	orr.w	r3, r0, r1
 8005d8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dbc:	f021 010c 	bic.w	r1, r1, #12
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dde:	6999      	ldr	r1, [r3, #24]
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	ea40 0301 	orr.w	r3, r0, r1
 8005dea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b8f      	ldr	r3, [pc, #572]	; (8006030 <UART_SetConfig+0x2cc>)
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d005      	beq.n	8005e04 <UART_SetConfig+0xa0>
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4b8d      	ldr	r3, [pc, #564]	; (8006034 <UART_SetConfig+0x2d0>)
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d104      	bne.n	8005e0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e04:	f7fd fff8 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 8005e08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e0c:	e003      	b.n	8005e16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e0e:	f7fd ffdf 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8005e12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e20:	f040 810c 	bne.w	800603c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e36:	4622      	mov	r2, r4
 8005e38:	462b      	mov	r3, r5
 8005e3a:	1891      	adds	r1, r2, r2
 8005e3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e3e:	415b      	adcs	r3, r3
 8005e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e46:	4621      	mov	r1, r4
 8005e48:	eb12 0801 	adds.w	r8, r2, r1
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	eb43 0901 	adc.w	r9, r3, r1
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e66:	4690      	mov	r8, r2
 8005e68:	4699      	mov	r9, r3
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	eb18 0303 	adds.w	r3, r8, r3
 8005e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e74:	462b      	mov	r3, r5
 8005e76:	eb49 0303 	adc.w	r3, r9, r3
 8005e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e92:	460b      	mov	r3, r1
 8005e94:	18db      	adds	r3, r3, r3
 8005e96:	653b      	str	r3, [r7, #80]	; 0x50
 8005e98:	4613      	mov	r3, r2
 8005e9a:	eb42 0303 	adc.w	r3, r2, r3
 8005e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ea8:	f7fa fef6 	bl	8000c98 <__aeabi_uldivmod>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4b61      	ldr	r3, [pc, #388]	; (8006038 <UART_SetConfig+0x2d4>)
 8005eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	011c      	lsls	r4, r3, #4
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ecc:	4642      	mov	r2, r8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	1891      	adds	r1, r2, r2
 8005ed2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ed4:	415b      	adcs	r3, r3
 8005ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005edc:	4641      	mov	r1, r8
 8005ede:	eb12 0a01 	adds.w	sl, r2, r1
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	eb43 0b01 	adc.w	fp, r3, r1
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ef4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005efc:	4692      	mov	sl, r2
 8005efe:	469b      	mov	fp, r3
 8005f00:	4643      	mov	r3, r8
 8005f02:	eb1a 0303 	adds.w	r3, sl, r3
 8005f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	18db      	adds	r3, r3, r3
 8005f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f2e:	4613      	mov	r3, r2
 8005f30:	eb42 0303 	adc.w	r3, r2, r3
 8005f34:	647b      	str	r3, [r7, #68]	; 0x44
 8005f36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f3e:	f7fa feab 	bl	8000c98 <__aeabi_uldivmod>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	4b3b      	ldr	r3, [pc, #236]	; (8006038 <UART_SetConfig+0x2d4>)
 8005f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	2264      	movs	r2, #100	; 0x64
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	1acb      	subs	r3, r1, r3
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f5e:	4b36      	ldr	r3, [pc, #216]	; (8006038 <UART_SetConfig+0x2d4>)
 8005f60:	fba3 2302 	umull	r2, r3, r3, r2
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f6c:	441c      	add	r4, r3
 8005f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f90:	4641      	mov	r1, r8
 8005f92:	1851      	adds	r1, r2, r1
 8005f94:	6339      	str	r1, [r7, #48]	; 0x30
 8005f96:	4649      	mov	r1, r9
 8005f98:	414b      	adcs	r3, r1
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fa8:	4659      	mov	r1, fp
 8005faa:	00cb      	lsls	r3, r1, #3
 8005fac:	4651      	mov	r1, sl
 8005fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fb2:	4651      	mov	r1, sl
 8005fb4:	00ca      	lsls	r2, r1, #3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	eb42 0303 	adc.w	r3, r2, r3
 8005fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	18db      	adds	r3, r3, r3
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fea:	4613      	mov	r3, r2
 8005fec:	eb42 0303 	adc.w	r3, r2, r3
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ffa:	f7fa fe4d 	bl	8000c98 <__aeabi_uldivmod>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <UART_SetConfig+0x2d4>)
 8006004:	fba3 1302 	umull	r1, r3, r3, r2
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	2164      	movs	r1, #100	; 0x64
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	3332      	adds	r3, #50	; 0x32
 8006016:	4a08      	ldr	r2, [pc, #32]	; (8006038 <UART_SetConfig+0x2d4>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f003 0207 	and.w	r2, r3, #7
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4422      	add	r2, r4
 800602a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800602c:	e105      	b.n	800623a <UART_SetConfig+0x4d6>
 800602e:	bf00      	nop
 8006030:	40011000 	.word	0x40011000
 8006034:	40011400 	.word	0x40011400
 8006038:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800603c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006040:	2200      	movs	r2, #0
 8006042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006046:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800604a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800604e:	4642      	mov	r2, r8
 8006050:	464b      	mov	r3, r9
 8006052:	1891      	adds	r1, r2, r2
 8006054:	6239      	str	r1, [r7, #32]
 8006056:	415b      	adcs	r3, r3
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
 800605a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800605e:	4641      	mov	r1, r8
 8006060:	1854      	adds	r4, r2, r1
 8006062:	4649      	mov	r1, r9
 8006064:	eb43 0501 	adc.w	r5, r3, r1
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	00eb      	lsls	r3, r5, #3
 8006072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006076:	00e2      	lsls	r2, r4, #3
 8006078:	4614      	mov	r4, r2
 800607a:	461d      	mov	r5, r3
 800607c:	4643      	mov	r3, r8
 800607e:	18e3      	adds	r3, r4, r3
 8006080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006084:	464b      	mov	r3, r9
 8006086:	eb45 0303 	adc.w	r3, r5, r3
 800608a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800609a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060aa:	4629      	mov	r1, r5
 80060ac:	008b      	lsls	r3, r1, #2
 80060ae:	4621      	mov	r1, r4
 80060b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b4:	4621      	mov	r1, r4
 80060b6:	008a      	lsls	r2, r1, #2
 80060b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060bc:	f7fa fdec 	bl	8000c98 <__aeabi_uldivmod>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4b60      	ldr	r3, [pc, #384]	; (8006248 <UART_SetConfig+0x4e4>)
 80060c6:	fba3 2302 	umull	r2, r3, r3, r2
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	011c      	lsls	r4, r3, #4
 80060ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060e0:	4642      	mov	r2, r8
 80060e2:	464b      	mov	r3, r9
 80060e4:	1891      	adds	r1, r2, r2
 80060e6:	61b9      	str	r1, [r7, #24]
 80060e8:	415b      	adcs	r3, r3
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060f0:	4641      	mov	r1, r8
 80060f2:	1851      	adds	r1, r2, r1
 80060f4:	6139      	str	r1, [r7, #16]
 80060f6:	4649      	mov	r1, r9
 80060f8:	414b      	adcs	r3, r1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006108:	4659      	mov	r1, fp
 800610a:	00cb      	lsls	r3, r1, #3
 800610c:	4651      	mov	r1, sl
 800610e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006112:	4651      	mov	r1, sl
 8006114:	00ca      	lsls	r2, r1, #3
 8006116:	4610      	mov	r0, r2
 8006118:	4619      	mov	r1, r3
 800611a:	4603      	mov	r3, r0
 800611c:	4642      	mov	r2, r8
 800611e:	189b      	adds	r3, r3, r2
 8006120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006124:	464b      	mov	r3, r9
 8006126:	460a      	mov	r2, r1
 8006128:	eb42 0303 	adc.w	r3, r2, r3
 800612c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	67bb      	str	r3, [r7, #120]	; 0x78
 800613a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006148:	4649      	mov	r1, r9
 800614a:	008b      	lsls	r3, r1, #2
 800614c:	4641      	mov	r1, r8
 800614e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006152:	4641      	mov	r1, r8
 8006154:	008a      	lsls	r2, r1, #2
 8006156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800615a:	f7fa fd9d 	bl	8000c98 <__aeabi_uldivmod>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4b39      	ldr	r3, [pc, #228]	; (8006248 <UART_SetConfig+0x4e4>)
 8006164:	fba3 1302 	umull	r1, r3, r3, r2
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	2164      	movs	r1, #100	; 0x64
 800616c:	fb01 f303 	mul.w	r3, r1, r3
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	3332      	adds	r3, #50	; 0x32
 8006176:	4a34      	ldr	r2, [pc, #208]	; (8006248 <UART_SetConfig+0x4e4>)
 8006178:	fba2 2303 	umull	r2, r3, r2, r3
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006182:	441c      	add	r4, r3
 8006184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006188:	2200      	movs	r2, #0
 800618a:	673b      	str	r3, [r7, #112]	; 0x70
 800618c:	677a      	str	r2, [r7, #116]	; 0x74
 800618e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006192:	4642      	mov	r2, r8
 8006194:	464b      	mov	r3, r9
 8006196:	1891      	adds	r1, r2, r2
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	415b      	adcs	r3, r3
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061a2:	4641      	mov	r1, r8
 80061a4:	1851      	adds	r1, r2, r1
 80061a6:	6039      	str	r1, [r7, #0]
 80061a8:	4649      	mov	r1, r9
 80061aa:	414b      	adcs	r3, r1
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061ba:	4659      	mov	r1, fp
 80061bc:	00cb      	lsls	r3, r1, #3
 80061be:	4651      	mov	r1, sl
 80061c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c4:	4651      	mov	r1, sl
 80061c6:	00ca      	lsls	r2, r1, #3
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	4603      	mov	r3, r0
 80061ce:	4642      	mov	r2, r8
 80061d0:	189b      	adds	r3, r3, r2
 80061d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80061d4:	464b      	mov	r3, r9
 80061d6:	460a      	mov	r2, r1
 80061d8:	eb42 0303 	adc.w	r3, r2, r3
 80061dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	663b      	str	r3, [r7, #96]	; 0x60
 80061e8:	667a      	str	r2, [r7, #100]	; 0x64
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061f6:	4649      	mov	r1, r9
 80061f8:	008b      	lsls	r3, r1, #2
 80061fa:	4641      	mov	r1, r8
 80061fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006200:	4641      	mov	r1, r8
 8006202:	008a      	lsls	r2, r1, #2
 8006204:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006208:	f7fa fd46 	bl	8000c98 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4b0d      	ldr	r3, [pc, #52]	; (8006248 <UART_SetConfig+0x4e4>)
 8006212:	fba3 1302 	umull	r1, r3, r3, r2
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	2164      	movs	r1, #100	; 0x64
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	3332      	adds	r3, #50	; 0x32
 8006224:	4a08      	ldr	r2, [pc, #32]	; (8006248 <UART_SetConfig+0x4e4>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4422      	add	r2, r4
 8006238:	609a      	str	r2, [r3, #8]
}
 800623a:	bf00      	nop
 800623c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006240:	46bd      	mov	sp, r7
 8006242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006246:	bf00      	nop
 8006248:	51eb851f 	.word	0x51eb851f

0800624c <__errno>:
 800624c:	4b01      	ldr	r3, [pc, #4]	; (8006254 <__errno+0x8>)
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000000c 	.word	0x2000000c

08006258 <__libc_init_array>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4d0d      	ldr	r5, [pc, #52]	; (8006290 <__libc_init_array+0x38>)
 800625c:	4c0d      	ldr	r4, [pc, #52]	; (8006294 <__libc_init_array+0x3c>)
 800625e:	1b64      	subs	r4, r4, r5
 8006260:	10a4      	asrs	r4, r4, #2
 8006262:	2600      	movs	r6, #0
 8006264:	42a6      	cmp	r6, r4
 8006266:	d109      	bne.n	800627c <__libc_init_array+0x24>
 8006268:	4d0b      	ldr	r5, [pc, #44]	; (8006298 <__libc_init_array+0x40>)
 800626a:	4c0c      	ldr	r4, [pc, #48]	; (800629c <__libc_init_array+0x44>)
 800626c:	f003 fb98 	bl	80099a0 <_init>
 8006270:	1b64      	subs	r4, r4, r5
 8006272:	10a4      	asrs	r4, r4, #2
 8006274:	2600      	movs	r6, #0
 8006276:	42a6      	cmp	r6, r4
 8006278:	d105      	bne.n	8006286 <__libc_init_array+0x2e>
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006280:	4798      	blx	r3
 8006282:	3601      	adds	r6, #1
 8006284:	e7ee      	b.n	8006264 <__libc_init_array+0xc>
 8006286:	f855 3b04 	ldr.w	r3, [r5], #4
 800628a:	4798      	blx	r3
 800628c:	3601      	adds	r6, #1
 800628e:	e7f2      	b.n	8006276 <__libc_init_array+0x1e>
 8006290:	08009ee8 	.word	0x08009ee8
 8006294:	08009ee8 	.word	0x08009ee8
 8006298:	08009ee8 	.word	0x08009ee8
 800629c:	08009eec 	.word	0x08009eec

080062a0 <memcpy>:
 80062a0:	440a      	add	r2, r1
 80062a2:	4291      	cmp	r1, r2
 80062a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80062a8:	d100      	bne.n	80062ac <memcpy+0xc>
 80062aa:	4770      	bx	lr
 80062ac:	b510      	push	{r4, lr}
 80062ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062b6:	4291      	cmp	r1, r2
 80062b8:	d1f9      	bne.n	80062ae <memcpy+0xe>
 80062ba:	bd10      	pop	{r4, pc}

080062bc <memset>:
 80062bc:	4402      	add	r2, r0
 80062be:	4603      	mov	r3, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>

080062cc <__cvt>:
 80062cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	ec55 4b10 	vmov	r4, r5, d0
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	460e      	mov	r6, r1
 80062d8:	4619      	mov	r1, r3
 80062da:	462b      	mov	r3, r5
 80062dc:	bfbb      	ittet	lt
 80062de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062e2:	461d      	movlt	r5, r3
 80062e4:	2300      	movge	r3, #0
 80062e6:	232d      	movlt	r3, #45	; 0x2d
 80062e8:	700b      	strb	r3, [r1, #0]
 80062ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062f0:	4691      	mov	r9, r2
 80062f2:	f023 0820 	bic.w	r8, r3, #32
 80062f6:	bfbc      	itt	lt
 80062f8:	4622      	movlt	r2, r4
 80062fa:	4614      	movlt	r4, r2
 80062fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006300:	d005      	beq.n	800630e <__cvt+0x42>
 8006302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006306:	d100      	bne.n	800630a <__cvt+0x3e>
 8006308:	3601      	adds	r6, #1
 800630a:	2102      	movs	r1, #2
 800630c:	e000      	b.n	8006310 <__cvt+0x44>
 800630e:	2103      	movs	r1, #3
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	ab02      	add	r3, sp, #8
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	ec45 4b10 	vmov	d0, r4, r5
 800631c:	4653      	mov	r3, sl
 800631e:	4632      	mov	r2, r6
 8006320:	f000 feae 	bl	8007080 <_dtoa_r>
 8006324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006328:	4607      	mov	r7, r0
 800632a:	d102      	bne.n	8006332 <__cvt+0x66>
 800632c:	f019 0f01 	tst.w	r9, #1
 8006330:	d022      	beq.n	8006378 <__cvt+0xac>
 8006332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006336:	eb07 0906 	add.w	r9, r7, r6
 800633a:	d110      	bne.n	800635e <__cvt+0x92>
 800633c:	783b      	ldrb	r3, [r7, #0]
 800633e:	2b30      	cmp	r3, #48	; 0x30
 8006340:	d10a      	bne.n	8006358 <__cvt+0x8c>
 8006342:	2200      	movs	r2, #0
 8006344:	2300      	movs	r3, #0
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800634e:	b918      	cbnz	r0, 8006358 <__cvt+0x8c>
 8006350:	f1c6 0601 	rsb	r6, r6, #1
 8006354:	f8ca 6000 	str.w	r6, [sl]
 8006358:	f8da 3000 	ldr.w	r3, [sl]
 800635c:	4499      	add	r9, r3
 800635e:	2200      	movs	r2, #0
 8006360:	2300      	movs	r3, #0
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7fa fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800636a:	b108      	cbz	r0, 8006370 <__cvt+0xa4>
 800636c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006370:	2230      	movs	r2, #48	; 0x30
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	454b      	cmp	r3, r9
 8006376:	d307      	bcc.n	8006388 <__cvt+0xbc>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800637c:	1bdb      	subs	r3, r3, r7
 800637e:	4638      	mov	r0, r7
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	b004      	add	sp, #16
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	9103      	str	r1, [sp, #12]
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	e7f0      	b.n	8006372 <__cvt+0xa6>

08006390 <__exponent>:
 8006390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006392:	4603      	mov	r3, r0
 8006394:	2900      	cmp	r1, #0
 8006396:	bfb8      	it	lt
 8006398:	4249      	neglt	r1, r1
 800639a:	f803 2b02 	strb.w	r2, [r3], #2
 800639e:	bfb4      	ite	lt
 80063a0:	222d      	movlt	r2, #45	; 0x2d
 80063a2:	222b      	movge	r2, #43	; 0x2b
 80063a4:	2909      	cmp	r1, #9
 80063a6:	7042      	strb	r2, [r0, #1]
 80063a8:	dd2a      	ble.n	8006400 <__exponent+0x70>
 80063aa:	f10d 0407 	add.w	r4, sp, #7
 80063ae:	46a4      	mov	ip, r4
 80063b0:	270a      	movs	r7, #10
 80063b2:	46a6      	mov	lr, r4
 80063b4:	460a      	mov	r2, r1
 80063b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80063ba:	fb07 1516 	mls	r5, r7, r6, r1
 80063be:	3530      	adds	r5, #48	; 0x30
 80063c0:	2a63      	cmp	r2, #99	; 0x63
 80063c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80063c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063ca:	4631      	mov	r1, r6
 80063cc:	dcf1      	bgt.n	80063b2 <__exponent+0x22>
 80063ce:	3130      	adds	r1, #48	; 0x30
 80063d0:	f1ae 0502 	sub.w	r5, lr, #2
 80063d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063d8:	1c44      	adds	r4, r0, #1
 80063da:	4629      	mov	r1, r5
 80063dc:	4561      	cmp	r1, ip
 80063de:	d30a      	bcc.n	80063f6 <__exponent+0x66>
 80063e0:	f10d 0209 	add.w	r2, sp, #9
 80063e4:	eba2 020e 	sub.w	r2, r2, lr
 80063e8:	4565      	cmp	r5, ip
 80063ea:	bf88      	it	hi
 80063ec:	2200      	movhi	r2, #0
 80063ee:	4413      	add	r3, r2
 80063f0:	1a18      	subs	r0, r3, r0
 80063f2:	b003      	add	sp, #12
 80063f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063fe:	e7ed      	b.n	80063dc <__exponent+0x4c>
 8006400:	2330      	movs	r3, #48	; 0x30
 8006402:	3130      	adds	r1, #48	; 0x30
 8006404:	7083      	strb	r3, [r0, #2]
 8006406:	70c1      	strb	r1, [r0, #3]
 8006408:	1d03      	adds	r3, r0, #4
 800640a:	e7f1      	b.n	80063f0 <__exponent+0x60>

0800640c <_printf_float>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	ed2d 8b02 	vpush	{d8}
 8006414:	b08d      	sub	sp, #52	; 0x34
 8006416:	460c      	mov	r4, r1
 8006418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800641c:	4616      	mov	r6, r2
 800641e:	461f      	mov	r7, r3
 8006420:	4605      	mov	r5, r0
 8006422:	f001 fdd3 	bl	8007fcc <_localeconv_r>
 8006426:	f8d0 a000 	ldr.w	sl, [r0]
 800642a:	4650      	mov	r0, sl
 800642c:	f7f9 fed8 	bl	80001e0 <strlen>
 8006430:	2300      	movs	r3, #0
 8006432:	930a      	str	r3, [sp, #40]	; 0x28
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	9305      	str	r3, [sp, #20]
 8006438:	f8d8 3000 	ldr.w	r3, [r8]
 800643c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006440:	3307      	adds	r3, #7
 8006442:	f023 0307 	bic.w	r3, r3, #7
 8006446:	f103 0208 	add.w	r2, r3, #8
 800644a:	f8c8 2000 	str.w	r2, [r8]
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800645a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800645e:	9307      	str	r3, [sp, #28]
 8006460:	f8cd 8018 	str.w	r8, [sp, #24]
 8006464:	ee08 0a10 	vmov	s16, r0
 8006468:	4b9f      	ldr	r3, [pc, #636]	; (80066e8 <_printf_float+0x2dc>)
 800646a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800646e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006472:	f7fa fb63 	bl	8000b3c <__aeabi_dcmpun>
 8006476:	bb88      	cbnz	r0, 80064dc <_printf_float+0xd0>
 8006478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647c:	4b9a      	ldr	r3, [pc, #616]	; (80066e8 <_printf_float+0x2dc>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006482:	f7fa fb3d 	bl	8000b00 <__aeabi_dcmple>
 8006486:	bb48      	cbnz	r0, 80064dc <_printf_float+0xd0>
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa fb2c 	bl	8000aec <__aeabi_dcmplt>
 8006494:	b110      	cbz	r0, 800649c <_printf_float+0x90>
 8006496:	232d      	movs	r3, #45	; 0x2d
 8006498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800649c:	4b93      	ldr	r3, [pc, #588]	; (80066ec <_printf_float+0x2e0>)
 800649e:	4894      	ldr	r0, [pc, #592]	; (80066f0 <_printf_float+0x2e4>)
 80064a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064a4:	bf94      	ite	ls
 80064a6:	4698      	movls	r8, r3
 80064a8:	4680      	movhi	r8, r0
 80064aa:	2303      	movs	r3, #3
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	9b05      	ldr	r3, [sp, #20]
 80064b0:	f023 0204 	bic.w	r2, r3, #4
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	f04f 0900 	mov.w	r9, #0
 80064ba:	9700      	str	r7, [sp, #0]
 80064bc:	4633      	mov	r3, r6
 80064be:	aa0b      	add	r2, sp, #44	; 0x2c
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f9d8 	bl	8006878 <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f040 8090 	bne.w	80065ee <_printf_float+0x1e2>
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064d2:	b00d      	add	sp, #52	; 0x34
 80064d4:	ecbd 8b02 	vpop	{d8}
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	4640      	mov	r0, r8
 80064e2:	4649      	mov	r1, r9
 80064e4:	f7fa fb2a 	bl	8000b3c <__aeabi_dcmpun>
 80064e8:	b140      	cbz	r0, 80064fc <_printf_float+0xf0>
 80064ea:	464b      	mov	r3, r9
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bfbc      	itt	lt
 80064f0:	232d      	movlt	r3, #45	; 0x2d
 80064f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064f6:	487f      	ldr	r0, [pc, #508]	; (80066f4 <_printf_float+0x2e8>)
 80064f8:	4b7f      	ldr	r3, [pc, #508]	; (80066f8 <_printf_float+0x2ec>)
 80064fa:	e7d1      	b.n	80064a0 <_printf_float+0x94>
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006502:	9206      	str	r2, [sp, #24]
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	d13f      	bne.n	8006588 <_printf_float+0x17c>
 8006508:	2306      	movs	r3, #6
 800650a:	6063      	str	r3, [r4, #4]
 800650c:	9b05      	ldr	r3, [sp, #20]
 800650e:	6861      	ldr	r1, [r4, #4]
 8006510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006514:	2300      	movs	r3, #0
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	ab0a      	add	r3, sp, #40	; 0x28
 800651a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800651e:	ab09      	add	r3, sp, #36	; 0x24
 8006520:	ec49 8b10 	vmov	d0, r8, r9
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	6022      	str	r2, [r4, #0]
 8006528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800652c:	4628      	mov	r0, r5
 800652e:	f7ff fecd 	bl	80062cc <__cvt>
 8006532:	9b06      	ldr	r3, [sp, #24]
 8006534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006536:	2b47      	cmp	r3, #71	; 0x47
 8006538:	4680      	mov	r8, r0
 800653a:	d108      	bne.n	800654e <_printf_float+0x142>
 800653c:	1cc8      	adds	r0, r1, #3
 800653e:	db02      	blt.n	8006546 <_printf_float+0x13a>
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	4299      	cmp	r1, r3
 8006544:	dd41      	ble.n	80065ca <_printf_float+0x1be>
 8006546:	f1ab 0b02 	sub.w	fp, fp, #2
 800654a:	fa5f fb8b 	uxtb.w	fp, fp
 800654e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006552:	d820      	bhi.n	8006596 <_printf_float+0x18a>
 8006554:	3901      	subs	r1, #1
 8006556:	465a      	mov	r2, fp
 8006558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800655c:	9109      	str	r1, [sp, #36]	; 0x24
 800655e:	f7ff ff17 	bl	8006390 <__exponent>
 8006562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006564:	1813      	adds	r3, r2, r0
 8006566:	2a01      	cmp	r2, #1
 8006568:	4681      	mov	r9, r0
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	dc02      	bgt.n	8006574 <_printf_float+0x168>
 800656e:	6822      	ldr	r2, [r4, #0]
 8006570:	07d2      	lsls	r2, r2, #31
 8006572:	d501      	bpl.n	8006578 <_printf_float+0x16c>
 8006574:	3301      	adds	r3, #1
 8006576:	6123      	str	r3, [r4, #16]
 8006578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800657c:	2b00      	cmp	r3, #0
 800657e:	d09c      	beq.n	80064ba <_printf_float+0xae>
 8006580:	232d      	movs	r3, #45	; 0x2d
 8006582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006586:	e798      	b.n	80064ba <_printf_float+0xae>
 8006588:	9a06      	ldr	r2, [sp, #24]
 800658a:	2a47      	cmp	r2, #71	; 0x47
 800658c:	d1be      	bne.n	800650c <_printf_float+0x100>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1bc      	bne.n	800650c <_printf_float+0x100>
 8006592:	2301      	movs	r3, #1
 8006594:	e7b9      	b.n	800650a <_printf_float+0xfe>
 8006596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800659a:	d118      	bne.n	80065ce <_printf_float+0x1c2>
 800659c:	2900      	cmp	r1, #0
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	dd0b      	ble.n	80065ba <_printf_float+0x1ae>
 80065a2:	6121      	str	r1, [r4, #16]
 80065a4:	b913      	cbnz	r3, 80065ac <_printf_float+0x1a0>
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	07d0      	lsls	r0, r2, #31
 80065aa:	d502      	bpl.n	80065b2 <_printf_float+0x1a6>
 80065ac:	3301      	adds	r3, #1
 80065ae:	440b      	add	r3, r1
 80065b0:	6123      	str	r3, [r4, #16]
 80065b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065b4:	f04f 0900 	mov.w	r9, #0
 80065b8:	e7de      	b.n	8006578 <_printf_float+0x16c>
 80065ba:	b913      	cbnz	r3, 80065c2 <_printf_float+0x1b6>
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	07d2      	lsls	r2, r2, #31
 80065c0:	d501      	bpl.n	80065c6 <_printf_float+0x1ba>
 80065c2:	3302      	adds	r3, #2
 80065c4:	e7f4      	b.n	80065b0 <_printf_float+0x1a4>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e7f2      	b.n	80065b0 <_printf_float+0x1a4>
 80065ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	4299      	cmp	r1, r3
 80065d2:	db05      	blt.n	80065e0 <_printf_float+0x1d4>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	6121      	str	r1, [r4, #16]
 80065d8:	07d8      	lsls	r0, r3, #31
 80065da:	d5ea      	bpl.n	80065b2 <_printf_float+0x1a6>
 80065dc:	1c4b      	adds	r3, r1, #1
 80065de:	e7e7      	b.n	80065b0 <_printf_float+0x1a4>
 80065e0:	2900      	cmp	r1, #0
 80065e2:	bfd4      	ite	le
 80065e4:	f1c1 0202 	rsble	r2, r1, #2
 80065e8:	2201      	movgt	r2, #1
 80065ea:	4413      	add	r3, r2
 80065ec:	e7e0      	b.n	80065b0 <_printf_float+0x1a4>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	055a      	lsls	r2, r3, #21
 80065f2:	d407      	bmi.n	8006604 <_printf_float+0x1f8>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	4642      	mov	r2, r8
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	d12c      	bne.n	800665c <_printf_float+0x250>
 8006602:	e764      	b.n	80064ce <_printf_float+0xc2>
 8006604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006608:	f240 80e0 	bls.w	80067cc <_printf_float+0x3c0>
 800660c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	f7fa fa60 	bl	8000ad8 <__aeabi_dcmpeq>
 8006618:	2800      	cmp	r0, #0
 800661a:	d034      	beq.n	8006686 <_printf_float+0x27a>
 800661c:	4a37      	ldr	r2, [pc, #220]	; (80066fc <_printf_float+0x2f0>)
 800661e:	2301      	movs	r3, #1
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af51 	beq.w	80064ce <_printf_float+0xc2>
 800662c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006630:	429a      	cmp	r2, r3
 8006632:	db02      	blt.n	800663a <_printf_float+0x22e>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	07d8      	lsls	r0, r3, #31
 8006638:	d510      	bpl.n	800665c <_printf_float+0x250>
 800663a:	ee18 3a10 	vmov	r3, s16
 800663e:	4652      	mov	r2, sl
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f af41 	beq.w	80064ce <_printf_float+0xc2>
 800664c:	f04f 0800 	mov.w	r8, #0
 8006650:	f104 091a 	add.w	r9, r4, #26
 8006654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006656:	3b01      	subs	r3, #1
 8006658:	4543      	cmp	r3, r8
 800665a:	dc09      	bgt.n	8006670 <_printf_float+0x264>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	f100 8105 	bmi.w	800686e <_printf_float+0x462>
 8006664:	68e0      	ldr	r0, [r4, #12]
 8006666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006668:	4298      	cmp	r0, r3
 800666a:	bfb8      	it	lt
 800666c:	4618      	movlt	r0, r3
 800666e:	e730      	b.n	80064d2 <_printf_float+0xc6>
 8006670:	2301      	movs	r3, #1
 8006672:	464a      	mov	r2, r9
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af27 	beq.w	80064ce <_printf_float+0xc2>
 8006680:	f108 0801 	add.w	r8, r8, #1
 8006684:	e7e6      	b.n	8006654 <_printf_float+0x248>
 8006686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc39      	bgt.n	8006700 <_printf_float+0x2f4>
 800668c:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <_printf_float+0x2f0>)
 800668e:	2301      	movs	r3, #1
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	f43f af19 	beq.w	80064ce <_printf_float+0xc2>
 800669c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d102      	bne.n	80066aa <_printf_float+0x29e>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	d5d8      	bpl.n	800665c <_printf_float+0x250>
 80066aa:	ee18 3a10 	vmov	r3, s16
 80066ae:	4652      	mov	r2, sl
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af09 	beq.w	80064ce <_printf_float+0xc2>
 80066bc:	f04f 0900 	mov.w	r9, #0
 80066c0:	f104 0a1a 	add.w	sl, r4, #26
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	425b      	negs	r3, r3
 80066c8:	454b      	cmp	r3, r9
 80066ca:	dc01      	bgt.n	80066d0 <_printf_float+0x2c4>
 80066cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ce:	e792      	b.n	80065f6 <_printf_float+0x1ea>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4652      	mov	r2, sl
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f aef7 	beq.w	80064ce <_printf_float+0xc2>
 80066e0:	f109 0901 	add.w	r9, r9, #1
 80066e4:	e7ee      	b.n	80066c4 <_printf_float+0x2b8>
 80066e6:	bf00      	nop
 80066e8:	7fefffff 	.word	0x7fefffff
 80066ec:	08009af0 	.word	0x08009af0
 80066f0:	08009af4 	.word	0x08009af4
 80066f4:	08009afc 	.word	0x08009afc
 80066f8:	08009af8 	.word	0x08009af8
 80066fc:	08009d81 	.word	0x08009d81
 8006700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006704:	429a      	cmp	r2, r3
 8006706:	bfa8      	it	ge
 8006708:	461a      	movge	r2, r3
 800670a:	2a00      	cmp	r2, #0
 800670c:	4691      	mov	r9, r2
 800670e:	dc37      	bgt.n	8006780 <_printf_float+0x374>
 8006710:	f04f 0b00 	mov.w	fp, #0
 8006714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006718:	f104 021a 	add.w	r2, r4, #26
 800671c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	eba3 0309 	sub.w	r3, r3, r9
 8006724:	455b      	cmp	r3, fp
 8006726:	dc33      	bgt.n	8006790 <_printf_float+0x384>
 8006728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	db3b      	blt.n	80067a8 <_printf_float+0x39c>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07da      	lsls	r2, r3, #31
 8006734:	d438      	bmi.n	80067a8 <_printf_float+0x39c>
 8006736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006738:	9a05      	ldr	r2, [sp, #20]
 800673a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673c:	1a9a      	subs	r2, r3, r2
 800673e:	eba3 0901 	sub.w	r9, r3, r1
 8006742:	4591      	cmp	r9, r2
 8006744:	bfa8      	it	ge
 8006746:	4691      	movge	r9, r2
 8006748:	f1b9 0f00 	cmp.w	r9, #0
 800674c:	dc35      	bgt.n	80067ba <_printf_float+0x3ae>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006756:	f104 0a1a 	add.w	sl, r4, #26
 800675a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	eba3 0309 	sub.w	r3, r3, r9
 8006764:	4543      	cmp	r3, r8
 8006766:	f77f af79 	ble.w	800665c <_printf_float+0x250>
 800676a:	2301      	movs	r3, #1
 800676c:	4652      	mov	r2, sl
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f aeaa 	beq.w	80064ce <_printf_float+0xc2>
 800677a:	f108 0801 	add.w	r8, r8, #1
 800677e:	e7ec      	b.n	800675a <_printf_float+0x34e>
 8006780:	4613      	mov	r3, r2
 8006782:	4631      	mov	r1, r6
 8006784:	4642      	mov	r2, r8
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	d1c0      	bne.n	8006710 <_printf_float+0x304>
 800678e:	e69e      	b.n	80064ce <_printf_float+0xc2>
 8006790:	2301      	movs	r3, #1
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	9205      	str	r2, [sp, #20]
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f ae97 	beq.w	80064ce <_printf_float+0xc2>
 80067a0:	9a05      	ldr	r2, [sp, #20]
 80067a2:	f10b 0b01 	add.w	fp, fp, #1
 80067a6:	e7b9      	b.n	800671c <_printf_float+0x310>
 80067a8:	ee18 3a10 	vmov	r3, s16
 80067ac:	4652      	mov	r2, sl
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1be      	bne.n	8006736 <_printf_float+0x32a>
 80067b8:	e689      	b.n	80064ce <_printf_float+0xc2>
 80067ba:	9a05      	ldr	r2, [sp, #20]
 80067bc:	464b      	mov	r3, r9
 80067be:	4442      	add	r2, r8
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	d1c1      	bne.n	800674e <_printf_float+0x342>
 80067ca:	e680      	b.n	80064ce <_printf_float+0xc2>
 80067cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ce:	2a01      	cmp	r2, #1
 80067d0:	dc01      	bgt.n	80067d6 <_printf_float+0x3ca>
 80067d2:	07db      	lsls	r3, r3, #31
 80067d4:	d538      	bpl.n	8006848 <_printf_float+0x43c>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4642      	mov	r2, r8
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae74 	beq.w	80064ce <_printf_float+0xc2>
 80067e6:	ee18 3a10 	vmov	r3, s16
 80067ea:	4652      	mov	r2, sl
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f ae6b 	beq.w	80064ce <_printf_float+0xc2>
 80067f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	f7fa f96a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006804:	b9d8      	cbnz	r0, 800683e <_printf_float+0x432>
 8006806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006808:	f108 0201 	add.w	r2, r8, #1
 800680c:	3b01      	subs	r3, #1
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	d10e      	bne.n	8006836 <_printf_float+0x42a>
 8006818:	e659      	b.n	80064ce <_printf_float+0xc2>
 800681a:	2301      	movs	r3, #1
 800681c:	4652      	mov	r2, sl
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae52 	beq.w	80064ce <_printf_float+0xc2>
 800682a:	f108 0801 	add.w	r8, r8, #1
 800682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	4543      	cmp	r3, r8
 8006834:	dcf1      	bgt.n	800681a <_printf_float+0x40e>
 8006836:	464b      	mov	r3, r9
 8006838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800683c:	e6dc      	b.n	80065f8 <_printf_float+0x1ec>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 0a1a 	add.w	sl, r4, #26
 8006846:	e7f2      	b.n	800682e <_printf_float+0x422>
 8006848:	2301      	movs	r3, #1
 800684a:	4642      	mov	r2, r8
 800684c:	e7df      	b.n	800680e <_printf_float+0x402>
 800684e:	2301      	movs	r3, #1
 8006850:	464a      	mov	r2, r9
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f ae38 	beq.w	80064ce <_printf_float+0xc2>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006866:	1a5b      	subs	r3, r3, r1
 8006868:	4543      	cmp	r3, r8
 800686a:	dcf0      	bgt.n	800684e <_printf_float+0x442>
 800686c:	e6fa      	b.n	8006664 <_printf_float+0x258>
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	f104 0919 	add.w	r9, r4, #25
 8006876:	e7f4      	b.n	8006862 <_printf_float+0x456>

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4699      	mov	r9, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006888:	4293      	cmp	r3, r2
 800688a:	bfb8      	it	lt
 800688c:	4613      	movlt	r3, r2
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006894:	4607      	mov	r7, r0
 8006896:	460c      	mov	r4, r1
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc26      	bgt.n	800690e <_printf_common+0x96>
 80068c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068c4:	1e13      	subs	r3, r2, #0
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d42b      	bmi.n	8006928 <_printf_common+0xb0>
 80068d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d4:	4649      	mov	r1, r9
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c0      	blx	r8
 80068da:	3001      	adds	r0, #1
 80068dc:	d01e      	beq.n	800691c <_printf_common+0xa4>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	68e5      	ldr	r5, [r4, #12]
 80068e2:	6832      	ldr	r2, [r6, #0]
 80068e4:	f003 0306 	and.w	r3, r3, #6
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	bf08      	it	eq
 80068ec:	1aad      	subeq	r5, r5, r2
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	bf0c      	ite	eq
 80068f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f8:	2500      	movne	r5, #0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	bfc4      	itt	gt
 80068fe:	1a9b      	subgt	r3, r3, r2
 8006900:	18ed      	addgt	r5, r5, r3
 8006902:	2600      	movs	r6, #0
 8006904:	341a      	adds	r4, #26
 8006906:	42b5      	cmp	r5, r6
 8006908:	d11a      	bne.n	8006940 <_printf_common+0xc8>
 800690a:	2000      	movs	r0, #0
 800690c:	e008      	b.n	8006920 <_printf_common+0xa8>
 800690e:	2301      	movs	r3, #1
 8006910:	4652      	mov	r2, sl
 8006912:	4649      	mov	r1, r9
 8006914:	4638      	mov	r0, r7
 8006916:	47c0      	blx	r8
 8006918:	3001      	adds	r0, #1
 800691a:	d103      	bne.n	8006924 <_printf_common+0xac>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006924:	3501      	adds	r5, #1
 8006926:	e7c6      	b.n	80068b6 <_printf_common+0x3e>
 8006928:	18e1      	adds	r1, r4, r3
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	2030      	movs	r0, #48	; 0x30
 800692e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006932:	4422      	add	r2, r4
 8006934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800693c:	3302      	adds	r3, #2
 800693e:	e7c7      	b.n	80068d0 <_printf_common+0x58>
 8006940:	2301      	movs	r3, #1
 8006942:	4622      	mov	r2, r4
 8006944:	4649      	mov	r1, r9
 8006946:	4638      	mov	r0, r7
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d0e6      	beq.n	800691c <_printf_common+0xa4>
 800694e:	3601      	adds	r6, #1
 8006950:	e7d9      	b.n	8006906 <_printf_common+0x8e>
	...

08006954 <_printf_i>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	7e0f      	ldrb	r7, [r1, #24]
 800695a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800695c:	2f78      	cmp	r7, #120	; 0x78
 800695e:	4691      	mov	r9, r2
 8006960:	4680      	mov	r8, r0
 8006962:	460c      	mov	r4, r1
 8006964:	469a      	mov	sl, r3
 8006966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800696a:	d807      	bhi.n	800697c <_printf_i+0x28>
 800696c:	2f62      	cmp	r7, #98	; 0x62
 800696e:	d80a      	bhi.n	8006986 <_printf_i+0x32>
 8006970:	2f00      	cmp	r7, #0
 8006972:	f000 80d8 	beq.w	8006b26 <_printf_i+0x1d2>
 8006976:	2f58      	cmp	r7, #88	; 0x58
 8006978:	f000 80a3 	beq.w	8006ac2 <_printf_i+0x16e>
 800697c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006984:	e03a      	b.n	80069fc <_printf_i+0xa8>
 8006986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800698a:	2b15      	cmp	r3, #21
 800698c:	d8f6      	bhi.n	800697c <_printf_i+0x28>
 800698e:	a101      	add	r1, pc, #4	; (adr r1, 8006994 <_printf_i+0x40>)
 8006990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006994:	080069ed 	.word	0x080069ed
 8006998:	08006a01 	.word	0x08006a01
 800699c:	0800697d 	.word	0x0800697d
 80069a0:	0800697d 	.word	0x0800697d
 80069a4:	0800697d 	.word	0x0800697d
 80069a8:	0800697d 	.word	0x0800697d
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	0800697d 	.word	0x0800697d
 80069b4:	0800697d 	.word	0x0800697d
 80069b8:	0800697d 	.word	0x0800697d
 80069bc:	0800697d 	.word	0x0800697d
 80069c0:	08006b0d 	.word	0x08006b0d
 80069c4:	08006a31 	.word	0x08006a31
 80069c8:	08006aef 	.word	0x08006aef
 80069cc:	0800697d 	.word	0x0800697d
 80069d0:	0800697d 	.word	0x0800697d
 80069d4:	08006b2f 	.word	0x08006b2f
 80069d8:	0800697d 	.word	0x0800697d
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	0800697d 	.word	0x0800697d
 80069e4:	0800697d 	.word	0x0800697d
 80069e8:	08006af7 	.word	0x08006af7
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	602a      	str	r2, [r5, #0]
 80069f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0a3      	b.n	8006b48 <_printf_i+0x1f4>
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	6829      	ldr	r1, [r5, #0]
 8006a04:	0606      	lsls	r6, r0, #24
 8006a06:	f101 0304 	add.w	r3, r1, #4
 8006a0a:	d50a      	bpl.n	8006a22 <_printf_i+0xce>
 8006a0c:	680e      	ldr	r6, [r1, #0]
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	2e00      	cmp	r6, #0
 8006a12:	da03      	bge.n	8006a1c <_printf_i+0xc8>
 8006a14:	232d      	movs	r3, #45	; 0x2d
 8006a16:	4276      	negs	r6, r6
 8006a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1c:	485e      	ldr	r0, [pc, #376]	; (8006b98 <_printf_i+0x244>)
 8006a1e:	230a      	movs	r3, #10
 8006a20:	e019      	b.n	8006a56 <_printf_i+0x102>
 8006a22:	680e      	ldr	r6, [r1, #0]
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a2a:	bf18      	it	ne
 8006a2c:	b236      	sxthne	r6, r6
 8006a2e:	e7ef      	b.n	8006a10 <_printf_i+0xbc>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	1d19      	adds	r1, r3, #4
 8006a36:	6029      	str	r1, [r5, #0]
 8006a38:	0601      	lsls	r1, r0, #24
 8006a3a:	d501      	bpl.n	8006a40 <_printf_i+0xec>
 8006a3c:	681e      	ldr	r6, [r3, #0]
 8006a3e:	e002      	b.n	8006a46 <_printf_i+0xf2>
 8006a40:	0646      	lsls	r6, r0, #25
 8006a42:	d5fb      	bpl.n	8006a3c <_printf_i+0xe8>
 8006a44:	881e      	ldrh	r6, [r3, #0]
 8006a46:	4854      	ldr	r0, [pc, #336]	; (8006b98 <_printf_i+0x244>)
 8006a48:	2f6f      	cmp	r7, #111	; 0x6f
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2308      	moveq	r3, #8
 8006a4e:	230a      	movne	r3, #10
 8006a50:	2100      	movs	r1, #0
 8006a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a56:	6865      	ldr	r5, [r4, #4]
 8006a58:	60a5      	str	r5, [r4, #8]
 8006a5a:	2d00      	cmp	r5, #0
 8006a5c:	bfa2      	ittt	ge
 8006a5e:	6821      	ldrge	r1, [r4, #0]
 8006a60:	f021 0104 	bicge.w	r1, r1, #4
 8006a64:	6021      	strge	r1, [r4, #0]
 8006a66:	b90e      	cbnz	r6, 8006a6c <_printf_i+0x118>
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	d04d      	beq.n	8006b08 <_printf_i+0x1b4>
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a72:	fb03 6711 	mls	r7, r3, r1, r6
 8006a76:	5dc7      	ldrb	r7, [r0, r7]
 8006a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a7c:	4637      	mov	r7, r6
 8006a7e:	42bb      	cmp	r3, r7
 8006a80:	460e      	mov	r6, r1
 8006a82:	d9f4      	bls.n	8006a6e <_printf_i+0x11a>
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d10b      	bne.n	8006aa0 <_printf_i+0x14c>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	07de      	lsls	r6, r3, #31
 8006a8c:	d508      	bpl.n	8006aa0 <_printf_i+0x14c>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	6861      	ldr	r1, [r4, #4]
 8006a92:	4299      	cmp	r1, r3
 8006a94:	bfde      	ittt	le
 8006a96:	2330      	movle	r3, #48	; 0x30
 8006a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006aa0:	1b52      	subs	r2, r2, r5
 8006aa2:	6122      	str	r2, [r4, #16]
 8006aa4:	f8cd a000 	str.w	sl, [sp]
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	aa03      	add	r2, sp, #12
 8006aac:	4621      	mov	r1, r4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff fee2 	bl	8006878 <_printf_common>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d14c      	bne.n	8006b52 <_printf_i+0x1fe>
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006abc:	b004      	add	sp, #16
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	4835      	ldr	r0, [pc, #212]	; (8006b98 <_printf_i+0x244>)
 8006ac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ac8:	6829      	ldr	r1, [r5, #0]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ad0:	6029      	str	r1, [r5, #0]
 8006ad2:	061d      	lsls	r5, r3, #24
 8006ad4:	d514      	bpl.n	8006b00 <_printf_i+0x1ac>
 8006ad6:	07df      	lsls	r7, r3, #31
 8006ad8:	bf44      	itt	mi
 8006ada:	f043 0320 	orrmi.w	r3, r3, #32
 8006ade:	6023      	strmi	r3, [r4, #0]
 8006ae0:	b91e      	cbnz	r6, 8006aea <_printf_i+0x196>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f023 0320 	bic.w	r3, r3, #32
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	2310      	movs	r3, #16
 8006aec:	e7b0      	b.n	8006a50 <_printf_i+0xfc>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f043 0320 	orr.w	r3, r3, #32
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	2378      	movs	r3, #120	; 0x78
 8006af8:	4828      	ldr	r0, [pc, #160]	; (8006b9c <_printf_i+0x248>)
 8006afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006afe:	e7e3      	b.n	8006ac8 <_printf_i+0x174>
 8006b00:	0659      	lsls	r1, r3, #25
 8006b02:	bf48      	it	mi
 8006b04:	b2b6      	uxthmi	r6, r6
 8006b06:	e7e6      	b.n	8006ad6 <_printf_i+0x182>
 8006b08:	4615      	mov	r5, r2
 8006b0a:	e7bb      	b.n	8006a84 <_printf_i+0x130>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	6826      	ldr	r6, [r4, #0]
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6028      	str	r0, [r5, #0]
 8006b16:	0635      	lsls	r5, r6, #24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x1cc>
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1d2>
 8006b20:	0670      	lsls	r0, r6, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x1c8>
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	e7ba      	b.n	8006aa4 <_printf_i+0x150>
 8006b2e:	682b      	ldr	r3, [r5, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	602a      	str	r2, [r5, #0]
 8006b34:	681d      	ldr	r5, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7f9 fb58 	bl	80001f0 <memchr>
 8006b40:	b108      	cbz	r0, 8006b46 <_printf_i+0x1f2>
 8006b42:	1b40      	subs	r0, r0, r5
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b50:	e7a8      	b.n	8006aa4 <_printf_i+0x150>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	462a      	mov	r2, r5
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d0ab      	beq.n	8006ab8 <_printf_i+0x164>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	d413      	bmi.n	8006b8e <_printf_i+0x23a>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	bfb8      	it	lt
 8006b6e:	4618      	movlt	r0, r3
 8006b70:	e7a4      	b.n	8006abc <_printf_i+0x168>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d09b      	beq.n	8006ab8 <_printf_i+0x164>
 8006b80:	3501      	adds	r5, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dcf2      	bgt.n	8006b72 <_printf_i+0x21e>
 8006b8c:	e7eb      	b.n	8006b66 <_printf_i+0x212>
 8006b8e:	2500      	movs	r5, #0
 8006b90:	f104 0619 	add.w	r6, r4, #25
 8006b94:	e7f5      	b.n	8006b82 <_printf_i+0x22e>
 8006b96:	bf00      	nop
 8006b98:	08009b00 	.word	0x08009b00
 8006b9c:	08009b11 	.word	0x08009b11

08006ba0 <iprintf>:
 8006ba0:	b40f      	push	{r0, r1, r2, r3}
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <iprintf+0x2c>)
 8006ba4:	b513      	push	{r0, r1, r4, lr}
 8006ba6:	681c      	ldr	r4, [r3, #0]
 8006ba8:	b124      	cbz	r4, 8006bb4 <iprintf+0x14>
 8006baa:	69a3      	ldr	r3, [r4, #24]
 8006bac:	b913      	cbnz	r3, 8006bb4 <iprintf+0x14>
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f001 f96e 	bl	8007e90 <__sinit>
 8006bb4:	ab05      	add	r3, sp, #20
 8006bb6:	9a04      	ldr	r2, [sp, #16]
 8006bb8:	68a1      	ldr	r1, [r4, #8]
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f002 f903 	bl	8008dc8 <_vfiprintf_r>
 8006bc2:	b002      	add	sp, #8
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	b004      	add	sp, #16
 8006bca:	4770      	bx	lr
 8006bcc:	2000000c 	.word	0x2000000c

08006bd0 <_puts_r>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	460e      	mov	r6, r1
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	b118      	cbz	r0, 8006be0 <_puts_r+0x10>
 8006bd8:	6983      	ldr	r3, [r0, #24]
 8006bda:	b90b      	cbnz	r3, 8006be0 <_puts_r+0x10>
 8006bdc:	f001 f958 	bl	8007e90 <__sinit>
 8006be0:	69ab      	ldr	r3, [r5, #24]
 8006be2:	68ac      	ldr	r4, [r5, #8]
 8006be4:	b913      	cbnz	r3, 8006bec <_puts_r+0x1c>
 8006be6:	4628      	mov	r0, r5
 8006be8:	f001 f952 	bl	8007e90 <__sinit>
 8006bec:	4b2c      	ldr	r3, [pc, #176]	; (8006ca0 <_puts_r+0xd0>)
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d120      	bne.n	8006c34 <_puts_r+0x64>
 8006bf2:	686c      	ldr	r4, [r5, #4]
 8006bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf6:	07db      	lsls	r3, r3, #31
 8006bf8:	d405      	bmi.n	8006c06 <_puts_r+0x36>
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	0598      	lsls	r0, r3, #22
 8006bfe:	d402      	bmi.n	8006c06 <_puts_r+0x36>
 8006c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c02:	f001 f9e8 	bl	8007fd6 <__retarget_lock_acquire_recursive>
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	0719      	lsls	r1, r3, #28
 8006c0a:	d51d      	bpl.n	8006c48 <_puts_r+0x78>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	b1db      	cbz	r3, 8006c48 <_puts_r+0x78>
 8006c10:	3e01      	subs	r6, #1
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	60a3      	str	r3, [r4, #8]
 8006c1c:	bb39      	cbnz	r1, 8006c6e <_puts_r+0x9e>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	da38      	bge.n	8006c94 <_puts_r+0xc4>
 8006c22:	4622      	mov	r2, r4
 8006c24:	210a      	movs	r1, #10
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 f8ba 	bl	8006da0 <__swbuf_r>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d011      	beq.n	8006c54 <_puts_r+0x84>
 8006c30:	250a      	movs	r5, #10
 8006c32:	e011      	b.n	8006c58 <_puts_r+0x88>
 8006c34:	4b1b      	ldr	r3, [pc, #108]	; (8006ca4 <_puts_r+0xd4>)
 8006c36:	429c      	cmp	r4, r3
 8006c38:	d101      	bne.n	8006c3e <_puts_r+0x6e>
 8006c3a:	68ac      	ldr	r4, [r5, #8]
 8006c3c:	e7da      	b.n	8006bf4 <_puts_r+0x24>
 8006c3e:	4b1a      	ldr	r3, [pc, #104]	; (8006ca8 <_puts_r+0xd8>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	bf08      	it	eq
 8006c44:	68ec      	ldreq	r4, [r5, #12]
 8006c46:	e7d5      	b.n	8006bf4 <_puts_r+0x24>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 f90c 	bl	8006e68 <__swsetup_r>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d0dd      	beq.n	8006c10 <_puts_r+0x40>
 8006c54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c5a:	07da      	lsls	r2, r3, #31
 8006c5c:	d405      	bmi.n	8006c6a <_puts_r+0x9a>
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	059b      	lsls	r3, r3, #22
 8006c62:	d402      	bmi.n	8006c6a <_puts_r+0x9a>
 8006c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c66:	f001 f9b7 	bl	8007fd8 <__retarget_lock_release_recursive>
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da04      	bge.n	8006c7c <_puts_r+0xac>
 8006c72:	69a2      	ldr	r2, [r4, #24]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	dc06      	bgt.n	8006c86 <_puts_r+0xb6>
 8006c78:	290a      	cmp	r1, #10
 8006c7a:	d004      	beq.n	8006c86 <_puts_r+0xb6>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	6022      	str	r2, [r4, #0]
 8006c82:	7019      	strb	r1, [r3, #0]
 8006c84:	e7c5      	b.n	8006c12 <_puts_r+0x42>
 8006c86:	4622      	mov	r2, r4
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f000 f889 	bl	8006da0 <__swbuf_r>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d1bf      	bne.n	8006c12 <_puts_r+0x42>
 8006c92:	e7df      	b.n	8006c54 <_puts_r+0x84>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	250a      	movs	r5, #10
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	701d      	strb	r5, [r3, #0]
 8006c9e:	e7db      	b.n	8006c58 <_puts_r+0x88>
 8006ca0:	08009bd4 	.word	0x08009bd4
 8006ca4:	08009bf4 	.word	0x08009bf4
 8006ca8:	08009bb4 	.word	0x08009bb4

08006cac <puts>:
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <puts+0xc>)
 8006cae:	4601      	mov	r1, r0
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f7ff bf8d 	b.w	8006bd0 <_puts_r>
 8006cb6:	bf00      	nop
 8006cb8:	2000000c 	.word	0x2000000c

08006cbc <siscanf>:
 8006cbc:	b40e      	push	{r1, r2, r3}
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	b09f      	sub	sp, #124	; 0x7c
 8006cc2:	ac21      	add	r4, sp, #132	; 0x84
 8006cc4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006cc8:	f854 2b04 	ldr.w	r2, [r4], #4
 8006ccc:	9201      	str	r2, [sp, #4]
 8006cce:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006cd2:	9004      	str	r0, [sp, #16]
 8006cd4:	9008      	str	r0, [sp, #32]
 8006cd6:	f7f9 fa83 	bl	80001e0 <strlen>
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <siscanf+0x50>)
 8006cdc:	9005      	str	r0, [sp, #20]
 8006cde:	9009      	str	r0, [sp, #36]	; 0x24
 8006ce0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ce2:	480b      	ldr	r0, [pc, #44]	; (8006d10 <siscanf+0x54>)
 8006ce4:	9a01      	ldr	r2, [sp, #4]
 8006ce6:	6800      	ldr	r0, [r0, #0]
 8006ce8:	9403      	str	r4, [sp, #12]
 8006cea:	2300      	movs	r3, #0
 8006cec:	9311      	str	r3, [sp, #68]	; 0x44
 8006cee:	9316      	str	r3, [sp, #88]	; 0x58
 8006cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cf4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006cf8:	a904      	add	r1, sp, #16
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	f001 fec2 	bl	8008a84 <__ssvfiscanf_r>
 8006d00:	b01f      	add	sp, #124	; 0x7c
 8006d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d06:	b003      	add	sp, #12
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	08006d37 	.word	0x08006d37
 8006d10:	2000000c 	.word	0x2000000c

08006d14 <__sread>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	460c      	mov	r4, r1
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	f002 fad6 	bl	80092cc <_read_r>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	bfab      	itete	ge
 8006d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d26:	89a3      	ldrhlt	r3, [r4, #12]
 8006d28:	181b      	addge	r3, r3, r0
 8006d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d2e:	bfac      	ite	ge
 8006d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d32:	81a3      	strhlt	r3, [r4, #12]
 8006d34:	bd10      	pop	{r4, pc}

08006d36 <__seofread>:
 8006d36:	2000      	movs	r0, #0
 8006d38:	4770      	bx	lr

08006d3a <__swrite>:
 8006d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3e:	461f      	mov	r7, r3
 8006d40:	898b      	ldrh	r3, [r1, #12]
 8006d42:	05db      	lsls	r3, r3, #23
 8006d44:	4605      	mov	r5, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	4616      	mov	r6, r2
 8006d4a:	d505      	bpl.n	8006d58 <__swrite+0x1e>
 8006d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d50:	2302      	movs	r3, #2
 8006d52:	2200      	movs	r2, #0
 8006d54:	f001 f942 	bl	8007fdc <_lseek_r>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	4632      	mov	r2, r6
 8006d66:	463b      	mov	r3, r7
 8006d68:	4628      	mov	r0, r5
 8006d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6e:	f000 b869 	b.w	8006e44 <_write_r>

08006d72 <__sseek>:
 8006d72:	b510      	push	{r4, lr}
 8006d74:	460c      	mov	r4, r1
 8006d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7a:	f001 f92f 	bl	8007fdc <_lseek_r>
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	bf15      	itete	ne
 8006d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d8e:	81a3      	strheq	r3, [r4, #12]
 8006d90:	bf18      	it	ne
 8006d92:	81a3      	strhne	r3, [r4, #12]
 8006d94:	bd10      	pop	{r4, pc}

08006d96 <__sclose>:
 8006d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9a:	f000 b8d3 	b.w	8006f44 <_close_r>
	...

08006da0 <__swbuf_r>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	460e      	mov	r6, r1
 8006da4:	4614      	mov	r4, r2
 8006da6:	4605      	mov	r5, r0
 8006da8:	b118      	cbz	r0, 8006db2 <__swbuf_r+0x12>
 8006daa:	6983      	ldr	r3, [r0, #24]
 8006dac:	b90b      	cbnz	r3, 8006db2 <__swbuf_r+0x12>
 8006dae:	f001 f86f 	bl	8007e90 <__sinit>
 8006db2:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <__swbuf_r+0x98>)
 8006db4:	429c      	cmp	r4, r3
 8006db6:	d12b      	bne.n	8006e10 <__swbuf_r+0x70>
 8006db8:	686c      	ldr	r4, [r5, #4]
 8006dba:	69a3      	ldr	r3, [r4, #24]
 8006dbc:	60a3      	str	r3, [r4, #8]
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	071a      	lsls	r2, r3, #28
 8006dc2:	d52f      	bpl.n	8006e24 <__swbuf_r+0x84>
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	b36b      	cbz	r3, 8006e24 <__swbuf_r+0x84>
 8006dc8:	6923      	ldr	r3, [r4, #16]
 8006dca:	6820      	ldr	r0, [r4, #0]
 8006dcc:	1ac0      	subs	r0, r0, r3
 8006dce:	6963      	ldr	r3, [r4, #20]
 8006dd0:	b2f6      	uxtb	r6, r6
 8006dd2:	4283      	cmp	r3, r0
 8006dd4:	4637      	mov	r7, r6
 8006dd6:	dc04      	bgt.n	8006de2 <__swbuf_r+0x42>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4628      	mov	r0, r5
 8006ddc:	f000 ffc4 	bl	8007d68 <_fflush_r>
 8006de0:	bb30      	cbnz	r0, 8006e30 <__swbuf_r+0x90>
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	60a3      	str	r3, [r4, #8]
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	6022      	str	r2, [r4, #0]
 8006dee:	701e      	strb	r6, [r3, #0]
 8006df0:	6963      	ldr	r3, [r4, #20]
 8006df2:	3001      	adds	r0, #1
 8006df4:	4283      	cmp	r3, r0
 8006df6:	d004      	beq.n	8006e02 <__swbuf_r+0x62>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	07db      	lsls	r3, r3, #31
 8006dfc:	d506      	bpl.n	8006e0c <__swbuf_r+0x6c>
 8006dfe:	2e0a      	cmp	r6, #10
 8006e00:	d104      	bne.n	8006e0c <__swbuf_r+0x6c>
 8006e02:	4621      	mov	r1, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 ffaf 	bl	8007d68 <_fflush_r>
 8006e0a:	b988      	cbnz	r0, 8006e30 <__swbuf_r+0x90>
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <__swbuf_r+0x9c>)
 8006e12:	429c      	cmp	r4, r3
 8006e14:	d101      	bne.n	8006e1a <__swbuf_r+0x7a>
 8006e16:	68ac      	ldr	r4, [r5, #8]
 8006e18:	e7cf      	b.n	8006dba <__swbuf_r+0x1a>
 8006e1a:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <__swbuf_r+0xa0>)
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	bf08      	it	eq
 8006e20:	68ec      	ldreq	r4, [r5, #12]
 8006e22:	e7ca      	b.n	8006dba <__swbuf_r+0x1a>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 f81e 	bl	8006e68 <__swsetup_r>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d0cb      	beq.n	8006dc8 <__swbuf_r+0x28>
 8006e30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e34:	e7ea      	b.n	8006e0c <__swbuf_r+0x6c>
 8006e36:	bf00      	nop
 8006e38:	08009bd4 	.word	0x08009bd4
 8006e3c:	08009bf4 	.word	0x08009bf4
 8006e40:	08009bb4 	.word	0x08009bb4

08006e44 <_write_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d07      	ldr	r5, [pc, #28]	; (8006e64 <_write_r+0x20>)
 8006e48:	4604      	mov	r4, r0
 8006e4a:	4608      	mov	r0, r1
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	602a      	str	r2, [r5, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f7fa f8a2 	bl	8000f9c <_write>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_write_r+0x1e>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_write_r+0x1e>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	20000508 	.word	0x20000508

08006e68 <__swsetup_r>:
 8006e68:	4b32      	ldr	r3, [pc, #200]	; (8006f34 <__swsetup_r+0xcc>)
 8006e6a:	b570      	push	{r4, r5, r6, lr}
 8006e6c:	681d      	ldr	r5, [r3, #0]
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	b125      	cbz	r5, 8006e7e <__swsetup_r+0x16>
 8006e74:	69ab      	ldr	r3, [r5, #24]
 8006e76:	b913      	cbnz	r3, 8006e7e <__swsetup_r+0x16>
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f001 f809 	bl	8007e90 <__sinit>
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <__swsetup_r+0xd0>)
 8006e80:	429c      	cmp	r4, r3
 8006e82:	d10f      	bne.n	8006ea4 <__swsetup_r+0x3c>
 8006e84:	686c      	ldr	r4, [r5, #4]
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e8c:	0719      	lsls	r1, r3, #28
 8006e8e:	d42c      	bmi.n	8006eea <__swsetup_r+0x82>
 8006e90:	06dd      	lsls	r5, r3, #27
 8006e92:	d411      	bmi.n	8006eb8 <__swsetup_r+0x50>
 8006e94:	2309      	movs	r3, #9
 8006e96:	6033      	str	r3, [r6, #0]
 8006e98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea2:	e03e      	b.n	8006f22 <__swsetup_r+0xba>
 8006ea4:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <__swsetup_r+0xd4>)
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	d101      	bne.n	8006eae <__swsetup_r+0x46>
 8006eaa:	68ac      	ldr	r4, [r5, #8]
 8006eac:	e7eb      	b.n	8006e86 <__swsetup_r+0x1e>
 8006eae:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <__swsetup_r+0xd8>)
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	bf08      	it	eq
 8006eb4:	68ec      	ldreq	r4, [r5, #12]
 8006eb6:	e7e6      	b.n	8006e86 <__swsetup_r+0x1e>
 8006eb8:	0758      	lsls	r0, r3, #29
 8006eba:	d512      	bpl.n	8006ee2 <__swsetup_r+0x7a>
 8006ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ebe:	b141      	cbz	r1, 8006ed2 <__swsetup_r+0x6a>
 8006ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	d002      	beq.n	8006ece <__swsetup_r+0x66>
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f001 fca1 	bl	8008810 <_free_r>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	2300      	movs	r3, #0
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	f043 0308 	orr.w	r3, r3, #8
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	b94b      	cbnz	r3, 8006f02 <__swsetup_r+0x9a>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef8:	d003      	beq.n	8006f02 <__swsetup_r+0x9a>
 8006efa:	4621      	mov	r1, r4
 8006efc:	4630      	mov	r0, r6
 8006efe:	f001 f8a5 	bl	800804c <__smakebuf_r>
 8006f02:	89a0      	ldrh	r0, [r4, #12]
 8006f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f08:	f010 0301 	ands.w	r3, r0, #1
 8006f0c:	d00a      	beq.n	8006f24 <__swsetup_r+0xbc>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60a3      	str	r3, [r4, #8]
 8006f12:	6963      	ldr	r3, [r4, #20]
 8006f14:	425b      	negs	r3, r3
 8006f16:	61a3      	str	r3, [r4, #24]
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	b943      	cbnz	r3, 8006f2e <__swsetup_r+0xc6>
 8006f1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f20:	d1ba      	bne.n	8006e98 <__swsetup_r+0x30>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	0781      	lsls	r1, r0, #30
 8006f26:	bf58      	it	pl
 8006f28:	6963      	ldrpl	r3, [r4, #20]
 8006f2a:	60a3      	str	r3, [r4, #8]
 8006f2c:	e7f4      	b.n	8006f18 <__swsetup_r+0xb0>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	e7f7      	b.n	8006f22 <__swsetup_r+0xba>
 8006f32:	bf00      	nop
 8006f34:	2000000c 	.word	0x2000000c
 8006f38:	08009bd4 	.word	0x08009bd4
 8006f3c:	08009bf4 	.word	0x08009bf4
 8006f40:	08009bb4 	.word	0x08009bb4

08006f44 <_close_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d06      	ldr	r5, [pc, #24]	; (8006f60 <_close_r+0x1c>)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f7fb fb03 	bl	800255a <_close>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_close_r+0x1a>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_close_r+0x1a>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	20000508 	.word	0x20000508

08006f64 <quorem>:
 8006f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f68:	6903      	ldr	r3, [r0, #16]
 8006f6a:	690c      	ldr	r4, [r1, #16]
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	4607      	mov	r7, r0
 8006f70:	f2c0 8081 	blt.w	8007076 <quorem+0x112>
 8006f74:	3c01      	subs	r4, #1
 8006f76:	f101 0814 	add.w	r8, r1, #20
 8006f7a:	f100 0514 	add.w	r5, r0, #20
 8006f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f98:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f9c:	d331      	bcc.n	8007002 <quorem+0x9e>
 8006f9e:	f04f 0e00 	mov.w	lr, #0
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	46ac      	mov	ip, r5
 8006fa6:	46f2      	mov	sl, lr
 8006fa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fac:	b293      	uxth	r3, r2
 8006fae:	fb06 e303 	mla	r3, r6, r3, lr
 8006fb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ebaa 0303 	sub.w	r3, sl, r3
 8006fbc:	f8dc a000 	ldr.w	sl, [ip]
 8006fc0:	0c12      	lsrs	r2, r2, #16
 8006fc2:	fa13 f38a 	uxtah	r3, r3, sl
 8006fc6:	fb06 e202 	mla	r2, r6, r2, lr
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	9b00      	ldr	r3, [sp, #0]
 8006fce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fd2:	b292      	uxth	r2, r2
 8006fd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fdc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006fe0:	4581      	cmp	r9, r0
 8006fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fe6:	f84c 3b04 	str.w	r3, [ip], #4
 8006fea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fee:	d2db      	bcs.n	8006fa8 <quorem+0x44>
 8006ff0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ff4:	b92b      	cbnz	r3, 8007002 <quorem+0x9e>
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	3b04      	subs	r3, #4
 8006ffa:	429d      	cmp	r5, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	d32e      	bcc.n	800705e <quorem+0xfa>
 8007000:	613c      	str	r4, [r7, #16]
 8007002:	4638      	mov	r0, r7
 8007004:	f001 faec 	bl	80085e0 <__mcmp>
 8007008:	2800      	cmp	r0, #0
 800700a:	db24      	blt.n	8007056 <quorem+0xf2>
 800700c:	3601      	adds	r6, #1
 800700e:	4628      	mov	r0, r5
 8007010:	f04f 0c00 	mov.w	ip, #0
 8007014:	f858 2b04 	ldr.w	r2, [r8], #4
 8007018:	f8d0 e000 	ldr.w	lr, [r0]
 800701c:	b293      	uxth	r3, r2
 800701e:	ebac 0303 	sub.w	r3, ip, r3
 8007022:	0c12      	lsrs	r2, r2, #16
 8007024:	fa13 f38e 	uxtah	r3, r3, lr
 8007028:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800702c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007030:	b29b      	uxth	r3, r3
 8007032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007036:	45c1      	cmp	r9, r8
 8007038:	f840 3b04 	str.w	r3, [r0], #4
 800703c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007040:	d2e8      	bcs.n	8007014 <quorem+0xb0>
 8007042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800704a:	b922      	cbnz	r2, 8007056 <quorem+0xf2>
 800704c:	3b04      	subs	r3, #4
 800704e:	429d      	cmp	r5, r3
 8007050:	461a      	mov	r2, r3
 8007052:	d30a      	bcc.n	800706a <quorem+0x106>
 8007054:	613c      	str	r4, [r7, #16]
 8007056:	4630      	mov	r0, r6
 8007058:	b003      	add	sp, #12
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	6812      	ldr	r2, [r2, #0]
 8007060:	3b04      	subs	r3, #4
 8007062:	2a00      	cmp	r2, #0
 8007064:	d1cc      	bne.n	8007000 <quorem+0x9c>
 8007066:	3c01      	subs	r4, #1
 8007068:	e7c7      	b.n	8006ffa <quorem+0x96>
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	3b04      	subs	r3, #4
 800706e:	2a00      	cmp	r2, #0
 8007070:	d1f0      	bne.n	8007054 <quorem+0xf0>
 8007072:	3c01      	subs	r4, #1
 8007074:	e7eb      	b.n	800704e <quorem+0xea>
 8007076:	2000      	movs	r0, #0
 8007078:	e7ee      	b.n	8007058 <quorem+0xf4>
 800707a:	0000      	movs	r0, r0
 800707c:	0000      	movs	r0, r0
	...

08007080 <_dtoa_r>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ed2d 8b04 	vpush	{d8-d9}
 8007088:	ec57 6b10 	vmov	r6, r7, d0
 800708c:	b093      	sub	sp, #76	; 0x4c
 800708e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007090:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007094:	9106      	str	r1, [sp, #24]
 8007096:	ee10 aa10 	vmov	sl, s0
 800709a:	4604      	mov	r4, r0
 800709c:	9209      	str	r2, [sp, #36]	; 0x24
 800709e:	930c      	str	r3, [sp, #48]	; 0x30
 80070a0:	46bb      	mov	fp, r7
 80070a2:	b975      	cbnz	r5, 80070c2 <_dtoa_r+0x42>
 80070a4:	2010      	movs	r0, #16
 80070a6:	f001 f811 	bl	80080cc <malloc>
 80070aa:	4602      	mov	r2, r0
 80070ac:	6260      	str	r0, [r4, #36]	; 0x24
 80070ae:	b920      	cbnz	r0, 80070ba <_dtoa_r+0x3a>
 80070b0:	4ba7      	ldr	r3, [pc, #668]	; (8007350 <_dtoa_r+0x2d0>)
 80070b2:	21ea      	movs	r1, #234	; 0xea
 80070b4:	48a7      	ldr	r0, [pc, #668]	; (8007354 <_dtoa_r+0x2d4>)
 80070b6:	f002 fa95 	bl	80095e4 <__assert_func>
 80070ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070be:	6005      	str	r5, [r0, #0]
 80070c0:	60c5      	str	r5, [r0, #12]
 80070c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	b151      	cbz	r1, 80070de <_dtoa_r+0x5e>
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	604a      	str	r2, [r1, #4]
 80070cc:	2301      	movs	r3, #1
 80070ce:	4093      	lsls	r3, r2
 80070d0:	608b      	str	r3, [r1, #8]
 80070d2:	4620      	mov	r0, r4
 80070d4:	f001 f842 	bl	800815c <_Bfree>
 80070d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	1e3b      	subs	r3, r7, #0
 80070e0:	bfaa      	itet	ge
 80070e2:	2300      	movge	r3, #0
 80070e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80070e8:	f8c8 3000 	strge.w	r3, [r8]
 80070ec:	4b9a      	ldr	r3, [pc, #616]	; (8007358 <_dtoa_r+0x2d8>)
 80070ee:	bfbc      	itt	lt
 80070f0:	2201      	movlt	r2, #1
 80070f2:	f8c8 2000 	strlt.w	r2, [r8]
 80070f6:	ea33 030b 	bics.w	r3, r3, fp
 80070fa:	d11b      	bne.n	8007134 <_dtoa_r+0xb4>
 80070fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007108:	4333      	orrs	r3, r6
 800710a:	f000 8592 	beq.w	8007c32 <_dtoa_r+0xbb2>
 800710e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007110:	b963      	cbnz	r3, 800712c <_dtoa_r+0xac>
 8007112:	4b92      	ldr	r3, [pc, #584]	; (800735c <_dtoa_r+0x2dc>)
 8007114:	e022      	b.n	800715c <_dtoa_r+0xdc>
 8007116:	4b92      	ldr	r3, [pc, #584]	; (8007360 <_dtoa_r+0x2e0>)
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	3308      	adds	r3, #8
 800711c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	9801      	ldr	r0, [sp, #4]
 8007122:	b013      	add	sp, #76	; 0x4c
 8007124:	ecbd 8b04 	vpop	{d8-d9}
 8007128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712c:	4b8b      	ldr	r3, [pc, #556]	; (800735c <_dtoa_r+0x2dc>)
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	3303      	adds	r3, #3
 8007132:	e7f3      	b.n	800711c <_dtoa_r+0x9c>
 8007134:	2200      	movs	r2, #0
 8007136:	2300      	movs	r3, #0
 8007138:	4650      	mov	r0, sl
 800713a:	4659      	mov	r1, fp
 800713c:	f7f9 fccc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007140:	ec4b ab19 	vmov	d9, sl, fp
 8007144:	4680      	mov	r8, r0
 8007146:	b158      	cbz	r0, 8007160 <_dtoa_r+0xe0>
 8007148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800714a:	2301      	movs	r3, #1
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 856b 	beq.w	8007c2c <_dtoa_r+0xbac>
 8007156:	4883      	ldr	r0, [pc, #524]	; (8007364 <_dtoa_r+0x2e4>)
 8007158:	6018      	str	r0, [r3, #0]
 800715a:	1e43      	subs	r3, r0, #1
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	e7df      	b.n	8007120 <_dtoa_r+0xa0>
 8007160:	ec4b ab10 	vmov	d0, sl, fp
 8007164:	aa10      	add	r2, sp, #64	; 0x40
 8007166:	a911      	add	r1, sp, #68	; 0x44
 8007168:	4620      	mov	r0, r4
 800716a:	f001 fadf 	bl	800872c <__d2b>
 800716e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007172:	ee08 0a10 	vmov	s16, r0
 8007176:	2d00      	cmp	r5, #0
 8007178:	f000 8084 	beq.w	8007284 <_dtoa_r+0x204>
 800717c:	ee19 3a90 	vmov	r3, s19
 8007180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007184:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007188:	4656      	mov	r6, sl
 800718a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800718e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007192:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007196:	4b74      	ldr	r3, [pc, #464]	; (8007368 <_dtoa_r+0x2e8>)
 8007198:	2200      	movs	r2, #0
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 f87b 	bl	8000298 <__aeabi_dsub>
 80071a2:	a365      	add	r3, pc, #404	; (adr r3, 8007338 <_dtoa_r+0x2b8>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f7f9 fa2e 	bl	8000608 <__aeabi_dmul>
 80071ac:	a364      	add	r3, pc, #400	; (adr r3, 8007340 <_dtoa_r+0x2c0>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 f873 	bl	800029c <__adddf3>
 80071b6:	4606      	mov	r6, r0
 80071b8:	4628      	mov	r0, r5
 80071ba:	460f      	mov	r7, r1
 80071bc:	f7f9 f9ba 	bl	8000534 <__aeabi_i2d>
 80071c0:	a361      	add	r3, pc, #388	; (adr r3, 8007348 <_dtoa_r+0x2c8>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f7f9 fa1f 	bl	8000608 <__aeabi_dmul>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 f863 	bl	800029c <__adddf3>
 80071d6:	4606      	mov	r6, r0
 80071d8:	460f      	mov	r7, r1
 80071da:	f7f9 fcc5 	bl	8000b68 <__aeabi_d2iz>
 80071de:	2200      	movs	r2, #0
 80071e0:	9000      	str	r0, [sp, #0]
 80071e2:	2300      	movs	r3, #0
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 fc80 	bl	8000aec <__aeabi_dcmplt>
 80071ec:	b150      	cbz	r0, 8007204 <_dtoa_r+0x184>
 80071ee:	9800      	ldr	r0, [sp, #0]
 80071f0:	f7f9 f9a0 	bl	8000534 <__aeabi_i2d>
 80071f4:	4632      	mov	r2, r6
 80071f6:	463b      	mov	r3, r7
 80071f8:	f7f9 fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80071fc:	b910      	cbnz	r0, 8007204 <_dtoa_r+0x184>
 80071fe:	9b00      	ldr	r3, [sp, #0]
 8007200:	3b01      	subs	r3, #1
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	9b00      	ldr	r3, [sp, #0]
 8007206:	2b16      	cmp	r3, #22
 8007208:	d85a      	bhi.n	80072c0 <_dtoa_r+0x240>
 800720a:	9a00      	ldr	r2, [sp, #0]
 800720c:	4b57      	ldr	r3, [pc, #348]	; (800736c <_dtoa_r+0x2ec>)
 800720e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	ec51 0b19 	vmov	r0, r1, d9
 800721a:	f7f9 fc67 	bl	8000aec <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	d050      	beq.n	80072c4 <_dtoa_r+0x244>
 8007222:	9b00      	ldr	r3, [sp, #0]
 8007224:	3b01      	subs	r3, #1
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2300      	movs	r3, #0
 800722a:	930b      	str	r3, [sp, #44]	; 0x2c
 800722c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800722e:	1b5d      	subs	r5, r3, r5
 8007230:	1e6b      	subs	r3, r5, #1
 8007232:	9305      	str	r3, [sp, #20]
 8007234:	bf45      	ittet	mi
 8007236:	f1c5 0301 	rsbmi	r3, r5, #1
 800723a:	9304      	strmi	r3, [sp, #16]
 800723c:	2300      	movpl	r3, #0
 800723e:	2300      	movmi	r3, #0
 8007240:	bf4c      	ite	mi
 8007242:	9305      	strmi	r3, [sp, #20]
 8007244:	9304      	strpl	r3, [sp, #16]
 8007246:	9b00      	ldr	r3, [sp, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	db3d      	blt.n	80072c8 <_dtoa_r+0x248>
 800724c:	9b05      	ldr	r3, [sp, #20]
 800724e:	9a00      	ldr	r2, [sp, #0]
 8007250:	920a      	str	r2, [sp, #40]	; 0x28
 8007252:	4413      	add	r3, r2
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	2300      	movs	r3, #0
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	9b06      	ldr	r3, [sp, #24]
 800725c:	2b09      	cmp	r3, #9
 800725e:	f200 8089 	bhi.w	8007374 <_dtoa_r+0x2f4>
 8007262:	2b05      	cmp	r3, #5
 8007264:	bfc4      	itt	gt
 8007266:	3b04      	subgt	r3, #4
 8007268:	9306      	strgt	r3, [sp, #24]
 800726a:	9b06      	ldr	r3, [sp, #24]
 800726c:	f1a3 0302 	sub.w	r3, r3, #2
 8007270:	bfcc      	ite	gt
 8007272:	2500      	movgt	r5, #0
 8007274:	2501      	movle	r5, #1
 8007276:	2b03      	cmp	r3, #3
 8007278:	f200 8087 	bhi.w	800738a <_dtoa_r+0x30a>
 800727c:	e8df f003 	tbb	[pc, r3]
 8007280:	59383a2d 	.word	0x59383a2d
 8007284:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007288:	441d      	add	r5, r3
 800728a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800728e:	2b20      	cmp	r3, #32
 8007290:	bfc1      	itttt	gt
 8007292:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007296:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800729a:	fa0b f303 	lslgt.w	r3, fp, r3
 800729e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072a2:	bfda      	itte	le
 80072a4:	f1c3 0320 	rsble	r3, r3, #32
 80072a8:	fa06 f003 	lslle.w	r0, r6, r3
 80072ac:	4318      	orrgt	r0, r3
 80072ae:	f7f9 f931 	bl	8000514 <__aeabi_ui2d>
 80072b2:	2301      	movs	r3, #1
 80072b4:	4606      	mov	r6, r0
 80072b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80072ba:	3d01      	subs	r5, #1
 80072bc:	930e      	str	r3, [sp, #56]	; 0x38
 80072be:	e76a      	b.n	8007196 <_dtoa_r+0x116>
 80072c0:	2301      	movs	r3, #1
 80072c2:	e7b2      	b.n	800722a <_dtoa_r+0x1aa>
 80072c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80072c6:	e7b1      	b.n	800722c <_dtoa_r+0x1ac>
 80072c8:	9b04      	ldr	r3, [sp, #16]
 80072ca:	9a00      	ldr	r2, [sp, #0]
 80072cc:	1a9b      	subs	r3, r3, r2
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	4253      	negs	r3, r2
 80072d2:	9307      	str	r3, [sp, #28]
 80072d4:	2300      	movs	r3, #0
 80072d6:	930a      	str	r3, [sp, #40]	; 0x28
 80072d8:	e7bf      	b.n	800725a <_dtoa_r+0x1da>
 80072da:	2300      	movs	r3, #0
 80072dc:	9308      	str	r3, [sp, #32]
 80072de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc55      	bgt.n	8007390 <_dtoa_r+0x310>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072ea:	461a      	mov	r2, r3
 80072ec:	9209      	str	r2, [sp, #36]	; 0x24
 80072ee:	e00c      	b.n	800730a <_dtoa_r+0x28a>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7f3      	b.n	80072dc <_dtoa_r+0x25c>
 80072f4:	2300      	movs	r3, #0
 80072f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f8:	9308      	str	r3, [sp, #32]
 80072fa:	9b00      	ldr	r3, [sp, #0]
 80072fc:	4413      	add	r3, r2
 80072fe:	9302      	str	r3, [sp, #8]
 8007300:	3301      	adds	r3, #1
 8007302:	2b01      	cmp	r3, #1
 8007304:	9303      	str	r3, [sp, #12]
 8007306:	bfb8      	it	lt
 8007308:	2301      	movlt	r3, #1
 800730a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800730c:	2200      	movs	r2, #0
 800730e:	6042      	str	r2, [r0, #4]
 8007310:	2204      	movs	r2, #4
 8007312:	f102 0614 	add.w	r6, r2, #20
 8007316:	429e      	cmp	r6, r3
 8007318:	6841      	ldr	r1, [r0, #4]
 800731a:	d93d      	bls.n	8007398 <_dtoa_r+0x318>
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fedd 	bl	80080dc <_Balloc>
 8007322:	9001      	str	r0, [sp, #4]
 8007324:	2800      	cmp	r0, #0
 8007326:	d13b      	bne.n	80073a0 <_dtoa_r+0x320>
 8007328:	4b11      	ldr	r3, [pc, #68]	; (8007370 <_dtoa_r+0x2f0>)
 800732a:	4602      	mov	r2, r0
 800732c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007330:	e6c0      	b.n	80070b4 <_dtoa_r+0x34>
 8007332:	2301      	movs	r3, #1
 8007334:	e7df      	b.n	80072f6 <_dtoa_r+0x276>
 8007336:	bf00      	nop
 8007338:	636f4361 	.word	0x636f4361
 800733c:	3fd287a7 	.word	0x3fd287a7
 8007340:	8b60c8b3 	.word	0x8b60c8b3
 8007344:	3fc68a28 	.word	0x3fc68a28
 8007348:	509f79fb 	.word	0x509f79fb
 800734c:	3fd34413 	.word	0x3fd34413
 8007350:	08009b2f 	.word	0x08009b2f
 8007354:	08009b46 	.word	0x08009b46
 8007358:	7ff00000 	.word	0x7ff00000
 800735c:	08009b2b 	.word	0x08009b2b
 8007360:	08009b22 	.word	0x08009b22
 8007364:	08009d82 	.word	0x08009d82
 8007368:	3ff80000 	.word	0x3ff80000
 800736c:	08009c98 	.word	0x08009c98
 8007370:	08009ba1 	.word	0x08009ba1
 8007374:	2501      	movs	r5, #1
 8007376:	2300      	movs	r3, #0
 8007378:	9306      	str	r3, [sp, #24]
 800737a:	9508      	str	r5, [sp, #32]
 800737c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007380:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007384:	2200      	movs	r2, #0
 8007386:	2312      	movs	r3, #18
 8007388:	e7b0      	b.n	80072ec <_dtoa_r+0x26c>
 800738a:	2301      	movs	r3, #1
 800738c:	9308      	str	r3, [sp, #32]
 800738e:	e7f5      	b.n	800737c <_dtoa_r+0x2fc>
 8007390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007392:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007396:	e7b8      	b.n	800730a <_dtoa_r+0x28a>
 8007398:	3101      	adds	r1, #1
 800739a:	6041      	str	r1, [r0, #4]
 800739c:	0052      	lsls	r2, r2, #1
 800739e:	e7b8      	b.n	8007312 <_dtoa_r+0x292>
 80073a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073a2:	9a01      	ldr	r2, [sp, #4]
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	2b0e      	cmp	r3, #14
 80073aa:	f200 809d 	bhi.w	80074e8 <_dtoa_r+0x468>
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	f000 809a 	beq.w	80074e8 <_dtoa_r+0x468>
 80073b4:	9b00      	ldr	r3, [sp, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dd32      	ble.n	8007420 <_dtoa_r+0x3a0>
 80073ba:	4ab7      	ldr	r2, [pc, #732]	; (8007698 <_dtoa_r+0x618>)
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073c8:	9b00      	ldr	r3, [sp, #0]
 80073ca:	05d8      	lsls	r0, r3, #23
 80073cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80073d0:	d516      	bpl.n	8007400 <_dtoa_r+0x380>
 80073d2:	4bb2      	ldr	r3, [pc, #712]	; (800769c <_dtoa_r+0x61c>)
 80073d4:	ec51 0b19 	vmov	r0, r1, d9
 80073d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073dc:	f7f9 fa3e 	bl	800085c <__aeabi_ddiv>
 80073e0:	f007 070f 	and.w	r7, r7, #15
 80073e4:	4682      	mov	sl, r0
 80073e6:	468b      	mov	fp, r1
 80073e8:	2503      	movs	r5, #3
 80073ea:	4eac      	ldr	r6, [pc, #688]	; (800769c <_dtoa_r+0x61c>)
 80073ec:	b957      	cbnz	r7, 8007404 <_dtoa_r+0x384>
 80073ee:	4642      	mov	r2, r8
 80073f0:	464b      	mov	r3, r9
 80073f2:	4650      	mov	r0, sl
 80073f4:	4659      	mov	r1, fp
 80073f6:	f7f9 fa31 	bl	800085c <__aeabi_ddiv>
 80073fa:	4682      	mov	sl, r0
 80073fc:	468b      	mov	fp, r1
 80073fe:	e028      	b.n	8007452 <_dtoa_r+0x3d2>
 8007400:	2502      	movs	r5, #2
 8007402:	e7f2      	b.n	80073ea <_dtoa_r+0x36a>
 8007404:	07f9      	lsls	r1, r7, #31
 8007406:	d508      	bpl.n	800741a <_dtoa_r+0x39a>
 8007408:	4640      	mov	r0, r8
 800740a:	4649      	mov	r1, r9
 800740c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007410:	f7f9 f8fa 	bl	8000608 <__aeabi_dmul>
 8007414:	3501      	adds	r5, #1
 8007416:	4680      	mov	r8, r0
 8007418:	4689      	mov	r9, r1
 800741a:	107f      	asrs	r7, r7, #1
 800741c:	3608      	adds	r6, #8
 800741e:	e7e5      	b.n	80073ec <_dtoa_r+0x36c>
 8007420:	f000 809b 	beq.w	800755a <_dtoa_r+0x4da>
 8007424:	9b00      	ldr	r3, [sp, #0]
 8007426:	4f9d      	ldr	r7, [pc, #628]	; (800769c <_dtoa_r+0x61c>)
 8007428:	425e      	negs	r6, r3
 800742a:	4b9b      	ldr	r3, [pc, #620]	; (8007698 <_dtoa_r+0x618>)
 800742c:	f006 020f 	and.w	r2, r6, #15
 8007430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	ec51 0b19 	vmov	r0, r1, d9
 800743c:	f7f9 f8e4 	bl	8000608 <__aeabi_dmul>
 8007440:	1136      	asrs	r6, r6, #4
 8007442:	4682      	mov	sl, r0
 8007444:	468b      	mov	fp, r1
 8007446:	2300      	movs	r3, #0
 8007448:	2502      	movs	r5, #2
 800744a:	2e00      	cmp	r6, #0
 800744c:	d17a      	bne.n	8007544 <_dtoa_r+0x4c4>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1d3      	bne.n	80073fa <_dtoa_r+0x37a>
 8007452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8082 	beq.w	800755e <_dtoa_r+0x4de>
 800745a:	4b91      	ldr	r3, [pc, #580]	; (80076a0 <_dtoa_r+0x620>)
 800745c:	2200      	movs	r2, #0
 800745e:	4650      	mov	r0, sl
 8007460:	4659      	mov	r1, fp
 8007462:	f7f9 fb43 	bl	8000aec <__aeabi_dcmplt>
 8007466:	2800      	cmp	r0, #0
 8007468:	d079      	beq.n	800755e <_dtoa_r+0x4de>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d076      	beq.n	800755e <_dtoa_r+0x4de>
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	dd36      	ble.n	80074e4 <_dtoa_r+0x464>
 8007476:	9b00      	ldr	r3, [sp, #0]
 8007478:	4650      	mov	r0, sl
 800747a:	4659      	mov	r1, fp
 800747c:	1e5f      	subs	r7, r3, #1
 800747e:	2200      	movs	r2, #0
 8007480:	4b88      	ldr	r3, [pc, #544]	; (80076a4 <_dtoa_r+0x624>)
 8007482:	f7f9 f8c1 	bl	8000608 <__aeabi_dmul>
 8007486:	9e02      	ldr	r6, [sp, #8]
 8007488:	4682      	mov	sl, r0
 800748a:	468b      	mov	fp, r1
 800748c:	3501      	adds	r5, #1
 800748e:	4628      	mov	r0, r5
 8007490:	f7f9 f850 	bl	8000534 <__aeabi_i2d>
 8007494:	4652      	mov	r2, sl
 8007496:	465b      	mov	r3, fp
 8007498:	f7f9 f8b6 	bl	8000608 <__aeabi_dmul>
 800749c:	4b82      	ldr	r3, [pc, #520]	; (80076a8 <_dtoa_r+0x628>)
 800749e:	2200      	movs	r2, #0
 80074a0:	f7f8 fefc 	bl	800029c <__adddf3>
 80074a4:	46d0      	mov	r8, sl
 80074a6:	46d9      	mov	r9, fp
 80074a8:	4682      	mov	sl, r0
 80074aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80074ae:	2e00      	cmp	r6, #0
 80074b0:	d158      	bne.n	8007564 <_dtoa_r+0x4e4>
 80074b2:	4b7e      	ldr	r3, [pc, #504]	; (80076ac <_dtoa_r+0x62c>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	4640      	mov	r0, r8
 80074b8:	4649      	mov	r1, r9
 80074ba:	f7f8 feed 	bl	8000298 <__aeabi_dsub>
 80074be:	4652      	mov	r2, sl
 80074c0:	465b      	mov	r3, fp
 80074c2:	4680      	mov	r8, r0
 80074c4:	4689      	mov	r9, r1
 80074c6:	f7f9 fb2f 	bl	8000b28 <__aeabi_dcmpgt>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f040 8295 	bne.w	80079fa <_dtoa_r+0x97a>
 80074d0:	4652      	mov	r2, sl
 80074d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074d6:	4640      	mov	r0, r8
 80074d8:	4649      	mov	r1, r9
 80074da:	f7f9 fb07 	bl	8000aec <__aeabi_dcmplt>
 80074de:	2800      	cmp	r0, #0
 80074e0:	f040 8289 	bne.w	80079f6 <_dtoa_r+0x976>
 80074e4:	ec5b ab19 	vmov	sl, fp, d9
 80074e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f2c0 8148 	blt.w	8007780 <_dtoa_r+0x700>
 80074f0:	9a00      	ldr	r2, [sp, #0]
 80074f2:	2a0e      	cmp	r2, #14
 80074f4:	f300 8144 	bgt.w	8007780 <_dtoa_r+0x700>
 80074f8:	4b67      	ldr	r3, [pc, #412]	; (8007698 <_dtoa_r+0x618>)
 80074fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	f280 80d5 	bge.w	80076b4 <_dtoa_r+0x634>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f300 80d1 	bgt.w	80076b4 <_dtoa_r+0x634>
 8007512:	f040 826f 	bne.w	80079f4 <_dtoa_r+0x974>
 8007516:	4b65      	ldr	r3, [pc, #404]	; (80076ac <_dtoa_r+0x62c>)
 8007518:	2200      	movs	r2, #0
 800751a:	4640      	mov	r0, r8
 800751c:	4649      	mov	r1, r9
 800751e:	f7f9 f873 	bl	8000608 <__aeabi_dmul>
 8007522:	4652      	mov	r2, sl
 8007524:	465b      	mov	r3, fp
 8007526:	f7f9 faf5 	bl	8000b14 <__aeabi_dcmpge>
 800752a:	9e03      	ldr	r6, [sp, #12]
 800752c:	4637      	mov	r7, r6
 800752e:	2800      	cmp	r0, #0
 8007530:	f040 8245 	bne.w	80079be <_dtoa_r+0x93e>
 8007534:	9d01      	ldr	r5, [sp, #4]
 8007536:	2331      	movs	r3, #49	; 0x31
 8007538:	f805 3b01 	strb.w	r3, [r5], #1
 800753c:	9b00      	ldr	r3, [sp, #0]
 800753e:	3301      	adds	r3, #1
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	e240      	b.n	80079c6 <_dtoa_r+0x946>
 8007544:	07f2      	lsls	r2, r6, #31
 8007546:	d505      	bpl.n	8007554 <_dtoa_r+0x4d4>
 8007548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754c:	f7f9 f85c 	bl	8000608 <__aeabi_dmul>
 8007550:	3501      	adds	r5, #1
 8007552:	2301      	movs	r3, #1
 8007554:	1076      	asrs	r6, r6, #1
 8007556:	3708      	adds	r7, #8
 8007558:	e777      	b.n	800744a <_dtoa_r+0x3ca>
 800755a:	2502      	movs	r5, #2
 800755c:	e779      	b.n	8007452 <_dtoa_r+0x3d2>
 800755e:	9f00      	ldr	r7, [sp, #0]
 8007560:	9e03      	ldr	r6, [sp, #12]
 8007562:	e794      	b.n	800748e <_dtoa_r+0x40e>
 8007564:	9901      	ldr	r1, [sp, #4]
 8007566:	4b4c      	ldr	r3, [pc, #304]	; (8007698 <_dtoa_r+0x618>)
 8007568:	4431      	add	r1, r6
 800756a:	910d      	str	r1, [sp, #52]	; 0x34
 800756c:	9908      	ldr	r1, [sp, #32]
 800756e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007572:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007576:	2900      	cmp	r1, #0
 8007578:	d043      	beq.n	8007602 <_dtoa_r+0x582>
 800757a:	494d      	ldr	r1, [pc, #308]	; (80076b0 <_dtoa_r+0x630>)
 800757c:	2000      	movs	r0, #0
 800757e:	f7f9 f96d 	bl	800085c <__aeabi_ddiv>
 8007582:	4652      	mov	r2, sl
 8007584:	465b      	mov	r3, fp
 8007586:	f7f8 fe87 	bl	8000298 <__aeabi_dsub>
 800758a:	9d01      	ldr	r5, [sp, #4]
 800758c:	4682      	mov	sl, r0
 800758e:	468b      	mov	fp, r1
 8007590:	4649      	mov	r1, r9
 8007592:	4640      	mov	r0, r8
 8007594:	f7f9 fae8 	bl	8000b68 <__aeabi_d2iz>
 8007598:	4606      	mov	r6, r0
 800759a:	f7f8 ffcb 	bl	8000534 <__aeabi_i2d>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	f7f8 fe77 	bl	8000298 <__aeabi_dsub>
 80075aa:	3630      	adds	r6, #48	; 0x30
 80075ac:	f805 6b01 	strb.w	r6, [r5], #1
 80075b0:	4652      	mov	r2, sl
 80075b2:	465b      	mov	r3, fp
 80075b4:	4680      	mov	r8, r0
 80075b6:	4689      	mov	r9, r1
 80075b8:	f7f9 fa98 	bl	8000aec <__aeabi_dcmplt>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d163      	bne.n	8007688 <_dtoa_r+0x608>
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	4936      	ldr	r1, [pc, #216]	; (80076a0 <_dtoa_r+0x620>)
 80075c6:	2000      	movs	r0, #0
 80075c8:	f7f8 fe66 	bl	8000298 <__aeabi_dsub>
 80075cc:	4652      	mov	r2, sl
 80075ce:	465b      	mov	r3, fp
 80075d0:	f7f9 fa8c 	bl	8000aec <__aeabi_dcmplt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f040 80b5 	bne.w	8007744 <_dtoa_r+0x6c4>
 80075da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075dc:	429d      	cmp	r5, r3
 80075de:	d081      	beq.n	80074e4 <_dtoa_r+0x464>
 80075e0:	4b30      	ldr	r3, [pc, #192]	; (80076a4 <_dtoa_r+0x624>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	4650      	mov	r0, sl
 80075e6:	4659      	mov	r1, fp
 80075e8:	f7f9 f80e 	bl	8000608 <__aeabi_dmul>
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <_dtoa_r+0x624>)
 80075ee:	4682      	mov	sl, r0
 80075f0:	468b      	mov	fp, r1
 80075f2:	4640      	mov	r0, r8
 80075f4:	4649      	mov	r1, r9
 80075f6:	2200      	movs	r2, #0
 80075f8:	f7f9 f806 	bl	8000608 <__aeabi_dmul>
 80075fc:	4680      	mov	r8, r0
 80075fe:	4689      	mov	r9, r1
 8007600:	e7c6      	b.n	8007590 <_dtoa_r+0x510>
 8007602:	4650      	mov	r0, sl
 8007604:	4659      	mov	r1, fp
 8007606:	f7f8 ffff 	bl	8000608 <__aeabi_dmul>
 800760a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800760c:	9d01      	ldr	r5, [sp, #4]
 800760e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007610:	4682      	mov	sl, r0
 8007612:	468b      	mov	fp, r1
 8007614:	4649      	mov	r1, r9
 8007616:	4640      	mov	r0, r8
 8007618:	f7f9 faa6 	bl	8000b68 <__aeabi_d2iz>
 800761c:	4606      	mov	r6, r0
 800761e:	f7f8 ff89 	bl	8000534 <__aeabi_i2d>
 8007622:	3630      	adds	r6, #48	; 0x30
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f8 fe34 	bl	8000298 <__aeabi_dsub>
 8007630:	f805 6b01 	strb.w	r6, [r5], #1
 8007634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007636:	429d      	cmp	r5, r3
 8007638:	4680      	mov	r8, r0
 800763a:	4689      	mov	r9, r1
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	d124      	bne.n	800768c <_dtoa_r+0x60c>
 8007642:	4b1b      	ldr	r3, [pc, #108]	; (80076b0 <_dtoa_r+0x630>)
 8007644:	4650      	mov	r0, sl
 8007646:	4659      	mov	r1, fp
 8007648:	f7f8 fe28 	bl	800029c <__adddf3>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4640      	mov	r0, r8
 8007652:	4649      	mov	r1, r9
 8007654:	f7f9 fa68 	bl	8000b28 <__aeabi_dcmpgt>
 8007658:	2800      	cmp	r0, #0
 800765a:	d173      	bne.n	8007744 <_dtoa_r+0x6c4>
 800765c:	4652      	mov	r2, sl
 800765e:	465b      	mov	r3, fp
 8007660:	4913      	ldr	r1, [pc, #76]	; (80076b0 <_dtoa_r+0x630>)
 8007662:	2000      	movs	r0, #0
 8007664:	f7f8 fe18 	bl	8000298 <__aeabi_dsub>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4640      	mov	r0, r8
 800766e:	4649      	mov	r1, r9
 8007670:	f7f9 fa3c 	bl	8000aec <__aeabi_dcmplt>
 8007674:	2800      	cmp	r0, #0
 8007676:	f43f af35 	beq.w	80074e4 <_dtoa_r+0x464>
 800767a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800767c:	1e6b      	subs	r3, r5, #1
 800767e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007680:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007684:	2b30      	cmp	r3, #48	; 0x30
 8007686:	d0f8      	beq.n	800767a <_dtoa_r+0x5fa>
 8007688:	9700      	str	r7, [sp, #0]
 800768a:	e049      	b.n	8007720 <_dtoa_r+0x6a0>
 800768c:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <_dtoa_r+0x624>)
 800768e:	f7f8 ffbb 	bl	8000608 <__aeabi_dmul>
 8007692:	4680      	mov	r8, r0
 8007694:	4689      	mov	r9, r1
 8007696:	e7bd      	b.n	8007614 <_dtoa_r+0x594>
 8007698:	08009c98 	.word	0x08009c98
 800769c:	08009c70 	.word	0x08009c70
 80076a0:	3ff00000 	.word	0x3ff00000
 80076a4:	40240000 	.word	0x40240000
 80076a8:	401c0000 	.word	0x401c0000
 80076ac:	40140000 	.word	0x40140000
 80076b0:	3fe00000 	.word	0x3fe00000
 80076b4:	9d01      	ldr	r5, [sp, #4]
 80076b6:	4656      	mov	r6, sl
 80076b8:	465f      	mov	r7, fp
 80076ba:	4642      	mov	r2, r8
 80076bc:	464b      	mov	r3, r9
 80076be:	4630      	mov	r0, r6
 80076c0:	4639      	mov	r1, r7
 80076c2:	f7f9 f8cb 	bl	800085c <__aeabi_ddiv>
 80076c6:	f7f9 fa4f 	bl	8000b68 <__aeabi_d2iz>
 80076ca:	4682      	mov	sl, r0
 80076cc:	f7f8 ff32 	bl	8000534 <__aeabi_i2d>
 80076d0:	4642      	mov	r2, r8
 80076d2:	464b      	mov	r3, r9
 80076d4:	f7f8 ff98 	bl	8000608 <__aeabi_dmul>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4630      	mov	r0, r6
 80076de:	4639      	mov	r1, r7
 80076e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80076e4:	f7f8 fdd8 	bl	8000298 <__aeabi_dsub>
 80076e8:	f805 6b01 	strb.w	r6, [r5], #1
 80076ec:	9e01      	ldr	r6, [sp, #4]
 80076ee:	9f03      	ldr	r7, [sp, #12]
 80076f0:	1bae      	subs	r6, r5, r6
 80076f2:	42b7      	cmp	r7, r6
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	d135      	bne.n	8007766 <_dtoa_r+0x6e6>
 80076fa:	f7f8 fdcf 	bl	800029c <__adddf3>
 80076fe:	4642      	mov	r2, r8
 8007700:	464b      	mov	r3, r9
 8007702:	4606      	mov	r6, r0
 8007704:	460f      	mov	r7, r1
 8007706:	f7f9 fa0f 	bl	8000b28 <__aeabi_dcmpgt>
 800770a:	b9d0      	cbnz	r0, 8007742 <_dtoa_r+0x6c2>
 800770c:	4642      	mov	r2, r8
 800770e:	464b      	mov	r3, r9
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	f7f9 f9e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007718:	b110      	cbz	r0, 8007720 <_dtoa_r+0x6a0>
 800771a:	f01a 0f01 	tst.w	sl, #1
 800771e:	d110      	bne.n	8007742 <_dtoa_r+0x6c2>
 8007720:	4620      	mov	r0, r4
 8007722:	ee18 1a10 	vmov	r1, s16
 8007726:	f000 fd19 	bl	800815c <_Bfree>
 800772a:	2300      	movs	r3, #0
 800772c:	9800      	ldr	r0, [sp, #0]
 800772e:	702b      	strb	r3, [r5, #0]
 8007730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007732:	3001      	adds	r0, #1
 8007734:	6018      	str	r0, [r3, #0]
 8007736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007738:	2b00      	cmp	r3, #0
 800773a:	f43f acf1 	beq.w	8007120 <_dtoa_r+0xa0>
 800773e:	601d      	str	r5, [r3, #0]
 8007740:	e4ee      	b.n	8007120 <_dtoa_r+0xa0>
 8007742:	9f00      	ldr	r7, [sp, #0]
 8007744:	462b      	mov	r3, r5
 8007746:	461d      	mov	r5, r3
 8007748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800774c:	2a39      	cmp	r2, #57	; 0x39
 800774e:	d106      	bne.n	800775e <_dtoa_r+0x6de>
 8007750:	9a01      	ldr	r2, [sp, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d1f7      	bne.n	8007746 <_dtoa_r+0x6c6>
 8007756:	9901      	ldr	r1, [sp, #4]
 8007758:	2230      	movs	r2, #48	; 0x30
 800775a:	3701      	adds	r7, #1
 800775c:	700a      	strb	r2, [r1, #0]
 800775e:	781a      	ldrb	r2, [r3, #0]
 8007760:	3201      	adds	r2, #1
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e790      	b.n	8007688 <_dtoa_r+0x608>
 8007766:	4ba6      	ldr	r3, [pc, #664]	; (8007a00 <_dtoa_r+0x980>)
 8007768:	2200      	movs	r2, #0
 800776a:	f7f8 ff4d 	bl	8000608 <__aeabi_dmul>
 800776e:	2200      	movs	r2, #0
 8007770:	2300      	movs	r3, #0
 8007772:	4606      	mov	r6, r0
 8007774:	460f      	mov	r7, r1
 8007776:	f7f9 f9af 	bl	8000ad8 <__aeabi_dcmpeq>
 800777a:	2800      	cmp	r0, #0
 800777c:	d09d      	beq.n	80076ba <_dtoa_r+0x63a>
 800777e:	e7cf      	b.n	8007720 <_dtoa_r+0x6a0>
 8007780:	9a08      	ldr	r2, [sp, #32]
 8007782:	2a00      	cmp	r2, #0
 8007784:	f000 80d7 	beq.w	8007936 <_dtoa_r+0x8b6>
 8007788:	9a06      	ldr	r2, [sp, #24]
 800778a:	2a01      	cmp	r2, #1
 800778c:	f300 80ba 	bgt.w	8007904 <_dtoa_r+0x884>
 8007790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007792:	2a00      	cmp	r2, #0
 8007794:	f000 80b2 	beq.w	80078fc <_dtoa_r+0x87c>
 8007798:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800779c:	9e07      	ldr	r6, [sp, #28]
 800779e:	9d04      	ldr	r5, [sp, #16]
 80077a0:	9a04      	ldr	r2, [sp, #16]
 80077a2:	441a      	add	r2, r3
 80077a4:	9204      	str	r2, [sp, #16]
 80077a6:	9a05      	ldr	r2, [sp, #20]
 80077a8:	2101      	movs	r1, #1
 80077aa:	441a      	add	r2, r3
 80077ac:	4620      	mov	r0, r4
 80077ae:	9205      	str	r2, [sp, #20]
 80077b0:	f000 fd8c 	bl	80082cc <__i2b>
 80077b4:	4607      	mov	r7, r0
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	dd0c      	ble.n	80077d4 <_dtoa_r+0x754>
 80077ba:	9b05      	ldr	r3, [sp, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	dd09      	ble.n	80077d4 <_dtoa_r+0x754>
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	9a04      	ldr	r2, [sp, #16]
 80077c4:	bfa8      	it	ge
 80077c6:	462b      	movge	r3, r5
 80077c8:	1ad2      	subs	r2, r2, r3
 80077ca:	9204      	str	r2, [sp, #16]
 80077cc:	9a05      	ldr	r2, [sp, #20]
 80077ce:	1aed      	subs	r5, r5, r3
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	9305      	str	r3, [sp, #20]
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	b31b      	cbz	r3, 8007820 <_dtoa_r+0x7a0>
 80077d8:	9b08      	ldr	r3, [sp, #32]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 80af 	beq.w	800793e <_dtoa_r+0x8be>
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	dd13      	ble.n	800780c <_dtoa_r+0x78c>
 80077e4:	4639      	mov	r1, r7
 80077e6:	4632      	mov	r2, r6
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fe2f 	bl	800844c <__pow5mult>
 80077ee:	ee18 2a10 	vmov	r2, s16
 80077f2:	4601      	mov	r1, r0
 80077f4:	4607      	mov	r7, r0
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 fd7e 	bl	80082f8 <__multiply>
 80077fc:	ee18 1a10 	vmov	r1, s16
 8007800:	4680      	mov	r8, r0
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fcaa 	bl	800815c <_Bfree>
 8007808:	ee08 8a10 	vmov	s16, r8
 800780c:	9b07      	ldr	r3, [sp, #28]
 800780e:	1b9a      	subs	r2, r3, r6
 8007810:	d006      	beq.n	8007820 <_dtoa_r+0x7a0>
 8007812:	ee18 1a10 	vmov	r1, s16
 8007816:	4620      	mov	r0, r4
 8007818:	f000 fe18 	bl	800844c <__pow5mult>
 800781c:	ee08 0a10 	vmov	s16, r0
 8007820:	2101      	movs	r1, #1
 8007822:	4620      	mov	r0, r4
 8007824:	f000 fd52 	bl	80082cc <__i2b>
 8007828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782a:	2b00      	cmp	r3, #0
 800782c:	4606      	mov	r6, r0
 800782e:	f340 8088 	ble.w	8007942 <_dtoa_r+0x8c2>
 8007832:	461a      	mov	r2, r3
 8007834:	4601      	mov	r1, r0
 8007836:	4620      	mov	r0, r4
 8007838:	f000 fe08 	bl	800844c <__pow5mult>
 800783c:	9b06      	ldr	r3, [sp, #24]
 800783e:	2b01      	cmp	r3, #1
 8007840:	4606      	mov	r6, r0
 8007842:	f340 8081 	ble.w	8007948 <_dtoa_r+0x8c8>
 8007846:	f04f 0800 	mov.w	r8, #0
 800784a:	6933      	ldr	r3, [r6, #16]
 800784c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007850:	6918      	ldr	r0, [r3, #16]
 8007852:	f000 fceb 	bl	800822c <__hi0bits>
 8007856:	f1c0 0020 	rsb	r0, r0, #32
 800785a:	9b05      	ldr	r3, [sp, #20]
 800785c:	4418      	add	r0, r3
 800785e:	f010 001f 	ands.w	r0, r0, #31
 8007862:	f000 8092 	beq.w	800798a <_dtoa_r+0x90a>
 8007866:	f1c0 0320 	rsb	r3, r0, #32
 800786a:	2b04      	cmp	r3, #4
 800786c:	f340 808a 	ble.w	8007984 <_dtoa_r+0x904>
 8007870:	f1c0 001c 	rsb	r0, r0, #28
 8007874:	9b04      	ldr	r3, [sp, #16]
 8007876:	4403      	add	r3, r0
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	4403      	add	r3, r0
 800787e:	4405      	add	r5, r0
 8007880:	9305      	str	r3, [sp, #20]
 8007882:	9b04      	ldr	r3, [sp, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	dd07      	ble.n	8007898 <_dtoa_r+0x818>
 8007888:	ee18 1a10 	vmov	r1, s16
 800788c:	461a      	mov	r2, r3
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fe36 	bl	8008500 <__lshift>
 8007894:	ee08 0a10 	vmov	s16, r0
 8007898:	9b05      	ldr	r3, [sp, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd05      	ble.n	80078aa <_dtoa_r+0x82a>
 800789e:	4631      	mov	r1, r6
 80078a0:	461a      	mov	r2, r3
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 fe2c 	bl	8008500 <__lshift>
 80078a8:	4606      	mov	r6, r0
 80078aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d06e      	beq.n	800798e <_dtoa_r+0x90e>
 80078b0:	ee18 0a10 	vmov	r0, s16
 80078b4:	4631      	mov	r1, r6
 80078b6:	f000 fe93 	bl	80085e0 <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	da67      	bge.n	800798e <_dtoa_r+0x90e>
 80078be:	9b00      	ldr	r3, [sp, #0]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	ee18 1a10 	vmov	r1, s16
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	220a      	movs	r2, #10
 80078ca:	2300      	movs	r3, #0
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 fc67 	bl	80081a0 <__multadd>
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	ee08 0a10 	vmov	s16, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 81b1 	beq.w	8007c40 <_dtoa_r+0xbc0>
 80078de:	2300      	movs	r3, #0
 80078e0:	4639      	mov	r1, r7
 80078e2:	220a      	movs	r2, #10
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fc5b 	bl	80081a0 <__multadd>
 80078ea:	9b02      	ldr	r3, [sp, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	4607      	mov	r7, r0
 80078f0:	f300 808e 	bgt.w	8007a10 <_dtoa_r+0x990>
 80078f4:	9b06      	ldr	r3, [sp, #24]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	dc51      	bgt.n	800799e <_dtoa_r+0x91e>
 80078fa:	e089      	b.n	8007a10 <_dtoa_r+0x990>
 80078fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007902:	e74b      	b.n	800779c <_dtoa_r+0x71c>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	1e5e      	subs	r6, r3, #1
 8007908:	9b07      	ldr	r3, [sp, #28]
 800790a:	42b3      	cmp	r3, r6
 800790c:	bfbf      	itttt	lt
 800790e:	9b07      	ldrlt	r3, [sp, #28]
 8007910:	9607      	strlt	r6, [sp, #28]
 8007912:	1af2      	sublt	r2, r6, r3
 8007914:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007916:	bfb6      	itet	lt
 8007918:	189b      	addlt	r3, r3, r2
 800791a:	1b9e      	subge	r6, r3, r6
 800791c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	bfb8      	it	lt
 8007922:	2600      	movlt	r6, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	bfb7      	itett	lt
 8007928:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800792c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007930:	1a9d      	sublt	r5, r3, r2
 8007932:	2300      	movlt	r3, #0
 8007934:	e734      	b.n	80077a0 <_dtoa_r+0x720>
 8007936:	9e07      	ldr	r6, [sp, #28]
 8007938:	9d04      	ldr	r5, [sp, #16]
 800793a:	9f08      	ldr	r7, [sp, #32]
 800793c:	e73b      	b.n	80077b6 <_dtoa_r+0x736>
 800793e:	9a07      	ldr	r2, [sp, #28]
 8007940:	e767      	b.n	8007812 <_dtoa_r+0x792>
 8007942:	9b06      	ldr	r3, [sp, #24]
 8007944:	2b01      	cmp	r3, #1
 8007946:	dc18      	bgt.n	800797a <_dtoa_r+0x8fa>
 8007948:	f1ba 0f00 	cmp.w	sl, #0
 800794c:	d115      	bne.n	800797a <_dtoa_r+0x8fa>
 800794e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007952:	b993      	cbnz	r3, 800797a <_dtoa_r+0x8fa>
 8007954:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007958:	0d1b      	lsrs	r3, r3, #20
 800795a:	051b      	lsls	r3, r3, #20
 800795c:	b183      	cbz	r3, 8007980 <_dtoa_r+0x900>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	9b05      	ldr	r3, [sp, #20]
 8007966:	3301      	adds	r3, #1
 8007968:	9305      	str	r3, [sp, #20]
 800796a:	f04f 0801 	mov.w	r8, #1
 800796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007970:	2b00      	cmp	r3, #0
 8007972:	f47f af6a 	bne.w	800784a <_dtoa_r+0x7ca>
 8007976:	2001      	movs	r0, #1
 8007978:	e76f      	b.n	800785a <_dtoa_r+0x7da>
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	e7f6      	b.n	800796e <_dtoa_r+0x8ee>
 8007980:	4698      	mov	r8, r3
 8007982:	e7f4      	b.n	800796e <_dtoa_r+0x8ee>
 8007984:	f43f af7d 	beq.w	8007882 <_dtoa_r+0x802>
 8007988:	4618      	mov	r0, r3
 800798a:	301c      	adds	r0, #28
 800798c:	e772      	b.n	8007874 <_dtoa_r+0x7f4>
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	dc37      	bgt.n	8007a04 <_dtoa_r+0x984>
 8007994:	9b06      	ldr	r3, [sp, #24]
 8007996:	2b02      	cmp	r3, #2
 8007998:	dd34      	ble.n	8007a04 <_dtoa_r+0x984>
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	9302      	str	r3, [sp, #8]
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	b96b      	cbnz	r3, 80079be <_dtoa_r+0x93e>
 80079a2:	4631      	mov	r1, r6
 80079a4:	2205      	movs	r2, #5
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 fbfa 	bl	80081a0 <__multadd>
 80079ac:	4601      	mov	r1, r0
 80079ae:	4606      	mov	r6, r0
 80079b0:	ee18 0a10 	vmov	r0, s16
 80079b4:	f000 fe14 	bl	80085e0 <__mcmp>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	f73f adbb 	bgt.w	8007534 <_dtoa_r+0x4b4>
 80079be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c0:	9d01      	ldr	r5, [sp, #4]
 80079c2:	43db      	mvns	r3, r3
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	f04f 0800 	mov.w	r8, #0
 80079ca:	4631      	mov	r1, r6
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fbc5 	bl	800815c <_Bfree>
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	f43f aea4 	beq.w	8007720 <_dtoa_r+0x6a0>
 80079d8:	f1b8 0f00 	cmp.w	r8, #0
 80079dc:	d005      	beq.n	80079ea <_dtoa_r+0x96a>
 80079de:	45b8      	cmp	r8, r7
 80079e0:	d003      	beq.n	80079ea <_dtoa_r+0x96a>
 80079e2:	4641      	mov	r1, r8
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fbb9 	bl	800815c <_Bfree>
 80079ea:	4639      	mov	r1, r7
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fbb5 	bl	800815c <_Bfree>
 80079f2:	e695      	b.n	8007720 <_dtoa_r+0x6a0>
 80079f4:	2600      	movs	r6, #0
 80079f6:	4637      	mov	r7, r6
 80079f8:	e7e1      	b.n	80079be <_dtoa_r+0x93e>
 80079fa:	9700      	str	r7, [sp, #0]
 80079fc:	4637      	mov	r7, r6
 80079fe:	e599      	b.n	8007534 <_dtoa_r+0x4b4>
 8007a00:	40240000 	.word	0x40240000
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 80ca 	beq.w	8007ba0 <_dtoa_r+0xb20>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	9302      	str	r3, [sp, #8]
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	dd05      	ble.n	8007a20 <_dtoa_r+0x9a0>
 8007a14:	4639      	mov	r1, r7
 8007a16:	462a      	mov	r2, r5
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 fd71 	bl	8008500 <__lshift>
 8007a1e:	4607      	mov	r7, r0
 8007a20:	f1b8 0f00 	cmp.w	r8, #0
 8007a24:	d05b      	beq.n	8007ade <_dtoa_r+0xa5e>
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fb57 	bl	80080dc <_Balloc>
 8007a2e:	4605      	mov	r5, r0
 8007a30:	b928      	cbnz	r0, 8007a3e <_dtoa_r+0x9be>
 8007a32:	4b87      	ldr	r3, [pc, #540]	; (8007c50 <_dtoa_r+0xbd0>)
 8007a34:	4602      	mov	r2, r0
 8007a36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a3a:	f7ff bb3b 	b.w	80070b4 <_dtoa_r+0x34>
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	3202      	adds	r2, #2
 8007a42:	0092      	lsls	r2, r2, #2
 8007a44:	f107 010c 	add.w	r1, r7, #12
 8007a48:	300c      	adds	r0, #12
 8007a4a:	f7fe fc29 	bl	80062a0 <memcpy>
 8007a4e:	2201      	movs	r2, #1
 8007a50:	4629      	mov	r1, r5
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 fd54 	bl	8008500 <__lshift>
 8007a58:	9b01      	ldr	r3, [sp, #4]
 8007a5a:	f103 0901 	add.w	r9, r3, #1
 8007a5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a62:	4413      	add	r3, r2
 8007a64:	9305      	str	r3, [sp, #20]
 8007a66:	f00a 0301 	and.w	r3, sl, #1
 8007a6a:	46b8      	mov	r8, r7
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	4607      	mov	r7, r0
 8007a70:	4631      	mov	r1, r6
 8007a72:	ee18 0a10 	vmov	r0, s16
 8007a76:	f7ff fa75 	bl	8006f64 <quorem>
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	9002      	str	r0, [sp, #8]
 8007a7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a82:	ee18 0a10 	vmov	r0, s16
 8007a86:	f000 fdab 	bl	80085e0 <__mcmp>
 8007a8a:	463a      	mov	r2, r7
 8007a8c:	9003      	str	r0, [sp, #12]
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fdc1 	bl	8008618 <__mdiff>
 8007a96:	68c2      	ldr	r2, [r0, #12]
 8007a98:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	bb02      	cbnz	r2, 8007ae2 <_dtoa_r+0xa62>
 8007aa0:	4601      	mov	r1, r0
 8007aa2:	ee18 0a10 	vmov	r0, s16
 8007aa6:	f000 fd9b 	bl	80085e0 <__mcmp>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	4629      	mov	r1, r5
 8007aae:	4620      	mov	r0, r4
 8007ab0:	9207      	str	r2, [sp, #28]
 8007ab2:	f000 fb53 	bl	800815c <_Bfree>
 8007ab6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007aba:	ea43 0102 	orr.w	r1, r3, r2
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	464d      	mov	r5, r9
 8007ac4:	d10f      	bne.n	8007ae6 <_dtoa_r+0xa66>
 8007ac6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aca:	d02a      	beq.n	8007b22 <_dtoa_r+0xaa2>
 8007acc:	9b03      	ldr	r3, [sp, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dd02      	ble.n	8007ad8 <_dtoa_r+0xa58>
 8007ad2:	9b02      	ldr	r3, [sp, #8]
 8007ad4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007ad8:	f88b a000 	strb.w	sl, [fp]
 8007adc:	e775      	b.n	80079ca <_dtoa_r+0x94a>
 8007ade:	4638      	mov	r0, r7
 8007ae0:	e7ba      	b.n	8007a58 <_dtoa_r+0x9d8>
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	e7e2      	b.n	8007aac <_dtoa_r+0xa2c>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	db04      	blt.n	8007af6 <_dtoa_r+0xa76>
 8007aec:	9906      	ldr	r1, [sp, #24]
 8007aee:	430b      	orrs	r3, r1
 8007af0:	9904      	ldr	r1, [sp, #16]
 8007af2:	430b      	orrs	r3, r1
 8007af4:	d122      	bne.n	8007b3c <_dtoa_r+0xabc>
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	ddee      	ble.n	8007ad8 <_dtoa_r+0xa58>
 8007afa:	ee18 1a10 	vmov	r1, s16
 8007afe:	2201      	movs	r2, #1
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 fcfd 	bl	8008500 <__lshift>
 8007b06:	4631      	mov	r1, r6
 8007b08:	ee08 0a10 	vmov	s16, r0
 8007b0c:	f000 fd68 	bl	80085e0 <__mcmp>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	dc03      	bgt.n	8007b1c <_dtoa_r+0xa9c>
 8007b14:	d1e0      	bne.n	8007ad8 <_dtoa_r+0xa58>
 8007b16:	f01a 0f01 	tst.w	sl, #1
 8007b1a:	d0dd      	beq.n	8007ad8 <_dtoa_r+0xa58>
 8007b1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b20:	d1d7      	bne.n	8007ad2 <_dtoa_r+0xa52>
 8007b22:	2339      	movs	r3, #57	; 0x39
 8007b24:	f88b 3000 	strb.w	r3, [fp]
 8007b28:	462b      	mov	r3, r5
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b32:	2a39      	cmp	r2, #57	; 0x39
 8007b34:	d071      	beq.n	8007c1a <_dtoa_r+0xb9a>
 8007b36:	3201      	adds	r2, #1
 8007b38:	701a      	strb	r2, [r3, #0]
 8007b3a:	e746      	b.n	80079ca <_dtoa_r+0x94a>
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	dd07      	ble.n	8007b50 <_dtoa_r+0xad0>
 8007b40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b44:	d0ed      	beq.n	8007b22 <_dtoa_r+0xaa2>
 8007b46:	f10a 0301 	add.w	r3, sl, #1
 8007b4a:	f88b 3000 	strb.w	r3, [fp]
 8007b4e:	e73c      	b.n	80079ca <_dtoa_r+0x94a>
 8007b50:	9b05      	ldr	r3, [sp, #20]
 8007b52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007b56:	4599      	cmp	r9, r3
 8007b58:	d047      	beq.n	8007bea <_dtoa_r+0xb6a>
 8007b5a:	ee18 1a10 	vmov	r1, s16
 8007b5e:	2300      	movs	r3, #0
 8007b60:	220a      	movs	r2, #10
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 fb1c 	bl	80081a0 <__multadd>
 8007b68:	45b8      	cmp	r8, r7
 8007b6a:	ee08 0a10 	vmov	s16, r0
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	f04f 020a 	mov.w	r2, #10
 8007b76:	4641      	mov	r1, r8
 8007b78:	4620      	mov	r0, r4
 8007b7a:	d106      	bne.n	8007b8a <_dtoa_r+0xb0a>
 8007b7c:	f000 fb10 	bl	80081a0 <__multadd>
 8007b80:	4680      	mov	r8, r0
 8007b82:	4607      	mov	r7, r0
 8007b84:	f109 0901 	add.w	r9, r9, #1
 8007b88:	e772      	b.n	8007a70 <_dtoa_r+0x9f0>
 8007b8a:	f000 fb09 	bl	80081a0 <__multadd>
 8007b8e:	4639      	mov	r1, r7
 8007b90:	4680      	mov	r8, r0
 8007b92:	2300      	movs	r3, #0
 8007b94:	220a      	movs	r2, #10
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 fb02 	bl	80081a0 <__multadd>
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	e7f1      	b.n	8007b84 <_dtoa_r+0xb04>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	9302      	str	r3, [sp, #8]
 8007ba4:	9d01      	ldr	r5, [sp, #4]
 8007ba6:	ee18 0a10 	vmov	r0, s16
 8007baa:	4631      	mov	r1, r6
 8007bac:	f7ff f9da 	bl	8006f64 <quorem>
 8007bb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	f805 ab01 	strb.w	sl, [r5], #1
 8007bba:	1aea      	subs	r2, r5, r3
 8007bbc:	9b02      	ldr	r3, [sp, #8]
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	dd09      	ble.n	8007bd6 <_dtoa_r+0xb56>
 8007bc2:	ee18 1a10 	vmov	r1, s16
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	220a      	movs	r2, #10
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fae8 	bl	80081a0 <__multadd>
 8007bd0:	ee08 0a10 	vmov	s16, r0
 8007bd4:	e7e7      	b.n	8007ba6 <_dtoa_r+0xb26>
 8007bd6:	9b02      	ldr	r3, [sp, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bfc8      	it	gt
 8007bdc:	461d      	movgt	r5, r3
 8007bde:	9b01      	ldr	r3, [sp, #4]
 8007be0:	bfd8      	it	le
 8007be2:	2501      	movle	r5, #1
 8007be4:	441d      	add	r5, r3
 8007be6:	f04f 0800 	mov.w	r8, #0
 8007bea:	ee18 1a10 	vmov	r1, s16
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fc85 	bl	8008500 <__lshift>
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	ee08 0a10 	vmov	s16, r0
 8007bfc:	f000 fcf0 	bl	80085e0 <__mcmp>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	dc91      	bgt.n	8007b28 <_dtoa_r+0xaa8>
 8007c04:	d102      	bne.n	8007c0c <_dtoa_r+0xb8c>
 8007c06:	f01a 0f01 	tst.w	sl, #1
 8007c0a:	d18d      	bne.n	8007b28 <_dtoa_r+0xaa8>
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	461d      	mov	r5, r3
 8007c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c14:	2a30      	cmp	r2, #48	; 0x30
 8007c16:	d0fa      	beq.n	8007c0e <_dtoa_r+0xb8e>
 8007c18:	e6d7      	b.n	80079ca <_dtoa_r+0x94a>
 8007c1a:	9a01      	ldr	r2, [sp, #4]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d184      	bne.n	8007b2a <_dtoa_r+0xaaa>
 8007c20:	9b00      	ldr	r3, [sp, #0]
 8007c22:	3301      	adds	r3, #1
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	2331      	movs	r3, #49	; 0x31
 8007c28:	7013      	strb	r3, [r2, #0]
 8007c2a:	e6ce      	b.n	80079ca <_dtoa_r+0x94a>
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <_dtoa_r+0xbd4>)
 8007c2e:	f7ff ba95 	b.w	800715c <_dtoa_r+0xdc>
 8007c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f47f aa6e 	bne.w	8007116 <_dtoa_r+0x96>
 8007c3a:	4b07      	ldr	r3, [pc, #28]	; (8007c58 <_dtoa_r+0xbd8>)
 8007c3c:	f7ff ba8e 	b.w	800715c <_dtoa_r+0xdc>
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dcae      	bgt.n	8007ba4 <_dtoa_r+0xb24>
 8007c46:	9b06      	ldr	r3, [sp, #24]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	f73f aea8 	bgt.w	800799e <_dtoa_r+0x91e>
 8007c4e:	e7a9      	b.n	8007ba4 <_dtoa_r+0xb24>
 8007c50:	08009ba1 	.word	0x08009ba1
 8007c54:	08009d81 	.word	0x08009d81
 8007c58:	08009b22 	.word	0x08009b22

08007c5c <__sflush_r>:
 8007c5c:	898a      	ldrh	r2, [r1, #12]
 8007c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c62:	4605      	mov	r5, r0
 8007c64:	0710      	lsls	r0, r2, #28
 8007c66:	460c      	mov	r4, r1
 8007c68:	d458      	bmi.n	8007d1c <__sflush_r+0xc0>
 8007c6a:	684b      	ldr	r3, [r1, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dc05      	bgt.n	8007c7c <__sflush_r+0x20>
 8007c70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	dc02      	bgt.n	8007c7c <__sflush_r+0x20>
 8007c76:	2000      	movs	r0, #0
 8007c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	d0f9      	beq.n	8007c76 <__sflush_r+0x1a>
 8007c82:	2300      	movs	r3, #0
 8007c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c88:	682f      	ldr	r7, [r5, #0]
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	d032      	beq.n	8007cf4 <__sflush_r+0x98>
 8007c8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	075a      	lsls	r2, r3, #29
 8007c94:	d505      	bpl.n	8007ca2 <__sflush_r+0x46>
 8007c96:	6863      	ldr	r3, [r4, #4]
 8007c98:	1ac0      	subs	r0, r0, r3
 8007c9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c9c:	b10b      	cbz	r3, 8007ca2 <__sflush_r+0x46>
 8007c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ca0:	1ac0      	subs	r0, r0, r3
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca8:	6a21      	ldr	r1, [r4, #32]
 8007caa:	4628      	mov	r0, r5
 8007cac:	47b0      	blx	r6
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	d106      	bne.n	8007cc2 <__sflush_r+0x66>
 8007cb4:	6829      	ldr	r1, [r5, #0]
 8007cb6:	291d      	cmp	r1, #29
 8007cb8:	d82c      	bhi.n	8007d14 <__sflush_r+0xb8>
 8007cba:	4a2a      	ldr	r2, [pc, #168]	; (8007d64 <__sflush_r+0x108>)
 8007cbc:	40ca      	lsrs	r2, r1
 8007cbe:	07d6      	lsls	r6, r2, #31
 8007cc0:	d528      	bpl.n	8007d14 <__sflush_r+0xb8>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	6062      	str	r2, [r4, #4]
 8007cc6:	04d9      	lsls	r1, r3, #19
 8007cc8:	6922      	ldr	r2, [r4, #16]
 8007cca:	6022      	str	r2, [r4, #0]
 8007ccc:	d504      	bpl.n	8007cd8 <__sflush_r+0x7c>
 8007cce:	1c42      	adds	r2, r0, #1
 8007cd0:	d101      	bne.n	8007cd6 <__sflush_r+0x7a>
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	b903      	cbnz	r3, 8007cd8 <__sflush_r+0x7c>
 8007cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8007cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cda:	602f      	str	r7, [r5, #0]
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	d0ca      	beq.n	8007c76 <__sflush_r+0x1a>
 8007ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	d002      	beq.n	8007cee <__sflush_r+0x92>
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f000 fd91 	bl	8008810 <_free_r>
 8007cee:	2000      	movs	r0, #0
 8007cf0:	6360      	str	r0, [r4, #52]	; 0x34
 8007cf2:	e7c1      	b.n	8007c78 <__sflush_r+0x1c>
 8007cf4:	6a21      	ldr	r1, [r4, #32]
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	47b0      	blx	r6
 8007cfc:	1c41      	adds	r1, r0, #1
 8007cfe:	d1c7      	bne.n	8007c90 <__sflush_r+0x34>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0c4      	beq.n	8007c90 <__sflush_r+0x34>
 8007d06:	2b1d      	cmp	r3, #29
 8007d08:	d001      	beq.n	8007d0e <__sflush_r+0xb2>
 8007d0a:	2b16      	cmp	r3, #22
 8007d0c:	d101      	bne.n	8007d12 <__sflush_r+0xb6>
 8007d0e:	602f      	str	r7, [r5, #0]
 8007d10:	e7b1      	b.n	8007c76 <__sflush_r+0x1a>
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d18:	81a3      	strh	r3, [r4, #12]
 8007d1a:	e7ad      	b.n	8007c78 <__sflush_r+0x1c>
 8007d1c:	690f      	ldr	r7, [r1, #16]
 8007d1e:	2f00      	cmp	r7, #0
 8007d20:	d0a9      	beq.n	8007c76 <__sflush_r+0x1a>
 8007d22:	0793      	lsls	r3, r2, #30
 8007d24:	680e      	ldr	r6, [r1, #0]
 8007d26:	bf08      	it	eq
 8007d28:	694b      	ldreq	r3, [r1, #20]
 8007d2a:	600f      	str	r7, [r1, #0]
 8007d2c:	bf18      	it	ne
 8007d2e:	2300      	movne	r3, #0
 8007d30:	eba6 0807 	sub.w	r8, r6, r7
 8007d34:	608b      	str	r3, [r1, #8]
 8007d36:	f1b8 0f00 	cmp.w	r8, #0
 8007d3a:	dd9c      	ble.n	8007c76 <__sflush_r+0x1a>
 8007d3c:	6a21      	ldr	r1, [r4, #32]
 8007d3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d40:	4643      	mov	r3, r8
 8007d42:	463a      	mov	r2, r7
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b0      	blx	r6
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	dc06      	bgt.n	8007d5a <__sflush_r+0xfe>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d58:	e78e      	b.n	8007c78 <__sflush_r+0x1c>
 8007d5a:	4407      	add	r7, r0
 8007d5c:	eba8 0800 	sub.w	r8, r8, r0
 8007d60:	e7e9      	b.n	8007d36 <__sflush_r+0xda>
 8007d62:	bf00      	nop
 8007d64:	20400001 	.word	0x20400001

08007d68 <_fflush_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	690b      	ldr	r3, [r1, #16]
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	460c      	mov	r4, r1
 8007d70:	b913      	cbnz	r3, 8007d78 <_fflush_r+0x10>
 8007d72:	2500      	movs	r5, #0
 8007d74:	4628      	mov	r0, r5
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	b118      	cbz	r0, 8007d82 <_fflush_r+0x1a>
 8007d7a:	6983      	ldr	r3, [r0, #24]
 8007d7c:	b90b      	cbnz	r3, 8007d82 <_fflush_r+0x1a>
 8007d7e:	f000 f887 	bl	8007e90 <__sinit>
 8007d82:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <_fflush_r+0x6c>)
 8007d84:	429c      	cmp	r4, r3
 8007d86:	d11b      	bne.n	8007dc0 <_fflush_r+0x58>
 8007d88:	686c      	ldr	r4, [r5, #4]
 8007d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0ef      	beq.n	8007d72 <_fflush_r+0xa>
 8007d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d94:	07d0      	lsls	r0, r2, #31
 8007d96:	d404      	bmi.n	8007da2 <_fflush_r+0x3a>
 8007d98:	0599      	lsls	r1, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_fflush_r+0x3a>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9e:	f000 f91a 	bl	8007fd6 <__retarget_lock_acquire_recursive>
 8007da2:	4628      	mov	r0, r5
 8007da4:	4621      	mov	r1, r4
 8007da6:	f7ff ff59 	bl	8007c5c <__sflush_r>
 8007daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dac:	07da      	lsls	r2, r3, #31
 8007dae:	4605      	mov	r5, r0
 8007db0:	d4e0      	bmi.n	8007d74 <_fflush_r+0xc>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	059b      	lsls	r3, r3, #22
 8007db6:	d4dd      	bmi.n	8007d74 <_fflush_r+0xc>
 8007db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dba:	f000 f90d 	bl	8007fd8 <__retarget_lock_release_recursive>
 8007dbe:	e7d9      	b.n	8007d74 <_fflush_r+0xc>
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <_fflush_r+0x70>)
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d101      	bne.n	8007dca <_fflush_r+0x62>
 8007dc6:	68ac      	ldr	r4, [r5, #8]
 8007dc8:	e7df      	b.n	8007d8a <_fflush_r+0x22>
 8007dca:	4b04      	ldr	r3, [pc, #16]	; (8007ddc <_fflush_r+0x74>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	bf08      	it	eq
 8007dd0:	68ec      	ldreq	r4, [r5, #12]
 8007dd2:	e7da      	b.n	8007d8a <_fflush_r+0x22>
 8007dd4:	08009bd4 	.word	0x08009bd4
 8007dd8:	08009bf4 	.word	0x08009bf4
 8007ddc:	08009bb4 	.word	0x08009bb4

08007de0 <std>:
 8007de0:	2300      	movs	r3, #0
 8007de2:	b510      	push	{r4, lr}
 8007de4:	4604      	mov	r4, r0
 8007de6:	e9c0 3300 	strd	r3, r3, [r0]
 8007dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dee:	6083      	str	r3, [r0, #8]
 8007df0:	8181      	strh	r1, [r0, #12]
 8007df2:	6643      	str	r3, [r0, #100]	; 0x64
 8007df4:	81c2      	strh	r2, [r0, #14]
 8007df6:	6183      	str	r3, [r0, #24]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	305c      	adds	r0, #92	; 0x5c
 8007dfe:	f7fe fa5d 	bl	80062bc <memset>
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <std+0x38>)
 8007e04:	6263      	str	r3, [r4, #36]	; 0x24
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <std+0x3c>)
 8007e08:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <std+0x40>)
 8007e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e0e:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <std+0x44>)
 8007e10:	6224      	str	r4, [r4, #32]
 8007e12:	6323      	str	r3, [r4, #48]	; 0x30
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	bf00      	nop
 8007e18:	08006d15 	.word	0x08006d15
 8007e1c:	08006d3b 	.word	0x08006d3b
 8007e20:	08006d73 	.word	0x08006d73
 8007e24:	08006d97 	.word	0x08006d97

08007e28 <_cleanup_r>:
 8007e28:	4901      	ldr	r1, [pc, #4]	; (8007e30 <_cleanup_r+0x8>)
 8007e2a:	f000 b8af 	b.w	8007f8c <_fwalk_reent>
 8007e2e:	bf00      	nop
 8007e30:	08007d69 	.word	0x08007d69

08007e34 <__sfmoreglue>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	2268      	movs	r2, #104	; 0x68
 8007e38:	1e4d      	subs	r5, r1, #1
 8007e3a:	4355      	muls	r5, r2
 8007e3c:	460e      	mov	r6, r1
 8007e3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e42:	f000 fd51 	bl	80088e8 <_malloc_r>
 8007e46:	4604      	mov	r4, r0
 8007e48:	b140      	cbz	r0, 8007e5c <__sfmoreglue+0x28>
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	e9c0 1600 	strd	r1, r6, [r0]
 8007e50:	300c      	adds	r0, #12
 8007e52:	60a0      	str	r0, [r4, #8]
 8007e54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e58:	f7fe fa30 	bl	80062bc <memset>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}

08007e60 <__sfp_lock_acquire>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__sfp_lock_acquire+0x8>)
 8007e62:	f000 b8b8 	b.w	8007fd6 <__retarget_lock_acquire_recursive>
 8007e66:	bf00      	nop
 8007e68:	200004fd 	.word	0x200004fd

08007e6c <__sfp_lock_release>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	; (8007e74 <__sfp_lock_release+0x8>)
 8007e6e:	f000 b8b3 	b.w	8007fd8 <__retarget_lock_release_recursive>
 8007e72:	bf00      	nop
 8007e74:	200004fd 	.word	0x200004fd

08007e78 <__sinit_lock_acquire>:
 8007e78:	4801      	ldr	r0, [pc, #4]	; (8007e80 <__sinit_lock_acquire+0x8>)
 8007e7a:	f000 b8ac 	b.w	8007fd6 <__retarget_lock_acquire_recursive>
 8007e7e:	bf00      	nop
 8007e80:	200004fe 	.word	0x200004fe

08007e84 <__sinit_lock_release>:
 8007e84:	4801      	ldr	r0, [pc, #4]	; (8007e8c <__sinit_lock_release+0x8>)
 8007e86:	f000 b8a7 	b.w	8007fd8 <__retarget_lock_release_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	200004fe 	.word	0x200004fe

08007e90 <__sinit>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	4604      	mov	r4, r0
 8007e94:	f7ff fff0 	bl	8007e78 <__sinit_lock_acquire>
 8007e98:	69a3      	ldr	r3, [r4, #24]
 8007e9a:	b11b      	cbz	r3, 8007ea4 <__sinit+0x14>
 8007e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea0:	f7ff bff0 	b.w	8007e84 <__sinit_lock_release>
 8007ea4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ea8:	6523      	str	r3, [r4, #80]	; 0x50
 8007eaa:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <__sinit+0x68>)
 8007eac:	4a13      	ldr	r2, [pc, #76]	; (8007efc <__sinit+0x6c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eb2:	42a3      	cmp	r3, r4
 8007eb4:	bf04      	itt	eq
 8007eb6:	2301      	moveq	r3, #1
 8007eb8:	61a3      	streq	r3, [r4, #24]
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 f820 	bl	8007f00 <__sfp>
 8007ec0:	6060      	str	r0, [r4, #4]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 f81c 	bl	8007f00 <__sfp>
 8007ec8:	60a0      	str	r0, [r4, #8]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 f818 	bl	8007f00 <__sfp>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	60e0      	str	r0, [r4, #12]
 8007ed4:	2104      	movs	r1, #4
 8007ed6:	6860      	ldr	r0, [r4, #4]
 8007ed8:	f7ff ff82 	bl	8007de0 <std>
 8007edc:	68a0      	ldr	r0, [r4, #8]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	2109      	movs	r1, #9
 8007ee2:	f7ff ff7d 	bl	8007de0 <std>
 8007ee6:	68e0      	ldr	r0, [r4, #12]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	2112      	movs	r1, #18
 8007eec:	f7ff ff78 	bl	8007de0 <std>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	61a3      	str	r3, [r4, #24]
 8007ef4:	e7d2      	b.n	8007e9c <__sinit+0xc>
 8007ef6:	bf00      	nop
 8007ef8:	08009aec 	.word	0x08009aec
 8007efc:	08007e29 	.word	0x08007e29

08007f00 <__sfp>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	4607      	mov	r7, r0
 8007f04:	f7ff ffac 	bl	8007e60 <__sfp_lock_acquire>
 8007f08:	4b1e      	ldr	r3, [pc, #120]	; (8007f84 <__sfp+0x84>)
 8007f0a:	681e      	ldr	r6, [r3, #0]
 8007f0c:	69b3      	ldr	r3, [r6, #24]
 8007f0e:	b913      	cbnz	r3, 8007f16 <__sfp+0x16>
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7ff ffbd 	bl	8007e90 <__sinit>
 8007f16:	3648      	adds	r6, #72	; 0x48
 8007f18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	d503      	bpl.n	8007f28 <__sfp+0x28>
 8007f20:	6833      	ldr	r3, [r6, #0]
 8007f22:	b30b      	cbz	r3, 8007f68 <__sfp+0x68>
 8007f24:	6836      	ldr	r6, [r6, #0]
 8007f26:	e7f7      	b.n	8007f18 <__sfp+0x18>
 8007f28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f2c:	b9d5      	cbnz	r5, 8007f64 <__sfp+0x64>
 8007f2e:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <__sfp+0x88>)
 8007f30:	60e3      	str	r3, [r4, #12]
 8007f32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f36:	6665      	str	r5, [r4, #100]	; 0x64
 8007f38:	f000 f84c 	bl	8007fd4 <__retarget_lock_init_recursive>
 8007f3c:	f7ff ff96 	bl	8007e6c <__sfp_lock_release>
 8007f40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f48:	6025      	str	r5, [r4, #0]
 8007f4a:	61a5      	str	r5, [r4, #24]
 8007f4c:	2208      	movs	r2, #8
 8007f4e:	4629      	mov	r1, r5
 8007f50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f54:	f7fe f9b2 	bl	80062bc <memset>
 8007f58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f60:	4620      	mov	r0, r4
 8007f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f64:	3468      	adds	r4, #104	; 0x68
 8007f66:	e7d9      	b.n	8007f1c <__sfp+0x1c>
 8007f68:	2104      	movs	r1, #4
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	f7ff ff62 	bl	8007e34 <__sfmoreglue>
 8007f70:	4604      	mov	r4, r0
 8007f72:	6030      	str	r0, [r6, #0]
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d1d5      	bne.n	8007f24 <__sfp+0x24>
 8007f78:	f7ff ff78 	bl	8007e6c <__sfp_lock_release>
 8007f7c:	230c      	movs	r3, #12
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	e7ee      	b.n	8007f60 <__sfp+0x60>
 8007f82:	bf00      	nop
 8007f84:	08009aec 	.word	0x08009aec
 8007f88:	ffff0001 	.word	0xffff0001

08007f8c <_fwalk_reent>:
 8007f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f90:	4606      	mov	r6, r0
 8007f92:	4688      	mov	r8, r1
 8007f94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f98:	2700      	movs	r7, #0
 8007f9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f9e:	f1b9 0901 	subs.w	r9, r9, #1
 8007fa2:	d505      	bpl.n	8007fb0 <_fwalk_reent+0x24>
 8007fa4:	6824      	ldr	r4, [r4, #0]
 8007fa6:	2c00      	cmp	r4, #0
 8007fa8:	d1f7      	bne.n	8007f9a <_fwalk_reent+0xe>
 8007faa:	4638      	mov	r0, r7
 8007fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fb0:	89ab      	ldrh	r3, [r5, #12]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d907      	bls.n	8007fc6 <_fwalk_reent+0x3a>
 8007fb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	d003      	beq.n	8007fc6 <_fwalk_reent+0x3a>
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	47c0      	blx	r8
 8007fc4:	4307      	orrs	r7, r0
 8007fc6:	3568      	adds	r5, #104	; 0x68
 8007fc8:	e7e9      	b.n	8007f9e <_fwalk_reent+0x12>
	...

08007fcc <_localeconv_r>:
 8007fcc:	4800      	ldr	r0, [pc, #0]	; (8007fd0 <_localeconv_r+0x4>)
 8007fce:	4770      	bx	lr
 8007fd0:	20000160 	.word	0x20000160

08007fd4 <__retarget_lock_init_recursive>:
 8007fd4:	4770      	bx	lr

08007fd6 <__retarget_lock_acquire_recursive>:
 8007fd6:	4770      	bx	lr

08007fd8 <__retarget_lock_release_recursive>:
 8007fd8:	4770      	bx	lr
	...

08007fdc <_lseek_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4d07      	ldr	r5, [pc, #28]	; (8007ffc <_lseek_r+0x20>)
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	4608      	mov	r0, r1
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	602a      	str	r2, [r5, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	f7fa fadc 	bl	80025a8 <_lseek>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_lseek_r+0x1e>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_lseek_r+0x1e>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	20000508 	.word	0x20000508

08008000 <__swhatbuf_r>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	460e      	mov	r6, r1
 8008004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008008:	2900      	cmp	r1, #0
 800800a:	b096      	sub	sp, #88	; 0x58
 800800c:	4614      	mov	r4, r2
 800800e:	461d      	mov	r5, r3
 8008010:	da08      	bge.n	8008024 <__swhatbuf_r+0x24>
 8008012:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	061a      	lsls	r2, r3, #24
 800801c:	d410      	bmi.n	8008040 <__swhatbuf_r+0x40>
 800801e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008022:	e00e      	b.n	8008042 <__swhatbuf_r+0x42>
 8008024:	466a      	mov	r2, sp
 8008026:	f001 fb0d 	bl	8009644 <_fstat_r>
 800802a:	2800      	cmp	r0, #0
 800802c:	dbf1      	blt.n	8008012 <__swhatbuf_r+0x12>
 800802e:	9a01      	ldr	r2, [sp, #4]
 8008030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008038:	425a      	negs	r2, r3
 800803a:	415a      	adcs	r2, r3
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	e7ee      	b.n	800801e <__swhatbuf_r+0x1e>
 8008040:	2340      	movs	r3, #64	; 0x40
 8008042:	2000      	movs	r0, #0
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	b016      	add	sp, #88	; 0x58
 8008048:	bd70      	pop	{r4, r5, r6, pc}
	...

0800804c <__smakebuf_r>:
 800804c:	898b      	ldrh	r3, [r1, #12]
 800804e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008050:	079d      	lsls	r5, r3, #30
 8008052:	4606      	mov	r6, r0
 8008054:	460c      	mov	r4, r1
 8008056:	d507      	bpl.n	8008068 <__smakebuf_r+0x1c>
 8008058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	6123      	str	r3, [r4, #16]
 8008060:	2301      	movs	r3, #1
 8008062:	6163      	str	r3, [r4, #20]
 8008064:	b002      	add	sp, #8
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	ab01      	add	r3, sp, #4
 800806a:	466a      	mov	r2, sp
 800806c:	f7ff ffc8 	bl	8008000 <__swhatbuf_r>
 8008070:	9900      	ldr	r1, [sp, #0]
 8008072:	4605      	mov	r5, r0
 8008074:	4630      	mov	r0, r6
 8008076:	f000 fc37 	bl	80088e8 <_malloc_r>
 800807a:	b948      	cbnz	r0, 8008090 <__smakebuf_r+0x44>
 800807c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008080:	059a      	lsls	r2, r3, #22
 8008082:	d4ef      	bmi.n	8008064 <__smakebuf_r+0x18>
 8008084:	f023 0303 	bic.w	r3, r3, #3
 8008088:	f043 0302 	orr.w	r3, r3, #2
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	e7e3      	b.n	8008058 <__smakebuf_r+0xc>
 8008090:	4b0d      	ldr	r3, [pc, #52]	; (80080c8 <__smakebuf_r+0x7c>)
 8008092:	62b3      	str	r3, [r6, #40]	; 0x28
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	6020      	str	r0, [r4, #0]
 8008098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809c:	81a3      	strh	r3, [r4, #12]
 800809e:	9b00      	ldr	r3, [sp, #0]
 80080a0:	6163      	str	r3, [r4, #20]
 80080a2:	9b01      	ldr	r3, [sp, #4]
 80080a4:	6120      	str	r0, [r4, #16]
 80080a6:	b15b      	cbz	r3, 80080c0 <__smakebuf_r+0x74>
 80080a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ac:	4630      	mov	r0, r6
 80080ae:	f001 fadb 	bl	8009668 <_isatty_r>
 80080b2:	b128      	cbz	r0, 80080c0 <__smakebuf_r+0x74>
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	f023 0303 	bic.w	r3, r3, #3
 80080ba:	f043 0301 	orr.w	r3, r3, #1
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	89a0      	ldrh	r0, [r4, #12]
 80080c2:	4305      	orrs	r5, r0
 80080c4:	81a5      	strh	r5, [r4, #12]
 80080c6:	e7cd      	b.n	8008064 <__smakebuf_r+0x18>
 80080c8:	08007e29 	.word	0x08007e29

080080cc <malloc>:
 80080cc:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <malloc+0xc>)
 80080ce:	4601      	mov	r1, r0
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f000 bc09 	b.w	80088e8 <_malloc_r>
 80080d6:	bf00      	nop
 80080d8:	2000000c 	.word	0x2000000c

080080dc <_Balloc>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080e0:	4604      	mov	r4, r0
 80080e2:	460d      	mov	r5, r1
 80080e4:	b976      	cbnz	r6, 8008104 <_Balloc+0x28>
 80080e6:	2010      	movs	r0, #16
 80080e8:	f7ff fff0 	bl	80080cc <malloc>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6260      	str	r0, [r4, #36]	; 0x24
 80080f0:	b920      	cbnz	r0, 80080fc <_Balloc+0x20>
 80080f2:	4b18      	ldr	r3, [pc, #96]	; (8008154 <_Balloc+0x78>)
 80080f4:	4818      	ldr	r0, [pc, #96]	; (8008158 <_Balloc+0x7c>)
 80080f6:	2166      	movs	r1, #102	; 0x66
 80080f8:	f001 fa74 	bl	80095e4 <__assert_func>
 80080fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008100:	6006      	str	r6, [r0, #0]
 8008102:	60c6      	str	r6, [r0, #12]
 8008104:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008106:	68f3      	ldr	r3, [r6, #12]
 8008108:	b183      	cbz	r3, 800812c <_Balloc+0x50>
 800810a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008112:	b9b8      	cbnz	r0, 8008144 <_Balloc+0x68>
 8008114:	2101      	movs	r1, #1
 8008116:	fa01 f605 	lsl.w	r6, r1, r5
 800811a:	1d72      	adds	r2, r6, #5
 800811c:	0092      	lsls	r2, r2, #2
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fb60 	bl	80087e4 <_calloc_r>
 8008124:	b160      	cbz	r0, 8008140 <_Balloc+0x64>
 8008126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800812a:	e00e      	b.n	800814a <_Balloc+0x6e>
 800812c:	2221      	movs	r2, #33	; 0x21
 800812e:	2104      	movs	r1, #4
 8008130:	4620      	mov	r0, r4
 8008132:	f000 fb57 	bl	80087e4 <_calloc_r>
 8008136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008138:	60f0      	str	r0, [r6, #12]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e4      	bne.n	800810a <_Balloc+0x2e>
 8008140:	2000      	movs	r0, #0
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	6802      	ldr	r2, [r0, #0]
 8008146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800814a:	2300      	movs	r3, #0
 800814c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008150:	e7f7      	b.n	8008142 <_Balloc+0x66>
 8008152:	bf00      	nop
 8008154:	08009b2f 	.word	0x08009b2f
 8008158:	08009c14 	.word	0x08009c14

0800815c <_Bfree>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008160:	4605      	mov	r5, r0
 8008162:	460c      	mov	r4, r1
 8008164:	b976      	cbnz	r6, 8008184 <_Bfree+0x28>
 8008166:	2010      	movs	r0, #16
 8008168:	f7ff ffb0 	bl	80080cc <malloc>
 800816c:	4602      	mov	r2, r0
 800816e:	6268      	str	r0, [r5, #36]	; 0x24
 8008170:	b920      	cbnz	r0, 800817c <_Bfree+0x20>
 8008172:	4b09      	ldr	r3, [pc, #36]	; (8008198 <_Bfree+0x3c>)
 8008174:	4809      	ldr	r0, [pc, #36]	; (800819c <_Bfree+0x40>)
 8008176:	218a      	movs	r1, #138	; 0x8a
 8008178:	f001 fa34 	bl	80095e4 <__assert_func>
 800817c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008180:	6006      	str	r6, [r0, #0]
 8008182:	60c6      	str	r6, [r0, #12]
 8008184:	b13c      	cbz	r4, 8008196 <_Bfree+0x3a>
 8008186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008188:	6862      	ldr	r2, [r4, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008190:	6021      	str	r1, [r4, #0]
 8008192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	08009b2f 	.word	0x08009b2f
 800819c:	08009c14 	.word	0x08009c14

080081a0 <__multadd>:
 80081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	690d      	ldr	r5, [r1, #16]
 80081a6:	4607      	mov	r7, r0
 80081a8:	460c      	mov	r4, r1
 80081aa:	461e      	mov	r6, r3
 80081ac:	f101 0c14 	add.w	ip, r1, #20
 80081b0:	2000      	movs	r0, #0
 80081b2:	f8dc 3000 	ldr.w	r3, [ip]
 80081b6:	b299      	uxth	r1, r3
 80081b8:	fb02 6101 	mla	r1, r2, r1, r6
 80081bc:	0c1e      	lsrs	r6, r3, #16
 80081be:	0c0b      	lsrs	r3, r1, #16
 80081c0:	fb02 3306 	mla	r3, r2, r6, r3
 80081c4:	b289      	uxth	r1, r1
 80081c6:	3001      	adds	r0, #1
 80081c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081cc:	4285      	cmp	r5, r0
 80081ce:	f84c 1b04 	str.w	r1, [ip], #4
 80081d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081d6:	dcec      	bgt.n	80081b2 <__multadd+0x12>
 80081d8:	b30e      	cbz	r6, 800821e <__multadd+0x7e>
 80081da:	68a3      	ldr	r3, [r4, #8]
 80081dc:	42ab      	cmp	r3, r5
 80081de:	dc19      	bgt.n	8008214 <__multadd+0x74>
 80081e0:	6861      	ldr	r1, [r4, #4]
 80081e2:	4638      	mov	r0, r7
 80081e4:	3101      	adds	r1, #1
 80081e6:	f7ff ff79 	bl	80080dc <_Balloc>
 80081ea:	4680      	mov	r8, r0
 80081ec:	b928      	cbnz	r0, 80081fa <__multadd+0x5a>
 80081ee:	4602      	mov	r2, r0
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <__multadd+0x84>)
 80081f2:	480d      	ldr	r0, [pc, #52]	; (8008228 <__multadd+0x88>)
 80081f4:	21b5      	movs	r1, #181	; 0xb5
 80081f6:	f001 f9f5 	bl	80095e4 <__assert_func>
 80081fa:	6922      	ldr	r2, [r4, #16]
 80081fc:	3202      	adds	r2, #2
 80081fe:	f104 010c 	add.w	r1, r4, #12
 8008202:	0092      	lsls	r2, r2, #2
 8008204:	300c      	adds	r0, #12
 8008206:	f7fe f84b 	bl	80062a0 <memcpy>
 800820a:	4621      	mov	r1, r4
 800820c:	4638      	mov	r0, r7
 800820e:	f7ff ffa5 	bl	800815c <_Bfree>
 8008212:	4644      	mov	r4, r8
 8008214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008218:	3501      	adds	r5, #1
 800821a:	615e      	str	r6, [r3, #20]
 800821c:	6125      	str	r5, [r4, #16]
 800821e:	4620      	mov	r0, r4
 8008220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008224:	08009ba1 	.word	0x08009ba1
 8008228:	08009c14 	.word	0x08009c14

0800822c <__hi0bits>:
 800822c:	0c03      	lsrs	r3, r0, #16
 800822e:	041b      	lsls	r3, r3, #16
 8008230:	b9d3      	cbnz	r3, 8008268 <__hi0bits+0x3c>
 8008232:	0400      	lsls	r0, r0, #16
 8008234:	2310      	movs	r3, #16
 8008236:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800823a:	bf04      	itt	eq
 800823c:	0200      	lsleq	r0, r0, #8
 800823e:	3308      	addeq	r3, #8
 8008240:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008244:	bf04      	itt	eq
 8008246:	0100      	lsleq	r0, r0, #4
 8008248:	3304      	addeq	r3, #4
 800824a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800824e:	bf04      	itt	eq
 8008250:	0080      	lsleq	r0, r0, #2
 8008252:	3302      	addeq	r3, #2
 8008254:	2800      	cmp	r0, #0
 8008256:	db05      	blt.n	8008264 <__hi0bits+0x38>
 8008258:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800825c:	f103 0301 	add.w	r3, r3, #1
 8008260:	bf08      	it	eq
 8008262:	2320      	moveq	r3, #32
 8008264:	4618      	mov	r0, r3
 8008266:	4770      	bx	lr
 8008268:	2300      	movs	r3, #0
 800826a:	e7e4      	b.n	8008236 <__hi0bits+0xa>

0800826c <__lo0bits>:
 800826c:	6803      	ldr	r3, [r0, #0]
 800826e:	f013 0207 	ands.w	r2, r3, #7
 8008272:	4601      	mov	r1, r0
 8008274:	d00b      	beq.n	800828e <__lo0bits+0x22>
 8008276:	07da      	lsls	r2, r3, #31
 8008278:	d423      	bmi.n	80082c2 <__lo0bits+0x56>
 800827a:	0798      	lsls	r0, r3, #30
 800827c:	bf49      	itett	mi
 800827e:	085b      	lsrmi	r3, r3, #1
 8008280:	089b      	lsrpl	r3, r3, #2
 8008282:	2001      	movmi	r0, #1
 8008284:	600b      	strmi	r3, [r1, #0]
 8008286:	bf5c      	itt	pl
 8008288:	600b      	strpl	r3, [r1, #0]
 800828a:	2002      	movpl	r0, #2
 800828c:	4770      	bx	lr
 800828e:	b298      	uxth	r0, r3
 8008290:	b9a8      	cbnz	r0, 80082be <__lo0bits+0x52>
 8008292:	0c1b      	lsrs	r3, r3, #16
 8008294:	2010      	movs	r0, #16
 8008296:	b2da      	uxtb	r2, r3
 8008298:	b90a      	cbnz	r2, 800829e <__lo0bits+0x32>
 800829a:	3008      	adds	r0, #8
 800829c:	0a1b      	lsrs	r3, r3, #8
 800829e:	071a      	lsls	r2, r3, #28
 80082a0:	bf04      	itt	eq
 80082a2:	091b      	lsreq	r3, r3, #4
 80082a4:	3004      	addeq	r0, #4
 80082a6:	079a      	lsls	r2, r3, #30
 80082a8:	bf04      	itt	eq
 80082aa:	089b      	lsreq	r3, r3, #2
 80082ac:	3002      	addeq	r0, #2
 80082ae:	07da      	lsls	r2, r3, #31
 80082b0:	d403      	bmi.n	80082ba <__lo0bits+0x4e>
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	f100 0001 	add.w	r0, r0, #1
 80082b8:	d005      	beq.n	80082c6 <__lo0bits+0x5a>
 80082ba:	600b      	str	r3, [r1, #0]
 80082bc:	4770      	bx	lr
 80082be:	4610      	mov	r0, r2
 80082c0:	e7e9      	b.n	8008296 <__lo0bits+0x2a>
 80082c2:	2000      	movs	r0, #0
 80082c4:	4770      	bx	lr
 80082c6:	2020      	movs	r0, #32
 80082c8:	4770      	bx	lr
	...

080082cc <__i2b>:
 80082cc:	b510      	push	{r4, lr}
 80082ce:	460c      	mov	r4, r1
 80082d0:	2101      	movs	r1, #1
 80082d2:	f7ff ff03 	bl	80080dc <_Balloc>
 80082d6:	4602      	mov	r2, r0
 80082d8:	b928      	cbnz	r0, 80082e6 <__i2b+0x1a>
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <__i2b+0x24>)
 80082dc:	4805      	ldr	r0, [pc, #20]	; (80082f4 <__i2b+0x28>)
 80082de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80082e2:	f001 f97f 	bl	80095e4 <__assert_func>
 80082e6:	2301      	movs	r3, #1
 80082e8:	6144      	str	r4, [r0, #20]
 80082ea:	6103      	str	r3, [r0, #16]
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	bf00      	nop
 80082f0:	08009ba1 	.word	0x08009ba1
 80082f4:	08009c14 	.word	0x08009c14

080082f8 <__multiply>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	4691      	mov	r9, r2
 80082fe:	690a      	ldr	r2, [r1, #16]
 8008300:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008304:	429a      	cmp	r2, r3
 8008306:	bfb8      	it	lt
 8008308:	460b      	movlt	r3, r1
 800830a:	460c      	mov	r4, r1
 800830c:	bfbc      	itt	lt
 800830e:	464c      	movlt	r4, r9
 8008310:	4699      	movlt	r9, r3
 8008312:	6927      	ldr	r7, [r4, #16]
 8008314:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008318:	68a3      	ldr	r3, [r4, #8]
 800831a:	6861      	ldr	r1, [r4, #4]
 800831c:	eb07 060a 	add.w	r6, r7, sl
 8008320:	42b3      	cmp	r3, r6
 8008322:	b085      	sub	sp, #20
 8008324:	bfb8      	it	lt
 8008326:	3101      	addlt	r1, #1
 8008328:	f7ff fed8 	bl	80080dc <_Balloc>
 800832c:	b930      	cbnz	r0, 800833c <__multiply+0x44>
 800832e:	4602      	mov	r2, r0
 8008330:	4b44      	ldr	r3, [pc, #272]	; (8008444 <__multiply+0x14c>)
 8008332:	4845      	ldr	r0, [pc, #276]	; (8008448 <__multiply+0x150>)
 8008334:	f240 115d 	movw	r1, #349	; 0x15d
 8008338:	f001 f954 	bl	80095e4 <__assert_func>
 800833c:	f100 0514 	add.w	r5, r0, #20
 8008340:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008344:	462b      	mov	r3, r5
 8008346:	2200      	movs	r2, #0
 8008348:	4543      	cmp	r3, r8
 800834a:	d321      	bcc.n	8008390 <__multiply+0x98>
 800834c:	f104 0314 	add.w	r3, r4, #20
 8008350:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008354:	f109 0314 	add.w	r3, r9, #20
 8008358:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800835c:	9202      	str	r2, [sp, #8]
 800835e:	1b3a      	subs	r2, r7, r4
 8008360:	3a15      	subs	r2, #21
 8008362:	f022 0203 	bic.w	r2, r2, #3
 8008366:	3204      	adds	r2, #4
 8008368:	f104 0115 	add.w	r1, r4, #21
 800836c:	428f      	cmp	r7, r1
 800836e:	bf38      	it	cc
 8008370:	2204      	movcc	r2, #4
 8008372:	9201      	str	r2, [sp, #4]
 8008374:	9a02      	ldr	r2, [sp, #8]
 8008376:	9303      	str	r3, [sp, #12]
 8008378:	429a      	cmp	r2, r3
 800837a:	d80c      	bhi.n	8008396 <__multiply+0x9e>
 800837c:	2e00      	cmp	r6, #0
 800837e:	dd03      	ble.n	8008388 <__multiply+0x90>
 8008380:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008384:	2b00      	cmp	r3, #0
 8008386:	d05a      	beq.n	800843e <__multiply+0x146>
 8008388:	6106      	str	r6, [r0, #16]
 800838a:	b005      	add	sp, #20
 800838c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008390:	f843 2b04 	str.w	r2, [r3], #4
 8008394:	e7d8      	b.n	8008348 <__multiply+0x50>
 8008396:	f8b3 a000 	ldrh.w	sl, [r3]
 800839a:	f1ba 0f00 	cmp.w	sl, #0
 800839e:	d024      	beq.n	80083ea <__multiply+0xf2>
 80083a0:	f104 0e14 	add.w	lr, r4, #20
 80083a4:	46a9      	mov	r9, r5
 80083a6:	f04f 0c00 	mov.w	ip, #0
 80083aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083ae:	f8d9 1000 	ldr.w	r1, [r9]
 80083b2:	fa1f fb82 	uxth.w	fp, r2
 80083b6:	b289      	uxth	r1, r1
 80083b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80083bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80083c0:	f8d9 2000 	ldr.w	r2, [r9]
 80083c4:	4461      	add	r1, ip
 80083c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80083ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083d2:	b289      	uxth	r1, r1
 80083d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083d8:	4577      	cmp	r7, lr
 80083da:	f849 1b04 	str.w	r1, [r9], #4
 80083de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083e2:	d8e2      	bhi.n	80083aa <__multiply+0xb2>
 80083e4:	9a01      	ldr	r2, [sp, #4]
 80083e6:	f845 c002 	str.w	ip, [r5, r2]
 80083ea:	9a03      	ldr	r2, [sp, #12]
 80083ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083f0:	3304      	adds	r3, #4
 80083f2:	f1b9 0f00 	cmp.w	r9, #0
 80083f6:	d020      	beq.n	800843a <__multiply+0x142>
 80083f8:	6829      	ldr	r1, [r5, #0]
 80083fa:	f104 0c14 	add.w	ip, r4, #20
 80083fe:	46ae      	mov	lr, r5
 8008400:	f04f 0a00 	mov.w	sl, #0
 8008404:	f8bc b000 	ldrh.w	fp, [ip]
 8008408:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800840c:	fb09 220b 	mla	r2, r9, fp, r2
 8008410:	4492      	add	sl, r2
 8008412:	b289      	uxth	r1, r1
 8008414:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008418:	f84e 1b04 	str.w	r1, [lr], #4
 800841c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008420:	f8be 1000 	ldrh.w	r1, [lr]
 8008424:	0c12      	lsrs	r2, r2, #16
 8008426:	fb09 1102 	mla	r1, r9, r2, r1
 800842a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800842e:	4567      	cmp	r7, ip
 8008430:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008434:	d8e6      	bhi.n	8008404 <__multiply+0x10c>
 8008436:	9a01      	ldr	r2, [sp, #4]
 8008438:	50a9      	str	r1, [r5, r2]
 800843a:	3504      	adds	r5, #4
 800843c:	e79a      	b.n	8008374 <__multiply+0x7c>
 800843e:	3e01      	subs	r6, #1
 8008440:	e79c      	b.n	800837c <__multiply+0x84>
 8008442:	bf00      	nop
 8008444:	08009ba1 	.word	0x08009ba1
 8008448:	08009c14 	.word	0x08009c14

0800844c <__pow5mult>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	4615      	mov	r5, r2
 8008452:	f012 0203 	ands.w	r2, r2, #3
 8008456:	4606      	mov	r6, r0
 8008458:	460f      	mov	r7, r1
 800845a:	d007      	beq.n	800846c <__pow5mult+0x20>
 800845c:	4c25      	ldr	r4, [pc, #148]	; (80084f4 <__pow5mult+0xa8>)
 800845e:	3a01      	subs	r2, #1
 8008460:	2300      	movs	r3, #0
 8008462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008466:	f7ff fe9b 	bl	80081a0 <__multadd>
 800846a:	4607      	mov	r7, r0
 800846c:	10ad      	asrs	r5, r5, #2
 800846e:	d03d      	beq.n	80084ec <__pow5mult+0xa0>
 8008470:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008472:	b97c      	cbnz	r4, 8008494 <__pow5mult+0x48>
 8008474:	2010      	movs	r0, #16
 8008476:	f7ff fe29 	bl	80080cc <malloc>
 800847a:	4602      	mov	r2, r0
 800847c:	6270      	str	r0, [r6, #36]	; 0x24
 800847e:	b928      	cbnz	r0, 800848c <__pow5mult+0x40>
 8008480:	4b1d      	ldr	r3, [pc, #116]	; (80084f8 <__pow5mult+0xac>)
 8008482:	481e      	ldr	r0, [pc, #120]	; (80084fc <__pow5mult+0xb0>)
 8008484:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008488:	f001 f8ac 	bl	80095e4 <__assert_func>
 800848c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008490:	6004      	str	r4, [r0, #0]
 8008492:	60c4      	str	r4, [r0, #12]
 8008494:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800849c:	b94c      	cbnz	r4, 80084b2 <__pow5mult+0x66>
 800849e:	f240 2171 	movw	r1, #625	; 0x271
 80084a2:	4630      	mov	r0, r6
 80084a4:	f7ff ff12 	bl	80082cc <__i2b>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ae:	4604      	mov	r4, r0
 80084b0:	6003      	str	r3, [r0, #0]
 80084b2:	f04f 0900 	mov.w	r9, #0
 80084b6:	07eb      	lsls	r3, r5, #31
 80084b8:	d50a      	bpl.n	80084d0 <__pow5mult+0x84>
 80084ba:	4639      	mov	r1, r7
 80084bc:	4622      	mov	r2, r4
 80084be:	4630      	mov	r0, r6
 80084c0:	f7ff ff1a 	bl	80082f8 <__multiply>
 80084c4:	4639      	mov	r1, r7
 80084c6:	4680      	mov	r8, r0
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7ff fe47 	bl	800815c <_Bfree>
 80084ce:	4647      	mov	r7, r8
 80084d0:	106d      	asrs	r5, r5, #1
 80084d2:	d00b      	beq.n	80084ec <__pow5mult+0xa0>
 80084d4:	6820      	ldr	r0, [r4, #0]
 80084d6:	b938      	cbnz	r0, 80084e8 <__pow5mult+0x9c>
 80084d8:	4622      	mov	r2, r4
 80084da:	4621      	mov	r1, r4
 80084dc:	4630      	mov	r0, r6
 80084de:	f7ff ff0b 	bl	80082f8 <__multiply>
 80084e2:	6020      	str	r0, [r4, #0]
 80084e4:	f8c0 9000 	str.w	r9, [r0]
 80084e8:	4604      	mov	r4, r0
 80084ea:	e7e4      	b.n	80084b6 <__pow5mult+0x6a>
 80084ec:	4638      	mov	r0, r7
 80084ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f2:	bf00      	nop
 80084f4:	08009d60 	.word	0x08009d60
 80084f8:	08009b2f 	.word	0x08009b2f
 80084fc:	08009c14 	.word	0x08009c14

08008500 <__lshift>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	460c      	mov	r4, r1
 8008506:	6849      	ldr	r1, [r1, #4]
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	4607      	mov	r7, r0
 8008512:	4691      	mov	r9, r2
 8008514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008518:	f108 0601 	add.w	r6, r8, #1
 800851c:	42b3      	cmp	r3, r6
 800851e:	db0b      	blt.n	8008538 <__lshift+0x38>
 8008520:	4638      	mov	r0, r7
 8008522:	f7ff fddb 	bl	80080dc <_Balloc>
 8008526:	4605      	mov	r5, r0
 8008528:	b948      	cbnz	r0, 800853e <__lshift+0x3e>
 800852a:	4602      	mov	r2, r0
 800852c:	4b2a      	ldr	r3, [pc, #168]	; (80085d8 <__lshift+0xd8>)
 800852e:	482b      	ldr	r0, [pc, #172]	; (80085dc <__lshift+0xdc>)
 8008530:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008534:	f001 f856 	bl	80095e4 <__assert_func>
 8008538:	3101      	adds	r1, #1
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	e7ee      	b.n	800851c <__lshift+0x1c>
 800853e:	2300      	movs	r3, #0
 8008540:	f100 0114 	add.w	r1, r0, #20
 8008544:	f100 0210 	add.w	r2, r0, #16
 8008548:	4618      	mov	r0, r3
 800854a:	4553      	cmp	r3, sl
 800854c:	db37      	blt.n	80085be <__lshift+0xbe>
 800854e:	6920      	ldr	r0, [r4, #16]
 8008550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008554:	f104 0314 	add.w	r3, r4, #20
 8008558:	f019 091f 	ands.w	r9, r9, #31
 800855c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008560:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008564:	d02f      	beq.n	80085c6 <__lshift+0xc6>
 8008566:	f1c9 0e20 	rsb	lr, r9, #32
 800856a:	468a      	mov	sl, r1
 800856c:	f04f 0c00 	mov.w	ip, #0
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	fa02 f209 	lsl.w	r2, r2, r9
 8008576:	ea42 020c 	orr.w	r2, r2, ip
 800857a:	f84a 2b04 	str.w	r2, [sl], #4
 800857e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008582:	4298      	cmp	r0, r3
 8008584:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008588:	d8f2      	bhi.n	8008570 <__lshift+0x70>
 800858a:	1b03      	subs	r3, r0, r4
 800858c:	3b15      	subs	r3, #21
 800858e:	f023 0303 	bic.w	r3, r3, #3
 8008592:	3304      	adds	r3, #4
 8008594:	f104 0215 	add.w	r2, r4, #21
 8008598:	4290      	cmp	r0, r2
 800859a:	bf38      	it	cc
 800859c:	2304      	movcc	r3, #4
 800859e:	f841 c003 	str.w	ip, [r1, r3]
 80085a2:	f1bc 0f00 	cmp.w	ip, #0
 80085a6:	d001      	beq.n	80085ac <__lshift+0xac>
 80085a8:	f108 0602 	add.w	r6, r8, #2
 80085ac:	3e01      	subs	r6, #1
 80085ae:	4638      	mov	r0, r7
 80085b0:	612e      	str	r6, [r5, #16]
 80085b2:	4621      	mov	r1, r4
 80085b4:	f7ff fdd2 	bl	800815c <_Bfree>
 80085b8:	4628      	mov	r0, r5
 80085ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085be:	f842 0f04 	str.w	r0, [r2, #4]!
 80085c2:	3301      	adds	r3, #1
 80085c4:	e7c1      	b.n	800854a <__lshift+0x4a>
 80085c6:	3904      	subs	r1, #4
 80085c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80085d0:	4298      	cmp	r0, r3
 80085d2:	d8f9      	bhi.n	80085c8 <__lshift+0xc8>
 80085d4:	e7ea      	b.n	80085ac <__lshift+0xac>
 80085d6:	bf00      	nop
 80085d8:	08009ba1 	.word	0x08009ba1
 80085dc:	08009c14 	.word	0x08009c14

080085e0 <__mcmp>:
 80085e0:	b530      	push	{r4, r5, lr}
 80085e2:	6902      	ldr	r2, [r0, #16]
 80085e4:	690c      	ldr	r4, [r1, #16]
 80085e6:	1b12      	subs	r2, r2, r4
 80085e8:	d10e      	bne.n	8008608 <__mcmp+0x28>
 80085ea:	f100 0314 	add.w	r3, r0, #20
 80085ee:	3114      	adds	r1, #20
 80085f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008600:	42a5      	cmp	r5, r4
 8008602:	d003      	beq.n	800860c <__mcmp+0x2c>
 8008604:	d305      	bcc.n	8008612 <__mcmp+0x32>
 8008606:	2201      	movs	r2, #1
 8008608:	4610      	mov	r0, r2
 800860a:	bd30      	pop	{r4, r5, pc}
 800860c:	4283      	cmp	r3, r0
 800860e:	d3f3      	bcc.n	80085f8 <__mcmp+0x18>
 8008610:	e7fa      	b.n	8008608 <__mcmp+0x28>
 8008612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008616:	e7f7      	b.n	8008608 <__mcmp+0x28>

08008618 <__mdiff>:
 8008618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	460c      	mov	r4, r1
 800861e:	4606      	mov	r6, r0
 8008620:	4611      	mov	r1, r2
 8008622:	4620      	mov	r0, r4
 8008624:	4690      	mov	r8, r2
 8008626:	f7ff ffdb 	bl	80085e0 <__mcmp>
 800862a:	1e05      	subs	r5, r0, #0
 800862c:	d110      	bne.n	8008650 <__mdiff+0x38>
 800862e:	4629      	mov	r1, r5
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff fd53 	bl	80080dc <_Balloc>
 8008636:	b930      	cbnz	r0, 8008646 <__mdiff+0x2e>
 8008638:	4b3a      	ldr	r3, [pc, #232]	; (8008724 <__mdiff+0x10c>)
 800863a:	4602      	mov	r2, r0
 800863c:	f240 2132 	movw	r1, #562	; 0x232
 8008640:	4839      	ldr	r0, [pc, #228]	; (8008728 <__mdiff+0x110>)
 8008642:	f000 ffcf 	bl	80095e4 <__assert_func>
 8008646:	2301      	movs	r3, #1
 8008648:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800864c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008650:	bfa4      	itt	ge
 8008652:	4643      	movge	r3, r8
 8008654:	46a0      	movge	r8, r4
 8008656:	4630      	mov	r0, r6
 8008658:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800865c:	bfa6      	itte	ge
 800865e:	461c      	movge	r4, r3
 8008660:	2500      	movge	r5, #0
 8008662:	2501      	movlt	r5, #1
 8008664:	f7ff fd3a 	bl	80080dc <_Balloc>
 8008668:	b920      	cbnz	r0, 8008674 <__mdiff+0x5c>
 800866a:	4b2e      	ldr	r3, [pc, #184]	; (8008724 <__mdiff+0x10c>)
 800866c:	4602      	mov	r2, r0
 800866e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008672:	e7e5      	b.n	8008640 <__mdiff+0x28>
 8008674:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008678:	6926      	ldr	r6, [r4, #16]
 800867a:	60c5      	str	r5, [r0, #12]
 800867c:	f104 0914 	add.w	r9, r4, #20
 8008680:	f108 0514 	add.w	r5, r8, #20
 8008684:	f100 0e14 	add.w	lr, r0, #20
 8008688:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800868c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008690:	f108 0210 	add.w	r2, r8, #16
 8008694:	46f2      	mov	sl, lr
 8008696:	2100      	movs	r1, #0
 8008698:	f859 3b04 	ldr.w	r3, [r9], #4
 800869c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086a0:	fa1f f883 	uxth.w	r8, r3
 80086a4:	fa11 f18b 	uxtah	r1, r1, fp
 80086a8:	0c1b      	lsrs	r3, r3, #16
 80086aa:	eba1 0808 	sub.w	r8, r1, r8
 80086ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086b6:	fa1f f888 	uxth.w	r8, r8
 80086ba:	1419      	asrs	r1, r3, #16
 80086bc:	454e      	cmp	r6, r9
 80086be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086c2:	f84a 3b04 	str.w	r3, [sl], #4
 80086c6:	d8e7      	bhi.n	8008698 <__mdiff+0x80>
 80086c8:	1b33      	subs	r3, r6, r4
 80086ca:	3b15      	subs	r3, #21
 80086cc:	f023 0303 	bic.w	r3, r3, #3
 80086d0:	3304      	adds	r3, #4
 80086d2:	3415      	adds	r4, #21
 80086d4:	42a6      	cmp	r6, r4
 80086d6:	bf38      	it	cc
 80086d8:	2304      	movcc	r3, #4
 80086da:	441d      	add	r5, r3
 80086dc:	4473      	add	r3, lr
 80086de:	469e      	mov	lr, r3
 80086e0:	462e      	mov	r6, r5
 80086e2:	4566      	cmp	r6, ip
 80086e4:	d30e      	bcc.n	8008704 <__mdiff+0xec>
 80086e6:	f10c 0203 	add.w	r2, ip, #3
 80086ea:	1b52      	subs	r2, r2, r5
 80086ec:	f022 0203 	bic.w	r2, r2, #3
 80086f0:	3d03      	subs	r5, #3
 80086f2:	45ac      	cmp	ip, r5
 80086f4:	bf38      	it	cc
 80086f6:	2200      	movcc	r2, #0
 80086f8:	441a      	add	r2, r3
 80086fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086fe:	b17b      	cbz	r3, 8008720 <__mdiff+0x108>
 8008700:	6107      	str	r7, [r0, #16]
 8008702:	e7a3      	b.n	800864c <__mdiff+0x34>
 8008704:	f856 8b04 	ldr.w	r8, [r6], #4
 8008708:	fa11 f288 	uxtah	r2, r1, r8
 800870c:	1414      	asrs	r4, r2, #16
 800870e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008712:	b292      	uxth	r2, r2
 8008714:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008718:	f84e 2b04 	str.w	r2, [lr], #4
 800871c:	1421      	asrs	r1, r4, #16
 800871e:	e7e0      	b.n	80086e2 <__mdiff+0xca>
 8008720:	3f01      	subs	r7, #1
 8008722:	e7ea      	b.n	80086fa <__mdiff+0xe2>
 8008724:	08009ba1 	.word	0x08009ba1
 8008728:	08009c14 	.word	0x08009c14

0800872c <__d2b>:
 800872c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008730:	4689      	mov	r9, r1
 8008732:	2101      	movs	r1, #1
 8008734:	ec57 6b10 	vmov	r6, r7, d0
 8008738:	4690      	mov	r8, r2
 800873a:	f7ff fccf 	bl	80080dc <_Balloc>
 800873e:	4604      	mov	r4, r0
 8008740:	b930      	cbnz	r0, 8008750 <__d2b+0x24>
 8008742:	4602      	mov	r2, r0
 8008744:	4b25      	ldr	r3, [pc, #148]	; (80087dc <__d2b+0xb0>)
 8008746:	4826      	ldr	r0, [pc, #152]	; (80087e0 <__d2b+0xb4>)
 8008748:	f240 310a 	movw	r1, #778	; 0x30a
 800874c:	f000 ff4a 	bl	80095e4 <__assert_func>
 8008750:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008754:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008758:	bb35      	cbnz	r5, 80087a8 <__d2b+0x7c>
 800875a:	2e00      	cmp	r6, #0
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	d028      	beq.n	80087b2 <__d2b+0x86>
 8008760:	4668      	mov	r0, sp
 8008762:	9600      	str	r6, [sp, #0]
 8008764:	f7ff fd82 	bl	800826c <__lo0bits>
 8008768:	9900      	ldr	r1, [sp, #0]
 800876a:	b300      	cbz	r0, 80087ae <__d2b+0x82>
 800876c:	9a01      	ldr	r2, [sp, #4]
 800876e:	f1c0 0320 	rsb	r3, r0, #32
 8008772:	fa02 f303 	lsl.w	r3, r2, r3
 8008776:	430b      	orrs	r3, r1
 8008778:	40c2      	lsrs	r2, r0
 800877a:	6163      	str	r3, [r4, #20]
 800877c:	9201      	str	r2, [sp, #4]
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	61a3      	str	r3, [r4, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	bf14      	ite	ne
 8008786:	2202      	movne	r2, #2
 8008788:	2201      	moveq	r2, #1
 800878a:	6122      	str	r2, [r4, #16]
 800878c:	b1d5      	cbz	r5, 80087c4 <__d2b+0x98>
 800878e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008792:	4405      	add	r5, r0
 8008794:	f8c9 5000 	str.w	r5, [r9]
 8008798:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800879c:	f8c8 0000 	str.w	r0, [r8]
 80087a0:	4620      	mov	r0, r4
 80087a2:	b003      	add	sp, #12
 80087a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ac:	e7d5      	b.n	800875a <__d2b+0x2e>
 80087ae:	6161      	str	r1, [r4, #20]
 80087b0:	e7e5      	b.n	800877e <__d2b+0x52>
 80087b2:	a801      	add	r0, sp, #4
 80087b4:	f7ff fd5a 	bl	800826c <__lo0bits>
 80087b8:	9b01      	ldr	r3, [sp, #4]
 80087ba:	6163      	str	r3, [r4, #20]
 80087bc:	2201      	movs	r2, #1
 80087be:	6122      	str	r2, [r4, #16]
 80087c0:	3020      	adds	r0, #32
 80087c2:	e7e3      	b.n	800878c <__d2b+0x60>
 80087c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087cc:	f8c9 0000 	str.w	r0, [r9]
 80087d0:	6918      	ldr	r0, [r3, #16]
 80087d2:	f7ff fd2b 	bl	800822c <__hi0bits>
 80087d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087da:	e7df      	b.n	800879c <__d2b+0x70>
 80087dc:	08009ba1 	.word	0x08009ba1
 80087e0:	08009c14 	.word	0x08009c14

080087e4 <_calloc_r>:
 80087e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087e6:	fba1 2402 	umull	r2, r4, r1, r2
 80087ea:	b94c      	cbnz	r4, 8008800 <_calloc_r+0x1c>
 80087ec:	4611      	mov	r1, r2
 80087ee:	9201      	str	r2, [sp, #4]
 80087f0:	f000 f87a 	bl	80088e8 <_malloc_r>
 80087f4:	9a01      	ldr	r2, [sp, #4]
 80087f6:	4605      	mov	r5, r0
 80087f8:	b930      	cbnz	r0, 8008808 <_calloc_r+0x24>
 80087fa:	4628      	mov	r0, r5
 80087fc:	b003      	add	sp, #12
 80087fe:	bd30      	pop	{r4, r5, pc}
 8008800:	220c      	movs	r2, #12
 8008802:	6002      	str	r2, [r0, #0]
 8008804:	2500      	movs	r5, #0
 8008806:	e7f8      	b.n	80087fa <_calloc_r+0x16>
 8008808:	4621      	mov	r1, r4
 800880a:	f7fd fd57 	bl	80062bc <memset>
 800880e:	e7f4      	b.n	80087fa <_calloc_r+0x16>

08008810 <_free_r>:
 8008810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008812:	2900      	cmp	r1, #0
 8008814:	d044      	beq.n	80088a0 <_free_r+0x90>
 8008816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800881a:	9001      	str	r0, [sp, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f1a1 0404 	sub.w	r4, r1, #4
 8008822:	bfb8      	it	lt
 8008824:	18e4      	addlt	r4, r4, r3
 8008826:	f000 ff41 	bl	80096ac <__malloc_lock>
 800882a:	4a1e      	ldr	r2, [pc, #120]	; (80088a4 <_free_r+0x94>)
 800882c:	9801      	ldr	r0, [sp, #4]
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	b933      	cbnz	r3, 8008840 <_free_r+0x30>
 8008832:	6063      	str	r3, [r4, #4]
 8008834:	6014      	str	r4, [r2, #0]
 8008836:	b003      	add	sp, #12
 8008838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800883c:	f000 bf3c 	b.w	80096b8 <__malloc_unlock>
 8008840:	42a3      	cmp	r3, r4
 8008842:	d908      	bls.n	8008856 <_free_r+0x46>
 8008844:	6825      	ldr	r5, [r4, #0]
 8008846:	1961      	adds	r1, r4, r5
 8008848:	428b      	cmp	r3, r1
 800884a:	bf01      	itttt	eq
 800884c:	6819      	ldreq	r1, [r3, #0]
 800884e:	685b      	ldreq	r3, [r3, #4]
 8008850:	1949      	addeq	r1, r1, r5
 8008852:	6021      	streq	r1, [r4, #0]
 8008854:	e7ed      	b.n	8008832 <_free_r+0x22>
 8008856:	461a      	mov	r2, r3
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	b10b      	cbz	r3, 8008860 <_free_r+0x50>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d9fa      	bls.n	8008856 <_free_r+0x46>
 8008860:	6811      	ldr	r1, [r2, #0]
 8008862:	1855      	adds	r5, r2, r1
 8008864:	42a5      	cmp	r5, r4
 8008866:	d10b      	bne.n	8008880 <_free_r+0x70>
 8008868:	6824      	ldr	r4, [r4, #0]
 800886a:	4421      	add	r1, r4
 800886c:	1854      	adds	r4, r2, r1
 800886e:	42a3      	cmp	r3, r4
 8008870:	6011      	str	r1, [r2, #0]
 8008872:	d1e0      	bne.n	8008836 <_free_r+0x26>
 8008874:	681c      	ldr	r4, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	6053      	str	r3, [r2, #4]
 800887a:	4421      	add	r1, r4
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	e7da      	b.n	8008836 <_free_r+0x26>
 8008880:	d902      	bls.n	8008888 <_free_r+0x78>
 8008882:	230c      	movs	r3, #12
 8008884:	6003      	str	r3, [r0, #0]
 8008886:	e7d6      	b.n	8008836 <_free_r+0x26>
 8008888:	6825      	ldr	r5, [r4, #0]
 800888a:	1961      	adds	r1, r4, r5
 800888c:	428b      	cmp	r3, r1
 800888e:	bf04      	itt	eq
 8008890:	6819      	ldreq	r1, [r3, #0]
 8008892:	685b      	ldreq	r3, [r3, #4]
 8008894:	6063      	str	r3, [r4, #4]
 8008896:	bf04      	itt	eq
 8008898:	1949      	addeq	r1, r1, r5
 800889a:	6021      	streq	r1, [r4, #0]
 800889c:	6054      	str	r4, [r2, #4]
 800889e:	e7ca      	b.n	8008836 <_free_r+0x26>
 80088a0:	b003      	add	sp, #12
 80088a2:	bd30      	pop	{r4, r5, pc}
 80088a4:	20000500 	.word	0x20000500

080088a8 <sbrk_aligned>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4e0e      	ldr	r6, [pc, #56]	; (80088e4 <sbrk_aligned+0x3c>)
 80088ac:	460c      	mov	r4, r1
 80088ae:	6831      	ldr	r1, [r6, #0]
 80088b0:	4605      	mov	r5, r0
 80088b2:	b911      	cbnz	r1, 80088ba <sbrk_aligned+0x12>
 80088b4:	f000 fd1c 	bl	80092f0 <_sbrk_r>
 80088b8:	6030      	str	r0, [r6, #0]
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 fd17 	bl	80092f0 <_sbrk_r>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d00a      	beq.n	80088dc <sbrk_aligned+0x34>
 80088c6:	1cc4      	adds	r4, r0, #3
 80088c8:	f024 0403 	bic.w	r4, r4, #3
 80088cc:	42a0      	cmp	r0, r4
 80088ce:	d007      	beq.n	80088e0 <sbrk_aligned+0x38>
 80088d0:	1a21      	subs	r1, r4, r0
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 fd0c 	bl	80092f0 <_sbrk_r>
 80088d8:	3001      	adds	r0, #1
 80088da:	d101      	bne.n	80088e0 <sbrk_aligned+0x38>
 80088dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088e0:	4620      	mov	r0, r4
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	20000504 	.word	0x20000504

080088e8 <_malloc_r>:
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	1ccd      	adds	r5, r1, #3
 80088ee:	f025 0503 	bic.w	r5, r5, #3
 80088f2:	3508      	adds	r5, #8
 80088f4:	2d0c      	cmp	r5, #12
 80088f6:	bf38      	it	cc
 80088f8:	250c      	movcc	r5, #12
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	4607      	mov	r7, r0
 80088fe:	db01      	blt.n	8008904 <_malloc_r+0x1c>
 8008900:	42a9      	cmp	r1, r5
 8008902:	d905      	bls.n	8008910 <_malloc_r+0x28>
 8008904:	230c      	movs	r3, #12
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	2600      	movs	r6, #0
 800890a:	4630      	mov	r0, r6
 800890c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008910:	4e2e      	ldr	r6, [pc, #184]	; (80089cc <_malloc_r+0xe4>)
 8008912:	f000 fecb 	bl	80096ac <__malloc_lock>
 8008916:	6833      	ldr	r3, [r6, #0]
 8008918:	461c      	mov	r4, r3
 800891a:	bb34      	cbnz	r4, 800896a <_malloc_r+0x82>
 800891c:	4629      	mov	r1, r5
 800891e:	4638      	mov	r0, r7
 8008920:	f7ff ffc2 	bl	80088a8 <sbrk_aligned>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	4604      	mov	r4, r0
 8008928:	d14d      	bne.n	80089c6 <_malloc_r+0xde>
 800892a:	6834      	ldr	r4, [r6, #0]
 800892c:	4626      	mov	r6, r4
 800892e:	2e00      	cmp	r6, #0
 8008930:	d140      	bne.n	80089b4 <_malloc_r+0xcc>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	4631      	mov	r1, r6
 8008936:	4638      	mov	r0, r7
 8008938:	eb04 0803 	add.w	r8, r4, r3
 800893c:	f000 fcd8 	bl	80092f0 <_sbrk_r>
 8008940:	4580      	cmp	r8, r0
 8008942:	d13a      	bne.n	80089ba <_malloc_r+0xd2>
 8008944:	6821      	ldr	r1, [r4, #0]
 8008946:	3503      	adds	r5, #3
 8008948:	1a6d      	subs	r5, r5, r1
 800894a:	f025 0503 	bic.w	r5, r5, #3
 800894e:	3508      	adds	r5, #8
 8008950:	2d0c      	cmp	r5, #12
 8008952:	bf38      	it	cc
 8008954:	250c      	movcc	r5, #12
 8008956:	4629      	mov	r1, r5
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ffa5 	bl	80088a8 <sbrk_aligned>
 800895e:	3001      	adds	r0, #1
 8008960:	d02b      	beq.n	80089ba <_malloc_r+0xd2>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	442b      	add	r3, r5
 8008966:	6023      	str	r3, [r4, #0]
 8008968:	e00e      	b.n	8008988 <_malloc_r+0xa0>
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	1b52      	subs	r2, r2, r5
 800896e:	d41e      	bmi.n	80089ae <_malloc_r+0xc6>
 8008970:	2a0b      	cmp	r2, #11
 8008972:	d916      	bls.n	80089a2 <_malloc_r+0xba>
 8008974:	1961      	adds	r1, r4, r5
 8008976:	42a3      	cmp	r3, r4
 8008978:	6025      	str	r5, [r4, #0]
 800897a:	bf18      	it	ne
 800897c:	6059      	strne	r1, [r3, #4]
 800897e:	6863      	ldr	r3, [r4, #4]
 8008980:	bf08      	it	eq
 8008982:	6031      	streq	r1, [r6, #0]
 8008984:	5162      	str	r2, [r4, r5]
 8008986:	604b      	str	r3, [r1, #4]
 8008988:	4638      	mov	r0, r7
 800898a:	f104 060b 	add.w	r6, r4, #11
 800898e:	f000 fe93 	bl	80096b8 <__malloc_unlock>
 8008992:	f026 0607 	bic.w	r6, r6, #7
 8008996:	1d23      	adds	r3, r4, #4
 8008998:	1af2      	subs	r2, r6, r3
 800899a:	d0b6      	beq.n	800890a <_malloc_r+0x22>
 800899c:	1b9b      	subs	r3, r3, r6
 800899e:	50a3      	str	r3, [r4, r2]
 80089a0:	e7b3      	b.n	800890a <_malloc_r+0x22>
 80089a2:	6862      	ldr	r2, [r4, #4]
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	bf0c      	ite	eq
 80089a8:	6032      	streq	r2, [r6, #0]
 80089aa:	605a      	strne	r2, [r3, #4]
 80089ac:	e7ec      	b.n	8008988 <_malloc_r+0xa0>
 80089ae:	4623      	mov	r3, r4
 80089b0:	6864      	ldr	r4, [r4, #4]
 80089b2:	e7b2      	b.n	800891a <_malloc_r+0x32>
 80089b4:	4634      	mov	r4, r6
 80089b6:	6876      	ldr	r6, [r6, #4]
 80089b8:	e7b9      	b.n	800892e <_malloc_r+0x46>
 80089ba:	230c      	movs	r3, #12
 80089bc:	603b      	str	r3, [r7, #0]
 80089be:	4638      	mov	r0, r7
 80089c0:	f000 fe7a 	bl	80096b8 <__malloc_unlock>
 80089c4:	e7a1      	b.n	800890a <_malloc_r+0x22>
 80089c6:	6025      	str	r5, [r4, #0]
 80089c8:	e7de      	b.n	8008988 <_malloc_r+0xa0>
 80089ca:	bf00      	nop
 80089cc:	20000500 	.word	0x20000500

080089d0 <_sungetc_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	1c4b      	adds	r3, r1, #1
 80089d4:	4614      	mov	r4, r2
 80089d6:	d103      	bne.n	80089e0 <_sungetc_r+0x10>
 80089d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80089dc:	4628      	mov	r0, r5
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	8993      	ldrh	r3, [r2, #12]
 80089e2:	f023 0320 	bic.w	r3, r3, #32
 80089e6:	8193      	strh	r3, [r2, #12]
 80089e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ea:	6852      	ldr	r2, [r2, #4]
 80089ec:	b2cd      	uxtb	r5, r1
 80089ee:	b18b      	cbz	r3, 8008a14 <_sungetc_r+0x44>
 80089f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089f2:	4293      	cmp	r3, r2
 80089f4:	dd08      	ble.n	8008a08 <_sungetc_r+0x38>
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	1e5a      	subs	r2, r3, #1
 80089fa:	6022      	str	r2, [r4, #0]
 80089fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008a00:	6863      	ldr	r3, [r4, #4]
 8008a02:	3301      	adds	r3, #1
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	e7e9      	b.n	80089dc <_sungetc_r+0xc>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f000 fdb1 	bl	8009570 <__submore>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d0f1      	beq.n	80089f6 <_sungetc_r+0x26>
 8008a12:	e7e1      	b.n	80089d8 <_sungetc_r+0x8>
 8008a14:	6921      	ldr	r1, [r4, #16]
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	b151      	cbz	r1, 8008a30 <_sungetc_r+0x60>
 8008a1a:	4299      	cmp	r1, r3
 8008a1c:	d208      	bcs.n	8008a30 <_sungetc_r+0x60>
 8008a1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008a22:	42a9      	cmp	r1, r5
 8008a24:	d104      	bne.n	8008a30 <_sungetc_r+0x60>
 8008a26:	3b01      	subs	r3, #1
 8008a28:	3201      	adds	r2, #1
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	6062      	str	r2, [r4, #4]
 8008a2e:	e7d5      	b.n	80089dc <_sungetc_r+0xc>
 8008a30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a38:	6363      	str	r3, [r4, #52]	; 0x34
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a3e:	4623      	mov	r3, r4
 8008a40:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	2301      	movs	r3, #1
 8008a48:	e7dc      	b.n	8008a04 <_sungetc_r+0x34>

08008a4a <__ssrefill_r>:
 8008a4a:	b510      	push	{r4, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008a50:	b169      	cbz	r1, 8008a6e <__ssrefill_r+0x24>
 8008a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d001      	beq.n	8008a5e <__ssrefill_r+0x14>
 8008a5a:	f7ff fed9 	bl	8008810 <_free_r>
 8008a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	2000      	movs	r0, #0
 8008a64:	6360      	str	r0, [r4, #52]	; 0x34
 8008a66:	b113      	cbz	r3, 8008a6e <__ssrefill_r+0x24>
 8008a68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a6a:	6023      	str	r3, [r4, #0]
 8008a6c:	bd10      	pop	{r4, pc}
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	2300      	movs	r3, #0
 8008a74:	6063      	str	r3, [r4, #4]
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	f043 0320 	orr.w	r3, r3, #32
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a82:	e7f3      	b.n	8008a6c <__ssrefill_r+0x22>

08008a84 <__ssvfiscanf_r>:
 8008a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	460c      	mov	r4, r1
 8008a8a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008a8e:	2100      	movs	r1, #0
 8008a90:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008a94:	49a6      	ldr	r1, [pc, #664]	; (8008d30 <__ssvfiscanf_r+0x2ac>)
 8008a96:	91a0      	str	r1, [sp, #640]	; 0x280
 8008a98:	f10d 0804 	add.w	r8, sp, #4
 8008a9c:	49a5      	ldr	r1, [pc, #660]	; (8008d34 <__ssvfiscanf_r+0x2b0>)
 8008a9e:	4fa6      	ldr	r7, [pc, #664]	; (8008d38 <__ssvfiscanf_r+0x2b4>)
 8008aa0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008d3c <__ssvfiscanf_r+0x2b8>
 8008aa4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	91a1      	str	r1, [sp, #644]	; 0x284
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	7813      	ldrb	r3, [r2, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 815a 	beq.w	8008d6a <__ssvfiscanf_r+0x2e6>
 8008ab6:	5dd9      	ldrb	r1, [r3, r7]
 8008ab8:	f011 0108 	ands.w	r1, r1, #8
 8008abc:	f102 0501 	add.w	r5, r2, #1
 8008ac0:	d019      	beq.n	8008af6 <__ssvfiscanf_r+0x72>
 8008ac2:	6863      	ldr	r3, [r4, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	dd0f      	ble.n	8008ae8 <__ssvfiscanf_r+0x64>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	781a      	ldrb	r2, [r3, #0]
 8008acc:	5cba      	ldrb	r2, [r7, r2]
 8008ace:	0712      	lsls	r2, r2, #28
 8008ad0:	d401      	bmi.n	8008ad6 <__ssvfiscanf_r+0x52>
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	e7eb      	b.n	8008aae <__ssvfiscanf_r+0x2a>
 8008ad6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ad8:	3201      	adds	r2, #1
 8008ada:	9245      	str	r2, [sp, #276]	; 0x114
 8008adc:	6862      	ldr	r2, [r4, #4]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	3a01      	subs	r2, #1
 8008ae2:	6062      	str	r2, [r4, #4]
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	e7ec      	b.n	8008ac2 <__ssvfiscanf_r+0x3e>
 8008ae8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008aea:	4621      	mov	r1, r4
 8008aec:	4630      	mov	r0, r6
 8008aee:	4798      	blx	r3
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d0e9      	beq.n	8008ac8 <__ssvfiscanf_r+0x44>
 8008af4:	e7ed      	b.n	8008ad2 <__ssvfiscanf_r+0x4e>
 8008af6:	2b25      	cmp	r3, #37	; 0x25
 8008af8:	d012      	beq.n	8008b20 <__ssvfiscanf_r+0x9c>
 8008afa:	469a      	mov	sl, r3
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f340 8091 	ble.w	8008c26 <__ssvfiscanf_r+0x1a2>
 8008b04:	6822      	ldr	r2, [r4, #0]
 8008b06:	7813      	ldrb	r3, [r2, #0]
 8008b08:	4553      	cmp	r3, sl
 8008b0a:	f040 812e 	bne.w	8008d6a <__ssvfiscanf_r+0x2e6>
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	6063      	str	r3, [r4, #4]
 8008b14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008b16:	3201      	adds	r2, #1
 8008b18:	3301      	adds	r3, #1
 8008b1a:	6022      	str	r2, [r4, #0]
 8008b1c:	9345      	str	r3, [sp, #276]	; 0x114
 8008b1e:	e7d8      	b.n	8008ad2 <__ssvfiscanf_r+0x4e>
 8008b20:	9141      	str	r1, [sp, #260]	; 0x104
 8008b22:	9143      	str	r1, [sp, #268]	; 0x10c
 8008b24:	7853      	ldrb	r3, [r2, #1]
 8008b26:	2b2a      	cmp	r3, #42	; 0x2a
 8008b28:	bf02      	ittt	eq
 8008b2a:	2310      	moveq	r3, #16
 8008b2c:	1c95      	addeq	r5, r2, #2
 8008b2e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008b30:	220a      	movs	r2, #10
 8008b32:	46aa      	mov	sl, r5
 8008b34:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008b38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008b3c:	2b09      	cmp	r3, #9
 8008b3e:	d91d      	bls.n	8008b7c <__ssvfiscanf_r+0xf8>
 8008b40:	487e      	ldr	r0, [pc, #504]	; (8008d3c <__ssvfiscanf_r+0x2b8>)
 8008b42:	2203      	movs	r2, #3
 8008b44:	f7f7 fb54 	bl	80001f0 <memchr>
 8008b48:	b140      	cbz	r0, 8008b5c <__ssvfiscanf_r+0xd8>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	eba0 0009 	sub.w	r0, r0, r9
 8008b50:	fa03 f000 	lsl.w	r0, r3, r0
 8008b54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b56:	4318      	orrs	r0, r3
 8008b58:	9041      	str	r0, [sp, #260]	; 0x104
 8008b5a:	4655      	mov	r5, sl
 8008b5c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b60:	2b78      	cmp	r3, #120	; 0x78
 8008b62:	d806      	bhi.n	8008b72 <__ssvfiscanf_r+0xee>
 8008b64:	2b57      	cmp	r3, #87	; 0x57
 8008b66:	d810      	bhi.n	8008b8a <__ssvfiscanf_r+0x106>
 8008b68:	2b25      	cmp	r3, #37	; 0x25
 8008b6a:	d0c6      	beq.n	8008afa <__ssvfiscanf_r+0x76>
 8008b6c:	d856      	bhi.n	8008c1c <__ssvfiscanf_r+0x198>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d064      	beq.n	8008c3c <__ssvfiscanf_r+0x1b8>
 8008b72:	2303      	movs	r3, #3
 8008b74:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b76:	230a      	movs	r3, #10
 8008b78:	9342      	str	r3, [sp, #264]	; 0x108
 8008b7a:	e071      	b.n	8008c60 <__ssvfiscanf_r+0x1dc>
 8008b7c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008b7e:	fb02 1103 	mla	r1, r2, r3, r1
 8008b82:	3930      	subs	r1, #48	; 0x30
 8008b84:	9143      	str	r1, [sp, #268]	; 0x10c
 8008b86:	4655      	mov	r5, sl
 8008b88:	e7d3      	b.n	8008b32 <__ssvfiscanf_r+0xae>
 8008b8a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008b8e:	2a20      	cmp	r2, #32
 8008b90:	d8ef      	bhi.n	8008b72 <__ssvfiscanf_r+0xee>
 8008b92:	a101      	add	r1, pc, #4	; (adr r1, 8008b98 <__ssvfiscanf_r+0x114>)
 8008b94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b98:	08008c4b 	.word	0x08008c4b
 8008b9c:	08008b73 	.word	0x08008b73
 8008ba0:	08008b73 	.word	0x08008b73
 8008ba4:	08008ca9 	.word	0x08008ca9
 8008ba8:	08008b73 	.word	0x08008b73
 8008bac:	08008b73 	.word	0x08008b73
 8008bb0:	08008b73 	.word	0x08008b73
 8008bb4:	08008b73 	.word	0x08008b73
 8008bb8:	08008b73 	.word	0x08008b73
 8008bbc:	08008b73 	.word	0x08008b73
 8008bc0:	08008b73 	.word	0x08008b73
 8008bc4:	08008cbf 	.word	0x08008cbf
 8008bc8:	08008c95 	.word	0x08008c95
 8008bcc:	08008c23 	.word	0x08008c23
 8008bd0:	08008c23 	.word	0x08008c23
 8008bd4:	08008c23 	.word	0x08008c23
 8008bd8:	08008b73 	.word	0x08008b73
 8008bdc:	08008c99 	.word	0x08008c99
 8008be0:	08008b73 	.word	0x08008b73
 8008be4:	08008b73 	.word	0x08008b73
 8008be8:	08008b73 	.word	0x08008b73
 8008bec:	08008b73 	.word	0x08008b73
 8008bf0:	08008ccf 	.word	0x08008ccf
 8008bf4:	08008ca1 	.word	0x08008ca1
 8008bf8:	08008c43 	.word	0x08008c43
 8008bfc:	08008b73 	.word	0x08008b73
 8008c00:	08008b73 	.word	0x08008b73
 8008c04:	08008ccb 	.word	0x08008ccb
 8008c08:	08008b73 	.word	0x08008b73
 8008c0c:	08008c95 	.word	0x08008c95
 8008c10:	08008b73 	.word	0x08008b73
 8008c14:	08008b73 	.word	0x08008b73
 8008c18:	08008c4b 	.word	0x08008c4b
 8008c1c:	3b45      	subs	r3, #69	; 0x45
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d8a7      	bhi.n	8008b72 <__ssvfiscanf_r+0xee>
 8008c22:	2305      	movs	r3, #5
 8008c24:	e01b      	b.n	8008c5e <__ssvfiscanf_r+0x1da>
 8008c26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4798      	blx	r3
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f43f af68 	beq.w	8008b04 <__ssvfiscanf_r+0x80>
 8008c34:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f040 808d 	bne.w	8008d56 <__ssvfiscanf_r+0x2d2>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c40:	e08f      	b.n	8008d62 <__ssvfiscanf_r+0x2de>
 8008c42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c44:	f042 0220 	orr.w	r2, r2, #32
 8008c48:	9241      	str	r2, [sp, #260]	; 0x104
 8008c4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c50:	9241      	str	r2, [sp, #260]	; 0x104
 8008c52:	2210      	movs	r2, #16
 8008c54:	2b6f      	cmp	r3, #111	; 0x6f
 8008c56:	9242      	str	r2, [sp, #264]	; 0x108
 8008c58:	bf34      	ite	cc
 8008c5a:	2303      	movcc	r3, #3
 8008c5c:	2304      	movcs	r3, #4
 8008c5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c60:	6863      	ldr	r3, [r4, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	dd42      	ble.n	8008cec <__ssvfiscanf_r+0x268>
 8008c66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c68:	0659      	lsls	r1, r3, #25
 8008c6a:	d404      	bmi.n	8008c76 <__ssvfiscanf_r+0x1f2>
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	781a      	ldrb	r2, [r3, #0]
 8008c70:	5cba      	ldrb	r2, [r7, r2]
 8008c72:	0712      	lsls	r2, r2, #28
 8008c74:	d441      	bmi.n	8008cfa <__ssvfiscanf_r+0x276>
 8008c76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	dc50      	bgt.n	8008d1e <__ssvfiscanf_r+0x29a>
 8008c7c:	466b      	mov	r3, sp
 8008c7e:	4622      	mov	r2, r4
 8008c80:	a941      	add	r1, sp, #260	; 0x104
 8008c82:	4630      	mov	r0, r6
 8008c84:	f000 f9d0 	bl	8009028 <_scanf_chars>
 8008c88:	2801      	cmp	r0, #1
 8008c8a:	d06e      	beq.n	8008d6a <__ssvfiscanf_r+0x2e6>
 8008c8c:	2802      	cmp	r0, #2
 8008c8e:	f47f af20 	bne.w	8008ad2 <__ssvfiscanf_r+0x4e>
 8008c92:	e7cf      	b.n	8008c34 <__ssvfiscanf_r+0x1b0>
 8008c94:	220a      	movs	r2, #10
 8008c96:	e7dd      	b.n	8008c54 <__ssvfiscanf_r+0x1d0>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	9342      	str	r3, [sp, #264]	; 0x108
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e7de      	b.n	8008c5e <__ssvfiscanf_r+0x1da>
 8008ca0:	2308      	movs	r3, #8
 8008ca2:	9342      	str	r3, [sp, #264]	; 0x108
 8008ca4:	2304      	movs	r3, #4
 8008ca6:	e7da      	b.n	8008c5e <__ssvfiscanf_r+0x1da>
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4640      	mov	r0, r8
 8008cac:	f000 fb30 	bl	8009310 <__sccl>
 8008cb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb6:	9341      	str	r3, [sp, #260]	; 0x104
 8008cb8:	4605      	mov	r5, r0
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e7cf      	b.n	8008c5e <__ssvfiscanf_r+0x1da>
 8008cbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc4:	9341      	str	r3, [sp, #260]	; 0x104
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e7c9      	b.n	8008c5e <__ssvfiscanf_r+0x1da>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e7c7      	b.n	8008c5e <__ssvfiscanf_r+0x1da>
 8008cce:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008cd0:	06c3      	lsls	r3, r0, #27
 8008cd2:	f53f aefe 	bmi.w	8008ad2 <__ssvfiscanf_r+0x4e>
 8008cd6:	9b00      	ldr	r3, [sp, #0]
 8008cd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cda:	1d19      	adds	r1, r3, #4
 8008cdc:	9100      	str	r1, [sp, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f010 0f01 	tst.w	r0, #1
 8008ce4:	bf14      	ite	ne
 8008ce6:	801a      	strhne	r2, [r3, #0]
 8008ce8:	601a      	streq	r2, [r3, #0]
 8008cea:	e6f2      	b.n	8008ad2 <__ssvfiscanf_r+0x4e>
 8008cec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4798      	blx	r3
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d0b6      	beq.n	8008c66 <__ssvfiscanf_r+0x1e2>
 8008cf8:	e79c      	b.n	8008c34 <__ssvfiscanf_r+0x1b0>
 8008cfa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cfc:	3201      	adds	r2, #1
 8008cfe:	9245      	str	r2, [sp, #276]	; 0x114
 8008d00:	6862      	ldr	r2, [r4, #4]
 8008d02:	3a01      	subs	r2, #1
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	6062      	str	r2, [r4, #4]
 8008d08:	dd02      	ble.n	8008d10 <__ssvfiscanf_r+0x28c>
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	e7ad      	b.n	8008c6c <__ssvfiscanf_r+0x1e8>
 8008d10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d12:	4621      	mov	r1, r4
 8008d14:	4630      	mov	r0, r6
 8008d16:	4798      	blx	r3
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d0a7      	beq.n	8008c6c <__ssvfiscanf_r+0x1e8>
 8008d1c:	e78a      	b.n	8008c34 <__ssvfiscanf_r+0x1b0>
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	dc0e      	bgt.n	8008d40 <__ssvfiscanf_r+0x2bc>
 8008d22:	466b      	mov	r3, sp
 8008d24:	4622      	mov	r2, r4
 8008d26:	a941      	add	r1, sp, #260	; 0x104
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f000 f9d7 	bl	80090dc <_scanf_i>
 8008d2e:	e7ab      	b.n	8008c88 <__ssvfiscanf_r+0x204>
 8008d30:	080089d1 	.word	0x080089d1
 8008d34:	08008a4b 	.word	0x08008a4b
 8008d38:	08009dd5 	.word	0x08009dd5
 8008d3c:	08009d6c 	.word	0x08009d6c
 8008d40:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <__ssvfiscanf_r+0x2ec>)
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f43f aec5 	beq.w	8008ad2 <__ssvfiscanf_r+0x4e>
 8008d48:	466b      	mov	r3, sp
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	a941      	add	r1, sp, #260	; 0x104
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f3af 8000 	nop.w
 8008d54:	e798      	b.n	8008c88 <__ssvfiscanf_r+0x204>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d5c:	bf18      	it	ne
 8008d5e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008d62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d6c:	e7f9      	b.n	8008d62 <__ssvfiscanf_r+0x2de>
 8008d6e:	bf00      	nop
 8008d70:	00000000 	.word	0x00000000

08008d74 <__sfputc_r>:
 8008d74:	6893      	ldr	r3, [r2, #8]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	b410      	push	{r4}
 8008d7c:	6093      	str	r3, [r2, #8]
 8008d7e:	da08      	bge.n	8008d92 <__sfputc_r+0x1e>
 8008d80:	6994      	ldr	r4, [r2, #24]
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	db01      	blt.n	8008d8a <__sfputc_r+0x16>
 8008d86:	290a      	cmp	r1, #10
 8008d88:	d103      	bne.n	8008d92 <__sfputc_r+0x1e>
 8008d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8e:	f7fe b807 	b.w	8006da0 <__swbuf_r>
 8008d92:	6813      	ldr	r3, [r2, #0]
 8008d94:	1c58      	adds	r0, r3, #1
 8008d96:	6010      	str	r0, [r2, #0]
 8008d98:	7019      	strb	r1, [r3, #0]
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <__sfputs_r>:
 8008da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da4:	4606      	mov	r6, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	18d5      	adds	r5, r2, r3
 8008dac:	42ac      	cmp	r4, r5
 8008dae:	d101      	bne.n	8008db4 <__sfputs_r+0x12>
 8008db0:	2000      	movs	r0, #0
 8008db2:	e007      	b.n	8008dc4 <__sfputs_r+0x22>
 8008db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db8:	463a      	mov	r2, r7
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7ff ffda 	bl	8008d74 <__sfputc_r>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d1f3      	bne.n	8008dac <__sfputs_r+0xa>
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dc8 <_vfiprintf_r>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	460d      	mov	r5, r1
 8008dce:	b09d      	sub	sp, #116	; 0x74
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	4698      	mov	r8, r3
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	b118      	cbz	r0, 8008de0 <_vfiprintf_r+0x18>
 8008dd8:	6983      	ldr	r3, [r0, #24]
 8008dda:	b90b      	cbnz	r3, 8008de0 <_vfiprintf_r+0x18>
 8008ddc:	f7ff f858 	bl	8007e90 <__sinit>
 8008de0:	4b89      	ldr	r3, [pc, #548]	; (8009008 <_vfiprintf_r+0x240>)
 8008de2:	429d      	cmp	r5, r3
 8008de4:	d11b      	bne.n	8008e1e <_vfiprintf_r+0x56>
 8008de6:	6875      	ldr	r5, [r6, #4]
 8008de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dea:	07d9      	lsls	r1, r3, #31
 8008dec:	d405      	bmi.n	8008dfa <_vfiprintf_r+0x32>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	059a      	lsls	r2, r3, #22
 8008df2:	d402      	bmi.n	8008dfa <_vfiprintf_r+0x32>
 8008df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008df6:	f7ff f8ee 	bl	8007fd6 <__retarget_lock_acquire_recursive>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	071b      	lsls	r3, r3, #28
 8008dfe:	d501      	bpl.n	8008e04 <_vfiprintf_r+0x3c>
 8008e00:	692b      	ldr	r3, [r5, #16]
 8008e02:	b9eb      	cbnz	r3, 8008e40 <_vfiprintf_r+0x78>
 8008e04:	4629      	mov	r1, r5
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7fe f82e 	bl	8006e68 <__swsetup_r>
 8008e0c:	b1c0      	cbz	r0, 8008e40 <_vfiprintf_r+0x78>
 8008e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e10:	07dc      	lsls	r4, r3, #31
 8008e12:	d50e      	bpl.n	8008e32 <_vfiprintf_r+0x6a>
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e18:	b01d      	add	sp, #116	; 0x74
 8008e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1e:	4b7b      	ldr	r3, [pc, #492]	; (800900c <_vfiprintf_r+0x244>)
 8008e20:	429d      	cmp	r5, r3
 8008e22:	d101      	bne.n	8008e28 <_vfiprintf_r+0x60>
 8008e24:	68b5      	ldr	r5, [r6, #8]
 8008e26:	e7df      	b.n	8008de8 <_vfiprintf_r+0x20>
 8008e28:	4b79      	ldr	r3, [pc, #484]	; (8009010 <_vfiprintf_r+0x248>)
 8008e2a:	429d      	cmp	r5, r3
 8008e2c:	bf08      	it	eq
 8008e2e:	68f5      	ldreq	r5, [r6, #12]
 8008e30:	e7da      	b.n	8008de8 <_vfiprintf_r+0x20>
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	0598      	lsls	r0, r3, #22
 8008e36:	d4ed      	bmi.n	8008e14 <_vfiprintf_r+0x4c>
 8008e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e3a:	f7ff f8cd 	bl	8007fd8 <__retarget_lock_release_recursive>
 8008e3e:	e7e9      	b.n	8008e14 <_vfiprintf_r+0x4c>
 8008e40:	2300      	movs	r3, #0
 8008e42:	9309      	str	r3, [sp, #36]	; 0x24
 8008e44:	2320      	movs	r3, #32
 8008e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e4e:	2330      	movs	r3, #48	; 0x30
 8008e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009014 <_vfiprintf_r+0x24c>
 8008e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e58:	f04f 0901 	mov.w	r9, #1
 8008e5c:	4623      	mov	r3, r4
 8008e5e:	469a      	mov	sl, r3
 8008e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e64:	b10a      	cbz	r2, 8008e6a <_vfiprintf_r+0xa2>
 8008e66:	2a25      	cmp	r2, #37	; 0x25
 8008e68:	d1f9      	bne.n	8008e5e <_vfiprintf_r+0x96>
 8008e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e6e:	d00b      	beq.n	8008e88 <_vfiprintf_r+0xc0>
 8008e70:	465b      	mov	r3, fp
 8008e72:	4622      	mov	r2, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	4630      	mov	r0, r6
 8008e78:	f7ff ff93 	bl	8008da2 <__sfputs_r>
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	f000 80aa 	beq.w	8008fd6 <_vfiprintf_r+0x20e>
 8008e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e84:	445a      	add	r2, fp
 8008e86:	9209      	str	r2, [sp, #36]	; 0x24
 8008e88:	f89a 3000 	ldrb.w	r3, [sl]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 80a2 	beq.w	8008fd6 <_vfiprintf_r+0x20e>
 8008e92:	2300      	movs	r3, #0
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e9c:	f10a 0a01 	add.w	sl, sl, #1
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eaa:	4654      	mov	r4, sl
 8008eac:	2205      	movs	r2, #5
 8008eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb2:	4858      	ldr	r0, [pc, #352]	; (8009014 <_vfiprintf_r+0x24c>)
 8008eb4:	f7f7 f99c 	bl	80001f0 <memchr>
 8008eb8:	9a04      	ldr	r2, [sp, #16]
 8008eba:	b9d8      	cbnz	r0, 8008ef4 <_vfiprintf_r+0x12c>
 8008ebc:	06d1      	lsls	r1, r2, #27
 8008ebe:	bf44      	itt	mi
 8008ec0:	2320      	movmi	r3, #32
 8008ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ec6:	0713      	lsls	r3, r2, #28
 8008ec8:	bf44      	itt	mi
 8008eca:	232b      	movmi	r3, #43	; 0x2b
 8008ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ed6:	d015      	beq.n	8008f04 <_vfiprintf_r+0x13c>
 8008ed8:	9a07      	ldr	r2, [sp, #28]
 8008eda:	4654      	mov	r4, sl
 8008edc:	2000      	movs	r0, #0
 8008ede:	f04f 0c0a 	mov.w	ip, #10
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee8:	3b30      	subs	r3, #48	; 0x30
 8008eea:	2b09      	cmp	r3, #9
 8008eec:	d94e      	bls.n	8008f8c <_vfiprintf_r+0x1c4>
 8008eee:	b1b0      	cbz	r0, 8008f1e <_vfiprintf_r+0x156>
 8008ef0:	9207      	str	r2, [sp, #28]
 8008ef2:	e014      	b.n	8008f1e <_vfiprintf_r+0x156>
 8008ef4:	eba0 0308 	sub.w	r3, r0, r8
 8008ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8008efc:	4313      	orrs	r3, r2
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	46a2      	mov	sl, r4
 8008f02:	e7d2      	b.n	8008eaa <_vfiprintf_r+0xe2>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	1d19      	adds	r1, r3, #4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	9103      	str	r1, [sp, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bfbb      	ittet	lt
 8008f10:	425b      	neglt	r3, r3
 8008f12:	f042 0202 	orrlt.w	r2, r2, #2
 8008f16:	9307      	strge	r3, [sp, #28]
 8008f18:	9307      	strlt	r3, [sp, #28]
 8008f1a:	bfb8      	it	lt
 8008f1c:	9204      	strlt	r2, [sp, #16]
 8008f1e:	7823      	ldrb	r3, [r4, #0]
 8008f20:	2b2e      	cmp	r3, #46	; 0x2e
 8008f22:	d10c      	bne.n	8008f3e <_vfiprintf_r+0x176>
 8008f24:	7863      	ldrb	r3, [r4, #1]
 8008f26:	2b2a      	cmp	r3, #42	; 0x2a
 8008f28:	d135      	bne.n	8008f96 <_vfiprintf_r+0x1ce>
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	1d1a      	adds	r2, r3, #4
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	9203      	str	r2, [sp, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bfb8      	it	lt
 8008f36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f3a:	3402      	adds	r4, #2
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009024 <_vfiprintf_r+0x25c>
 8008f42:	7821      	ldrb	r1, [r4, #0]
 8008f44:	2203      	movs	r2, #3
 8008f46:	4650      	mov	r0, sl
 8008f48:	f7f7 f952 	bl	80001f0 <memchr>
 8008f4c:	b140      	cbz	r0, 8008f60 <_vfiprintf_r+0x198>
 8008f4e:	2340      	movs	r3, #64	; 0x40
 8008f50:	eba0 000a 	sub.w	r0, r0, sl
 8008f54:	fa03 f000 	lsl.w	r0, r3, r0
 8008f58:	9b04      	ldr	r3, [sp, #16]
 8008f5a:	4303      	orrs	r3, r0
 8008f5c:	3401      	adds	r4, #1
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f64:	482c      	ldr	r0, [pc, #176]	; (8009018 <_vfiprintf_r+0x250>)
 8008f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f6a:	2206      	movs	r2, #6
 8008f6c:	f7f7 f940 	bl	80001f0 <memchr>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d03f      	beq.n	8008ff4 <_vfiprintf_r+0x22c>
 8008f74:	4b29      	ldr	r3, [pc, #164]	; (800901c <_vfiprintf_r+0x254>)
 8008f76:	bb1b      	cbnz	r3, 8008fc0 <_vfiprintf_r+0x1f8>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	3307      	adds	r3, #7
 8008f7c:	f023 0307 	bic.w	r3, r3, #7
 8008f80:	3308      	adds	r3, #8
 8008f82:	9303      	str	r3, [sp, #12]
 8008f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f86:	443b      	add	r3, r7
 8008f88:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8a:	e767      	b.n	8008e5c <_vfiprintf_r+0x94>
 8008f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f90:	460c      	mov	r4, r1
 8008f92:	2001      	movs	r0, #1
 8008f94:	e7a5      	b.n	8008ee2 <_vfiprintf_r+0x11a>
 8008f96:	2300      	movs	r3, #0
 8008f98:	3401      	adds	r4, #1
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f04f 0c0a 	mov.w	ip, #10
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fa8:	3a30      	subs	r2, #48	; 0x30
 8008faa:	2a09      	cmp	r2, #9
 8008fac:	d903      	bls.n	8008fb6 <_vfiprintf_r+0x1ee>
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0c5      	beq.n	8008f3e <_vfiprintf_r+0x176>
 8008fb2:	9105      	str	r1, [sp, #20]
 8008fb4:	e7c3      	b.n	8008f3e <_vfiprintf_r+0x176>
 8008fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fba:	4604      	mov	r4, r0
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e7f0      	b.n	8008fa2 <_vfiprintf_r+0x1da>
 8008fc0:	ab03      	add	r3, sp, #12
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4b16      	ldr	r3, [pc, #88]	; (8009020 <_vfiprintf_r+0x258>)
 8008fc8:	a904      	add	r1, sp, #16
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7fd fa1e 	bl	800640c <_printf_float>
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	1c78      	adds	r0, r7, #1
 8008fd4:	d1d6      	bne.n	8008f84 <_vfiprintf_r+0x1bc>
 8008fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fd8:	07d9      	lsls	r1, r3, #31
 8008fda:	d405      	bmi.n	8008fe8 <_vfiprintf_r+0x220>
 8008fdc:	89ab      	ldrh	r3, [r5, #12]
 8008fde:	059a      	lsls	r2, r3, #22
 8008fe0:	d402      	bmi.n	8008fe8 <_vfiprintf_r+0x220>
 8008fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fe4:	f7fe fff8 	bl	8007fd8 <__retarget_lock_release_recursive>
 8008fe8:	89ab      	ldrh	r3, [r5, #12]
 8008fea:	065b      	lsls	r3, r3, #25
 8008fec:	f53f af12 	bmi.w	8008e14 <_vfiprintf_r+0x4c>
 8008ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ff2:	e711      	b.n	8008e18 <_vfiprintf_r+0x50>
 8008ff4:	ab03      	add	r3, sp, #12
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <_vfiprintf_r+0x258>)
 8008ffc:	a904      	add	r1, sp, #16
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7fd fca8 	bl	8006954 <_printf_i>
 8009004:	e7e4      	b.n	8008fd0 <_vfiprintf_r+0x208>
 8009006:	bf00      	nop
 8009008:	08009bd4 	.word	0x08009bd4
 800900c:	08009bf4 	.word	0x08009bf4
 8009010:	08009bb4 	.word	0x08009bb4
 8009014:	08009d70 	.word	0x08009d70
 8009018:	08009d76 	.word	0x08009d76
 800901c:	0800640d 	.word	0x0800640d
 8009020:	08008da3 	.word	0x08008da3
 8009024:	08009d6c 	.word	0x08009d6c

08009028 <_scanf_chars>:
 8009028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800902c:	4615      	mov	r5, r2
 800902e:	688a      	ldr	r2, [r1, #8]
 8009030:	4680      	mov	r8, r0
 8009032:	460c      	mov	r4, r1
 8009034:	b932      	cbnz	r2, 8009044 <_scanf_chars+0x1c>
 8009036:	698a      	ldr	r2, [r1, #24]
 8009038:	2a00      	cmp	r2, #0
 800903a:	bf0c      	ite	eq
 800903c:	2201      	moveq	r2, #1
 800903e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009042:	608a      	str	r2, [r1, #8]
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80090d8 <_scanf_chars+0xb0>
 800904a:	06d1      	lsls	r1, r2, #27
 800904c:	bf5f      	itttt	pl
 800904e:	681a      	ldrpl	r2, [r3, #0]
 8009050:	1d11      	addpl	r1, r2, #4
 8009052:	6019      	strpl	r1, [r3, #0]
 8009054:	6816      	ldrpl	r6, [r2, #0]
 8009056:	2700      	movs	r7, #0
 8009058:	69a0      	ldr	r0, [r4, #24]
 800905a:	b188      	cbz	r0, 8009080 <_scanf_chars+0x58>
 800905c:	2801      	cmp	r0, #1
 800905e:	d107      	bne.n	8009070 <_scanf_chars+0x48>
 8009060:	682a      	ldr	r2, [r5, #0]
 8009062:	7811      	ldrb	r1, [r2, #0]
 8009064:	6962      	ldr	r2, [r4, #20]
 8009066:	5c52      	ldrb	r2, [r2, r1]
 8009068:	b952      	cbnz	r2, 8009080 <_scanf_chars+0x58>
 800906a:	2f00      	cmp	r7, #0
 800906c:	d031      	beq.n	80090d2 <_scanf_chars+0xaa>
 800906e:	e022      	b.n	80090b6 <_scanf_chars+0x8e>
 8009070:	2802      	cmp	r0, #2
 8009072:	d120      	bne.n	80090b6 <_scanf_chars+0x8e>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f813 3009 	ldrb.w	r3, [r3, r9]
 800907c:	071b      	lsls	r3, r3, #28
 800907e:	d41a      	bmi.n	80090b6 <_scanf_chars+0x8e>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	06da      	lsls	r2, r3, #27
 8009084:	bf5e      	ittt	pl
 8009086:	682b      	ldrpl	r3, [r5, #0]
 8009088:	781b      	ldrbpl	r3, [r3, #0]
 800908a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800908e:	682a      	ldr	r2, [r5, #0]
 8009090:	686b      	ldr	r3, [r5, #4]
 8009092:	3201      	adds	r2, #1
 8009094:	602a      	str	r2, [r5, #0]
 8009096:	68a2      	ldr	r2, [r4, #8]
 8009098:	3b01      	subs	r3, #1
 800909a:	3a01      	subs	r2, #1
 800909c:	606b      	str	r3, [r5, #4]
 800909e:	3701      	adds	r7, #1
 80090a0:	60a2      	str	r2, [r4, #8]
 80090a2:	b142      	cbz	r2, 80090b6 <_scanf_chars+0x8e>
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dcd7      	bgt.n	8009058 <_scanf_chars+0x30>
 80090a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090ac:	4629      	mov	r1, r5
 80090ae:	4640      	mov	r0, r8
 80090b0:	4798      	blx	r3
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d0d0      	beq.n	8009058 <_scanf_chars+0x30>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	f013 0310 	ands.w	r3, r3, #16
 80090bc:	d105      	bne.n	80090ca <_scanf_chars+0xa2>
 80090be:	68e2      	ldr	r2, [r4, #12]
 80090c0:	3201      	adds	r2, #1
 80090c2:	60e2      	str	r2, [r4, #12]
 80090c4:	69a2      	ldr	r2, [r4, #24]
 80090c6:	b102      	cbz	r2, 80090ca <_scanf_chars+0xa2>
 80090c8:	7033      	strb	r3, [r6, #0]
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	443b      	add	r3, r7
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	2000      	movs	r0, #0
 80090d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d6:	bf00      	nop
 80090d8:	08009dd5 	.word	0x08009dd5

080090dc <_scanf_i>:
 80090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e0:	4698      	mov	r8, r3
 80090e2:	4b76      	ldr	r3, [pc, #472]	; (80092bc <_scanf_i+0x1e0>)
 80090e4:	460c      	mov	r4, r1
 80090e6:	4682      	mov	sl, r0
 80090e8:	4616      	mov	r6, r2
 80090ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090ee:	b087      	sub	sp, #28
 80090f0:	ab03      	add	r3, sp, #12
 80090f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80090f6:	4b72      	ldr	r3, [pc, #456]	; (80092c0 <_scanf_i+0x1e4>)
 80090f8:	69a1      	ldr	r1, [r4, #24]
 80090fa:	4a72      	ldr	r2, [pc, #456]	; (80092c4 <_scanf_i+0x1e8>)
 80090fc:	2903      	cmp	r1, #3
 80090fe:	bf18      	it	ne
 8009100:	461a      	movne	r2, r3
 8009102:	68a3      	ldr	r3, [r4, #8]
 8009104:	9201      	str	r2, [sp, #4]
 8009106:	1e5a      	subs	r2, r3, #1
 8009108:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800910c:	bf88      	it	hi
 800910e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009112:	4627      	mov	r7, r4
 8009114:	bf82      	ittt	hi
 8009116:	eb03 0905 	addhi.w	r9, r3, r5
 800911a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800911e:	60a3      	strhi	r3, [r4, #8]
 8009120:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009124:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009128:	bf98      	it	ls
 800912a:	f04f 0900 	movls.w	r9, #0
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	463d      	mov	r5, r7
 8009132:	f04f 0b00 	mov.w	fp, #0
 8009136:	6831      	ldr	r1, [r6, #0]
 8009138:	ab03      	add	r3, sp, #12
 800913a:	7809      	ldrb	r1, [r1, #0]
 800913c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009140:	2202      	movs	r2, #2
 8009142:	f7f7 f855 	bl	80001f0 <memchr>
 8009146:	b328      	cbz	r0, 8009194 <_scanf_i+0xb8>
 8009148:	f1bb 0f01 	cmp.w	fp, #1
 800914c:	d159      	bne.n	8009202 <_scanf_i+0x126>
 800914e:	6862      	ldr	r2, [r4, #4]
 8009150:	b92a      	cbnz	r2, 800915e <_scanf_i+0x82>
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	2308      	movs	r3, #8
 8009156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800915a:	6063      	str	r3, [r4, #4]
 800915c:	6022      	str	r2, [r4, #0]
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009164:	6022      	str	r2, [r4, #0]
 8009166:	68a2      	ldr	r2, [r4, #8]
 8009168:	1e51      	subs	r1, r2, #1
 800916a:	60a1      	str	r1, [r4, #8]
 800916c:	b192      	cbz	r2, 8009194 <_scanf_i+0xb8>
 800916e:	6832      	ldr	r2, [r6, #0]
 8009170:	1c51      	adds	r1, r2, #1
 8009172:	6031      	str	r1, [r6, #0]
 8009174:	7812      	ldrb	r2, [r2, #0]
 8009176:	f805 2b01 	strb.w	r2, [r5], #1
 800917a:	6872      	ldr	r2, [r6, #4]
 800917c:	3a01      	subs	r2, #1
 800917e:	2a00      	cmp	r2, #0
 8009180:	6072      	str	r2, [r6, #4]
 8009182:	dc07      	bgt.n	8009194 <_scanf_i+0xb8>
 8009184:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009188:	4631      	mov	r1, r6
 800918a:	4650      	mov	r0, sl
 800918c:	4790      	blx	r2
 800918e:	2800      	cmp	r0, #0
 8009190:	f040 8085 	bne.w	800929e <_scanf_i+0x1c2>
 8009194:	f10b 0b01 	add.w	fp, fp, #1
 8009198:	f1bb 0f03 	cmp.w	fp, #3
 800919c:	d1cb      	bne.n	8009136 <_scanf_i+0x5a>
 800919e:	6863      	ldr	r3, [r4, #4]
 80091a0:	b90b      	cbnz	r3, 80091a6 <_scanf_i+0xca>
 80091a2:	230a      	movs	r3, #10
 80091a4:	6063      	str	r3, [r4, #4]
 80091a6:	6863      	ldr	r3, [r4, #4]
 80091a8:	4947      	ldr	r1, [pc, #284]	; (80092c8 <_scanf_i+0x1ec>)
 80091aa:	6960      	ldr	r0, [r4, #20]
 80091ac:	1ac9      	subs	r1, r1, r3
 80091ae:	f000 f8af 	bl	8009310 <__sccl>
 80091b2:	f04f 0b00 	mov.w	fp, #0
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d03d      	beq.n	800923a <_scanf_i+0x15e>
 80091be:	6831      	ldr	r1, [r6, #0]
 80091c0:	6960      	ldr	r0, [r4, #20]
 80091c2:	f891 c000 	ldrb.w	ip, [r1]
 80091c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d035      	beq.n	800923a <_scanf_i+0x15e>
 80091ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80091d2:	d124      	bne.n	800921e <_scanf_i+0x142>
 80091d4:	0510      	lsls	r0, r2, #20
 80091d6:	d522      	bpl.n	800921e <_scanf_i+0x142>
 80091d8:	f10b 0b01 	add.w	fp, fp, #1
 80091dc:	f1b9 0f00 	cmp.w	r9, #0
 80091e0:	d003      	beq.n	80091ea <_scanf_i+0x10e>
 80091e2:	3301      	adds	r3, #1
 80091e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80091e8:	60a3      	str	r3, [r4, #8]
 80091ea:	6873      	ldr	r3, [r6, #4]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	6073      	str	r3, [r6, #4]
 80091f2:	dd1b      	ble.n	800922c <_scanf_i+0x150>
 80091f4:	6833      	ldr	r3, [r6, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	6033      	str	r3, [r6, #0]
 80091fa:	68a3      	ldr	r3, [r4, #8]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	60a3      	str	r3, [r4, #8]
 8009200:	e7d9      	b.n	80091b6 <_scanf_i+0xda>
 8009202:	f1bb 0f02 	cmp.w	fp, #2
 8009206:	d1ae      	bne.n	8009166 <_scanf_i+0x8a>
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800920e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009212:	d1bf      	bne.n	8009194 <_scanf_i+0xb8>
 8009214:	2310      	movs	r3, #16
 8009216:	6063      	str	r3, [r4, #4]
 8009218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800921c:	e7a2      	b.n	8009164 <_scanf_i+0x88>
 800921e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009222:	6022      	str	r2, [r4, #0]
 8009224:	780b      	ldrb	r3, [r1, #0]
 8009226:	f805 3b01 	strb.w	r3, [r5], #1
 800922a:	e7de      	b.n	80091ea <_scanf_i+0x10e>
 800922c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009230:	4631      	mov	r1, r6
 8009232:	4650      	mov	r0, sl
 8009234:	4798      	blx	r3
 8009236:	2800      	cmp	r0, #0
 8009238:	d0df      	beq.n	80091fa <_scanf_i+0x11e>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	05db      	lsls	r3, r3, #23
 800923e:	d50d      	bpl.n	800925c <_scanf_i+0x180>
 8009240:	42bd      	cmp	r5, r7
 8009242:	d909      	bls.n	8009258 <_scanf_i+0x17c>
 8009244:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800924c:	4632      	mov	r2, r6
 800924e:	4650      	mov	r0, sl
 8009250:	4798      	blx	r3
 8009252:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009256:	464d      	mov	r5, r9
 8009258:	42bd      	cmp	r5, r7
 800925a:	d02d      	beq.n	80092b8 <_scanf_i+0x1dc>
 800925c:	6822      	ldr	r2, [r4, #0]
 800925e:	f012 0210 	ands.w	r2, r2, #16
 8009262:	d113      	bne.n	800928c <_scanf_i+0x1b0>
 8009264:	702a      	strb	r2, [r5, #0]
 8009266:	6863      	ldr	r3, [r4, #4]
 8009268:	9e01      	ldr	r6, [sp, #4]
 800926a:	4639      	mov	r1, r7
 800926c:	4650      	mov	r0, sl
 800926e:	47b0      	blx	r6
 8009270:	6821      	ldr	r1, [r4, #0]
 8009272:	f8d8 3000 	ldr.w	r3, [r8]
 8009276:	f011 0f20 	tst.w	r1, #32
 800927a:	d013      	beq.n	80092a4 <_scanf_i+0x1c8>
 800927c:	1d1a      	adds	r2, r3, #4
 800927e:	f8c8 2000 	str.w	r2, [r8]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6018      	str	r0, [r3, #0]
 8009286:	68e3      	ldr	r3, [r4, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60e3      	str	r3, [r4, #12]
 800928c:	1bed      	subs	r5, r5, r7
 800928e:	44ab      	add	fp, r5
 8009290:	6925      	ldr	r5, [r4, #16]
 8009292:	445d      	add	r5, fp
 8009294:	6125      	str	r5, [r4, #16]
 8009296:	2000      	movs	r0, #0
 8009298:	b007      	add	sp, #28
 800929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929e:	f04f 0b00 	mov.w	fp, #0
 80092a2:	e7ca      	b.n	800923a <_scanf_i+0x15e>
 80092a4:	1d1a      	adds	r2, r3, #4
 80092a6:	f8c8 2000 	str.w	r2, [r8]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f011 0f01 	tst.w	r1, #1
 80092b0:	bf14      	ite	ne
 80092b2:	8018      	strhne	r0, [r3, #0]
 80092b4:	6018      	streq	r0, [r3, #0]
 80092b6:	e7e6      	b.n	8009286 <_scanf_i+0x1aa>
 80092b8:	2001      	movs	r0, #1
 80092ba:	e7ed      	b.n	8009298 <_scanf_i+0x1bc>
 80092bc:	08009ac0 	.word	0x08009ac0
 80092c0:	0800956d 	.word	0x0800956d
 80092c4:	08009485 	.word	0x08009485
 80092c8:	08009d96 	.word	0x08009d96

080092cc <_read_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4d07      	ldr	r5, [pc, #28]	; (80092ec <_read_r+0x20>)
 80092d0:	4604      	mov	r4, r0
 80092d2:	4608      	mov	r0, r1
 80092d4:	4611      	mov	r1, r2
 80092d6:	2200      	movs	r2, #0
 80092d8:	602a      	str	r2, [r5, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f7f9 f920 	bl	8002520 <_read>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_read_r+0x1e>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_read_r+0x1e>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	20000508 	.word	0x20000508

080092f0 <_sbrk_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d06      	ldr	r5, [pc, #24]	; (800930c <_sbrk_r+0x1c>)
 80092f4:	2300      	movs	r3, #0
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	f7f9 f962 	bl	80025c4 <_sbrk>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_sbrk_r+0x1a>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_sbrk_r+0x1a>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	20000508 	.word	0x20000508

08009310 <__sccl>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	780b      	ldrb	r3, [r1, #0]
 8009314:	4604      	mov	r4, r0
 8009316:	2b5e      	cmp	r3, #94	; 0x5e
 8009318:	bf0b      	itete	eq
 800931a:	784b      	ldrbeq	r3, [r1, #1]
 800931c:	1c48      	addne	r0, r1, #1
 800931e:	1c88      	addeq	r0, r1, #2
 8009320:	2200      	movne	r2, #0
 8009322:	bf08      	it	eq
 8009324:	2201      	moveq	r2, #1
 8009326:	1e61      	subs	r1, r4, #1
 8009328:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800932c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009330:	42a9      	cmp	r1, r5
 8009332:	d1fb      	bne.n	800932c <__sccl+0x1c>
 8009334:	b90b      	cbnz	r3, 800933a <__sccl+0x2a>
 8009336:	3801      	subs	r0, #1
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	f082 0201 	eor.w	r2, r2, #1
 800933e:	54e2      	strb	r2, [r4, r3]
 8009340:	4605      	mov	r5, r0
 8009342:	4628      	mov	r0, r5
 8009344:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009348:	292d      	cmp	r1, #45	; 0x2d
 800934a:	d006      	beq.n	800935a <__sccl+0x4a>
 800934c:	295d      	cmp	r1, #93	; 0x5d
 800934e:	d0f3      	beq.n	8009338 <__sccl+0x28>
 8009350:	b909      	cbnz	r1, 8009356 <__sccl+0x46>
 8009352:	4628      	mov	r0, r5
 8009354:	e7f0      	b.n	8009338 <__sccl+0x28>
 8009356:	460b      	mov	r3, r1
 8009358:	e7f1      	b.n	800933e <__sccl+0x2e>
 800935a:	786e      	ldrb	r6, [r5, #1]
 800935c:	2e5d      	cmp	r6, #93	; 0x5d
 800935e:	d0fa      	beq.n	8009356 <__sccl+0x46>
 8009360:	42b3      	cmp	r3, r6
 8009362:	dcf8      	bgt.n	8009356 <__sccl+0x46>
 8009364:	3502      	adds	r5, #2
 8009366:	4619      	mov	r1, r3
 8009368:	3101      	adds	r1, #1
 800936a:	428e      	cmp	r6, r1
 800936c:	5462      	strb	r2, [r4, r1]
 800936e:	dcfb      	bgt.n	8009368 <__sccl+0x58>
 8009370:	1af1      	subs	r1, r6, r3
 8009372:	3901      	subs	r1, #1
 8009374:	1c58      	adds	r0, r3, #1
 8009376:	42b3      	cmp	r3, r6
 8009378:	bfa8      	it	ge
 800937a:	2100      	movge	r1, #0
 800937c:	1843      	adds	r3, r0, r1
 800937e:	e7e0      	b.n	8009342 <__sccl+0x32>

08009380 <_strtol_l.constprop.0>:
 8009380:	2b01      	cmp	r3, #1
 8009382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009386:	d001      	beq.n	800938c <_strtol_l.constprop.0+0xc>
 8009388:	2b24      	cmp	r3, #36	; 0x24
 800938a:	d906      	bls.n	800939a <_strtol_l.constprop.0+0x1a>
 800938c:	f7fc ff5e 	bl	800624c <__errno>
 8009390:	2316      	movs	r3, #22
 8009392:	6003      	str	r3, [r0, #0]
 8009394:	2000      	movs	r0, #0
 8009396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009480 <_strtol_l.constprop.0+0x100>
 800939e:	460d      	mov	r5, r1
 80093a0:	462e      	mov	r6, r5
 80093a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80093aa:	f017 0708 	ands.w	r7, r7, #8
 80093ae:	d1f7      	bne.n	80093a0 <_strtol_l.constprop.0+0x20>
 80093b0:	2c2d      	cmp	r4, #45	; 0x2d
 80093b2:	d132      	bne.n	800941a <_strtol_l.constprop.0+0x9a>
 80093b4:	782c      	ldrb	r4, [r5, #0]
 80093b6:	2701      	movs	r7, #1
 80093b8:	1cb5      	adds	r5, r6, #2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d05b      	beq.n	8009476 <_strtol_l.constprop.0+0xf6>
 80093be:	2b10      	cmp	r3, #16
 80093c0:	d109      	bne.n	80093d6 <_strtol_l.constprop.0+0x56>
 80093c2:	2c30      	cmp	r4, #48	; 0x30
 80093c4:	d107      	bne.n	80093d6 <_strtol_l.constprop.0+0x56>
 80093c6:	782c      	ldrb	r4, [r5, #0]
 80093c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80093cc:	2c58      	cmp	r4, #88	; 0x58
 80093ce:	d14d      	bne.n	800946c <_strtol_l.constprop.0+0xec>
 80093d0:	786c      	ldrb	r4, [r5, #1]
 80093d2:	2310      	movs	r3, #16
 80093d4:	3502      	adds	r5, #2
 80093d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80093da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80093de:	f04f 0c00 	mov.w	ip, #0
 80093e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80093e6:	4666      	mov	r6, ip
 80093e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80093ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80093f0:	f1be 0f09 	cmp.w	lr, #9
 80093f4:	d816      	bhi.n	8009424 <_strtol_l.constprop.0+0xa4>
 80093f6:	4674      	mov	r4, lr
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	dd24      	ble.n	8009446 <_strtol_l.constprop.0+0xc6>
 80093fc:	f1bc 0f00 	cmp.w	ip, #0
 8009400:	db1e      	blt.n	8009440 <_strtol_l.constprop.0+0xc0>
 8009402:	45b1      	cmp	r9, r6
 8009404:	d31c      	bcc.n	8009440 <_strtol_l.constprop.0+0xc0>
 8009406:	d101      	bne.n	800940c <_strtol_l.constprop.0+0x8c>
 8009408:	45a2      	cmp	sl, r4
 800940a:	db19      	blt.n	8009440 <_strtol_l.constprop.0+0xc0>
 800940c:	fb06 4603 	mla	r6, r6, r3, r4
 8009410:	f04f 0c01 	mov.w	ip, #1
 8009414:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009418:	e7e8      	b.n	80093ec <_strtol_l.constprop.0+0x6c>
 800941a:	2c2b      	cmp	r4, #43	; 0x2b
 800941c:	bf04      	itt	eq
 800941e:	782c      	ldrbeq	r4, [r5, #0]
 8009420:	1cb5      	addeq	r5, r6, #2
 8009422:	e7ca      	b.n	80093ba <_strtol_l.constprop.0+0x3a>
 8009424:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009428:	f1be 0f19 	cmp.w	lr, #25
 800942c:	d801      	bhi.n	8009432 <_strtol_l.constprop.0+0xb2>
 800942e:	3c37      	subs	r4, #55	; 0x37
 8009430:	e7e2      	b.n	80093f8 <_strtol_l.constprop.0+0x78>
 8009432:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009436:	f1be 0f19 	cmp.w	lr, #25
 800943a:	d804      	bhi.n	8009446 <_strtol_l.constprop.0+0xc6>
 800943c:	3c57      	subs	r4, #87	; 0x57
 800943e:	e7db      	b.n	80093f8 <_strtol_l.constprop.0+0x78>
 8009440:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009444:	e7e6      	b.n	8009414 <_strtol_l.constprop.0+0x94>
 8009446:	f1bc 0f00 	cmp.w	ip, #0
 800944a:	da05      	bge.n	8009458 <_strtol_l.constprop.0+0xd8>
 800944c:	2322      	movs	r3, #34	; 0x22
 800944e:	6003      	str	r3, [r0, #0]
 8009450:	4646      	mov	r6, r8
 8009452:	b942      	cbnz	r2, 8009466 <_strtol_l.constprop.0+0xe6>
 8009454:	4630      	mov	r0, r6
 8009456:	e79e      	b.n	8009396 <_strtol_l.constprop.0+0x16>
 8009458:	b107      	cbz	r7, 800945c <_strtol_l.constprop.0+0xdc>
 800945a:	4276      	negs	r6, r6
 800945c:	2a00      	cmp	r2, #0
 800945e:	d0f9      	beq.n	8009454 <_strtol_l.constprop.0+0xd4>
 8009460:	f1bc 0f00 	cmp.w	ip, #0
 8009464:	d000      	beq.n	8009468 <_strtol_l.constprop.0+0xe8>
 8009466:	1e69      	subs	r1, r5, #1
 8009468:	6011      	str	r1, [r2, #0]
 800946a:	e7f3      	b.n	8009454 <_strtol_l.constprop.0+0xd4>
 800946c:	2430      	movs	r4, #48	; 0x30
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1b1      	bne.n	80093d6 <_strtol_l.constprop.0+0x56>
 8009472:	2308      	movs	r3, #8
 8009474:	e7af      	b.n	80093d6 <_strtol_l.constprop.0+0x56>
 8009476:	2c30      	cmp	r4, #48	; 0x30
 8009478:	d0a5      	beq.n	80093c6 <_strtol_l.constprop.0+0x46>
 800947a:	230a      	movs	r3, #10
 800947c:	e7ab      	b.n	80093d6 <_strtol_l.constprop.0+0x56>
 800947e:	bf00      	nop
 8009480:	08009dd5 	.word	0x08009dd5

08009484 <_strtol_r>:
 8009484:	f7ff bf7c 	b.w	8009380 <_strtol_l.constprop.0>

08009488 <_strtoul_l.constprop.0>:
 8009488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800948c:	4f36      	ldr	r7, [pc, #216]	; (8009568 <_strtoul_l.constprop.0+0xe0>)
 800948e:	4686      	mov	lr, r0
 8009490:	460d      	mov	r5, r1
 8009492:	4628      	mov	r0, r5
 8009494:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009498:	5de6      	ldrb	r6, [r4, r7]
 800949a:	f016 0608 	ands.w	r6, r6, #8
 800949e:	d1f8      	bne.n	8009492 <_strtoul_l.constprop.0+0xa>
 80094a0:	2c2d      	cmp	r4, #45	; 0x2d
 80094a2:	d12f      	bne.n	8009504 <_strtoul_l.constprop.0+0x7c>
 80094a4:	782c      	ldrb	r4, [r5, #0]
 80094a6:	2601      	movs	r6, #1
 80094a8:	1c85      	adds	r5, r0, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d057      	beq.n	800955e <_strtoul_l.constprop.0+0xd6>
 80094ae:	2b10      	cmp	r3, #16
 80094b0:	d109      	bne.n	80094c6 <_strtoul_l.constprop.0+0x3e>
 80094b2:	2c30      	cmp	r4, #48	; 0x30
 80094b4:	d107      	bne.n	80094c6 <_strtoul_l.constprop.0+0x3e>
 80094b6:	7828      	ldrb	r0, [r5, #0]
 80094b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80094bc:	2858      	cmp	r0, #88	; 0x58
 80094be:	d149      	bne.n	8009554 <_strtoul_l.constprop.0+0xcc>
 80094c0:	786c      	ldrb	r4, [r5, #1]
 80094c2:	2310      	movs	r3, #16
 80094c4:	3502      	adds	r5, #2
 80094c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80094ca:	2700      	movs	r7, #0
 80094cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80094d0:	fb03 f908 	mul.w	r9, r3, r8
 80094d4:	ea6f 0909 	mvn.w	r9, r9
 80094d8:	4638      	mov	r0, r7
 80094da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80094de:	f1bc 0f09 	cmp.w	ip, #9
 80094e2:	d814      	bhi.n	800950e <_strtoul_l.constprop.0+0x86>
 80094e4:	4664      	mov	r4, ip
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	dd22      	ble.n	8009530 <_strtoul_l.constprop.0+0xa8>
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	db1d      	blt.n	800952a <_strtoul_l.constprop.0+0xa2>
 80094ee:	4580      	cmp	r8, r0
 80094f0:	d31b      	bcc.n	800952a <_strtoul_l.constprop.0+0xa2>
 80094f2:	d101      	bne.n	80094f8 <_strtoul_l.constprop.0+0x70>
 80094f4:	45a1      	cmp	r9, r4
 80094f6:	db18      	blt.n	800952a <_strtoul_l.constprop.0+0xa2>
 80094f8:	fb00 4003 	mla	r0, r0, r3, r4
 80094fc:	2701      	movs	r7, #1
 80094fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009502:	e7ea      	b.n	80094da <_strtoul_l.constprop.0+0x52>
 8009504:	2c2b      	cmp	r4, #43	; 0x2b
 8009506:	bf04      	itt	eq
 8009508:	782c      	ldrbeq	r4, [r5, #0]
 800950a:	1c85      	addeq	r5, r0, #2
 800950c:	e7cd      	b.n	80094aa <_strtoul_l.constprop.0+0x22>
 800950e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009512:	f1bc 0f19 	cmp.w	ip, #25
 8009516:	d801      	bhi.n	800951c <_strtoul_l.constprop.0+0x94>
 8009518:	3c37      	subs	r4, #55	; 0x37
 800951a:	e7e4      	b.n	80094e6 <_strtoul_l.constprop.0+0x5e>
 800951c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009520:	f1bc 0f19 	cmp.w	ip, #25
 8009524:	d804      	bhi.n	8009530 <_strtoul_l.constprop.0+0xa8>
 8009526:	3c57      	subs	r4, #87	; 0x57
 8009528:	e7dd      	b.n	80094e6 <_strtoul_l.constprop.0+0x5e>
 800952a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800952e:	e7e6      	b.n	80094fe <_strtoul_l.constprop.0+0x76>
 8009530:	2f00      	cmp	r7, #0
 8009532:	da07      	bge.n	8009544 <_strtoul_l.constprop.0+0xbc>
 8009534:	2322      	movs	r3, #34	; 0x22
 8009536:	f8ce 3000 	str.w	r3, [lr]
 800953a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953e:	b932      	cbnz	r2, 800954e <_strtoul_l.constprop.0+0xc6>
 8009540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009544:	b106      	cbz	r6, 8009548 <_strtoul_l.constprop.0+0xc0>
 8009546:	4240      	negs	r0, r0
 8009548:	2a00      	cmp	r2, #0
 800954a:	d0f9      	beq.n	8009540 <_strtoul_l.constprop.0+0xb8>
 800954c:	b107      	cbz	r7, 8009550 <_strtoul_l.constprop.0+0xc8>
 800954e:	1e69      	subs	r1, r5, #1
 8009550:	6011      	str	r1, [r2, #0]
 8009552:	e7f5      	b.n	8009540 <_strtoul_l.constprop.0+0xb8>
 8009554:	2430      	movs	r4, #48	; 0x30
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1b5      	bne.n	80094c6 <_strtoul_l.constprop.0+0x3e>
 800955a:	2308      	movs	r3, #8
 800955c:	e7b3      	b.n	80094c6 <_strtoul_l.constprop.0+0x3e>
 800955e:	2c30      	cmp	r4, #48	; 0x30
 8009560:	d0a9      	beq.n	80094b6 <_strtoul_l.constprop.0+0x2e>
 8009562:	230a      	movs	r3, #10
 8009564:	e7af      	b.n	80094c6 <_strtoul_l.constprop.0+0x3e>
 8009566:	bf00      	nop
 8009568:	08009dd5 	.word	0x08009dd5

0800956c <_strtoul_r>:
 800956c:	f7ff bf8c 	b.w	8009488 <_strtoul_l.constprop.0>

08009570 <__submore>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800957c:	4299      	cmp	r1, r3
 800957e:	d11d      	bne.n	80095bc <__submore+0x4c>
 8009580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009584:	f7ff f9b0 	bl	80088e8 <_malloc_r>
 8009588:	b918      	cbnz	r0, 8009592 <__submore+0x22>
 800958a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800958e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009596:	63a3      	str	r3, [r4, #56]	; 0x38
 8009598:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800959c:	6360      	str	r0, [r4, #52]	; 0x34
 800959e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80095a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80095a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80095aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80095ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80095b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80095b6:	6020      	str	r0, [r4, #0]
 80095b8:	2000      	movs	r0, #0
 80095ba:	e7e8      	b.n	800958e <__submore+0x1e>
 80095bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80095be:	0077      	lsls	r7, r6, #1
 80095c0:	463a      	mov	r2, r7
 80095c2:	f000 f87f 	bl	80096c4 <_realloc_r>
 80095c6:	4605      	mov	r5, r0
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d0de      	beq.n	800958a <__submore+0x1a>
 80095cc:	eb00 0806 	add.w	r8, r0, r6
 80095d0:	4601      	mov	r1, r0
 80095d2:	4632      	mov	r2, r6
 80095d4:	4640      	mov	r0, r8
 80095d6:	f7fc fe63 	bl	80062a0 <memcpy>
 80095da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80095de:	f8c4 8000 	str.w	r8, [r4]
 80095e2:	e7e9      	b.n	80095b8 <__submore+0x48>

080095e4 <__assert_func>:
 80095e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095e6:	4614      	mov	r4, r2
 80095e8:	461a      	mov	r2, r3
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <__assert_func+0x2c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4605      	mov	r5, r0
 80095f0:	68d8      	ldr	r0, [r3, #12]
 80095f2:	b14c      	cbz	r4, 8009608 <__assert_func+0x24>
 80095f4:	4b07      	ldr	r3, [pc, #28]	; (8009614 <__assert_func+0x30>)
 80095f6:	9100      	str	r1, [sp, #0]
 80095f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095fc:	4906      	ldr	r1, [pc, #24]	; (8009618 <__assert_func+0x34>)
 80095fe:	462b      	mov	r3, r5
 8009600:	f000 f80e 	bl	8009620 <fiprintf>
 8009604:	f000 f89a 	bl	800973c <abort>
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <__assert_func+0x38>)
 800960a:	461c      	mov	r4, r3
 800960c:	e7f3      	b.n	80095f6 <__assert_func+0x12>
 800960e:	bf00      	nop
 8009610:	2000000c 	.word	0x2000000c
 8009614:	08009d98 	.word	0x08009d98
 8009618:	08009da5 	.word	0x08009da5
 800961c:	08009dd3 	.word	0x08009dd3

08009620 <fiprintf>:
 8009620:	b40e      	push	{r1, r2, r3}
 8009622:	b503      	push	{r0, r1, lr}
 8009624:	4601      	mov	r1, r0
 8009626:	ab03      	add	r3, sp, #12
 8009628:	4805      	ldr	r0, [pc, #20]	; (8009640 <fiprintf+0x20>)
 800962a:	f853 2b04 	ldr.w	r2, [r3], #4
 800962e:	6800      	ldr	r0, [r0, #0]
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	f7ff fbc9 	bl	8008dc8 <_vfiprintf_r>
 8009636:	b002      	add	sp, #8
 8009638:	f85d eb04 	ldr.w	lr, [sp], #4
 800963c:	b003      	add	sp, #12
 800963e:	4770      	bx	lr
 8009640:	2000000c 	.word	0x2000000c

08009644 <_fstat_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d07      	ldr	r5, [pc, #28]	; (8009664 <_fstat_r+0x20>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	4611      	mov	r1, r2
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	f7f8 ff8e 	bl	8002572 <_fstat>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	d102      	bne.n	8009660 <_fstat_r+0x1c>
 800965a:	682b      	ldr	r3, [r5, #0]
 800965c:	b103      	cbz	r3, 8009660 <_fstat_r+0x1c>
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	bd38      	pop	{r3, r4, r5, pc}
 8009662:	bf00      	nop
 8009664:	20000508 	.word	0x20000508

08009668 <_isatty_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	4d06      	ldr	r5, [pc, #24]	; (8009684 <_isatty_r+0x1c>)
 800966c:	2300      	movs	r3, #0
 800966e:	4604      	mov	r4, r0
 8009670:	4608      	mov	r0, r1
 8009672:	602b      	str	r3, [r5, #0]
 8009674:	f7f8 ff8d 	bl	8002592 <_isatty>
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d102      	bne.n	8009682 <_isatty_r+0x1a>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	b103      	cbz	r3, 8009682 <_isatty_r+0x1a>
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	20000508 	.word	0x20000508

08009688 <__ascii_mbtowc>:
 8009688:	b082      	sub	sp, #8
 800968a:	b901      	cbnz	r1, 800968e <__ascii_mbtowc+0x6>
 800968c:	a901      	add	r1, sp, #4
 800968e:	b142      	cbz	r2, 80096a2 <__ascii_mbtowc+0x1a>
 8009690:	b14b      	cbz	r3, 80096a6 <__ascii_mbtowc+0x1e>
 8009692:	7813      	ldrb	r3, [r2, #0]
 8009694:	600b      	str	r3, [r1, #0]
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	1e10      	subs	r0, r2, #0
 800969a:	bf18      	it	ne
 800969c:	2001      	movne	r0, #1
 800969e:	b002      	add	sp, #8
 80096a0:	4770      	bx	lr
 80096a2:	4610      	mov	r0, r2
 80096a4:	e7fb      	b.n	800969e <__ascii_mbtowc+0x16>
 80096a6:	f06f 0001 	mvn.w	r0, #1
 80096aa:	e7f8      	b.n	800969e <__ascii_mbtowc+0x16>

080096ac <__malloc_lock>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__malloc_lock+0x8>)
 80096ae:	f7fe bc92 	b.w	8007fd6 <__retarget_lock_acquire_recursive>
 80096b2:	bf00      	nop
 80096b4:	200004fc 	.word	0x200004fc

080096b8 <__malloc_unlock>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__malloc_unlock+0x8>)
 80096ba:	f7fe bc8d 	b.w	8007fd8 <__retarget_lock_release_recursive>
 80096be:	bf00      	nop
 80096c0:	200004fc 	.word	0x200004fc

080096c4 <_realloc_r>:
 80096c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	4680      	mov	r8, r0
 80096ca:	4614      	mov	r4, r2
 80096cc:	460e      	mov	r6, r1
 80096ce:	b921      	cbnz	r1, 80096da <_realloc_r+0x16>
 80096d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d4:	4611      	mov	r1, r2
 80096d6:	f7ff b907 	b.w	80088e8 <_malloc_r>
 80096da:	b92a      	cbnz	r2, 80096e8 <_realloc_r+0x24>
 80096dc:	f7ff f898 	bl	8008810 <_free_r>
 80096e0:	4625      	mov	r5, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	f000 f82f 	bl	800974a <_malloc_usable_size_r>
 80096ec:	4284      	cmp	r4, r0
 80096ee:	4607      	mov	r7, r0
 80096f0:	d802      	bhi.n	80096f8 <_realloc_r+0x34>
 80096f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096f6:	d812      	bhi.n	800971e <_realloc_r+0x5a>
 80096f8:	4621      	mov	r1, r4
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7ff f8f4 	bl	80088e8 <_malloc_r>
 8009700:	4605      	mov	r5, r0
 8009702:	2800      	cmp	r0, #0
 8009704:	d0ed      	beq.n	80096e2 <_realloc_r+0x1e>
 8009706:	42bc      	cmp	r4, r7
 8009708:	4622      	mov	r2, r4
 800970a:	4631      	mov	r1, r6
 800970c:	bf28      	it	cs
 800970e:	463a      	movcs	r2, r7
 8009710:	f7fc fdc6 	bl	80062a0 <memcpy>
 8009714:	4631      	mov	r1, r6
 8009716:	4640      	mov	r0, r8
 8009718:	f7ff f87a 	bl	8008810 <_free_r>
 800971c:	e7e1      	b.n	80096e2 <_realloc_r+0x1e>
 800971e:	4635      	mov	r5, r6
 8009720:	e7df      	b.n	80096e2 <_realloc_r+0x1e>

08009722 <__ascii_wctomb>:
 8009722:	b149      	cbz	r1, 8009738 <__ascii_wctomb+0x16>
 8009724:	2aff      	cmp	r2, #255	; 0xff
 8009726:	bf85      	ittet	hi
 8009728:	238a      	movhi	r3, #138	; 0x8a
 800972a:	6003      	strhi	r3, [r0, #0]
 800972c:	700a      	strbls	r2, [r1, #0]
 800972e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009732:	bf98      	it	ls
 8009734:	2001      	movls	r0, #1
 8009736:	4770      	bx	lr
 8009738:	4608      	mov	r0, r1
 800973a:	4770      	bx	lr

0800973c <abort>:
 800973c:	b508      	push	{r3, lr}
 800973e:	2006      	movs	r0, #6
 8009740:	f000 f834 	bl	80097ac <raise>
 8009744:	2001      	movs	r0, #1
 8009746:	f7f8 fee1 	bl	800250c <_exit>

0800974a <_malloc_usable_size_r>:
 800974a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800974e:	1f18      	subs	r0, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfbc      	itt	lt
 8009754:	580b      	ldrlt	r3, [r1, r0]
 8009756:	18c0      	addlt	r0, r0, r3
 8009758:	4770      	bx	lr

0800975a <_raise_r>:
 800975a:	291f      	cmp	r1, #31
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4604      	mov	r4, r0
 8009760:	460d      	mov	r5, r1
 8009762:	d904      	bls.n	800976e <_raise_r+0x14>
 8009764:	2316      	movs	r3, #22
 8009766:	6003      	str	r3, [r0, #0]
 8009768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800976c:	bd38      	pop	{r3, r4, r5, pc}
 800976e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009770:	b112      	cbz	r2, 8009778 <_raise_r+0x1e>
 8009772:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009776:	b94b      	cbnz	r3, 800978c <_raise_r+0x32>
 8009778:	4620      	mov	r0, r4
 800977a:	f000 f831 	bl	80097e0 <_getpid_r>
 800977e:	462a      	mov	r2, r5
 8009780:	4601      	mov	r1, r0
 8009782:	4620      	mov	r0, r4
 8009784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009788:	f000 b818 	b.w	80097bc <_kill_r>
 800978c:	2b01      	cmp	r3, #1
 800978e:	d00a      	beq.n	80097a6 <_raise_r+0x4c>
 8009790:	1c59      	adds	r1, r3, #1
 8009792:	d103      	bne.n	800979c <_raise_r+0x42>
 8009794:	2316      	movs	r3, #22
 8009796:	6003      	str	r3, [r0, #0]
 8009798:	2001      	movs	r0, #1
 800979a:	e7e7      	b.n	800976c <_raise_r+0x12>
 800979c:	2400      	movs	r4, #0
 800979e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097a2:	4628      	mov	r0, r5
 80097a4:	4798      	blx	r3
 80097a6:	2000      	movs	r0, #0
 80097a8:	e7e0      	b.n	800976c <_raise_r+0x12>
	...

080097ac <raise>:
 80097ac:	4b02      	ldr	r3, [pc, #8]	; (80097b8 <raise+0xc>)
 80097ae:	4601      	mov	r1, r0
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	f7ff bfd2 	b.w	800975a <_raise_r>
 80097b6:	bf00      	nop
 80097b8:	2000000c 	.word	0x2000000c

080097bc <_kill_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4d07      	ldr	r5, [pc, #28]	; (80097dc <_kill_r+0x20>)
 80097c0:	2300      	movs	r3, #0
 80097c2:	4604      	mov	r4, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	4611      	mov	r1, r2
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	f7f8 fe8f 	bl	80024ec <_kill>
 80097ce:	1c43      	adds	r3, r0, #1
 80097d0:	d102      	bne.n	80097d8 <_kill_r+0x1c>
 80097d2:	682b      	ldr	r3, [r5, #0]
 80097d4:	b103      	cbz	r3, 80097d8 <_kill_r+0x1c>
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	bd38      	pop	{r3, r4, r5, pc}
 80097da:	bf00      	nop
 80097dc:	20000508 	.word	0x20000508

080097e0 <_getpid_r>:
 80097e0:	f7f8 be7c 	b.w	80024dc <_getpid>

080097e4 <sqrt>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	ed2d 8b02 	vpush	{d8}
 80097ea:	ec55 4b10 	vmov	r4, r5, d0
 80097ee:	f000 f825 	bl	800983c <__ieee754_sqrt>
 80097f2:	4622      	mov	r2, r4
 80097f4:	462b      	mov	r3, r5
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	eeb0 8a40 	vmov.f32	s16, s0
 80097fe:	eef0 8a60 	vmov.f32	s17, s1
 8009802:	f7f7 f99b 	bl	8000b3c <__aeabi_dcmpun>
 8009806:	b990      	cbnz	r0, 800982e <sqrt+0x4a>
 8009808:	2200      	movs	r2, #0
 800980a:	2300      	movs	r3, #0
 800980c:	4620      	mov	r0, r4
 800980e:	4629      	mov	r1, r5
 8009810:	f7f7 f96c 	bl	8000aec <__aeabi_dcmplt>
 8009814:	b158      	cbz	r0, 800982e <sqrt+0x4a>
 8009816:	f7fc fd19 	bl	800624c <__errno>
 800981a:	2321      	movs	r3, #33	; 0x21
 800981c:	6003      	str	r3, [r0, #0]
 800981e:	2200      	movs	r2, #0
 8009820:	2300      	movs	r3, #0
 8009822:	4610      	mov	r0, r2
 8009824:	4619      	mov	r1, r3
 8009826:	f7f7 f819 	bl	800085c <__aeabi_ddiv>
 800982a:	ec41 0b18 	vmov	d8, r0, r1
 800982e:	eeb0 0a48 	vmov.f32	s0, s16
 8009832:	eef0 0a68 	vmov.f32	s1, s17
 8009836:	ecbd 8b02 	vpop	{d8}
 800983a:	bd38      	pop	{r3, r4, r5, pc}

0800983c <__ieee754_sqrt>:
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	ec55 4b10 	vmov	r4, r5, d0
 8009844:	4e55      	ldr	r6, [pc, #340]	; (800999c <__ieee754_sqrt+0x160>)
 8009846:	43ae      	bics	r6, r5
 8009848:	ee10 0a10 	vmov	r0, s0
 800984c:	ee10 3a10 	vmov	r3, s0
 8009850:	462a      	mov	r2, r5
 8009852:	4629      	mov	r1, r5
 8009854:	d110      	bne.n	8009878 <__ieee754_sqrt+0x3c>
 8009856:	ee10 2a10 	vmov	r2, s0
 800985a:	462b      	mov	r3, r5
 800985c:	f7f6 fed4 	bl	8000608 <__aeabi_dmul>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fd18 	bl	800029c <__adddf3>
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	ec45 4b10 	vmov	d0, r4, r5
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	2d00      	cmp	r5, #0
 800987a:	dc10      	bgt.n	800989e <__ieee754_sqrt+0x62>
 800987c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009880:	4330      	orrs	r0, r6
 8009882:	d0f5      	beq.n	8009870 <__ieee754_sqrt+0x34>
 8009884:	b15d      	cbz	r5, 800989e <__ieee754_sqrt+0x62>
 8009886:	ee10 2a10 	vmov	r2, s0
 800988a:	462b      	mov	r3, r5
 800988c:	ee10 0a10 	vmov	r0, s0
 8009890:	f7f6 fd02 	bl	8000298 <__aeabi_dsub>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	f7f6 ffe0 	bl	800085c <__aeabi_ddiv>
 800989c:	e7e6      	b.n	800986c <__ieee754_sqrt+0x30>
 800989e:	1512      	asrs	r2, r2, #20
 80098a0:	d074      	beq.n	800998c <__ieee754_sqrt+0x150>
 80098a2:	07d4      	lsls	r4, r2, #31
 80098a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80098a8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80098ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80098b0:	bf5e      	ittt	pl
 80098b2:	0fda      	lsrpl	r2, r3, #31
 80098b4:	005b      	lslpl	r3, r3, #1
 80098b6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80098ba:	2400      	movs	r4, #0
 80098bc:	0fda      	lsrs	r2, r3, #31
 80098be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80098c2:	107f      	asrs	r7, r7, #1
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	2516      	movs	r5, #22
 80098c8:	4620      	mov	r0, r4
 80098ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80098ce:	1886      	adds	r6, r0, r2
 80098d0:	428e      	cmp	r6, r1
 80098d2:	bfde      	ittt	le
 80098d4:	1b89      	suble	r1, r1, r6
 80098d6:	18b0      	addle	r0, r6, r2
 80098d8:	18a4      	addle	r4, r4, r2
 80098da:	0049      	lsls	r1, r1, #1
 80098dc:	3d01      	subs	r5, #1
 80098de:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80098e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80098e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098ea:	d1f0      	bne.n	80098ce <__ieee754_sqrt+0x92>
 80098ec:	462a      	mov	r2, r5
 80098ee:	f04f 0e20 	mov.w	lr, #32
 80098f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80098f6:	4281      	cmp	r1, r0
 80098f8:	eb06 0c05 	add.w	ip, r6, r5
 80098fc:	dc02      	bgt.n	8009904 <__ieee754_sqrt+0xc8>
 80098fe:	d113      	bne.n	8009928 <__ieee754_sqrt+0xec>
 8009900:	459c      	cmp	ip, r3
 8009902:	d811      	bhi.n	8009928 <__ieee754_sqrt+0xec>
 8009904:	f1bc 0f00 	cmp.w	ip, #0
 8009908:	eb0c 0506 	add.w	r5, ip, r6
 800990c:	da43      	bge.n	8009996 <__ieee754_sqrt+0x15a>
 800990e:	2d00      	cmp	r5, #0
 8009910:	db41      	blt.n	8009996 <__ieee754_sqrt+0x15a>
 8009912:	f100 0801 	add.w	r8, r0, #1
 8009916:	1a09      	subs	r1, r1, r0
 8009918:	459c      	cmp	ip, r3
 800991a:	bf88      	it	hi
 800991c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009920:	eba3 030c 	sub.w	r3, r3, ip
 8009924:	4432      	add	r2, r6
 8009926:	4640      	mov	r0, r8
 8009928:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800992c:	f1be 0e01 	subs.w	lr, lr, #1
 8009930:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009934:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009938:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800993c:	d1db      	bne.n	80098f6 <__ieee754_sqrt+0xba>
 800993e:	430b      	orrs	r3, r1
 8009940:	d006      	beq.n	8009950 <__ieee754_sqrt+0x114>
 8009942:	1c50      	adds	r0, r2, #1
 8009944:	bf13      	iteet	ne
 8009946:	3201      	addne	r2, #1
 8009948:	3401      	addeq	r4, #1
 800994a:	4672      	moveq	r2, lr
 800994c:	f022 0201 	bicne.w	r2, r2, #1
 8009950:	1063      	asrs	r3, r4, #1
 8009952:	0852      	lsrs	r2, r2, #1
 8009954:	07e1      	lsls	r1, r4, #31
 8009956:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800995a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800995e:	bf48      	it	mi
 8009960:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009964:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009968:	4614      	mov	r4, r2
 800996a:	e781      	b.n	8009870 <__ieee754_sqrt+0x34>
 800996c:	0ad9      	lsrs	r1, r3, #11
 800996e:	3815      	subs	r0, #21
 8009970:	055b      	lsls	r3, r3, #21
 8009972:	2900      	cmp	r1, #0
 8009974:	d0fa      	beq.n	800996c <__ieee754_sqrt+0x130>
 8009976:	02cd      	lsls	r5, r1, #11
 8009978:	d50a      	bpl.n	8009990 <__ieee754_sqrt+0x154>
 800997a:	f1c2 0420 	rsb	r4, r2, #32
 800997e:	fa23 f404 	lsr.w	r4, r3, r4
 8009982:	1e55      	subs	r5, r2, #1
 8009984:	4093      	lsls	r3, r2
 8009986:	4321      	orrs	r1, r4
 8009988:	1b42      	subs	r2, r0, r5
 800998a:	e78a      	b.n	80098a2 <__ieee754_sqrt+0x66>
 800998c:	4610      	mov	r0, r2
 800998e:	e7f0      	b.n	8009972 <__ieee754_sqrt+0x136>
 8009990:	0049      	lsls	r1, r1, #1
 8009992:	3201      	adds	r2, #1
 8009994:	e7ef      	b.n	8009976 <__ieee754_sqrt+0x13a>
 8009996:	4680      	mov	r8, r0
 8009998:	e7bd      	b.n	8009916 <__ieee754_sqrt+0xda>
 800999a:	bf00      	nop
 800999c:	7ff00000 	.word	0x7ff00000

080099a0 <_init>:
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	bf00      	nop
 80099a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a6:	bc08      	pop	{r3}
 80099a8:	469e      	mov	lr, r3
 80099aa:	4770      	bx	lr

080099ac <_fini>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	bf00      	nop
 80099b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b2:	bc08      	pop	{r3}
 80099b4:	469e      	mov	lr, r3
 80099b6:	4770      	bx	lr
